%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: MF_logo_green.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Phil Campbell%%CreationDate: 20/3/06%%BoundingBox: 0 0 146 118%%HiResBoundingBox: 0 0 145.1563 117.2706%%CropBox: 0 0 145.1563 117.2706%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 342 CVC)%%CMYKCustomColor: 1 0 0.6902 0.4314 (PANTONE 342 CVC)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 8634 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD47FF5812FD08FFA8FD74FF0C0B0B8384FD04FF830B5FFD72FFAF%0B0CA8340B84FFFFA834343484FD71FFA80B34FF34050BA8FF580B58A80C%AFFD70FF840B5FFF120B1259FF0C0CA8FF0C5F83FD6FFF840584A80B0CFF%A8590534FFAE0B5959A8FD6EFFA80BA8840C59FFAF120B83FF590B5F3483%FD6EFFA80584830C83FF7D0B0BA87D5934830C34FD6EFFAF0B848312AFFF%590B0CFFFFA859590C8359FD6EFF0B835934FFFF2E0B34FFFFA834597DFF%590CFD6DFF0C838435FFFF340B7DFF59FD05FF340C84FD6CFF34598359FF%FF0C0B83FF2E84FFA859350B0C7DFD6CFF5934FFAFFFFF2E0CA8FF5835FF%FF595959FF8384FD6BFFA834AFFFFFFF340BA8FF590CA8A8FD04FF340CA8%FD6BFF5984FFFFFF590CAEFF590CAF8434AE59340B12A8FD6BFFAE7DFFA8%FF830CA8FF340CA8AF0BA8A88484592EFD69FFA859590C35A8FFAF1284FF%AF84FFAE0B83FFFF84590BAEFD67FFAF592E5959590B0B84597DFD04FF59%0B83FFAF59592EFD67FF5934598484345959FF0B35A8FFFFFF845934AFFF%FFA8830C84FD66FFA80B5983FF0B0B83FFFF350CFD05FFA8FFFFFF59592E%59FD68FF350C0C59FFA8FFFFFF591283FD08FFAE593583FD68FF84AF5959%FD05FF59348484FD07FF595959FD6BFF84FD06FF3459AF84FFFFA85FFFFF%83835935FD6BFF34AFFD05FF592EFF58FFFF5F59A8FF840C34A8FD6BFF59%AFFD05FF5959FF35FFFFA85983FFAEFF5984FD6AFF840CFD06FF8459AF0C%FFFFFF84A8FF350B34A8FD6AFF0C0C588434FFFFFFAF843434FFFFA85F34%FFFFFF59AFFD69FF590B34595984AEFFFFFF340B59FFFFFFA88483830C34%AFFD69FF340B83598459FFFFFF591259FD04FF8434A8A88459AFFD69FF0B%3584835983A8FFA8AFFD04FFAF83595FFF5F0C5FFD6AFF0C2EFFAFA88484%FD06FFAFFF845959FFFFFF84FD6AFF0B0C3434588359FD05FFA8FF7D590C%A884342E83FD6AFF590CFF84AE83A859FFFFFFAEFF598334A8FFFFA884FD%6BFFA80C2E5934595984A8FFFF8359A82E5FFFA80C342EFD6CFF593584FF%84845935A8FFFF350CA8FFAF83832EAFFD6DFF0C34FD04598383A8FFFF84%FFA883342E84FD6EFF593484FFAF7D835959FD04FFA85F59FFA8FD6EFFA8%342E83348359FFA884A8FFFFA8A8FFFF3559FD6EFF5959A88483AF59A834%A8FFFF8435FFFFFF3458FD6DFFAF2E0C5959348384FD05FF8334A8FFFF0C%0CFD6AFFA8FF84AF3434AEFD09FF8334AEFFFF350CFD68FF7DAF845F3459%0C125984FD08FF590C7DFFFF590B84FD65FF835F34340C5934350C120C59%FD08FF840C0C59FF840B59FD63FF58342E0B0B0B7D592E832E590C357D84%FD04FF84FFA8340B0C59AF0B34FD61FF830C0C12348459FFA834FD04FF59%8434FD04FFA834FFFFFFA85934AE3412A8FD5DFF842E340C3434345983A8%FF5935FD05FF3534FFFF5F5934845959FFFF592E59583459FD5CFF0B120C%84FFA80B0C0CAFFFFF595959A88435A81259AF831284FFFF8434597D5F34%353435A8FD5AFFA8342E8434350B0C7D0C0B84FFFF7D84341259FF830C0B%3459FD05FF3412595F3459345983AEFD5BFF830C0B120CAEFF340B5FFD08%FFAE8459AFFD06FF591259843483835959FD5AFFA80C0B8334342EFFFF34%0B34FD08FF5984FD08FF84120C590C0C59FD5CFFA85959AF34347DFFFF34%0B34FD06FF843459FD0AFF8459A8AEFD5EFF3459FF5F0C34A8FFA80C0B83%FD05FF832EA8FD6CFF5934FFFF592E8484AF0B1259FD05FF5984FD6DFF59%1259FF840C2E350B0C0BA8A8A85984FD0459343459FD69FF590C34FF840C%59FFA834AE840C3459343459FF8383340CA8FD68FF590C0B592E5FFF842E%59843459FFA80C2E84FD04FF59AEFD69FF0C120C1259350B3583AFA8FFFF%A82E8459350C343483A8FD69FFAE0C0C2E0C0559FD07FF84A88334340C0C%0B0B0B59A8FD6AFF593459592E59595F83FD09FF84590B1234A8FD67FFA8%340C340C342E340C340B343484A8FD07FF84590B3483FD70FFA883345959%AEFD08FF593459FD72FFA8A8595F84FD08FF833484FD73FFA88459FD09FF%5983FD74FFA87DFD09FF7D59A8FD7EFF84A8FDFCFFFDFCFFFDFCFFFD47FF%A8FD07FFA8FD75FFAE0B3434340C3434340C35FD27FF5F7DFD08FF5984FD%42FF5959A8AFA80B2EFFA8832EFD05FFAEFFA8FFFFFFA8FD07FFAFFFFFFF%AEFD0FFF2E0CFD07FFAE0B84FD04FFA8FD09FFA8FFFFFFA8FD09FFA8FFFF%AFA8FD26FF0B59FD08FFA8340C5FFFFFFFA80C1259FD05FF341234590C59%FD0DFF340584FD06FF340B59FD05FF340C59FD04FF340CAFFFFFAF590C35%341259FD04FFAE0C3434340CAFFD23FFA80C34FD09FF580BA8FD04FF3505%FD06FFAF055FFF8459FD0DFF0C0B0BFD05FFA80C0559FD06FF0B0CFFFFFF%AE0BA8FD04FF830B7DFF5984FD05FF5905FFFF0C05FD24FF0B59FD09FF84%0BFD05FF5912FD06FFAF0C83FD10FF12340B84FD04FF59341234FD07FF0B%83FFFF3483FD05FFAE0BAEFD08FF5912FFFFA80C83FD22FFAF0C34FD09FF%590CFD05FF590BFD07FF0B84FD10FF0BAF0B12FD04FF0BAE0B34FD07FF59%0BFF7D34FD06FF830CA8FD08FF590BFFFFFF0BA8FD23FF0B59FD09FF840B%59345934590C0CFD06FFAF0C2E833484FD0CFF8412FF5F05A8FFFF3435FF%340BFD08FF12343484FD06FFA80B59593584FD05FF590CFFFF5934FD23FF%AE0B2EFD09FF590B84AE84A8A8590BFD07FF0B34593459FD0CFF830BFFAF%0B0BFFAF0C84FF2E0BA8FD07FF590B2EFD07FF840B34840C84FD05FF590B%592E0CAEFD24FF0B59FD09FF840BFD05FF590CFD06FFAF0C83FD0FFF5912%FFFF340BA8830CFFFF590BFD09FF0B83FD07FFA80BAFFD08FF590C84830B%84FD23FFA80B34FD09FF590BA8FD04FF590BFD07FF0B83FD0FFF590CFFFF%AF05340C84FFFF590B84FD07FFAF0C59FD07FF840B84FD08FF590BFFFF59%05A8FD23FF0B59FD09FF830BFD05FF580CFD06FFAF0C83FFFFAEAEFD0BFF%3434FFFFFF590534FFFFFF840B84FD08FF0B84FD07FFAE0BAEFFFFA8FD05%FF590CFFFFFF340BFD22FF590B0BA8FD08FF2E0B59FD04FF120584FD05FF%84051259590CFD0BFFA80C0BFFFFFFA80B7DFFFFFF590B0CA8A8FD05FF83%0B0CFD07FF590B0C592E34FD05FF340584FFFFFF0C0B84A8FD1EFFAF8483%8459FD07FFAE848384AFFFFFFF7D8483FD05FF8484595F3484FD0BFFA883%8484FFFFFFA8FD05FF83847DFD06FFA87D84A8FD06FF848383595984FD05%FF838483FD04FF8459AFFDFCFFFDFCFFFD95FFAFFD7FFF590C0B340C0C0B%FD7AFF0B12AFFFA835AEFD08FFAEA8FD0BFFAEFFFFFFA8FD0EFFAFFD0AFF%AEFD17FFAFFD0DFFAEFD09FFA8AFFD10FFA8FFAEFF340BFFFFFFA8FD07FF%583434590C3484FD05FF7D0C0B84FFFFFF840B12A8FD04FF3459FD05FF59%0C34FD05FF340C0C592E120C84FD09FF8358FD06FFA80B3434340C592E0C%7DFFFFFF84120B83FD06FFA8342E592E0C34FD07FF2E83FD05FF5F0B59FF%2E12FD0AFF3434A8FFFFFF340C84FD05FF0C0CFD05FF1234FD05FF2E0B83%FD05FF0C84FD06FF0B83FFFFA8590B35FD08FF0C0CFD06FF8484AFFF3412%FFFF5984FD04FF340CFD06FF841259FFFFFF840C0BFD06FF340BAEFD05FF%1284FF340BFD09FF580CFD06FF0B0CFD05FF340BFD05FF0C59FD05FF350B%0B84FD04FF1283FD05FFA80B59FD04FF830459FD06FFA8120B84FD09FF34%0CFD08FF340BFD06FF0C34FD05FFA80B34FD05FF340B05AEFD04FF0C84FF%340C34590C59FD05FF1234FD06FFA80B84FD04FF0C12FD05FF3459FD05FF%34840C0CA8FFFFFF0CA8FD06FF0B84FD05FF340BFD06FF5F59340CFD09FF%3434FD08FF3412FD05FF840BFD07FF0C0CFD05FF5983120BFD04FF3484FF%340B5F593434FD04FFAE0583FD06FFA80B34FD04FF340BFD05FF0C59FD05%FF3459FF0B0CA8FFFF3483FD05FFA80C59FD05FF590BA8FD05FF0CFF830B%A8FD08FF350CFD08FF340BFD05FF340BFD07FF5905FD05FF2EA8FF0C0BFF%FFFF0C84FF0C12FFFFFFAEFD04FFA80B59FD07FF0B59FD04FF0C12FD05FF%3459FD05FF2E83FFFF0B0CFFFF3484FD06FF0B84FD05FF840BAEFD04FF84%0C59830B5FFD08FF3434FD08FF340CFD05FF590BFD07FF590BA8FD04FF35%83FFA80C0BFFFF3484FF340BFD09FF0B34FD06FFA80B59FD04FF340BFD05%FF0C59FD05FF3459FFFFAF050CFF347DFD05FFA80B59FD05FF590BA8FD04%FF590C59590C0BFD08FF340BFD08FF350BFD05FF580B84FD06FF590BFD05%FF0C83FFFF840B0BFF0C84FF0C12FD09FF340BFD06FF840BFD05FF350CFD%05FF1283FD05FF2E84FFFFFFAF0B3434A8FD06FF0B84FD05FF342EFD05FF%0CAFFFFF840B84FD07FF3434FD08FF3412FD06FF0B59FD06FF0C59FD05FF%3559FFFFFFA80B2E5984FF0C0BFD09FFA80B0CFD05FF0B59FD05FFA80B83%FFFFFF840BFD06FF3458FD04FFA80B0B84FD05FFAE0B59FD04FF5F0BAFFD%04FF5912FD04FF0B34FD07FF340BFD08FF590BFD06FF590584FD04FF590C%AFFD05FF0C83FD04FF830B05A8AE0B0B59FD09FF840C0C83835F0C5FFD07%FF5F0B59835F0C84FD06FF0C34FD05FFAE0BA8FD05FF840B1259A859350C%AFFD04FFAF0C0CFD04FF590B84FD06FF0B0C84FD07FF0C0C84FD06FF590B%3559843434A8FD05FFAE0C34FD05FF830C847D845983A8FD0AFF592E5959%A8FD09FFA8345934AFFD06FF848359A8FD05FFA8A8FD05FF7D84FD04597D%FD06FF845984A8FFFFFFA88359AFFD04FF84835984A8FD05FFA8835984FD%07FFA834593484FD07FFA8598384FD05FF84AF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>G4 800</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">myer_foundation_logo_key.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2006-03-20T17:46:07+11:00</xap:CreateDate>
         <xap:ModifyDate>2006-03-20T17:46:07+11:00</xap:ModifyDate>
         <xap:MetadataDate>2006-03-20T17:46:07+11:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>208</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVk00MEMk88ixQxKXllchVVVFWZmOwAHU4oJAFl4v5p/MPWfOCXlv5bv&#xA;RoHkqyPHV/Ns4ZC47x2y/C5J7KvxNtutdy6jPqpZbEDw4xzl+r8Wu/5xz82ahf2U/lyOFW0jRISR&#xA;fNzMsk1xcyOmxPFF9Ovw0rUVrvTEp7LzEjg/hj+kss1v80Emv5tF8mwR61qsI5Xl678dNsk6tJc3&#xA;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&#xA;sG3Ckl1EdFLFmjw747+X47/m/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:A2EBA748B9C711DAAE51E7927A25BFE8</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A2EBA749B9C711DAAE51E7927A25BFE8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:48aaf793-b7cb-11da-ba78-001451120c0e</stRef:instanceID>
            <stRef:documentID>uuid:B563CB56B9B211DAAE51E7927A25BFE8</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -117.271 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 117.271 li145.156 117.271 li145.156 0 licpclp[1 0 0 1 0 0 ] concat82.7344 0.516602 mo82.9111 1.31885 82.6465 2.04199 82.4004 2.72656 cv82.9688 2.56055 83.3203 2.18896 83.8594 1.83691 cv84.1406 1.73975 li84.29 2.31689 84.0527 2.96191 83.9971 3.56787 cv83.6836 4.59473 82.9893 5.56299 82.1689 6.24805 cv82.2344 5.77783 82.5684 5.19092 82.3125 4.65381 cv78.4707 7.04004 74.6279 10.2666 71.3721 13.5718 cv71.1943 13.6597 71.0684 13.8447 70.854 13.8447 cv70.854 13.6108 li74.2451 9.87598 78.2754 6.15967 82.1689 3.0498 cv81.9229 2.73682 82.0889 2.24805 81.8438 1.92578 cv81.6982 1.78857 li78.7549 3.95898 75.8984 6.15967 73.3955 8.96582 cv71.1758 11.2046 68.897 13.709 67.0586 16.0547 cv66.5996 16.7397 66.1387 17.415 65.8369 18.167 cv65.7388 18.2949 65.6206 18.1479 65.5537 18.0698 cv66.7646 15.4189 68.7207 13.083 70.666 10.7549 cv74.1982 6.70703 78.001 2.81494 82.2158 0 cv82.499 0 82.6182 0.332031 82.7344 0.516602 cvfalse sop/0 <</Name (PANTONE 342 CVC)/0 [/DeviceCMYK] /CSA add_res/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 1 0 0.690196 0.431373 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf91.9355 2.86377 mo91.2432 4.7998 89.9805 6.80469 87.9893 7.79199 cv86.665 8.38867 85.2568 8.93555 83.7598 8.96582 cv83.7598 8.72168 84.0361 8.74072 84.1914 8.68262 cv87.2227 7.6748 90.833 5.25977 91.7432 1.92578 cv91.5566 1.92578 li83.7412 7.49902 75.8594 13.1318 69.4927 20.8467 cv69.2598 20.8467 li69.4058 20.417 li72.9258 15.0386 77.9336 10.1387 83.2529 6.48193 cv90.2451 2.02295 li91.9766 1.13379 li92.1221 0.937988 li92.417 1.55371 91.9971 2.21875 91.9355 2.86377 cvf91.0381 7.4209 mo89.8838 8.89697 88.3965 10.0908 86.5771 10.375 cv85.6094 10.6187 84.6221 10.8438 83.5752 10.9409 cv83.5254 10.6577 li87.0176 9.73779 91.1445 8.07568 92.3574 4.22363 cv92.3496 5.41602 91.5459 6.38379 91.0381 7.4209 cvf90.7158 8.73096 mo90.7656 10.6377 89.6094 12.6128 87.7529 13.3369 cv86.2158 13.835 84.5439 14.2559 82.7842 13.9429 cv82.8594 13.6396 83.3125 13.7866 83.5254 13.6108 cv86.3818 13.1709 89.6094 11.7236 90.6182 8.73096 cv90.7158 8.73096 lif81.2754 10.7939 mo80.6797 13.9038 78.3613 16.8276 75.5459 18.353 cv75.2939 18.52 74.9893 18.5679 74.6572 18.54 cv74.5684 18.2158 75.0977 18.1089 75.3125 17.8838 cv77.5605 16.2217 79.5869 13.8447 80.9434 11.459 cv80.9824 11.2046 81.0322 10.834 81.2754 10.7939 cvf89.1611 13.6597 mo88.7285 15.166 87.2822 16.603 85.7363 16.896 cv84.6113 17.2876 83.1162 17.189 82.0322 16.8076 cv82.0322 16.71 li84.7002 16.4658 87.3965 15.7617 89.0732 13.5718 cv89.1611 13.6597 lif81.1387 16.29 mo80.8682 17.2188 80.2598 18.0107 79.5869 18.7739 cv78.1875 20.1616 76.458 21.2969 74.4229 21.2178 cv74.3438 21.1787 74.3926 21.0908 74.374 21.0327 cv77.0625 20.2207 79.4482 18.0698 80.9434 15.5859 cv80.9072 15.5366 li81.0928 15.3027 li81.3164 15.5659 81.0527 15.9868 81.1387 16.29 cvf86.9111 16.9448 mo86.9893 17.6489 86.6748 18.3438 86.0684 18.7739 cv84.6895 19.751 82.8027 19.8198 81.0439 19.811 cv81.0439 19.7119 li83.1934 19.3506 85.4414 18.793 86.7734 16.9448 cv86.9111 16.9448 lif68.1836 19.9956 mo68.6138 20.8179 68.4956 21.874 68.6528 22.813 cv68.584 25.4229 68.3687 27.9067 68.6528 30.3706 cv68.7798 30.5566 68.7988 30.792 69.0239 30.938 cv69.6118 31.2017 69.7178 30.4199 69.9146 30.0869 cv70.7637 27.917 70.666 24.8467 69.2598 22.959 cv69.2598 22.813 li69.4058 22.8608 li70.5195 24.2788 70.7056 26.0879 71.0488 27.8379 cv71.2441 29.3828 71.0273 30.8896 69.9629 31.9648 cv69.1416 32.7666 67.7417 32.7866 66.6768 32.6689 cv66.7646 32.4048 67.1758 32.4927 67.3818 32.3457 cv68.085 32.2876 68.6528 31.7886 69.1216 31.2607 cv68.897 31.271 68.8379 31.085 68.7017 30.9766 cv67.4097 28.1899 67.8789 25.022 67.5669 21.8237 cv67.3818 21.0518 67.0308 20.2598 66.2568 19.811 cv64.1846 19.0957 61.8945 19.8486 60.0176 20.6118 cv60.0366 19.9478 60.9077 19.6929 61.4258 19.3896 cv63.4507 18.7739 66.6279 17.9126 68.1836 19.9956 cvf84.5137 20.0449 mo84.4561 20.8267 83.7529 21.6289 82.9688 21.874 cv82.04 22.167 80.749 22.333 79.8184 21.9219 cv79.7715 21.6387 li81.5029 21.6777 83.0156 21.209 84.2305 20.0449 cv84.5137 20.0449 lif65.5039 20.8467 mo64.8086 21.2866 63.9487 21.3159 63.1577 21.5508 cv63.1577 21.7656 63.2046 22.0879 63.2539 22.3428 cv63.5386 22.4897 63.8418 22.2739 64.0967 22.3428 cv63.7539 22.7246 63.2046 22.8999 62.6855 22.813 cv62.2656 22.7246 62.022 22.2256 61.5137 22.3428 cv61.377 22.2646 61.3667 22.1177 61.377 21.9707 cv61.6709 21.7266 62.1006 22.0986 62.2656 21.6387 cv62.0527 21.4526 61.6396 21.6187 61.4648 21.502 cv61.4546 21.1787 61.7275 21.0518 61.9829 20.9839 cv63.2158 20.9448 64.4478 20.9248 65.5039 20.4658 cv65.73 20.5728 65.4839 20.71 65.5039 20.8467 cvf60.252 21.1689 mo60.252 21.2676 li59.7827 21.2676 59.1567 21.0518 58.6479 21.2676 cv58.1797 21.4136 57.6797 21.668 57.4346 22.1567 cv57.2319 22.686 57.3779 23.311 57.6719 23.751 cv57.8867 23.4087 58.2275 22.959 58.6978 22.9976 cv59.5679 23.1548 60.4277 23.7217 60.8579 24.5039 cv59.979 24.543 59.2939 23.3696 58.2778 23.6138 cv58.062 23.7607 57.6987 23.8589 57.6719 24.1318 cv57.0078 23.4868 56.4775 22.5479 56.771 21.6387 cv57.4658 20.3569 59.2168 20.71 60.252 21.1689 cvf60.8086 23.751 mo60.7319 23.8096 60.7896 23.9956 60.625 23.937 cv60.3809 23.2227 59.6069 23.0176 58.981 22.813 cv58.5308 22.7637 58.209 22.7046 57.856 22.9976 cv57.7686 22.959 57.8169 22.8516 57.8076 22.7637 cv58.4429 22.2349 59.4307 22.5479 60.0557 22.8608 cv60.3696 23.0566 60.7808 23.3496 60.8086 23.751 cvf83.292 22.8608 mo83.0156 23.6338 82.2246 24.2788 81.376 24.3667 cv80.6914 24.25 79.7715 24.4839 79.3984 23.7998 cv79.499 23.7017 li80.8555 23.7998 82.1572 23.4868 83.1572 22.5767 cv83.292 22.8608 lif59.313 30.2729 mo59.3525 30.3218 li59.6167 30.126 59.7437 29.834 59.9688 29.667 cv60.0269 29.7349 59.9106 29.853 59.8706 29.9497 cv59.7236 30.126 59.7637 30.439 59.8228 30.6538 cv59.9609 30.7417 60.0869 31.0557 60.3398 30.938 cv60.2129 31.2017 59.8428 31.3877 59.5488 31.3096 cv59.3818 31.124 59.2749 30.918 59.2168 30.7036 cv58.7656 31.4077 58.6299 32.229 58.375 33.001 cv57.6328 36.4238 59.4409 39.396 60.8086 42.2417 cv61.1519 43.3467 61.5527 44.4126 61.1909 45.625 cv61.0938 45.7227 li61.2686 44.9399 61.0449 44.0996 60.7217 43.416 cv59.6758 41.186 58.5029 39.0049 57.3867 36.8047 cv56.5957 34.8496 56.7417 32.2969 57.9927 30.605 cv58.7856 29.1387 59.667 27.6626 59.5 25.8628 cv59.6069 25.3926 59.2749 24.9238 59.5879 24.5527 cv60.0557 26.2837 59.9688 28.6006 59.313 30.2729 cvf82.7842 25.022 mo82.5586 25.8047 81.6982 26.46 80.9434 26.665 cv80.2119 26.792 79.4785 26.792 78.9297 26.1958 cv78.7451 26.0776 78.7451 25.8726 78.6445 25.7266 cv79.5752 25.6968 80.1631 25.9707 81.1387 25.7749 cv81.6201 25.6577 82.1465 25.4326 82.4004 24.9727 cv82.7842 25.022 lif75.7432 25.9116 mo75.5273 26.4209 74.9414 26.606 74.4727 26.8018 cv74.2266 26.772 73.9033 26.8896 73.7168 26.7139 cv74.3047 26.3618 75.2822 26.1079 75.458 25.2568 cv75.5459 25.1597 li75.7529 25.3638 75.7529 25.687 75.7432 25.9116 cvf76.4453 27.6909 mo76.2139 28.0928 75.8105 28.2778 75.3613 28.2578 cv74.9619 28.249 74.6094 28.103 74.2363 28.0239 cv74.3643 27.8477 74.5498 27.9258 74.7549 27.9756 cv75.1182 27.8477 75.5459 27.897 75.8311 27.5547 cv76.2139 26.8506 li76.5137 26.9878 76.5254 27.3979 76.4453 27.6909 cvf82.0322 28.21 mo81.4639 29.0796 80.5156 29.2466 79.5869 29.334 cv79.0664 29.1978 78.335 28.9727 78.2754 28.3076 cv78.5098 28.1416 78.6855 28.396 78.8818 28.4448 cv80.0361 28.4829 81.2188 28.3169 82.0791 27.5059 cv82.4004 27.7109 82.0586 27.9756 82.0322 28.21 cvf76.917 29.8037 mo76.9268 30.1558 76.7773 30.4688 76.3984 30.4688 cv75.6836 30.4097 75.001 30.2637 74.4229 29.853 cv75.0176 29.8618 75.5869 30.2437 76.2139 29.9019 cv76.5459 29.7646 76.5459 29.2759 76.3984 29.0117 cv76.251 28.7769 li76.7412 28.895 76.8389 29.3926 76.917 29.8037 cvf62.7358 29.481 mo62.6577 30.02 63.0098 30.3799 63.3418 30.7417 cv63.7739 30.8398 li63.5176 31.0356 63.1367 31.0747 62.834 30.9766 cv62.5596 30.9668 62.4326 30.6738 62.3647 30.4688 cv62.2466 30.0586 62.5508 29.8037 62.6387 29.481 cv62.7358 29.481 lif61.0938 30.2339 mo61.2007 30.4688 61.2788 30.7617 61.563 30.8896 cv61.7769 30.8506 61.9146 30.9766 62.1289 30.938 cv61.8647 31.251 61.4067 31.251 61.0449 31.1729 cv60.8579 31.0259 60.6138 30.9087 60.5757 30.6538 cv60.3887 30.312 61.2788 28.895 61.0938 30.2339 cvf81.6982 30 mo81.6777 30.6538 81.2754 31.271 80.7119 31.5928 cv79.9678 31.8369 78.9785 31.7988 78.4131 31.1729 cv78.4131 31.0747 li78.8516 31.0356 79.3428 31.271 79.8184 31.124 cv80.4355 31.0356 81.0439 30.625 81.3271 30.0386 cv81.2881 29.6768 81.7266 29.5298 81.6982 30 cvf77.3389 30.792 mo77.3945 31.4077 77.5322 32.082 76.917 32.4336 cv76.2207 32.7568 75.4209 32.4927 74.8428 32.1118 cv74.7061 31.916 li75.2822 32.082 76.2305 32.249 76.8184 31.7788 cv77.0137 31.5249 77.2188 31.2607 77.1504 30.8896 cv77.21 30.8398 77.251 30.7617 77.3389 30.792 cvf59.3525 31.8276 mo59.3525 32.1899 59.2749 32.9028 59.7827 33.0889 cv60.2026 33.0498 li59.9609 33.481 59.5488 33.4409 59.1177 33.4219 cv58.7856 33.2456 58.7358 32.8247 58.8438 32.4829 cv58.9619 32.249 59.0796 31.877 59.3525 31.8276 cvf60.9956 31.877 mo60.8779 32.2969 60.937 32.9126 61.4648 33.1377 cv62.168 33.0498 li62.1289 33.2646 61.877 33.3818 61.7007 33.4707 cv61.3188 33.5977 60.9277 33.4609 60.625 33.2358 cv60.312 32.7759 60.6025 32.209 60.8579 31.8276 cv60.9956 31.877 lif62.9219 32.5317 mo63.0776 32.8247 63.4028 33.0117 63.7236 32.855 cv63.8306 32.7866 63.8906 32.5996 64.0469 32.6689 cv63.9189 33.0698 63.4985 33.3438 63.1079 33.4219 cv62.9019 33.4019 62.6855 33.3037 62.5977 33.0889 cv62.3647 32.6689 62.4629 32.2876 62.6387 31.877 cv62.875 31.9546 62.7559 32.3457 62.9219 32.5317 cvf81.6982 32.0137 mo81.8047 32.708 81.1387 33.2358 80.6221 33.5586 cv80.2207 33.8228 79.624 33.8716 79.167 33.7056 cv78.7734 33.5488 78.3428 33.2256 78.1777 32.8149 cv79.0479 33.354 80.1631 32.9917 80.9951 32.6196 cv81.1777 32.4048 81.4336 32.0327 81.6982 32.0137 cvf77.2881 33.3237 mo76.9746 33.7837 76.5137 34.2827 75.9766 34.4097 cv75.1055 34.4678 74.0703 34.2329 73.6289 33.52 cv74.4336 34.0088 75.6836 34.0088 76.4844 33.52 cv76.7207 33.3818 77.0439 32.855 77.2881 33.3237 cvf64.0967 35.1128 mo64.3105 35.0156 64.5938 35.104 64.7998 35.0156 cv64.8379 35.417 64.3408 35.436 64.1938 35.6709 cv63.8687 35.8267 63.5479 35.5337 63.4419 35.25 cv63.3916 34.9277 63.1367 34.6147 63.3037 34.2627 cv63.6758 34.0176 63.5176 34.7129 63.7739 34.8789 cv64.0967 35.1128 lif61.9336 35.1128 mo62.2188 35.29 62.4819 35.6606 62.875 35.4849 cv62.9019 35.3677 63.0396 35.3188 63.1577 35.3477 cv63.0898 35.5928 62.9019 35.876 62.6387 35.9536 cv62.209 36.1689 61.8379 35.8267 61.6128 35.4849 cv61.5249 35.1719 61.4067 34.6929 61.6597 34.4097 cv61.8066 34.5757 61.8066 34.8887 61.9336 35.1128 cvf58.981 35.2988 mo59.1479 35.5527 59.4009 35.7686 59.6846 35.8657 cv59.4609 35.9648 59.1758 36.063 58.9307 35.9536 cv58.6479 35.7686 58.522 35.436 58.4629 35.1128 cv58.6479 34.4976 li58.981 34.4878 58.814 35.0547 58.981 35.2988 cvf81.2754 34.5947 mo81.2285 35.1426 80.915 35.8369 80.292 36.1016 cv79.6543 36.2769 78.6768 36.5996 78.1299 36.0029 cv78.0684 35.749 77.7178 35.4849 77.9912 35.2017 cv78.2344 35.1719 78.3535 35.4258 78.5977 35.5337 cv79.167 35.8369 80.0459 35.7778 80.5732 35.436 cv80.8066 35.1616 81.0625 34.8496 81.2754 34.5947 cvf60.2026 35.1128 mo60.3887 35.417 60.625 35.5337 60.9077 35.7197 cv61.5137 35.7686 li61.4546 35.9937 61.3076 36.2578 61.0449 36.2866 cv60.6138 36.395 60.1938 36.1689 59.8706 35.8169 cv59.812 35.4556 59.5586 34.8979 59.9199 34.6436 cv60.291 34.5557 59.979 35.0059 60.2026 35.1128 cvf73.0625 35.397 mo74.0996 35.896 75.3721 35.7197 76.251 35.0156 cv76.3389 34.9668 76.5137 35.0737 76.5342 35.2017 cv76.2412 35.583 75.8408 36.189 75.2734 36.2866 cv74.1777 36.4536 73.1318 35.8169 72.4951 34.9668 cv72.6709 35.0249 72.8965 35.2017 73.0625 35.397 cvf73.2969 37.313 mo73.8154 37.2446 74.3047 37.1079 74.7549 36.8447 cv74.8252 36.874 74.8926 36.8838 74.9414 36.9419 cv74.6982 37.48 74.1875 37.8999 73.5801 37.9297 cv72.5449 37.832 71.6357 37.1567 71.1855 36.2378 cv71.2822 36.1406 li71.6357 37.0107 72.5342 37.1377 73.2969 37.313 cvf64.752 36.7559 mo64.9756 37.0986 65.3188 37.3428 65.6899 37.4116 cv66.1187 37.1768 li66.2769 37.3428 66.022 37.5186 65.9736 37.6948 cv65.7466 37.8809 65.416 37.9297 65.1318 37.832 cv64.752 37.5967 64.4565 37.167 64.4287 36.708 cv64.5166 36.5898 64.418 36.3159 64.6147 36.335 cv64.752 36.7559 lif63.3418 37.5088 mo63.3916 37.46 li63.5098 37.5869 63.7236 37.6069 63.8618 37.5479 cv63.9487 37.46 64.0767 37.3916 64.0967 37.2739 cv64.1938 37.2739 li64.2417 37.4697 64.125 37.7148 64.0469 37.9297 cv63.8418 38.1938 63.4419 38.125 63.1577 38.0659 cv62.7759 37.812 62.4629 37.4209 62.502 36.9419 cv62.5796 36.7656 62.7168 36.7856 62.834 36.8926 cv62.834 37.2158 63.1968 37.2446 63.3418 37.5088 cvf61.4258 37.5967 mo61.6807 38.0469 62.2769 37.8218 62.6387 37.8809 cv62.541 38.125 62.2769 38.3887 62.0308 38.4868 cv61.6006 38.4766 61.25 38.1836 60.9956 37.832 cv60.8779 37.5679 60.8398 37.2158 60.8579 36.9419 cv61.1909 37.021 61.1616 37.4116 61.4258 37.5967 cvf71.8887 38.957 mo72.3008 38.9458 72.6904 38.917 73.0137 38.7217 cv73.1699 38.8096 73.1211 39.0347 73.0625 39.1519 cv72.8965 39.5239 72.4951 39.7578 72.125 39.856 cv70.7056 39.7188 69.9336 38.106 69.6406 36.9907 cv70.022 37.8418 70.9707 38.7017 71.8887 38.957 cvf59.8706 37.832 mo60.1748 38.2129 60.5459 38.4678 61.0449 38.3496 cv61.0356 38.625 60.7319 38.5938 60.5757 38.7217 cv60.0557 38.9756 59.6846 38.5166 59.4009 38.1636 cv59.2056 37.812 59.2168 37.4116 59.3525 37.041 cv59.6167 37.1768 59.6948 37.5679 59.8706 37.832 cvf80.5234 37.2739 mo80.3389 37.832 79.9766 38.5059 79.3516 38.7217 cv78.4805 38.9268 77.4541 38.8579 76.917 38.0659 cv76.7207 37.5479 li77.0342 37.46 77.3457 37.8027 77.6592 37.9297 cv78.6855 38.125 79.624 37.8418 80.3867 37.2739 cv80.5234 37.2739 lif67.0098 39.4746 mo67.127 39.4067 67.2036 39.231 67.3818 39.2886 cv67.3516 39.4258 67.3218 39.71 67.147 39.856 cv66.9219 39.9536 66.647 40.0518 66.3945 39.9438 cv65.9058 39.7388 65.9058 39.2788 65.7388 38.8687 cv65.7866 38.5356 li66.0308 38.9458 66.501 39.396 67.0098 39.4746 cvf64.2808 39.1909 mo64.5669 39.4546 64.8579 39.6797 65.2197 39.71 cv65.3667 39.6216 65.5039 39.5239 65.6509 39.4258 cv65.6699 39.5918 65.6206 39.856 65.4546 39.9927 cv65.2695 40.2178 65.0059 40.2466 64.7119 40.228 cv64.3608 40.0518 64.0767 39.6797 63.9097 39.3379 cv63.8999 39.1709 63.8999 38.917 64.0967 38.917 cv64.2808 39.1909 lif76.1631 39.4258 mo76.8965 39.7769 77.9912 40.1099 78.7451 39.5728 cv78.8516 39.6406 78.9785 39.3579 79.1162 39.5239 cv79.2041 39.4746 79.2344 39.3379 79.3516 39.3867 cv79.1162 39.895 78.4707 40.4038 77.8535 40.4619 cv77.0049 40.5586 76.2695 40.228 75.8311 39.5239 cv75.7822 39.3477 75.5273 39.21 75.6934 39.0049 cv75.8408 39.064 76.0068 39.2886 76.1631 39.4258 cvf62.5977 39.1909 mo62.5796 39.3667 62.5796 39.6509 62.7847 39.8066 cv63.0688 40.0518 63.3916 40.3057 63.7739 40.1787 cv63.7808 40.0518 63.9189 40.0518 64.0068 39.9927 cv64.0176 40.2666 63.793 40.4717 63.5776 40.5986 cv63.2456 40.7158 62.8638 40.5986 62.5977 40.4126 cv62.2856 40.1587 62.1978 39.7578 62.3159 39.3867 cv62.3848 39.27 62.4038 39.1519 62.5977 39.1909 cvf60.8579 39.9438 mo61.0537 40.2178 61.3276 40.501 61.6597 40.5586 cv61.8647 40.5698 61.8647 40.0708 62.0815 40.3647 cv62.0815 40.6279 61.9336 40.8628 61.7007 40.98 cv61.377 41.0977 61.0146 40.9707 60.7617 40.7456 cv60.3999 40.501 60.3198 40.1299 60.252 39.7578 cv60.312 39.6216 60.3809 39.3867 60.5757 39.3867 cv60.8579 39.9438 lif74.7549 40.5986 mo75.2939 41.3906 76.3105 41.0586 77.1016 41.0679 cv77.0732 41.3027 76.7207 41.4497 76.583 41.5859 cv76.1035 41.812 75.2451 41.812 74.8027 41.4009 cv74.5791 41.04 74.2588 40.6479 74.4229 40.1787 cv74.5977 40.208 74.6484 40.4619 74.7549 40.5986 cvf68.4668 41.1167 mo68.6138 40.9897 68.7207 40.834 68.7397 40.6479 cv68.8867 40.6479 li69.0239 40.9897 68.8379 41.3027 68.7017 41.5859 cv68.4868 41.7627 68.1938 41.8506 67.9478 41.772 cv67.4697 41.459 67.0586 40.8828 67.0977 40.3247 cv67.5957 40.2378 67.646 40.9897 68.085 41.0679 cv68.1836 41.1558 68.3306 41.1079 68.4668 41.1167 cvf66.6768 41.772 mo66.8218 41.6738 66.8638 41.293 67.0977 41.4497 cv67.0688 41.8706 66.8638 42.3008 66.4438 42.4756 cv65.7466 42.5547 65.543 41.7627 65.3188 41.3027 cv65.2578 41.1558 65.209 40.853 65.416 40.7949 cv65.7188 41.2148 66.043 41.8706 66.6768 41.772 cvf64.0068 41.9189 mo64.2417 42.105 64.438 42.4966 64.752 42.3398 cv65.0059 42.3008 64.9058 41.9688 65.1318 41.9688 cv65.1816 42.291 65.0156 42.7017 64.7119 42.9067 cv64.418 43.0439 64.1348 42.8677 63.9097 42.7109 cv63.6558 42.4087 63.4507 42.0259 63.5386 41.6348 cv63.793 41.1079 63.8306 41.8018 64.0068 41.9189 cvf62.5977 42.624 mo62.8525 42.7407 62.9019 42.3599 63.1079 42.3887 cv63.1968 42.6328 62.981 42.7598 62.9219 42.9458 cv62.7168 43.1807 62.4038 43.0928 62.168 43.0928 cv61.9038 42.8579 61.437 42.6426 61.4258 42.2026 cv61.437 41.9487 61.3667 41.6348 61.6597 41.5376 cv61.7769 41.9878 62.0815 42.5547 62.5977 42.624 cvf80.4746 43.4648 mo82.2637 44.9009 83.9658 46.231 85.7363 47.689 cv87.8018 49.3608 89.8838 50.9839 92.0254 52.4307 cv92.1523 52.5479 92.1523 52.7139 92.2119 52.8516 cv91.5381 52.9199 91.0293 52.3237 90.4316 52.0586 cv87.1543 50.1426 84.4072 47.728 81.5117 45.293 cv80.4355 44.2178 79.3203 43.1118 78.3232 41.9189 cv78.3047 41.812 78.335 41.772 78.4131 41.7329 cv79.2617 42.1147 79.7119 42.9658 80.4746 43.4648 cvf69.21 42.9067 mo69.4849 43.2388 69.9048 43.582 70.3828 43.376 cv70.5488 43.3369 70.4038 43.0928 70.6177 43.1807 cv70.8237 43.3179 70.6558 43.5229 70.5786 43.6499 cv70.4229 44.0508 69.9727 44.0898 69.6406 43.9819 cv69.1909 43.6797 68.7109 43.2686 68.7876 42.7109 cv68.9355 42.4966 69.2598 42.7017 69.21 42.9067 cvf80.7119 48.021 mo83.5088 48.334 85.2754 50.4946 87.7139 51.6777 cv90.0684 52.9009 92.4268 54.1128 95.0273 54.73 cv95.0176 54.7969 95.1143 54.8359 95.0752 54.915 cv93.7363 54.9438 92.5342 54.3667 91.2734 54.0737 cv88.6113 53.0659 86.2549 51.5117 83.8594 49.9478 cv82.9209 49.3999 81.6201 49.8979 80.7119 49.146 cv78.9297 47.9526 77.3945 46.1636 75.8799 44.6377 cv75.4502 44.042 74.6572 43.582 74.4229 42.9067 cv74.5684 42.8086 li76.5459 44.6177 78.4805 46.8086 80.7119 48.021 cvf68.272 44.1187 mo68.604 43.8848 li68.7988 44.0308 68.5347 44.2856 68.417 44.4517 cv68.2329 44.707 67.8896 44.7256 67.6147 44.6377 cv67.2749 44.334 66.8638 43.9048 66.8638 43.376 cv66.96 43.23 li67.3618 43.5229 67.6147 44.3936 68.272 44.1187 cvf66.022 44.5488 mo66.2656 44.667 66.6187 44.52 66.8218 44.355 cv66.834 44.52 66.668 44.7358 66.5889 44.9209 cv66.3638 45.1069 66.022 45.1548 65.7388 45.0576 cv65.1616 44.8428 64.918 44.2266 64.8989 43.6499 cv64.9868 43.562 li65.209 43.9819 65.563 44.3828 66.022 44.5488 cvf61.7476 43.6108 mo63.5679 45.9087 66.7456 46.9556 67.6147 49.8496 cv67.5278 49.9478 li66.5098 48.1479 64.6147 47.2197 63.021 46.0459 cv62.3047 45.459 61.7769 44.5 61.6597 43.6108 cv61.7476 43.6108 lif64.3296 44.5488 mo64.479 44.5879 64.605 44.4517 64.7119 44.5488 cv64.6729 44.7837 64.418 44.8716 64.2417 44.9697 cv63.8306 44.98 63.5586 44.647 63.3916 44.355 cv63.4028 44.1187 63.3418 43.8159 63.625 43.749 cv63.7148 44.0898 64.0068 44.4126 64.3296 44.5488 cvf58.2275 46.2798 mo57.9927 46.9849 57.2598 47.4927 56.9199 48.1577 cv56.6235 48.9297 55.8516 49.9668 56.6826 50.7397 cv56.9468 50.9839 57.3398 51.2476 57.6719 51.0718 cv57.3589 50.3579 57.0249 49.2729 57.6226 48.5776 cv57.9927 48.1089 58.5308 47.8936 59.1177 48.0688 cv59.4697 48.0898 59.7046 48.4897 59.9199 48.7246 cv60.106 49.146 59.9199 49.4487 59.7827 49.8496 cv59.4888 50.1909 59.1177 50.5137 58.6978 50.417 cv59.0596 50.2119 59.1479 49.751 59.0298 49.3799 cv58.8628 49.1938 58.6479 48.9897 58.4136 49.146 cv57.6499 50.2397 58.7476 51.2578 59.313 52.147 cv59.4609 52.5479 59.7046 52.1567 59.9199 52.147 cv60.0269 51.8828 59.627 51.8047 59.5879 51.541 cv59.8999 51.5317 59.9199 51.8638 60.1548 52.0098 cv60.6909 51.8447 61.1616 51.375 61.7007 51.355 cv61.7007 51.4429 li61.2686 51.7178 60.8086 51.9229 60.3887 52.2446 cv62.4419 54.0249 64.791 55.481 66.7266 57.457 cv67.2749 58.2588 67.5669 59.4717 67.0977 60.4102 cv66.6187 61.3379 65.6699 61.7598 64.7119 61.8174 cv64.5356 61.7598 64.3027 61.7598 64.1938 61.6328 cv65.0815 61.7197 65.7979 61.0752 66.2568 60.4102 cv66.981 57.877 64.7207 56.2549 62.9717 54.7778 cv61.9736 54.0347 61.0737 53.1738 60.2026 52.334 cv60.0557 52.4209 59.8428 52.4209 59.7827 52.6167 cv61.084 53.9067 62.4526 55.0029 63.8618 56.0488 cv65.064 57.085 66.4219 58.5327 65.7866 60.2246 cv65.4258 60.8408 64.791 61.2305 64.0967 61.25 cv63.4507 61.2217 63.0688 60.6641 62.834 60.127 cv62.8047 59.834 62.8525 59.5288 62.9717 59.334 cv62.9136 59.814 63.2539 60.2246 63.6758 60.459 cv64.0469 60.7422 64.3989 60.3721 64.7119 60.1748 cv64.918 59.7837 65.104 59.2559 64.8989 58.8169 cv63.9878 56.1758 61.0449 54.875 59.2168 52.999 cv58.9619 53.0376 58.7856 53.272 58.5596 53.418 cv59.3818 55.6768 60.6348 57.77 61.7969 59.8916 cv61.7476 59.9409 li60.458 57.9258 59.2559 55.7749 58.2275 53.604 cv58.1206 53.7109 57.9927 53.7607 57.9048 53.8877 cv58.7856 56.0586 60.2026 57.9946 61.2788 60.0781 cv61.1909 60.0781 li60.3809 59.021 59.7637 57.8877 59.168 56.7539 cv58.5718 55.8926 58.0918 55.0029 57.5728 54.1226 cv57.4468 54.2109 57.2988 54.2598 57.2017 54.4058 cv58.1499 56.4307 59.3818 58.376 60.6738 60.2246 cv60.4878 60.2246 li59.0986 58.376 58.0527 56.5278 56.9199 54.5918 cv56.8198 54.6606 56.5156 54.7969 56.6826 54.9629 cv57.7866 56.8506 58.814 58.8169 60.291 60.5088 cv60.2817 60.6045 60.1436 60.7041 60.0557 60.5967 cv58.7256 58.7866 57.5049 56.938 56.3506 55.061 cv56.127 55.1499 55.9399 55.3457 55.7446 55.481 cv56.3218 57.9946 56.3408 60.7422 57.9048 62.8545 cv58.2778 63.2949 58.6978 63.5986 59.2637 63.5986 cv59.5679 63.5986 59.7549 63.2744 59.8706 63.041 cv59.9878 62.748 59.8608 62.4434 59.7349 62.1904 cv59.5586 61.7988 59.0386 62.1221 59.0298 61.7686 cv59.3237 61.7002 59.5288 61.7002 59.8228 61.7686 cv60.1548 62.0039 60.3398 62.3672 60.3887 62.7568 cv60.3398 63.3633 59.9985 63.8516 59.4507 64.1172 cv58.8438 64.2715 58.2275 64.2715 57.7109 63.9297 cv55.4507 61.7598 56.292 58.4829 55.3628 55.7646 cv55.187 55.8726 54.9917 55.9116 54.855 56.0879 cv55.501 59.1289 54.7188 62.9814 58.043 64.6836 cv58.6299 64.8008 59.4409 64.917 59.8706 64.3994 cv60.1548 64.2236 60.2026 63.8613 60.438 63.7451 cv60.4878 64.3408 60.1367 64.9766 59.5488 65.29 cv59.0386 65.5918 58.3848 65.6895 57.7598 65.5732 cv56.3896 65.2109 55.5186 63.8916 55.1777 62.6201 cv54.6987 60.6533 54.9819 58.4258 54.5698 56.3726 cv54.3057 56.2246 54.0327 56.5869 53.7207 56.606 cv53.4067 56.6357 53.0469 56.7817 52.8296 56.5576 cv54.2876 55.481 li54.2769 55.0518 53.9736 54.6016 53.8179 54.1719 cv54.2988 54.3179 54.3457 54.8848 54.6196 55.2476 cv54.7666 55.061 55.3047 55.061 55.0898 54.6797 cv54.6309 53.791 54.0137 52.3916 52.8296 52.3828 cv52.5479 52.353 52.3315 52.5098 52.2236 52.7627 cv52.1167 53.0376 52.2339 53.4478 52.5967 53.5557 cv52.8989 53.6626 53.2417 53.585 53.4858 53.418 cv53.563 53.7417 53.0938 54.0537 52.8296 54.2109 cv52.3516 54.4839 51.6968 54.3276 51.2847 54.0249 cv50.9829 53.6836 50.8848 53.2036 51.002 52.7627 cv51.168 52.0688 51.9219 51.7759 52.5088 51.5898 cv54.2188 51.502 54.9238 53.3696 55.5098 54.5918 cv55.6567 54.6509 55.833 54.4937 55.98 54.4058 cv55.8218 54.1807 55.6846 53.8979 55.7446 53.6538 cv55.9707 53.771 56.1069 54.0049 56.2148 54.2109 cv56.3506 54.2988 56.4976 54.084 56.6348 54.0249 cv56.4688 53.7607 56.1646 53.4287 56.3506 53.1348 cv56.752 53.1738 56.7617 54.3667 57.2896 53.604 cv57.2407 53.272 56.8696 53.0166 57.0078 52.666 cv57.3286 52.6069 57.5537 53.1157 57.7109 53.3696 cv57.8169 53.272 58.1396 53.2036 57.9448 52.999 cv57.875 52.832 57.729 52.6167 57.856 52.4307 cv58.2588 52.3828 58.2275 53.3506 58.6978 52.8027 cv58.8438 52.666 li58.3159 52.2358 58.1396 51.6489 57.7109 51.1597 cv57.5146 51.541 57.1226 51.668 56.771 51.7759 cv56.4097 51.8447 56.146 51.6777 55.8828 51.4917 cv55.0986 50.5537 55.9307 49.458 56.2637 48.5776 cv58.1396 46.2798 li58.2275 46.2798 lif66.6768 49.146 mo66.6768 49.479 li66.1006 49.5659 65.709 48.9688 65.1816 48.813 cv63.5977 47.9619 62.022 47.1108 60.252 46.7007 cv60.0176 46.7397 59.8428 46.6416 59.6367 46.6128 cv59.5488 46.3877 59.8228 46.4556 59.9199 46.3779 cv62.4419 46.6416 64.6328 47.6978 66.6768 49.146 cvf70.4316 51.2578 mo69.8169 49.9668 68.4668 49.3408 67.4316 48.3438 cv67.0776 47.8057 66.5889 47.2778 66.5889 46.6616 cv67.8018 48.334 70.4727 48.8618 70.4316 51.2578 cvf64.7998 49.3799 mo64.8677 49.458 64.9868 49.5366 64.9458 49.6636 cv64.8086 49.918 64.479 49.9668 64.2808 49.7998 cv62.9717 49.0869 61.6006 48.3726 60.2026 47.9717 cv60.7319 48.3438 61.396 48.793 61.377 49.5166 cv61.2886 49.8979 61.2207 50.3096 60.8086 50.5049 cv60.4277 50.7686 59.8506 50.8076 59.4009 50.6519 cv59.939 50.3867 60.3496 49.8389 60.3887 49.2427 cv60.3696 48.6079 59.9609 47.981 59.4009 47.7378 cv59.5488 47.5518 li61.3467 48.021 63.1968 48.4219 64.7998 49.3799 cvf71.1855 48.7246 mo72.4766 50.7979 73.7578 53.0767 75.7432 54.7778 cv75.8018 54.8267 75.9375 54.7876 75.8799 54.915 cv75.458 54.9629 75.0566 54.6699 74.6572 54.543 cv73.5215 53.8198 72.7305 52.7246 72.1738 51.5898 cv71.5957 50.7686 71.4004 49.7808 71.0488 48.8618 cv71.0098 48.7739 71.0879 48.686 71.1855 48.7246 cvf55.833 48.9106 mo55.6768 49.7319 54.7666 50.3096 55.0396 51.2578 cv55.2256 51.6299 55.6846 51.9229 55.8828 52.2446 cv55.4019 52.353 54.7476 52.3037 54.3369 51.9619 cv54.0327 51.707 53.9355 51.3066 54.0547 50.9248 cv54.2485 50.1328 55.002 49.5659 55.5576 48.9106 cv55.6768 48.979 55.7446 48.7739 55.833 48.9106 cvf78.7939 50.1816 mo79.2041 51.082 78.8906 52.1768 78.3232 52.9009 cv78.2266 52.9097 78.1465 52.8906 78.0908 52.8027 cv78.6182 51.7856 78.3535 50.3779 77.7588 49.479 cv78.2061 49.458 78.5889 49.7998 78.7939 50.1816 cvf63.2539 49.6636 mo63.9878 50.5537 64.9058 51.6099 66.1577 51.541 cv66.1577 51.6299 li65.4746 51.8926 64.5737 51.7949 64.0068 51.355 cv63.5098 50.8667 63.2656 50.2798 63.1079 49.6636 cv63.2539 49.6636 lif80.4355 51.1206 mo83.5752 52.1958 86.2549 54.0737 89.0234 56.0488 cv89.7959 56.3618 90.6572 57.437 91.5068 56.5576 cv91.6523 56.7046 li91.6055 56.6548 li91.3125 56.9297 91.0664 57.0757 90.7656 57.2227 cv87.6338 57.0659 85.5703 53.9658 82.8232 52.7139 cv82.0322 52.0098 80.915 51.6299 79.9189 51.209 cv79.8184 51.1206 79.5957 50.9448 79.8184 50.8369 cv80.0938 50.7778 80.2119 51.0718 80.4355 51.1206 cvf77.1016 51.541 mo77.7178 52.2358 77.915 53.3799 77.4746 54.2109 cv77.3047 53.272 76.9746 52.2158 76.1631 51.4429 cv76.4189 51.1987 76.8779 51.2959 77.1016 51.541 cvf92.5938 55.7646 mo93.083 55.854 93.6689 55.8428 93.9521 55.3848 cv94.0098 55.6089 93.8926 55.8726 93.7178 56.0488 cv93.4336 56.3506 93.0215 56.5767 92.5938 56.606 cv90.833 56.2349 89.4727 54.8267 87.9502 53.9766 cv86.8408 53.3696 85.835 52.5679 84.7002 52.0098 cv84.6318 51.853 84.8164 51.9229 84.8457 51.8257 cv87.5068 52.9399 89.749 54.9629 92.5938 55.7646 cvf71.5176 52.147 mo71.4297 52.9399 70.6758 53.771 69.875 53.9766 cv69.1216 54.1128 68.417 53.8589 67.8018 53.5068 cv67.8018 53.418 li69.0146 53.604 70.5308 53.2036 71.3721 52.147 cv71.5176 52.147 lif68.5547 52.334 mo67.9087 53.1157 66.9116 53.5649 65.8369 53.3696 cv65.3379 53.1938 64.7695 52.832 64.5669 52.334 cv64.8989 52.207 65.104 52.6069 65.416 52.666 cv66.2378 52.978 67.4487 53.0566 68.1836 52.48 cv68.272 52.2646 68.3486 52.2549 68.5547 52.334 cvf77.6592 54.6406 mo77.708 54.6997 77.7959 54.7388 77.7588 54.8267 cv77.251 54.9346 76.7021 55.0518 76.251 54.73 cv75.458 54.2988 74.9209 53.438 74.8926 52.6167 cv75.626 53.4966 76.5938 54.3569 77.6592 54.6406 cvf76.4453 55.814 mo76.458 57.5747 75.9502 58.9429 75.2734 60.4102 cv75.3613 60.5088 li76.6523 60.8105 78.1201 60.6934 79.499 60.7813 cv79.8311 60.8008 80.1426 61.1045 80.3389 61.25 cv80.7676 62.0918 80.3477 62.8652 80.1035 63.6455 cv80.0547 63.6455 li80.0459 63.0693 79.9678 62.2881 79.3984 62.0039 cv78.7451 61.3584 77.6777 61.5049 76.7695 61.3486 cv75.2246 60.8789 li74.9004 60.2725 75.5381 59.7056 75.5459 59.0508 cv75.7734 57.9556 75.9375 56.8418 76.0645 55.7168 cv76.1748 55.541 76.4072 55.6479 76.4453 55.814 cvf75.458 56.5176 mo74.7549 58.7188 74.2178 61.0654 72.3584 62.708 cv71.8994 63.4404 71.9961 64.459 72.457 65.1523 cv71.8691 65.1523 71.5859 64.3994 71.3721 63.9297 cv70.9116 61.9453 73.4639 61.6621 74.001 60.0781 cv74.4336 58.689 74.8428 57.2808 75.126 55.814 cv75.6543 55.4229 75.4893 56.2837 75.458 56.5176 cvf62.502 60.0781 mo62.3159 60.1943 62.041 60.333 61.7969 60.4102 cv61.25 60.752 60.8579 61.1914 60.3398 61.6328 cv60.106 61.7197 59.979 61.4277 59.8706 61.2998 cv60.3496 60.4297 61.5137 60.0781 62.502 60.0781 cvf73.0137 60.8789 mo73.0137 61.0166 li71.9961 60.8594 71.3213 61.8369 70.2949 61.8174 cv69.6597 61.6523 68.9746 61.9551 68.5049 62.4736 cv68.1426 63.0889 67.772 63.5586 67.147 63.9297 cv66.9409 63.5986 67.4487 63.3252 67.5278 62.9922 cv67.6758 62.3262 67.9087 61.6025 68.5049 61.2119 cv69.562 61.291 70.813 61.3096 71.752 60.8301 cv72.1436 60.6348 72.6143 60.8008 73.0137 60.8789 cvf63.0688 61.0166 mo62.3159 61.417 61.6309 61.9746 60.9565 62.5215 cv60.7617 62.5693 60.6348 62.4629 60.5259 62.3369 cv60.3696 61.9551 60.8198 61.876 60.9956 61.7197 cv61.6309 61.3877 62.2466 60.9775 62.9717 60.8789 cv63.0688 61.0166 lif74.5684 61.2998 mo74.2266 62.1904 73.9033 63.2168 73.1123 63.7939 cv72.6406 63.7939 li72.4766 63.3252 73.1602 63.1875 73.3955 62.8545 cv73.7578 62.2383 74.374 61.6523 74.5684 60.9287 cv74.7734 60.9863 74.5684 61.1729 74.5684 61.2998 cvf66.5396 63.2256 mo66.521 63.3535 66.1987 63.3438 66.0708 63.5107 cv64.3296 64 62.7559 64.9658 61.4258 66.3252 cv61.25 66.4727 60.9277 66.4336 60.7217 66.374 cv60.564 66.2578 60.6138 65.9941 60.6738 65.8564 cv60.3696 65.9639 60.0269 65.7295 60.0176 65.3877 cv60.3999 64.7119 61.1909 64.4092 61.7969 63.9785 cv63.1577 63.3252 64.418 62.4248 65.9248 62.1494 cv65.9736 62.1904 li65.543 62.5322 64.9556 62.6797 64.479 62.9922 cv63.48 63.5107 62.668 64.2051 61.7476 64.917 cv61.9336 64.917 li63.3315 64.0957 64.8379 63.3828 66.3945 63.0889 cv66.3945 63.0889 66.5586 63.0996 66.5396 63.2256 cvf84.9336 66.1396 mo87.2695 67.0303 89.542 68.2129 91.5566 69.7969 cv93.0908 70.6279 94.3838 71.8408 95.7305 72.9844 cv95.792 73.1221 95.6445 73.1221 95.5938 73.1797 cv95.3701 73.1035 95.292 72.6719 95.0273 72.8008 cv95.0273 72.6621 li91.7598 69.8652 87.9502 68.0557 83.958 66.6973 cv80.6113 65.4658 76.9561 65.2207 73.3457 64.7705 cv73.3457 64.6836 li77.2188 63.0889 81.4639 64.6152 84.9336 66.1396 cvf72.4072 67.4502 mo75.9863 68.4102 79.4785 69.8457 82.5889 72.0469 cv82.5889 72.1416 li82.4004 72.1416 li79.5664 70.041 76.2695 68.8486 72.7783 68.2041 cv69.0039 67.1367 64.5356 67.46 60.6738 67.7334 cv60.3696 67.8604 60.0176 67.8604 59.6846 67.9209 cv59.4697 67.4707 60.1147 67.4502 60.3398 67.2158 cv62.814 66.1699 65.9248 66.4336 68.6528 66.6475 cv69.8447 66.9219 71.2031 67.04 72.4072 67.4502 cvf23.2017 90.3242 mo23.2017 92.0537 23.2017 93.4766 23.292 94.2334 cv23.3467 94.7559 23.4546 95.1523 23.9946 95.2246 cv24.2466 95.2607 24.6436 95.2969 24.8057 95.2969 cv24.9136 95.2969 24.9507 95.3506 24.9507 95.4063 cv24.9507 95.4961 24.8599 95.5488 24.6616 95.5488 cv23.6709 95.5488 22.5347 95.4961 22.4458 95.4961 cv22.355 95.4961 21.2197 95.5488 20.6797 95.5488 cv20.481 95.5488 20.3906 95.5127 20.3906 95.4063 cv20.3906 95.3506 20.4268 95.2969 20.5347 95.2969 cv20.6968 95.2969 20.9136 95.2607 21.0757 95.2246 cv21.4355 95.1523 21.5269 94.7559 21.5977 94.2334 cv21.689 93.4766 21.689 92.0537 21.689 90.3242 cv21.689 82.7021 li19.022 82.7383 li17.9048 82.7549 17.4717 82.8809 17.1836 83.3135 cv16.9858 83.6211 16.9307 83.7471 16.877 83.8721 cv16.8228 84.0166 16.7686 84.0527 16.6968 84.0527 cv16.6426 84.0527 16.6069 83.998 16.6069 83.8906 cv16.6069 83.71 16.9678 82.1611 17.0039 82.0156 cv17.0386 81.9092 17.1118 81.6738 17.1836 81.6738 cv17.3096 81.6738 17.4897 81.8535 17.9756 81.8896 cv18.4985 81.9443 19.1836 81.9805 19.3999 81.9805 cv26.1577 81.9805 li27.3105 81.9805 27.7979 81.7998 27.9419 81.7998 cv28.0317 81.7998 28.0317 81.9092 28.0317 82.0156 cv28.0317 82.5566 27.9775 83.7998 27.9775 83.998 cv27.9775 84.1611 27.9238 84.2324 27.8516 84.2324 cv27.7617 84.2324 27.7246 84.1787 27.7065 83.9258 cv27.689 83.7275 li27.6177 83.1875 27.2026 82.7725 25.4727 82.7383 cv23.2017 82.7021 li23.2017 90.3242 lif43.9556 91.1855 mo43.9556 92.627 43.9556 93.8135 44.0308 94.4443 cv44.0757 94.8799 44.166 95.21 44.6157 95.2695 cv44.8257 95.2998 45.1567 95.3301 45.292 95.3301 cv45.3818 95.3301 45.4116 95.375 45.4116 95.4199 cv45.4116 95.4961 45.3369 95.54 45.1719 95.54 cv44.3457 95.54 43.3999 95.4961 43.3247 95.4961 cv43.25 95.4961 42.3037 95.54 41.8525 95.54 cv41.688 95.54 41.6128 95.5098 41.6128 95.4199 cv41.6128 95.375 41.6426 95.3301 41.7329 95.3301 cv41.8677 95.3301 42.0488 95.2998 42.1836 95.2695 cv42.4839 95.21 42.5586 94.8799 42.6187 94.4443 cv42.6938 93.8135 42.6938 92.627 42.6938 91.1855 cv42.6938 89.6084 li42.6938 89.5488 42.6489 89.5186 42.604 89.5186 cv36.2368 89.5186 li36.1919 89.5186 36.147 89.5342 36.147 89.6084 cv36.147 91.1855 li36.147 92.627 36.147 93.8135 36.2217 94.4443 cv36.2666 94.8799 36.3569 95.21 36.8076 95.2695 cv37.0176 95.2998 37.3477 95.3301 37.4829 95.3301 cv37.5728 95.3301 37.6025 95.375 37.6025 95.4199 cv37.6025 95.4961 37.5288 95.54 37.3628 95.54 cv36.5366 95.54 35.5908 95.4961 35.5156 95.4961 cv35.4409 95.4961 34.4946 95.54 34.0449 95.54 cv33.8789 95.54 33.8047 95.5098 33.8047 95.4199 cv33.8047 95.375 33.834 95.3301 33.9248 95.3301 cv34.0586 95.3301 34.2388 95.2998 34.375 95.2695 cv34.6748 95.21 34.75 94.8799 34.8096 94.4443 cv34.8857 93.8135 34.8857 92.627 34.8857 91.1855 cv34.8857 88.542 li34.8857 86.2002 34.8857 85.7803 34.855 85.2988 cv34.8247 84.7881 34.7046 84.5479 34.21 84.4424 cv34.0898 84.4141 33.834 84.3975 33.6987 84.3975 cv33.6387 84.3975 33.5786 84.3682 33.5786 84.3076 cv33.5786 84.2178 33.6538 84.1875 33.8188 84.1875 cv34.4946 84.1875 35.4409 84.2324 35.5156 84.2324 cv35.5908 84.2324 36.5366 84.1875 36.9878 84.1875 cv37.1528 84.1875 37.2275 84.2178 37.2275 84.3076 cv37.2275 84.3682 37.168 84.3975 37.1079 84.3975 cv37.0029 84.3975 36.9126 84.4141 36.7329 84.4424 cv36.3267 84.5176 36.2065 84.7734 36.1768 85.2988 cv36.147 85.7803 36.147 86.2002 36.147 88.542 cv36.147 88.8574 li36.147 88.9326 36.1919 88.9492 36.2368 88.9492 cv42.604 88.9492 li42.6489 88.9492 42.6938 88.9326 42.6938 88.8574 cv42.6938 88.542 li42.6938 86.2002 42.6938 85.7803 42.6636 85.2988 cv42.6338 84.7881 42.5137 84.5479 42.0176 84.4424 cv41.8979 84.4141 41.6426 84.3975 41.5078 84.3975 cv41.4478 84.3975 41.3877 84.3682 41.3877 84.3076 cv41.3877 84.2178 41.4629 84.1875 41.6279 84.1875 cv42.3037 84.1875 43.25 84.2324 43.3247 84.2324 cv43.3999 84.2324 44.3457 84.1875 44.7969 84.1875 cv44.9619 84.1875 45.0366 84.2178 45.0366 84.3076 cv45.0366 84.3682 44.9766 84.3975 44.917 84.3975 cv44.812 84.3975 44.7217 84.4141 44.541 84.4424 cv44.1357 84.5176 44.0156 84.7734 43.9858 85.2988 cv43.9556 85.7803 43.9556 86.2002 43.9556 88.542 cv43.9556 91.1855 lif52.3047 88.542 mo52.3047 86.2002 52.3047 85.7803 52.2749 85.2988 cv52.2446 84.7881 52.125 84.5479 51.6289 84.4424 cv51.5088 84.4141 51.2539 84.3975 51.1177 84.3975 cv51.0576 84.3975 50.9976 84.3682 50.9976 84.3076 cv50.9976 84.2178 51.0728 84.1875 51.2388 84.1875 cv51.9136 84.1875 52.8608 84.2324 52.9355 84.2324 cv53.041 84.2324 56.0288 84.2324 56.3735 84.2178 cv56.6597 84.2031 56.8999 84.1729 57.0195 84.1426 cv57.0957 84.127 57.1558 84.0674 57.23 84.0674 cv57.2759 84.0674 57.2896 84.127 57.2896 84.2031 cv57.2896 84.3076 57.2158 84.4893 57.1699 84.9092 cv57.1558 85.0586 57.125 85.7188 57.0957 85.8994 cv57.0796 85.9746 57.0498 86.0645 56.9897 86.0645 cv56.8999 86.0645 56.8696 85.9902 56.8696 85.8701 cv56.8696 85.7646 56.855 85.5088 56.7798 85.3301 cv56.6748 85.0889 56.5249 84.9092 55.7139 84.8184 cv55.458 84.7881 53.8218 84.7734 53.6567 84.7734 cv53.5967 84.7734 53.5659 84.8184 53.5659 84.9229 cv53.5659 89.0684 li53.5659 89.1729 53.5806 89.2178 53.6567 89.2178 cv53.8516 89.2178 55.6987 89.2178 56.0439 89.1885 cv56.4048 89.1592 56.6147 89.1279 56.75 88.9775 cv56.855 88.8574 56.9146 88.7832 56.9746 88.7832 cv57.0195 88.7832 57.0498 88.8125 57.0498 88.9023 cv57.0498 88.9941 56.9746 89.248 56.9297 89.7451 cv56.8999 90.0439 56.8696 90.5996 56.8696 90.7051 cv56.8696 90.8262 56.8696 90.9912 56.7646 90.9912 cv56.6899 90.9912 56.6597 90.9297 56.6597 90.8545 cv56.6597 90.7051 56.6597 90.5547 56.5996 90.3594 cv56.5396 90.1494 56.4048 89.8936 55.8188 89.834 cv55.4126 89.7891 53.9268 89.7588 53.6719 89.7588 cv53.5967 89.7588 53.5659 89.8037 53.5659 89.8652 cv53.5659 91.1855 li53.5659 91.6973 53.5518 93.4375 53.5659 93.7529 cv53.6118 94.7891 53.8369 94.9844 55.3076 94.9844 cv55.6987 94.9844 56.3599 94.9844 56.75 94.8193 cv57.1396 94.6553 57.3208 94.3535 57.4258 93.7393 cv57.4556 93.5742 57.4858 93.5127 57.5605 93.5127 cv57.6509 93.5127 57.6509 93.6328 57.6509 93.7393 cv57.6509 93.8584 57.5308 94.8799 57.4556 95.1943 cv57.3506 95.585 57.23 95.585 56.6445 95.585 cv54.377 95.585 53.3706 95.4961 52.9355 95.4961 cv52.8608 95.4961 51.9136 95.54 51.4639 95.54 cv51.2988 95.54 51.2236 95.5098 51.2236 95.4199 cv51.2236 95.375 51.2539 95.3301 51.3438 95.3301 cv51.479 95.3301 51.6587 95.2998 51.7939 95.2695 cv52.0947 95.21 52.1699 94.8799 52.23 94.4443 cv52.3047 93.8135 52.3047 92.627 52.3047 91.1855 cv52.3047 88.542 lif86.2949 93.2246 mo86.3662 93.873 86.4932 94.8828 87.2666 95.1348 cv87.79 95.2969 88.2588 95.2969 88.4375 95.2969 cv88.5283 95.2969 88.583 95.3145 88.583 95.3867 cv88.583 95.4961 88.4209 95.5488 88.2051 95.5488 cv87.8076 95.5488 85.8613 95.4961 85.1943 95.4414 cv84.7813 95.4063 84.6895 95.3506 84.6895 95.2607 cv84.6895 95.1885 84.7256 95.1523 84.8164 95.1348 cv84.9072 95.1172 84.9248 94.8105 84.8877 94.4863 cv84.0234 85.1875 li83.9688 85.1875 li79.5537 94.5576 li79.1768 95.3506 79.1221 95.5127 78.96 95.5127 cv78.834 95.5127 78.7441 95.333 78.4004 94.6846 cv77.9326 93.8008 76.3838 90.6836 76.293 90.5039 cv76.1309 90.1787 74.1123 85.8545 73.9141 85.3691 cv73.8428 85.3691 li73.1221 93.7295 li73.1035 94.0176 73.1035 94.3418 73.1035 94.6484 cv73.1035 94.9189 73.3018 95.1523 73.5713 95.207 cv73.8789 95.2803 74.1484 95.2969 74.2568 95.2969 cv74.3291 95.2969 74.4004 95.333 74.4004 95.3867 cv74.4004 95.5127 74.293 95.5488 74.0771 95.5488 cv73.4102 95.5488 72.5449 95.4961 72.4004 95.4961 cv72.2393 95.4961 71.374 95.5488 70.8867 95.5488 cv70.7065 95.5488 70.5806 95.5127 70.5806 95.3867 cv70.5806 95.333 70.6709 95.2969 70.7607 95.2969 cv70.9048 95.2969 71.0313 95.2969 71.3018 95.2441 cv71.8955 95.1348 71.9502 94.4316 72.0215 93.7471 cv73.3193 81.998 li73.3555 81.7998 73.4102 81.6738 73.5176 81.6738 cv73.626 81.6738 73.6982 81.7471 73.7881 81.9443 cv79.3018 93.2783 li84.5996 81.9619 li84.6729 81.7998 84.7451 81.6738 84.8711 81.6738 cv84.9971 81.6738 85.0508 81.8174 85.0869 82.1611 cv86.2949 93.2246 lif96.5449 91.6504 mo96.5449 90.8398 96.3936 90.5098 96.1992 90.0752 cv96.0938 89.834 94.082 86.5313 93.5557 85.749 cv93.1807 85.1934 92.8047 84.8184 92.5352 84.6377 cv92.3096 84.4893 92.0244 84.3975 91.8887 84.3975 cv91.8135 84.3975 91.7393 84.3682 91.7393 84.293 cv91.7393 84.2324 91.7998 84.1875 91.9336 84.1875 cv92.2188 84.1875 93.3457 84.2324 93.4219 84.2324 cv93.5254 84.2324 94.0967 84.1875 94.6816 84.1875 cv94.8467 84.1875 94.8779 84.2324 94.8779 84.293 cv94.8779 84.3525 94.7881 84.3682 94.6523 84.4277 cv94.5332 84.4893 94.458 84.5791 94.458 84.6992 cv94.458 84.8779 94.5332 85.0586 94.6523 85.2842 cv94.8926 85.7188 97.1445 89.5938 97.416 90.0303 cv97.7012 89.3984 99.6074 86.1094 99.9092 85.6152 cv100.103 85.2988 100.164 85.043 100.164 84.8486 cv100.164 84.6377 100.103 84.4727 99.9238 84.4277 cv99.7891 84.3828 99.6982 84.3525 99.6982 84.2773 cv99.6982 84.2178 99.7891 84.1875 99.9375 84.1875 cv100.329 84.1875 100.809 84.2324 100.929 84.2324 cv101.019 84.2324 102.101 84.1875 102.386 84.1875 cv102.491 84.1875 102.582 84.2178 102.582 84.2773 cv102.582 84.3525 102.507 84.3975 102.386 84.3975 cv102.221 84.3975 101.935 84.458 101.694 84.6084 cv101.395 84.7881 101.229 84.9688 100.898 85.374 cv100.403 85.9746 98.3018 89.5029 98.0313 90.1494 cv97.8057 90.6895 97.8057 91.1563 97.8057 91.6504 cv97.8057 92.9424 li97.8057 93.1826 97.8057 93.8135 97.8506 94.4443 cv97.8818 94.8799 98.0156 95.21 98.4668 95.2695 cv98.6768 95.2998 99.0078 95.3301 99.1416 95.3301 cv99.2324 95.3301 99.2617 95.375 99.2617 95.4199 cv99.2617 95.4961 99.1865 95.54 99.0215 95.54 cv98.1963 95.54 97.251 95.4961 97.1758 95.4961 cv97.0996 95.4961 96.1533 95.54 95.7041 95.54 cv95.5391 95.54 95.4639 95.5098 95.4639 95.4199 cv95.4639 95.375 95.4941 95.3301 95.584 95.3301 cv95.7178 95.3301 95.8984 95.2998 96.0342 95.2695 cv96.335 95.21 96.4688 94.8799 96.5 94.4443 cv96.5449 93.8135 96.5449 93.1826 96.5449 92.9424 cv96.5449 91.6504 lif107.702 88.542 mo107.702 86.2002 107.702 85.7803 107.673 85.2988 cv107.642 84.7881 107.521 84.5479 107.025 84.4424 cv106.906 84.4141 106.65 84.3975 106.515 84.3975 cv106.456 84.3975 106.395 84.3682 106.395 84.3076 cv106.395 84.2178 106.47 84.1875 106.636 84.1875 cv107.311 84.1875 108.258 84.2324 108.333 84.2324 cv108.438 84.2324 111.426 84.2324 111.771 84.2178 cv112.057 84.2031 112.298 84.1729 112.418 84.1426 cv112.493 84.127 112.552 84.0674 112.628 84.0674 cv112.673 84.0674 112.688 84.127 112.688 84.2031 cv112.688 84.3076 112.612 84.4893 112.566 84.9092 cv112.552 85.0586 112.521 85.7188 112.493 85.8994 cv112.477 85.9746 112.446 86.0645 112.387 86.0645 cv112.298 86.0645 112.267 85.9902 112.267 85.8701 cv112.267 85.7646 112.253 85.5088 112.177 85.3301 cv112.071 85.0889 111.922 84.9092 111.11 84.8184 cv110.855 84.7881 109.218 84.7734 109.053 84.7734 cv108.994 84.7734 108.964 84.8184 108.964 84.9229 cv108.964 89.0684 li108.964 89.1729 108.978 89.2178 109.053 89.2178 cv109.249 89.2178 111.096 89.2178 111.44 89.1885 cv111.802 89.1592 112.012 89.1279 112.146 88.9775 cv112.253 88.8574 112.312 88.7832 112.373 88.7832 cv112.418 88.7832 112.446 88.8125 112.446 88.9023 cv112.446 88.9941 112.373 89.248 112.327 89.7451 cv112.298 90.0439 112.267 90.5996 112.267 90.7051 cv112.267 90.8262 112.267 90.9912 112.162 90.9912 cv112.087 90.9912 112.057 90.9297 112.057 90.8545 cv112.057 90.7051 112.057 90.5547 111.997 90.3594 cv111.937 90.1494 111.802 89.8936 111.217 89.834 cv110.81 89.7891 109.324 89.7588 109.068 89.7588 cv108.994 89.7588 108.964 89.8037 108.964 89.8652 cv108.964 91.1855 li108.964 91.6973 108.949 93.4375 108.964 93.7529 cv109.009 94.7891 109.233 94.9844 110.706 94.9844 cv111.096 94.9844 111.757 94.9844 112.146 94.8193 cv112.538 94.6553 112.718 94.3535 112.823 93.7393 cv112.853 93.5742 112.883 93.5127 112.958 93.5127 cv113.049 93.5127 113.049 93.6328 113.049 93.7393 cv113.049 93.8584 112.928 94.8799 112.853 95.1943 cv112.748 95.585 112.628 95.585 112.042 95.585 cv109.773 95.585 108.768 95.4961 108.333 95.4961 cv108.302 95.4961 108.048 95.5098 107.731 95.5098 cv107.432 95.5254 107.087 95.54 106.86 95.54 cv106.695 95.54 106.621 95.5098 106.621 95.4199 cv106.621 95.375 106.65 95.3301 106.741 95.3301 cv106.877 95.3301 107.056 95.2998 107.19 95.2695 cv107.492 95.21 107.566 94.8799 107.627 94.4443 cv107.702 93.8135 107.702 92.627 107.702 91.1855 cv107.702 88.542 lif119.866 88.542 mo119.866 86.2002 119.866 85.7803 119.836 85.2988 cv119.805 84.7881 119.685 84.5479 119.189 84.4424 cv119.069 84.4141 118.813 84.3975 118.679 84.3975 cv118.619 84.3975 118.559 84.3682 118.559 84.3076 cv118.559 84.2178 118.635 84.1875 118.8 84.1875 cv119.475 84.1875 120.422 84.2324 120.497 84.2324 cv120.662 84.2324 121.802 84.1875 122.268 84.1875 cv123.215 84.1875 124.22 84.2773 125.016 84.8486 cv125.391 85.1191 126.052 85.8545 126.052 86.8906 cv126.052 88.002 125.587 89.1143 124.234 90.3594 cv125.467 91.9365 126.487 93.2725 127.358 94.2051 cv128.17 95.0596 128.814 95.2246 129.19 95.2861 cv129.476 95.3301 129.686 95.3301 129.776 95.3301 cv129.852 95.3301 129.912 95.375 129.912 95.4199 cv129.912 95.5098 129.821 95.54 129.552 95.54 cv128.484 95.54 li127.644 95.54 127.269 95.4648 126.879 95.2549 cv126.232 94.9102 125.707 94.1738 124.851 93.0479 cv124.22 92.2217 123.514 91.2148 123.215 90.8262 cv123.153 90.7646 123.108 90.7344 123.019 90.7344 cv121.173 90.7051 li121.097 90.7051 121.066 90.75 121.066 90.8262 cv121.066 91.1855 li121.066 92.627 121.066 93.8135 121.142 94.4443 cv121.187 94.8799 121.276 95.21 121.727 95.2695 cv121.938 95.2998 122.268 95.3301 122.402 95.3301 cv122.494 95.3301 122.522 95.375 122.522 95.4199 cv122.522 95.4961 122.449 95.54 122.283 95.54 cv121.458 95.54 120.511 95.4961 120.436 95.4961 cv120.422 95.4961 119.475 95.54 119.024 95.54 cv118.858 95.54 118.785 95.5098 118.785 95.4199 cv118.785 95.375 118.813 95.3301 118.904 95.3301 cv119.04 95.3301 119.219 95.2998 119.354 95.2695 cv119.654 95.21 119.729 94.8799 119.791 94.4443 cv119.866 93.8135 119.866 92.627 119.866 91.1855 cv119.866 88.542 licp121.066 89.8486 mo121.066 89.9238 121.097 89.9844 121.173 90.0303 cv121.396 90.1641 122.089 90.2695 122.749 90.2695 cv123.108 90.2695 123.529 90.2246 123.875 89.9844 cv124.4 89.624 124.791 88.8125 124.791 87.6709 cv124.791 85.7939 123.8 84.668 122.192 84.668 cv121.743 84.668 121.338 84.7129 121.187 84.7578 cv121.111 84.7881 121.066 84.8486 121.066 84.9385 cv121.066 89.8486 lif1.56787 108.672 mo1.56787 105.861 1.56787 105.356 1.53076 104.78 cv1.49463 104.167 1.35059 103.879 0.756836 103.753 cv0.612793 103.717 0.305664 103.699 0.143555 103.699 cv0.0717773 103.699 0 103.663 0 103.591 cv0 103.482 0.0898438 103.447 0.287598 103.447 cv1.09863 103.447 2.23389 103.5 2.32471 103.5 cv2.68457 103.5 6.34277 103.5 6.75781 103.482 cv7.09961 103.464 7.3877 103.464 7.55078 103.411 cv7.65771 103.374 7.73096 103.302 7.80273 103.302 cv7.875 103.302 7.91064 103.374 7.91064 103.464 cv7.91064 103.591 7.8208 103.807 7.76563 104.312 cv7.74756 104.492 7.71289 105.285 7.67578 105.501 cv7.65771 105.591 7.62158 105.7 7.53271 105.7 cv7.44189 105.7 7.40576 105.608 7.40576 105.482 cv7.40576 105.338 7.35156 105.033 7.24365 104.798 cv7.13574 104.563 6.72168 104.24 6.01855 104.221 cv3.24268 104.167 li3.13477 104.167 3.08057 104.221 3.08057 104.366 cv3.08057 109.339 li3.08057 109.448 3.09863 109.501 3.20654 109.501 cv5.51367 109.483 li5.8208 109.483 6.07275 109.483 6.32471 109.465 cv6.75781 109.429 6.9917 109.375 7.15381 109.141 cv7.22559 109.051 7.27979 108.96 7.35156 108.96 cv7.42383 108.96 7.44189 109.015 7.44189 109.104 cv7.44189 109.213 7.35156 109.519 7.29785 110.114 cv7.26172 110.474 7.22559 111.195 7.22559 111.322 cv7.22559 111.483 7.22559 111.664 7.09961 111.664 cv7.00977 111.664 6.97363 111.592 6.97363 111.501 cv6.95557 111.322 6.93799 111.068 6.86572 110.853 cv6.77588 110.601 6.48682 110.275 5.92871 110.205 cv5.47754 110.149 3.51367 110.149 3.20654 110.149 cv3.11768 110.149 3.08057 110.186 3.08057 110.312 cv3.08057 111.844 li3.08057 113.574 3.08057 114.997 3.17188 115.754 cv3.22461 116.276 3.33398 116.673 3.87354 116.746 cv4.12695 116.782 4.52295 116.817 4.68457 116.817 cv4.79297 116.817 4.82861 116.872 4.82861 116.926 cv4.82861 117.016 4.73877 117.069 4.54102 117.069 cv3.5498 117.069 2.41455 117.016 2.32471 117.016 cv2.23486 117.016 1.09863 117.069 0.557617 117.069 cv0.359863 117.069 0.269531 117.034 0.269531 116.926 cv0.269531 116.872 0.305664 116.817 0.413574 116.817 cv0.575684 116.817 0.792969 116.782 0.95459 116.746 cv1.31494 116.673 1.40576 116.276 1.47656 115.754 cv1.56787 114.997 1.56787 113.574 1.56787 111.844 cv1.56787 108.672 lif19.5098 105.497 mo22.8887 105.497 25.4106 107.63 25.4106 111.129 cv25.4106 114.493 23.0386 117.271 19.4199 117.271 cv15.3047 117.271 13.5928 114.073 13.5928 111.37 cv13.5928 108.937 15.3647 105.497 19.5098 105.497 cvcp19.8247 116.701 mo21.1758 116.701 23.9688 115.919 23.9688 111.549 cv23.9688 107.945 21.7769 106.008 19.4048 106.008 cv16.897 106.008 15.0195 107.661 15.0195 110.949 cv15.0195 114.448 17.1216 116.701 19.8247 116.701 cvf31.1777 110.063 mo31.1777 107.72 31.1777 107.3 31.1479 106.819 cv31.1177 106.309 30.9976 106.068 30.502 105.963 cv30.3818 105.933 30.127 105.918 29.9907 105.918 cv29.9307 105.918 29.8706 105.888 29.8706 105.829 cv29.8706 105.739 29.9468 105.708 30.1118 105.708 cv30.7866 105.708 31.7026 105.753 31.8389 105.753 cv31.9736 105.753 32.875 105.708 33.3247 105.708 cv33.4907 105.708 33.5659 105.739 33.5659 105.829 cv33.5659 105.888 33.5049 105.918 33.4458 105.918 cv33.3398 105.918 33.25 105.933 33.0698 105.963 cv32.6636 106.023 32.5439 106.293 32.5137 106.819 cv32.4839 107.3 32.4839 107.72 32.4839 110.063 cv32.4839 112.165 li32.4839 114.328 32.9648 115.259 33.6108 115.874 cv34.3467 116.564 35.022 116.701 35.8779 116.701 cv36.7939 116.701 37.6948 116.265 38.2358 115.62 cv38.9268 114.763 39.1069 113.486 39.1069 111.939 cv39.1069 110.063 li39.1069 107.72 39.1069 107.3 39.0757 106.819 cv39.0469 106.309 38.9268 106.068 38.4307 105.963 cv38.3105 105.933 38.0547 105.918 37.9199 105.918 cv37.8599 105.918 37.7998 105.888 37.7998 105.829 cv37.7998 105.739 37.875 105.708 38.0396 105.708 cv38.7158 105.708 39.542 105.753 39.6318 105.753 cv39.7368 105.753 40.4429 105.708 40.8936 105.708 cv41.0586 105.708 41.1338 105.739 41.1338 105.829 cv41.1338 105.888 41.0737 105.918 41.0137 105.918 cv40.9087 105.918 40.8188 105.918 40.6387 105.963 cv40.2329 106.038 40.1128 106.293 40.083 106.819 cv40.0527 107.3 40.0527 107.72 40.0527 110.063 cv40.0527 111.669 li40.0527 113.291 39.8716 115.094 38.6709 116.16 cv37.5898 117.121 36.4639 117.271 35.5776 117.271 cv35.0669 117.271 33.5508 117.211 32.4839 116.205 cv31.7476 115.499 31.1777 114.448 31.1777 112.255 cv31.1777 110.063 lif47.9219 115.019 mo47.9507 116.25 48.1016 116.64 48.5068 116.76 cv48.792 116.835 49.1226 116.851 49.2578 116.851 cv49.333 116.851 49.3779 116.88 49.3779 116.94 cv49.3779 117.031 49.2876 117.061 49.1079 117.061 cv48.252 117.061 47.6509 117.016 47.5156 117.016 cv47.3809 117.016 46.75 117.061 46.0747 117.061 cv45.9238 117.061 45.834 117.046 45.834 116.94 cv45.834 116.88 45.8789 116.851 45.9536 116.851 cv46.0747 116.851 46.3447 116.835 46.5698 116.76 cv46.9458 116.656 47.0195 116.22 47.0195 114.853 cv47.0347 106.248 li47.0347 105.664 47.0796 105.497 47.1997 105.497 cv47.3208 105.497 47.5757 105.829 47.7256 105.979 cv47.9507 106.233 50.189 108.651 52.502 111.129 cv53.9878 112.721 55.625 114.553 56.106 115.048 cv55.9399 107.42 li55.9258 106.443 55.8198 106.114 55.355 105.994 cv55.084 105.933 54.7388 105.918 54.6187 105.918 cv54.5137 105.918 54.4985 105.873 54.4985 105.813 cv54.4985 105.723 54.6187 105.708 54.7988 105.708 cv55.4746 105.708 56.1958 105.753 56.3608 105.753 cv56.5259 105.753 57.022 105.708 57.6377 105.708 cv57.8027 105.708 57.9077 105.723 57.9077 105.813 cv57.9077 105.873 57.8467 105.918 57.7427 105.918 cv57.667 105.918 57.562 105.918 57.3818 105.963 cv56.8867 106.068 56.8257 106.398 56.8257 107.3 cv56.7959 116.1 li56.7959 117.091 56.7656 117.166 56.6606 117.166 cv56.541 117.166 56.3608 117 55.5649 116.205 cv55.3999 116.055 53.2378 113.847 51.646 112.135 cv49.9038 110.258 48.2065 108.367 47.7256 107.826 cv47.9219 115.019 lif64.7397 110.063 mo64.7397 107.72 64.7397 107.3 64.7109 106.819 cv64.6797 106.309 64.5596 106.068 64.0649 105.963 cv63.9448 105.933 63.6899 105.918 63.5537 105.918 cv63.4937 105.918 63.4336 105.888 63.4336 105.829 cv63.4336 105.739 63.5098 105.708 63.6748 105.708 cv64.3496 105.708 65.2959 105.753 65.3706 105.753 cv65.5518 105.753 66.4976 105.708 67.3989 105.708 cv68.8848 105.708 71.6338 105.573 73.4199 107.42 cv74.1719 108.201 74.877 109.448 74.877 111.234 cv74.877 113.126 74.0957 114.583 73.2549 115.469 cv72.6094 116.145 71.2578 117.195 68.7046 117.195 cv67.4136 117.195 65.522 117.016 65.3706 117.016 cv65.2959 117.016 64.3496 117.061 63.8999 117.061 cv63.7349 117.061 63.6587 117.031 63.6587 116.94 cv63.6587 116.896 63.6899 116.851 63.7798 116.851 cv63.9146 116.851 64.0947 116.82 64.23 116.79 cv64.5308 116.73 64.606 116.399 64.666 115.964 cv64.7397 115.334 64.7397 114.147 64.7397 112.706 cv64.7397 110.063 licp66.002 111.685 mo66.002 113.276 66.0166 114.659 66.0317 114.943 cv66.0469 115.318 66.0767 115.919 66.1978 116.084 cv66.3916 116.371 66.9775 116.685 68.75 116.685 cv70.147 116.685 71.4375 116.175 72.3242 115.288 cv73.1045 114.522 73.5254 113.081 73.5254 111.7 cv73.5254 109.792 72.6992 108.561 72.084 107.915 cv70.6719 106.429 68.96 106.219 67.1738 106.219 cv66.8726 106.219 66.3179 106.264 66.1978 106.324 cv66.062 106.384 66.0166 106.459 66.0166 106.624 cv66.002 107.135 66.002 108.666 66.002 109.823 cv66.002 111.685 lif83.6768 106.083 mo83.8564 105.588 83.917 105.497 84.0078 105.497 cv84.0967 105.497 84.1572 105.573 84.3379 106.038 cv84.5625 106.608 86.9209 112.811 87.8369 115.094 cv88.377 116.43 88.8115 116.67 89.1279 116.76 cv89.3525 116.835 89.5791 116.851 89.7275 116.851 cv89.8184 116.851 89.8789 116.866 89.8789 116.94 cv89.8789 117.031 89.7441 117.061 89.5791 117.061 cv89.3525 117.061 88.2568 117.061 87.2197 117.031 cv86.9346 117.016 86.7695 117.016 86.7695 116.926 cv86.7695 116.866 86.8145 116.835 86.876 116.82 cv86.9658 116.79 87.0547 116.656 86.9658 116.415 cv85.5684 112.721 li85.5391 112.661 85.5088 112.631 85.4326 112.631 cv82.2051 112.631 li82.1299 112.631 82.085 112.676 82.0547 112.751 cv81.1533 115.409 li81.0186 115.785 80.9434 116.145 80.9434 116.415 cv80.9434 116.715 81.2598 116.851 81.5137 116.851 cv81.665 116.851 li81.7686 116.851 81.8145 116.88 81.8145 116.94 cv81.8145 117.031 81.7236 117.061 81.5898 117.061 cv81.2285 117.061 80.584 117.016 80.4189 117.016 cv80.2529 117.016 79.4268 117.061 78.7207 117.061 cv78.5254 117.061 78.4355 117.031 78.4355 116.94 cv78.4355 116.88 78.4961 116.851 78.5703 116.851 cv78.6768 116.851 78.8857 116.835 79.0068 116.82 cv79.6963 116.73 79.998 116.16 80.2676 115.409 cv83.6768 106.083 licp85.2393 112.09 mo85.3125 112.09 85.3125 112.045 85.2988 111.984 cv83.8721 107.931 li83.7969 107.706 83.7207 107.706 83.6465 107.931 cv82.3252 111.984 li82.2959 112.06 82.3252 112.09 82.3711 112.09 cv85.2393 112.09 lif98.2275 112.706 mo98.2275 114.147 98.2275 115.334 98.3027 115.964 cv98.3477 116.399 98.4375 116.73 98.8887 116.79 cv99.0986 116.82 99.4287 116.851 99.5635 116.851 cv99.6543 116.851 99.6836 116.896 99.6836 116.94 cv99.6836 117.016 99.6094 117.061 99.4434 117.061 cv98.6191 117.061 97.6729 117.016 97.5967 117.016 cv97.5215 117.016 96.5762 117.061 96.126 117.061 cv95.9609 117.061 95.8857 117.031 95.8857 116.94 cv95.8857 116.896 95.916 116.851 96.0059 116.851 cv96.1396 116.851 96.3203 116.82 96.4561 116.79 cv96.7568 116.73 96.832 116.399 96.8906 115.964 cv96.9668 115.334 96.9668 114.147 96.9668 112.706 cv96.9668 106.354 li94.7441 106.384 li93.8125 106.398 93.4531 106.504 93.2129 106.865 cv93.0479 107.12 93.0029 107.225 92.958 107.33 cv92.9121 107.45 92.8672 107.479 92.8066 107.479 cv92.7617 107.479 92.7314 107.435 92.7314 107.345 cv92.7314 107.194 93.0322 105.903 93.0615 105.784 cv93.0928 105.692 93.1514 105.497 93.2129 105.497 cv93.3174 105.497 93.4678 105.647 93.874 105.678 cv94.3076 105.723 94.8799 105.753 95.0586 105.753 cv100.69 105.753 li101.172 105.753 101.517 105.708 101.758 105.678 cv101.981 105.633 102.118 105.603 102.177 105.603 cv102.253 105.603 102.253 105.692 102.253 105.784 cv102.253 106.233 102.208 107.27 102.208 107.435 cv102.208 107.57 102.163 107.63 102.102 107.63 cv102.026 107.63 101.998 107.585 101.981 107.375 cv101.968 107.209 li101.907 106.759 101.562 106.414 100.12 106.384 cv98.2275 106.354 li98.2275 112.706 lif109.671 112.706 mo109.671 114.147 109.671 115.334 109.746 115.964 cv109.791 116.399 109.882 116.73 110.332 116.79 cv110.542 116.82 110.873 116.851 111.008 116.851 cv111.097 116.851 111.128 116.896 111.128 116.94 cv111.128 117.016 111.052 117.061 110.887 117.061 cv110.061 117.061 109.115 117.016 109.04 117.016 cv108.966 117.016 108.019 117.061 107.568 117.061 cv107.402 117.061 107.329 117.031 107.329 116.94 cv107.329 116.896 107.357 116.851 107.449 116.851 cv107.584 116.851 107.763 116.82 107.898 116.79 cv108.199 116.73 108.273 116.399 108.335 115.964 cv108.41 115.334 108.41 114.147 108.41 112.706 cv108.41 110.063 li108.41 107.72 108.41 107.3 108.38 106.819 cv108.349 106.309 108.199 106.053 107.869 105.979 cv107.704 105.933 107.509 105.918 107.402 105.918 cv107.344 105.918 107.283 105.888 107.283 105.829 cv107.283 105.739 107.357 105.708 107.522 105.708 cv108.019 105.708 108.966 105.753 109.04 105.753 cv109.115 105.753 110.061 105.708 110.511 105.708 cv110.677 105.708 110.753 105.739 110.753 105.829 cv110.753 105.888 110.691 105.918 110.632 105.918 cv110.526 105.918 110.437 105.933 110.257 105.963 cv109.851 106.038 109.73 106.293 109.701 106.819 cv109.671 107.3 109.671 107.72 109.671 110.063 cv109.671 112.706 lif122.225 105.497 mo125.603 105.497 128.127 107.63 128.127 111.129 cv128.127 114.493 125.754 117.271 122.135 117.271 cv118.02 117.271 116.308 114.073 116.308 111.37 cv116.308 108.937 118.08 105.497 122.225 105.497 cvcp122.54 116.701 mo123.891 116.701 126.685 115.919 126.685 111.549 cv126.685 107.945 124.493 106.008 122.12 106.008 cv119.611 106.008 117.734 107.661 117.734 110.949 cv117.734 114.448 119.838 116.701 122.54 116.701 cvf135.17 115.019 mo135.199 116.25 135.349 116.64 135.755 116.76 cv136.041 116.835 136.371 116.851 136.506 116.851 cv136.581 116.851 136.626 116.88 136.626 116.94 cv136.626 117.031 136.536 117.061 136.355 117.061 cv135.5 117.061 134.898 117.016 134.764 117.016 cv134.629 117.016 133.998 117.061 133.321 117.061 cv133.173 117.061 133.082 117.046 133.082 116.94 cv133.082 116.88 133.127 116.851 133.202 116.851 cv133.321 116.851 133.593 116.835 133.817 116.76 cv134.192 116.656 134.268 116.22 134.268 114.853 cv134.283 106.248 li134.283 105.664 134.329 105.497 134.449 105.497 cv134.568 105.497 134.824 105.829 134.974 105.979 cv135.199 106.233 137.437 108.651 139.75 111.129 cv141.235 112.721 142.873 114.553 143.353 115.048 cv143.188 107.42 li143.174 106.443 143.067 106.114 142.602 105.994 cv142.333 105.933 141.986 105.918 141.867 105.918 cv141.761 105.918 141.747 105.873 141.747 105.813 cv141.747 105.723 141.867 105.708 142.047 105.708 cv142.722 105.708 143.443 105.753 143.608 105.753 cv143.773 105.753 144.269 105.708 144.886 105.708 cv145.051 105.708 145.156 105.723 145.156 105.813 cv145.156 105.873 145.095 105.918 144.99 105.918 cv144.916 105.918 144.81 105.918 144.63 105.963 cv144.135 106.068 144.074 106.398 144.074 107.3 cv144.045 116.1 li144.045 117.091 144.014 117.166 143.909 117.166 cv143.789 117.166 143.608 117 142.813 116.205 cv142.647 116.055 140.484 113.847 138.893 112.135 cv137.151 110.258 135.455 108.367 134.974 107.826 cv135.17 115.019 lif%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 12.0.1%%For: (Phil Campbell) (Philip Campbell Design)%%Title: (MF_logo_green.eps)%%CreationDate: 20/3/06 5:46 PM%AI9_DataStream%Gb!R&D0&uCE[J;GJH+Rt9[lQ)XIFX`!H8Oqr^:%KSf4ZACV-T`Dg36:'ZI)HRkG,3Wp]G]?TcYu$/gsZV7($F4^2br6=(YE,SGr]%6fO"W?JN90H$ai._i*86s*>Kih3)r&%_F`UUG'@VDjS5R\:7K<GRDVlWuY!j>jLM5Gg<jK'URhkk?PcJH$fPiqVpYrlatpCMu3DM%mFCU[rND9r3;G%PGC"OWEI)tUIJ0mLO!h`[GHC:hqm.@sI_FdV"odfLr9F78Mm'>0c7e%'F^9L2`t-pKr:`,d%hEeZpV5S06^R]E%pCFabf&Q2AY>9WEmI,N$C)>m8g],1j(U`E)2uh4]&%1]c]4j2EY@X0G>5o2P*4G@Q:]IV%=9&0gT7;@\_r^j7h:]^-mENE(a-3]-%:#qe%G@uNZ+oYZql]8ZE(Z1ju^O"68GJ.&UkJJrrD#SYI!4_2^FY)+sAH0!]Es)4;IQ?HgHF9[N_S;FCfL9uTp"(kE`M28ABbs_H%Fg:f78)!tUK>b?KHZB#PlKmJ]oIs(qES=D:aO@F8QE578E7XsK>c-Pe<DrX(W)U,U-10\+Nq6Gr-r$tpe!0N"-_QBi/hd4rleQL)%c7a)WDXW&hMSHkf(H%c=4a_>HDj>.)3?1i"P2j+pLFMN?hnQq;\GO1gjb&BMjK#$$IrkM\ii7IVg,Qc,"!NY+j.E@@mFg;+(CtX5%gg7\7qYYZ+-i</;n#p)jrHrV:48@XDMjnX's+-sEja(1_PUg4pjZ'*JCZ9=D-19o,NOo7nY?HN`V7=7Xei9*b6f(1!kSIT-b5^;R%jU[\:^TR@%L!#WYdE_O!]?@[3@r0=@lOVBf*r`qLs(g7%!tPnY2`?Y@q/65%hTdqus5k8CnEl;*YM\-*>upUB95Sm147)_YFZ8*g%4F9&g\622SrO7\Lmp>qiJ.4Tjs$FMnl\[o"_4UV<6USZH+lLr`n7r=+p%/r*l`5.sX`['H>u>BC;/9H5:VG"N:o>#W.J5oQ>mb>3%Jm.pcr^<me*jt]gI(A.pQi.tJ:/CEGl05e=ldJf1IX8#41h)GGj&(m6'jph+U%1tVM-?8[r^8?^a_.X20I-LP3g^NY`4R*(qA+.h%T.",;p_,4c:MLb'_Om2SrWX'X6D),lqF<-]$\+nrkp^#S4rChL/1_-$petO7jr1qQY-FsMN83%+CZn"4_YimN>1*amf(r)kL;-Rn%oCE\4<qJ!+LHeYQm'Qce;^2MMJ"d_@LHi2(U(ZEbrM)l\!K>gua4F#F'@p#RG]UN2jr-BPY&UFJ[I!4U)ZCiD@!5;5QlWolXS"++%LHeX/oSrYQ-i+U.U(1dZoS$5Pmi>h34c$\?L7MA8g+[PEMJ0j#Ks.KFY0dRAl;r5JaF-L)DAkTOH1,KRhs5LbVibb-MOLs8_Mq_Y%jaX#^^>&>*d20N$qp'4EFkRXS45G,W_q1H6I&H^=FtEB1^k`toppstQa6M^XIatU8SEGb/iGW_Tg&>1krR1_sIkdtYs42Zi?_er<%s',M?S'(\JrKjk53IBZ:r]<-f0E#hfpYpnLrGVXYoYo"?K(QhNhlBg.pV6CYeG^+Ga4fKJXfKTNdbf1r9AIR0qD)rdV^]s8l,tNJ%St>#lQWpQap="ra71M=YGV/)4]h#'o\#%YA+"sMi8Ii#VM.dG"`rAkbRo,b`K_e?DOerr&e_3N1+]iobW=uX<8!5*$4e7r(`Or"`%IeTd(m8NEDoHfg4ek.rs`JO57;NKfdU%OUNp%smZ7_QN6Y:$m3hkR:e[TcrrXn?HoF`a9*Y?BV]ZeFI6m3Q@kP.-dW"@?niWcs=<%jtJG9_HP>8ciSO5pU)[*7:5g2^Fl]HIpj[hmA56EYB=2]I_]ekUu[C:r/Prt`:=so>d:p+\*W&f])esanLh"qFc7FgN2M-Lg?SXt%e4-YYhU)_F`d#mo<crhaZ)P0$_>4>m!Mbk0YEk!P(\g_*D7*^'hfXWf40R!merd"aemDidr#54FdAT39'n''*f(go$CAlR8)A6do%p!=YV-/2U9mWj1Y^W0CplCeC+NAN/%F7^$so[O7\^XtI^.HZ5%$R^))fW2J7]O9fCPekp\'np'bn:cq$Y/+Epk:NVcXEXUmX+o#4%X&3LGCsN-'M:A-E]>b2JUJ4W3pXQXY2'dVW>=BdR&TML]]<3of0rZegA*kjM2i],REpmCk<JpNnUS-@VA(75OX:K=Hasc61HD5=8%Nm)K:4>VZ2'@$K0[=+eJSMK];3hi1l`ZCk(NOD4k=BDV'D=LW(el8^[cr&/me]@7qGuML;?4T$Y*WnV/`KC:L5?$[VJQr6I,RnAF%JU7aN7%Afeq.pi;#Z3?YCt8O.7T[HZeUE&]esU(=%&Xq]*HFU.V=*`DqW&F-i[]tbbuWI-`2V#\oOX<2\=YK";)bc!)X-Q6=88b0%TT@)GP4k8dU@/-0X7d\*]"B5AaL))q"8"5T@=5d^3-O>OU0=q.]d2_KmoX)S#KDNLc8k&!`TJosT:(b[3NRHg<p54$bOr;@Ldnoo%Z:91-*f+a]2Kqdq2B6eR3Vi3%ec@icOH\4``G3-P4+--nJRT;e*52VGZ";sci-:tu@Y4P)[Yg3s^D">t^I^#cpV\#VB_pg/aL*8<%&H!(2!=WCJ_&Y$q7;J]/EH0>@GM`e">dHCBq?g(]!4=jhj:8O3BmVRun%B'*4?U;Fqoc#O7CP=9`6ZD*GZlDAT5;cCmYragoW)gp%#(;&jUMo["T(S(MC1T\^^aU[-r*Odc4C-_CrK0i^VA"q1<(G1',ifibmsle07;!\"TXB6kiYS_mc)e'pHJs!$<igb3N:M#K]^&l\%Ne*`RNe1TUD)p&Ym4rXQ_#5ga`(:X]V)Z`\-u(FS+J*ZbMAAWV_q1sLU]1//G])Zb?g/gILD#UD3;b>d?I#=ITQS->5<1S=bkOBd%pSFh-E#?DsKP-k54;!Ms"<3VGCiB`1_,F0n`[dT9XY./B,Qd?cio(%ik>\gDYAM"nh/]:M'9aBBUG,0/2$r&(3um$aGpU`_)CF(!%[.+J_#D\\f?Z<T.o4Z\D)l;=+(lt:qc<3luTS,p46&>_kNAWZXCZn^pf)GV71,>],c+h/p,S-r"Sc7\:g&!VJRi"r!NI$1Jgd-=O%o-fbYfd:n]V4jW)L@Y9n4.BTK6BXM,'A<G3.`]T`8[=[BJ9(e]U!o>9,a)*7hl-D8MmtaE52e]g)4<d;G36L'E_u)DUemQTWT7.X%m?P2\\<Z2sn9lhIoESoX%SL+XSVGqoe@uQsF=mRk2NI]53_PgAX<!MJr>['4RKOk<N:lW0"fTU!"`CRJ5C59E6qtYS8lP#\6`!89%+#FmM@P05hC0`,]FKG0/TW:YVn1tUOP"rXrWtlXtMU$-Y+8i4"".IW\H%L3OHCjLciCn"hSn_.WWH^15l-rpA1p#a3APq3B#M4fK%PV9[LoS1(q9B8b2)snOcgg%Dq>rU%W/]1BE(W)1dZ\65!A)u?J>(;lJ:FOchcB8<b3E30HdSZ5u"g"XUi5=h=*Pl8:T@mP`(*d+:%YLm<IL?&O-8+#f+#9TRt,[aBEJ%r3fMUFD2-fJjL]4mQJQh2*71$23tnC:H@k`dd\K.C^M[,c:BMnlgF4)0=-Omrp_?'gMKD85#n%n%7OIgC9uXmf=01Ianu&2`-$/]$"79+LX@KhLef$6?Og0dK_0DZoR;>F/H<=8q*K,G"KgC&!B\6?c-Qa#Fn.-a\9EU76/PcdFm<]%f$QKK4jt>J!,GN-]V9OoiFdMtBeL_\=Gs>uo?<Q/VGd`hKG1>)[H(N)A1)ab^QNJhYDj?8P("NF41Brtjh"h;"Ka6&8#WV4P:q>P%3V(BrFZS3$8BJm5.*Z"_"7%2CL3\#Q5q/Qll."f"S_g$I$9aO,H,BQ]h"]$7DYElmVbnDh/%#Q&8gi$!)<<)Zg0"O!4R(@8)=d2Y%X*ZBjaoS^;FW@5V;2uo=SL@e;Jn?a=cX&++.47W`g6=\.nWQH>qWJ<b"\P-87B=VSWoH3@g*V0sSu<l(:Vm.?U"j=iE=q5s8XrTV%>$d2OVU\sh(S=="KlgogA`'ToU*lH\i[lc]W_]fE):\/akFT*Qq;dh0&nqcoQcln6D$Qm1/'$:;p&o-pB:RXeP4S6fY!tX&Tqtli%@e0>$1UHf,VCe]sf3/-;kV*pH:0gnb*--R4>@ATkA/B1)CZ9,DOhOk>$Ef@5V/]bge2Z=5pmR2u>ITf()qPu`-"cO[dmj='/N/UZ%eW`,>g!&K30Mh.(Pl8is5KFGIA##S+r*!@[jODs9E-^dpZl)^:0cH<o=o;Nlb)TKh?X&l*mTVb'%^804P2&F&>or<p5f\=s3fPJ+%m=A!`/@Es\%%bO-j7rsP1P_+mCF)$lG>3(Q?H8#kaBb[nY/7_1dG@RB4Au07rTNF3:*Q$S\g2s"e5"I/NX)&1p$GdbaY:U>fNrSZ%mF$gA([(P&2e<0%dD%AAon;Us`Z8;nD^Y7%Lj,26D;OT7-eKHN]b(mCCuL,$iYDuud"XRKh9[aJSSt@[.BS[*A<6f>W?eE'o%7LE%f[b6cnST0ZY#C\;h:lC$g!A&2*gBH,8\[E2l#0A46uX+.ZuNcTAb/YA=7<fh<Ss3*d@g;,j0l[s,V!7N%T8edAR>i=5#@2W0)MmI%E:U%'/A"%*#IE%Qb]<++\:`HUbbF!j$u*R^+o`?^3i+E<Hg1ADgMUZ^#q`VM-aON]Z"932@U&<1ab7$nGE)Y`reji:D\:HlJ*h0X%&X%5(d2lZPh-Sq:T\nJ<q9(]5&+AC)KSAOVIX>:7?euoojQO)N-%G[^ebf3lhqd,&J+qL<pU<Y"T"MabF0YW=m,?"@MlVc*\+dYi%),/#?^8TE1QTna]G'nK/mMF3Xp[&tFLORnSm`iLQS3PMa%FG.Jc25\>Mbc;(brGi9mWL8OhV\@CqtBaWWf?K:V`%3N'8lYd3VrN>%+5He^7[SYYP>uk_e&gF`J%As$m>q!<J,IXJqYojHlLK_BZZeW?Sq!\k&,b:1dVjV$B;\gDG8L4)(B*^J+NpC\hqVODhHtJA*$AU\%h*##7?X8'NoDQSGoqu#@H1Ck#h=Z:V6=8RHFE)I#DAZo:SDCj6rSuSe]B>X&14=Xto="&umcTVMgZs%h?ep/%j4V$P%enr&;qCm/%1W]@Vm,mYP7sJe^m&/9Mj_'?"8[-cZqQ;TnOnJ\DQd>9A^\EGU?P!>8nFP2LrR%hJroWoM2_=<EIIuVc>K#d@r*oE$hk"+\m/H/2%=5R7h^T2-]<MnU@N]bDSO7ckp5OoB,^H_"7T`=Y*/c>A>O+4:)5OIIu2nOS=QYH3&6N?<E7gN5pVmf12&k;loB_SR]D>fq+X>B.Z%qrAa35.eD)Ck766qT[F.Jo*6<qkGM^\6kjMI:amGXnCkPVZFN>JZiFf;>O]"OsP?Ya"u`R#ngA!hm:o*Un>$cd*2Mui7cO&i("]p%Z$L5g:A4.*jlK)E-s`DHSS*.2X8Gc.H2ZLP[hg.anS`VYrqZEUVZ-M:b0BB-hn4HKW2K@HT^'YTh:_fe:&Ie#J#IMhj5nhG]8IWY%=a%RVWa_k(ME`/2"s:[b?iHZVpYYpkG'EtqFb>*@>H`(e6.MUQY24M2_!aKcn"stt<O7hC+-ca``Ql`qc,F<<k3D[<Nu)_!#;]]X%DuR?>H?73_&G'PYXV+,=L4@B<I!U6OmJfc$ru]1tr%'0YC]9Z5Dlt]VL[[O=WrG.toO%XjfioIss2l%8l(.E<b[6^#rNE!6?f.JA%m_P;m\(Kl,j8\[u_4*[hBnl3YLL#6+rLa'&T>lBBD/auIH2bQ?0D9aJ^\[oJg""-@qX`l$ma$B"c9'A,nZkmR;mZ;iipqjH5DN7G%RXaFE`H45?oolHKVouO[5CUnbXQ!T2<ds`7'9i:aBCV8%p1,X+H#\3.bV\235#d*kou6Y9\o7@(Z[2JmItGS1>jn0:pNPd:]ZL(Q%5Q0mcp"(8%ou4i%gF<X18&nL+KB)_[DpA.J3Rfock/[N"Ru=bBn#ps6B(!DBc('/=cb!fETMK$0[p1TSG$j-4gg<21]!Bl["2EmB%G<]C"^:j=5_sZ(0bD3D_QWKLaG%+-'m18m[qX!@"pLc]qm(U2^#HQh@HsgTBeX=LjZaXjWRi9*8g&3!7NTpGumDG]&B31G.LGn&R%Dr4hA$^;'?IX?4hd!,'2mc=>amI'^]pCA'aQiD7!W'sJ$;7ued:"?[jh`pIVOR_q1Wg=J!B+Gfj2t4r9\&,tZaX;B)<S@?5ir7!L%[I1a&FYj"X*IRChpCH_-s3H0N%&rUMS\;'sH[g>>rp$Rd=k[>Mh8A(%c2G8\9#'ORf9opYXgS2ric%\ehV$`&S(k9]\%?_:(H8-B%EQK<)ZWl_mSZY1[onU-eha3s:Hfm;J25QBu??7.lnB%]J!'XPp%:Is9e*d+ARGRaW\c(dPmN%7HpWn>.IWbIh2@l)>caEQjOS%K,%0.J8S?/AiQmN:k7s6-B$oSL^$Fn=<.kn?1XGt6ljj\H]U%s=mjcE>H1c5X[#[!7%Hp\*V6dlkA@eSf@J%XpSapUWFmIJqFYn*\KX%?=J]*KqStFLj\BJOl2G\4i6.?0KFOT4D47LQ<e&'O1RC4Ht[>Wjk8DZr;L3L@fnVoJ+Kq!3NVrA#F@i$[*sNt%pFo.j'j"4#-7_A%mD0;<m#k./`pP4?XJ>;e>qYpfd.I"Se*k5(p:$<`ToH8@@J"O7rT2#S+]]\53oe]HgfES5j5'+q`QR"#h8o6XpQmgW5Q,/iR%Js)%\q]see,T=D=[.!lo%dsIWt0X&R=9R.qu,X,"k0THf<9+n`+5FY1jri-I>U_AEq6(_JL?A!q!i"fp@XiFRE&gQ<(HERiBHqfn%Sh9%DN<2W1mN%ZFF3c&(R/%hTNKX?HMmPKk@YB\Fm\(8N!k$Y6k;j5I2'SkESg\+R"A:e./ePW1DcQVcL5Z.S389Ca^]&Sj4g]EX1U_@%aJUTU):JQC!V)N$nCq02F5gj"m13+PF8O1Intu!8a4oqoD#Qd(0ofUj(WZP$[eSC2X,DnFQ#iCIq;o(Meo,bg%X@d=@e\GO']!!Y%Qee9_]XZYNTDaF?SDEPG]"34f$`Yn"]2g8<A_N^2j#?Rs^H?@biUQ=HpM@><H-aeHRf3'UrU*tQn[hD^(LXPV%h(dArc!%+Z`=ui%5%D@YjkoE>\*a'^3h'E?C#:((eF'WbU,T]jh:3B-q\eDZft2GCc.W0ln'?L%BYV-(H#\?0_bG&BrMm>!0CS4_Dnkb9\\-h5^\K+E%lc1)S's;Onq#'RNh1:+QdDbnSmdg35B6SjlVrl%!Pmd?`DVTN?h:&t&s7,(XEX.#]._g8-k@YP(5%AM4NechS:K(C00g9ejT>t3H%JR4lF,n-W@hntTK(S0<ARHB[(4-m\FOmqY*VH#`C8./l$\Sp>#[Jgt`SP##eCN0H8*9WMrllQ[ajk1mHdJ<PZ4)>*fJ,WD24BN[I%ar_MiU<QbB_o68MI9iV_BTol7jO7+!l/R%45`8sRoB?GYa@SEFrc<=`4I^=8Q&N=-ru!3`^nY7nS+"\[a_Gk\kOJK:pA="N)c4B<%c,9!9H(Q<te8\gM@<K<O%Y@L7Yr4b6E]te/In51kaI&Q#6(dNMhjci7[-VQ%T>PKTisrWEFM+F4W6S2/J%YR#P=-)\FtfD5VTATW%]PSbDae,PpJ,.CmNU;JY[L[A`o@p=HMt9:?p:%XelhD_XmG%*%V(7!#8Ul25I/E@2=[%?0p?qqTm,l=4GL+d%"5[YdLZ<<5GP)6F%>'M?O\%D\1jZ!57]<D7T06TQ3+.M`lnN1U]O"X>3F+*rZ);`FP]m]nsbG=gCDQ3S2_jo])%33X=lljsVrr()eS&/)r<ZNEOqtlHC%q)VYtLJ\?Q:`[#NSR;Epa3Uc1>G]1ua3_SR#X>[MpCC?G-@<K@:OA+,:tr!mX?TYVh-6uWe]h_;iSE6a[4,R%'gIAWGOOr0B_l4]%XA^p0Q4L8Se/MYC3A)DSp#@3*qf&B)L^D+'?048@o(-uGr(Km4*p<<Gjh!^0*9ZA[M72:M6GSp8EVJbc%i<T,nFoH:$6L@+\>S_d%5Jl*o.t&%AC?h*?g*[hd<:/pF67nYb5@3M[Dr4O"J;/7@]HW&eg^.oCZ1l@t",D94hV%jsbD5DiGL'>jS\%CdmYBC&oq,l[k>ul"%i6S?A:'8?8>XHb1(c@d?r_:q'T4;b_Di\i*@&X&-\l&"pX35]OhVS4#D242%H?X^cH-k+IaG%>,E;V88>+M8inaXN)ma'4^0"e;^%f)+_-3SpCC]6[6!;4[<Jqrd1Uep/*#k`=&nY0tkR]2.J'l9-rsG<]@4n^FBeCY^3RrAen0/b/;DAY,l)ant&fiT_(s.'$C/&)$`>%3IQ.>DkJD)U<`Sjm5*L]<Sg_>HeBqd+0B]F>U]AHViYoU1fM>JO.%tZaqVnVk0oS;T%+tple['T`&jn\Si.\?a]\Q\$LcrP5GN6<%ok2bp7f=44hg@afrr2'=q!HW'bYrZ@h0jd"o,Qp][JQt\](t;P'Q@FLo$bS.1Gj,ZcN`SGcW7Tepn?-iF2j)@l+@s_5#JMTDE#nN%FZ#di"!3D0+2IgQnbnM]D_LN2T"u$h>s(@^mo&ocjn3h\epFM0.Y1TNGk8l2pRtc7Nt9tU)l7;o+!0&383K%1T3'Nh4o#ncY??q-%:ZtpD[nS*TGa!GImnUOH%a&JNUUa:a^AX/2F`aLdehb%i6VfRTJ(dbJk^_bbTD$%F@rTH4D%@/-R3%Ru.A83bT5o%[e'F!2@GR!V%Z)<X+[C`@:*VKJ(G]stnmTcFEh=IosFMkG?B+J$8U\3iNdddppO;t:Vs7,Yc(%^4aF%BC4rUp]ep&e=nmF)sG)gd?!`,NKgnVqFt%p"K@,IkG.[HkTmZW>6,>YMU=Jah#+[(VA9X7h#0>pcpD#+23&(Z)kOoe[c\!KXVia:VZB"IWmX9:2oUi:V=:6QX':^m-BUO3Sr>0%h9AdPQF-"]#qI_u_PUnDo;n$rb?K[";5]XP8.8/i0%?NUqVCtp]N!-rRL.\'*_WJ_ORU+ZrN+SlK]FnlKVU&_h7e=r+3tmPWN^MK%k1pb\@9EY?dh75s3YoB?;B$-N0u-\%Q&q'9/JK/?2Q,7>?JL@kbRSEPphi5aAoNcXRHcs9A1Ab_42?Z+$;50aKVrNq6^<90"X1mF%O>Z@)<9Jd_LNFN5)/[^?CRmeG/B?4?Yqf,N3:`o+"f'";'s]CSX$YBBV[LSic71(TN-a3X*ka0H;UI><[QlComZonVFr+6(HcAT7%9k7krICf(nL$LSYj-#Q@C7Q"'<-6F&2GeuTH.+Of\m0T2["V(eR8R/>J#Wm9n^\ul)='@;a/'8Rm(]u*#?`4D0&5_/R'9,(iPPjF%V;m04&LB^RD:F-0cE\KEkQ7B1qBN5W,gco@o7k4e@VoMlGKXu4b=p!i74qMmD4<dh>RN'aU;gAne#a1o.RM4^/_8ZW:qMa\E"g_u%eg1Kq@PWM!lB84P&"_:=UtRJa>M"OQW^O+HW&9u0cjHR['eM$4`SM.]$;:JI`aL./\jZmm-JNTsHZag[H3Bb'\iJGkXFFRjZtq1S%<`9--\)U'_)[DW0Ocb#u`*0!V$qj$.+ZY6K+9Am9MLD/(6K5@e95dq3^7#.7?*O:41"RBKR:\bMAmPX4,!oZu@:RmiXR!k\jqV))%J`k_MS?qEI=@!\lV1Gf!r<?jK@&bt#'T^'kJP,4!Fqt]`dUl[D7;rHW9i(sE<)CEre@)9t#dLGqd)(GNS0OZ9iJ(R6+TAZWN]J1^%$5,_\Cg5If<eAS0]oE9B&9.#%quY+LXJ(7*'\HoL`JB)q:FioC3=2rNnBaU_jC#Zl#c;GG`'RVlQ2hY!_OZDQ(o-e!7F7pZA,g&T%-ToaSl*mapLnJXGaNs#/D$aCZQ/`9<QC.G.D>Geadc?q7'fLJ@(LKiU)m0HN.k%rgEo+#plR47keEfLS.lg.30qo)lYQFrM*q<U(%I025SP)B>NV^j$Cl"<jrAMV1i"VmQWR*?=XDJ.4tG/I7VNcO.eEf"81S\P\lNi,lF;.h8NSB*/EB$BkH8VN=cD.99Q9"O([3!";>%TV]S5*)X_qeQ\Q=Y[RIR#8o"kkH#[TDW$`55Fq7Y+JJ@?3s"W.j$lY.CW/=o*@J[`M1Q1>8KuF;&9ZG-`H<j\g\FlQdDAJ1b&:m/%/THaWiL.k&0,HqFA@u`e_\;q_1.(r@cHY!WTKobA?K,ruqPl<FZA@VgA0c68_G"S0k@0uQfokifET$%;S*%3j`sEl(9L?S&kr:am%MWeUTqiC\$#/O7c^J86.o9OJhKGgoNVgp@([n*?)@5$?uYt:ZuF:up%q_`s70$/d=8feleYYK3*kQ&WO9u>3l(4F;'(eEZ+XWpSd%&f'$i.(NHbs1i08)B)%=C!K0WAX[FCi$c+$7:oY7)Wh.?LFNdN`Isdn/fSFfB?3&R-/123M,#d_(a9+kLidb@U4pB3<6,DaJi_Ui%Z^;:(3a-:KWQ[g>PqQ9QM[_+I*346LG>b@qgJT4/!\BEMf1M!E\%NO]+G/SY$q4W(V1tB)duBhW9=V'R!3A@MS*2/c>eFJACa>A2%)krp5L$YW'%+7qR9P,/I\EgZC!\^mWQRM!HF+bgS@O*LR;ZT2=I>"`T:-/?>Kik:*=./_kgk,28F1.X-[PmLNe!Z:u-EM/!I>>=1%'r\>oCAH9j,QsrTdif9J%&$9gOu+\W9B<+W)+0s7#%`5'UB4(-"02+alJ](oMg^pHM$akk#!aFo92*/V4f*9U\rlbOJR(`sl7o7_%InOO%!T0s>&m$eA8fd)ZVmhh*7&7mNc;cp"<7&Pd#le9kKB1ss*@(mR7%"aDG6-0_N>2UT]`iGNqKX8/6#rJuja33@(C8#"eW7;1%aXSSVO5*kbbS1Phb14<BMRrC<9!NM0;ECOlB0^_,5an5H=E3Vc!\U:=Yjj6$jgCU'G(0\Z>XFFUcF-%S4U_-'TBkfVM?*sHK%(sh%;;Xs`#Afkt2gLn"[$?:Jfn(4o@?jTE0uR4q1afG;4n@c=LI%;cP_CT4l*RQpTD^jBWO6ks,porh\?*$'AEt0Chpe[tWZAFa3o?)p%Xh^e`F_YJDM2!RmIKRB#B*+Yc/EB&bHSed?Y>%F>;[!PbDX,Nh`[]%AW7b!a,bm"ZlJZ%`"2ZBUC43qP>n^7_\_(P`PH\Er%CBPe%A;[qd=c"WW[Rd'hU-p0@[<@D,Pu_rMl[lJqfbUdue:P]<i;>D8lYp.)C#*cma?<Iq__S=:eq_!>^i[MLYTW8eAb0]?9TG=*R7,D#%'iRfZ=L_Ar4EAh[\)N3]+A$Jd;Y:T@0AD5ChcFg$;Momg2J:1dFB.%F]SgK<_/R-Mo'!.!)d9d>>%cb$T]&cpc?[SXV^tZe\'i$k%J1a$9KiS6fP$1p0WMui="O4BB"KKon'$tAmD/[uqRk$%sf@5gsAa2c?&>5`lb&VSb(*RN0Nb.$YWrh+M\6t%0JQa<afgKGDpuj`k%Slpl&Bf6hPUs3oB+otF`T\#&5VrUA\fh;Y__%t-6S*BQZ[Q:],4J=!9Tt3IT*;(>3:=f`DWn"nh;(@^SDKGrY^m\-S'Ys79iJTa4%lrV(u'k6JFd7*J\DfFkHLoZZp%";>DJef%:;tZ@>b``#?QkESreq,JSaJDM9',=Q<!;tENPF2Z#8/8@+2ct'=/*(]4k$5mH3b+]E%[/hcD[@#,_L7/3G"DhqHFV8Rl*<6/:$D?"Q,//45k"-fP.#:qqQ.]+_Ja6h85rHaP`lTbiIu'f&2-$?N<,U@4*0l?^OK!@5"<!8k%rK_b!@9B\cF4$U2YH>@&LEhps^9'S">]N?*`=?_TgB)fHP_hBIO9Dr8_9`JX(jHKB*\8M!Bb&>&#-[UGWn!bkL"2'eXZ<a'7+gS5%*3<3F:"-VHd8"4k&r><hC:glcfhpO`rRV^M\>^,j"$U-p0jYOd9qBZgRm@BO#1.lF!39?5/I/6'0f3UUhU(pmBD<SS)nHN%Q[jn4%g]VhXq03]9L_QoNDat:u(XQW#K+P1.:h'd.1Tb7>!sM'K]4+]!DnVTQ]qe,(g34j2),4_9a"tO4"B(:P.P]9CCP$SKrDsDZV`X!3%SC=<K&rT^a+Ih,\aoRuq:R1#MA.)B2MnY$NS#e6F\uBd/C[4m/3Ts"3l`A7e<@O=[T(PZ(6'<"mII3E_8jNhT<!?7DF4Deni0J&n%3(7L;9+ec+ZP6P;f`Z;lKj[C`Z-Y,K25"[;>fR5_D,6*9AE/lZa.V6"\KBDQm)8KHmM.)jT@a\"o%#\?9K]Z38B+OfI"?7eW"]J#%B$=1ec8l7\0&mYJ-Q0k/70hM_o;c=6'&T9&/1\4%9J$j3.Q4!hOcnI->:G;2@tOnM))3#g-.l64P+*g4MlM"<_HOn79c9Z?[XJ=R%.4#>"*,)bu<[K9G@&o=+/Zcrjnk:;5=WoNb;IlD)@>r0?Kgki>'M!)S$<3oQ[THpQ`2_%jPQQiK#@eUt\anO4\df?Hm)`9OHYA^"%(XV8A1.?CE"*F,^b]Pg#pGIrE6Inl^8=1_JBe5\OLB_A]K*J;cZ-F77$pcXLCp^uEh%HJ)+E8u+mmYe;BcHgp/XuM?X>73`\KlSm%8ZJ6a0Tah$rYZ1LeY;StgkQ@qTR3t#64PeZ"YP]2#;@Hnc!kj7Ys,_Zn=k4@DJ8O(ef4hG6B\cGQ^TVg^'HbL!*P./CqCso9;/GK%bs!<tRa!1\Je_cc["&1H;U?18rQH3,`;NOl+9H+W?9HGbRL$.%WMKf$PB#*iabka<-!R[I#d^FfR&6)KV@Bf?_&p6o1q#u?<'YU8%PS3Z:7-c%A&P]<>L?:U+M<;GgQG/B2Z>'BE(mF"7p&N=baQ<<9=-\K-_/uQ:[XZi3'$U]C;6M,S_?T_oeEX'LMK;4Rao,5f,(bCa%No>YQ^#:]3I/D$[#`Uj3aU`FgWh$auDOrd)633L308Y^G$COR\KSu(n$$C#P%;+F,r$)r#O!?=uio6!G-sS@QA@kX+:Ct\rC$G,c%;I8$mYKLhe:biVa-Gnt/&<bWrj<;FQBsP1P.MdWHC?7SMV0Rq3V_YPEY#:?(".5XgZV<PXAqA(b+2R%N!OV4a3eQ/'U1K\7&-(#Q%]4ob*H[R8W!b)#M<aYs^D7N%O[767P#s(nHTWLqr$rU/E9k>:iNh33^=UnWH[)QQC-Kc71OFaLY=+"n*j?1EpAST:_2Mf"<VCq?@%Qu/J$oRnG_Jqt99"Ed[e3_C`GWd]4KF'bSW7K$G(JO.r<p3K=IgT!5d/)sn%/$fp)S1s)X%s:h#Ea5C:j>4s./_dQshc2qW,/g,X%(fGaQR#j;@c#Nc*g(YBFpMrrL\3NNFRmW`4Q>e&qbkI2g[-,Z77tDs^-DZb-5d&IkfG($`YOeI;QFV2fPC_YcH^juXbL:&))%jqG%h3>V,m$t!hd)(]AWD7=j!o:3CHI$&FR$Np4FGslS,@GG]#<UhfTe/05US5r6H"EF=&@.(OH_!di$7slP"pJct#[ENK4YWSUE.;s0%,IJpt+m1Q-'G'gmp?gE`(MC^MAE<0N\Ifn\Il7J.E[!SoTW^s1#g4JsU?IK&-R1NP\0%J98;f*3R(<+j8ET0ecYbhfP.93+Wk\""%=DB4o;6f!rXoK\c<_niarFXt6H!3:\W.U&N4b0JjPjK$kdspRU[QMX03`LalDPF^X/f^Eh'8.?.E8BL%/DjH*(p)KgN8h8:!s5d-%1\,rW6.4Vs2Q:AR4IXk,+I\=[a?(.)P@isFMGU^Y*Y]Sn9\#=f2.^Y#V?p6fJP-*bTibj-0=+>o/tl'#MH60=`&Ot<o1$EKY!&jT%b4^gO.Y^s143ng0=kT!!m_sT$3b5l=XW']@,hF1h?o@M2VZ0bk&Yap;/Cp])]$K.L%OPVaO(;BeFJWE,>Rm-8<lU402r)L@=Z,bL%\lGRb3DZ]C$`tI<b\I&(po;.qff<*&oohDNer`?pPph?#l<4t]WK`Ed)W0Y*.QSG]\>>&ljCG5130i&@Nt.DrUO_VA5Q[Ll36HX4%;h;A>)\UC"9^`$[<_PrIMlIF`Z$d&m%f']a#3,S,>09+/r(*\_lQ!s9qh8]Km\cE180(Fe]*VW[Ad+U4KBEON+0fjR92&*\.iQWY%<5i#1_:a61o-?apE?cT\ClE@TVGrUAe(Ib?a:Kc/9k)=f0e-DFl2meeQtWLUmur*n00'r7@XTfGb%0,jR*M0r(FaE-qdd^i8k=PM%bMp1h>,#(,U9d2P-Fp%HU8+u2Z@"4WCe1QgOPqFOD))Dl;S>2>/o=fH)21T0,N.?ebb#28F[N't63X\rF^8j^d;g\47742]&9Rb>%0Pu=?/,=Md<Nr\cm:m,7c4\kB:T)2=2]kR2j?cL#5_0hV"j("S+Y,N7lHoP;:Caq7eWAN[N^3@tjbSTr(Bg+g!6_[J$E;bQ)El6!%n"N;QRk7i3H-3SM2q%:E"/EEaQCpO4Hdfr,G\IuS&g@$*F`5]?4'=JZ-E"_!/53Q-Ml'Ps-r83#&u3=b)X>+dPDp69A&tC'bJAiT%0XSNO\Y\t\Da:qCM:D,km4*(a\\RDfNm0/aQnK=Df%:JsVm26g#>R2A>%VP2RhqO,g7f2Vn-qZU(rcfT[qO>B!0eh%!ak(/XX[j!%8KZ1]?]%i9fES#@necRopri)cGup$DZX6!JQt)GaT&M?B]7m)Lr]'4\2.LDQk.o"1KDBOc%;H50TkR@GnD^UDene?7P:[bg(\Z'^%9<7UVDd^%rLJs[-Y0&r(K4oqVnCP]:g`M2q9c!+I^:Z.K#tUCWYTc$[DDEYeEsdYMG&!>H]P@DBeI4bgJn,*m"jF$p9aKFIJe[$m%`et^E[Xei(rOP85`.6i(HRoa2=e.=hcSHHO"YJ.BAVA7?X>/GN0[)rMp#L,IcsBW8kgu6O8B<!AZ@s+*eb(@@h,u.7Y\d<?Kq).c%J]<Gt!W]HEZ-+Pt(sb,Z\`upfTG!7i#Yr4R>B9)!)oGsWi0pAE.lar>Xn+qt8Tu8$^agip7pB[3O$e/gB`p5Q1=6p6\1RJE,2$G4%[[FlqhEWd^+;sPH0qu\0OU;J;PjU<Mgqlc4]?asVn;a,YQPb_cQn9`G"%E`rSXURWF`rqNlQa!@:!oKIp`ESHN:nh-%n`9&RNY]=%*t`:[31L5n&/@3!Z!n)X4QhY4Q9u[cg#H`_V<9(LM@rEY'q<b4Zt(>[SfEk?5.mh`=Z.O5,r`EH`=]@S75=>Zi"@:<^g'gG6Sp7_%U`#%;`-N.WDb>\N@MO"0C8143*cQ`s!>r3^8n4PF`Cs#4\Y6>F6CPm]d&YD.-4-j];2dU=ZY>NZ2j;IT_fptuV#7uB-HfqGclnuc%m+AV_*AM1+RaD,B=Rt3;>$>/CM2[m2^qd6(2QFjDbj,AQ=PR/,h\AEio%J<(_ji3RZn!9'-&!&8EV!iHRZ`3$F]*F+]pFaA5`DWM%Fm%di.at3jNKFb)n@=r<A5+BWgA4R<ICbT79$*):$\t-13!,s7Rj<$13JH4T9b-b&_3?8[OJ4inDNhDX12=R>:%7]m,Sr=+GI*->%H0u,=(o$d4oP2094A(L5d6N\t)=0sLKs]C=ke*^\D:=kcNT^`&5d2$7;aE4ah-D4`(@9R?,XdqFPH7H,XD:7_QYTZd`LB4Y$\h=/%<03QIXol?KTV5X[oCaJqA[KD$N5``8#,2D5OYCt16u:f/nsIGCNU9,$H_UYU0SL^5Y*!]BF?ug#R7k#nF?K1km.(A_Ff:Z23g_@c%g#\`sRi3u%B%p6?S0L`]mkim;&K[,AFac,i996-SpB)be4%mpE4/Ui_Z-E._"l]sD>[uF)=U,MGHqbe!R9M-[fEb=#-Z(,#?dSn#%:2[`>"XEW6_M$tZa_faVHP$.34k^4HFSh+>*4TDk#r&B5c!LNE$P(.pUrDtte`O?f[n"-P#_S(1T/G1FeSsMb1ea^5(_.*dZEd%.%[RQ.)R`,'5(Md1Q">'1'$6qiF+^Cb`6Ph1@[tkq&9JDpD"10t115<-<UBho_T;`4_\@n.ZaM8K[hhi1Jcq)!4@_g2ER3Q%c)91:U%cXNf<B^d_dF=neO2f5,Q-s#1-&O5b-E_9[LE^A*99\],/6+C"TF>fU11#$l/3L%p'COBbZlJffOY@L&J_<>-g#1-)P;CF;W<_Y%b%YeK7@CRhQ^>"C>fr#`6$-TKHj&`q*mmCH#CiRm]iYS)mP)QhR"0i)s29#8Lj)EaVCOL7X+#6=0dd(Vn:XF5B$6\='h(27*n[F[1.%O+%0b'FQG0ctlo\@Fr]=31F1^`4$"#fcOqgqW^D4QV?=r:cnkS_1[d,D!1j`/uUHpae]F!7hhn\ML!\@BA@F13#Kje/KGq%LZ1BE%`(^#)Z&P=%eEY_>@ceFN3E_PFao'kf,?Fh`Ud[(\/9[?p!m@<lTb3If-mifP97n^8'1kNqrYNZuG1*jV<FLE0,mC5"+G>B:S0K;j%0utUCKC#5ip9hGPc+GD<QoEV7EcS;5eBp>&0UnZG)2m?Pf4qW*l,LoQc1-Iq[=),ghW%6O"a(,@=]oY5eMUX%oY<$oh82%gf%Vr=%XC!QNB$i.LhGTGD/Megs*qrC'd,qLe^3F]9_[XUoih''^;-K>R1>8&2#1F_KQ?_n^ICBOKb@]UYhPk3.r5fkEYLlhM[M-6RZmZc1%"KY#nQFo[4Fh8"]C]6HC=;+Y"U8qtO$uh,VO%fbI_t]@^kSp5L*/6U1Rq$n^f=33!:kQ"cQQSr+h%4sa6B%<q0aV=>WcUqYMF3RJ%h`(%p-$CkG?GOn72P3hSAC4O-$]TQ_#@"bjn%g0Y4U0L5%+ukZ7bqU^NDAAj%?BChh)mX.rSAR?J8>q;<33$_='e:Ml"un![Xkm?%_W=fSks?N]:*d?[B9+1%RqYpm(IkE_gTsXb#TG&qONM<-M\o,>d-*FL*\_%h,^,(T2Umc$-f_6Z_Ul'KV&0=$T41^2Vs3?PeCVV2%a[U='T!FF'maOWeMW&3Q,R/e@L?55a`<,7*Ai*r?>1:B"rKm[i`$A3:OUYc:%5R7@)4C$U[XaVt28HA-0p(6tIjsM:=7FA:Xmk"Q%R^K"X\,J4gW2EbNgHDlVFLE`D^Vd4B@0ju>".QQ&i<7(o9FbfeAFZ=h_lf$rort\MgTbUnq`U\TGu2p?6mZ\Nact.D!?%+]V(XTi%:;VsS=M'RHdhYb'Q\77YQDSs!X%=)u\^3Z0^m6(%=gtI:Z=m<kE$/c!kH%EQ_(Omk?rlLbX'[dQlQ`BN;*<(aDrXbp1cpF$gB^Ql%2XUqfH<u?PTL-1/[J&gS_(n>Qj!G+*c;>%ubuA3=UX*2$i(Os]4uDk%Z`h.YZF[QTR17,(n&E#pJ.GK8Egi*oNg&VH12DO"i?>h%%Ur5b>K!Mq<VTC3$P*.'.%W<ie@5lhh"L+<>f$fj14*/I\MlUhEDNW<o5G2]YBm4_SkB18LpB25CEl=>)*DWY9U.E>qCM4R/S=K:)%NZ*+DmI9ahDt,u#Y&Th^G#-LE*r56Gk)#_(VVr=fOZT-'GIEL/_"/cAK,pk1D>U?\#JrI&V>7.U$"%i+Qog47$[+/NF%%Lp)m%+Z%VW_Zm@lSQA,(]9L10>A)Ki%.&;rBA!<Pi_Bb0\\b91U5RccaFl""hQS6f/B7n^R3X8RYW/d@f^fV9&'G,HiChN$_qc#d;5#NH@S2%-XDX;?neTD/p:#cI[+B/Y*ePUdA4>:2W_L?;<190:=fLhL4t:!TYtZu:sP>g".9u+=tIY.<0*n^RH,m<`Tt#8_irA.NGXEVW=DZ5%*F."/`GLQ`[U=\$mES>J#I.Bi2H.CFP7*eo`%]l/3ZUhQ2]I')s#bb\=[8#`UHk08*++*jdrI.GD%H1uqkH"],?aDGJF1hO,<87g%17HFk'=N?9N\9PFKH_:VFEu#l;6WY?A,/kmVfI3K'5L:"]2u=n2LCaYH'%4]#nM,[g5<G3d2U6M][#[$V+c-:g"DWTe)sUBC+!-s%&bI>YC#_3F\Onp7eEuMGgE,=t2h6u1AcC0WU*PO'rO<UNIpIW4L\4%N%pmqs/#_W)O$VYK85m-tn5.D52HJmPK$oiAkoTM]?kKpe%dEtg6k#a&I!#ke<@iQ]nZo?p<8Xlo86EtAo=%9Wf:.u6$V\=A_ji^''#HV\n1B-dg0j+Qq;VG\f-5.i>=fb/,=_8K!V#B.9=ldfm%R%kS^8ZEVT$Y3k],JoRqGu3ckUb?OROK,5B!@[VWLn]siZ<^%mEa9sW$eNgUco)qK&GmfXkdL7D%NNd,)\\OnPI5Q?0n=hd+kS'Y%YSpm*.-XlL!09U'"Gcjkckb&CAp9*fA>n&>H3TebShK1j#n+tV1Z/<=W_(TVk%'Y-_e=dA/929EYGBoo70.d;C8AdV:UY.u`0a%N%G0*IP>Z>o@E8u5)iQ=4r'`$YS0:HR0L-:hS8/`GJCm25sFctao0%-c`gt"DD;nJ[2O(:.i$3L?(V32fc'0R7R%6)C,5L1ZAe3e:k%>Y)jm]32OY7;+GBYNqp@,,I#dF>si)`7uO6]I9D4**BfIf$)5AF5Igm&b<HSMqn>ZM=TshqehVNO$0lj@Ig@^jO#cIC`Y9$(O$h_%T%>H7^e]I::RaEJ[ZTu"&,io*%9HhHogQp?rjgoGj%+E;[&Kd@MmgP_k#n3BkR'Ff''!S4FtVeNA\]JS&YRYUp_bX`8guL`R`/h`%0+4`F:)eJ[&G=rto,/agT_HF?@?<o>DG5fWlZnPR^h'ricA7-^DA']$LIFqK?,r_Zm`Lig^]plINdfT?p[WoPjCOI=%njY,rp_m6%6CjBINZW5HREPdL"\b1a(S1LgErdV3]V\dY_(n`<333\k<.ZaC;)jL#T<=@K4p=T;A=&!i:CpdI",dOchH2m1de-sgQgdHe/kU2b%(<_8ccC7s*AmE"@o:XW!MDSTYA-B8X"SJDpZlQOt+QJup0B56K`>Gg?j6DM5Gk/AF@Ynr<[;]TWZU[J$,+JR6O+jTFC;.YB.eNlP%=N`Us8N!kfAd-?0'uYE7cGbRW-nZ<G)j]jIID\AN_J\L:#il)tO5S_?PHHD3bt+AKc+udm2'DL4ct(Y^?XC'/&>?4XZ6`2%gMh@K%/Ml^]gV?Y2IN-f\)(NXF*OY=4-+5>-BQBE^Nk?</GM13E86%?V%o8T.^lVX:Z'-[^81$j+B#@c<EIlCT7;uAi`GI#8(s(e#X.9tf%Jgs;,DYH6R8N5e%4/#p0#7k3mGA3ug65kch^#\G1K0@JNSL9=6JiOcZ;P(LOSI&TAO[U^X3SIIUN!*1XN$'Y"$TMaSGA@oD(u16p%47m0BOQPWbGmGteL7J,tTggWf0=Xk6(9tV>MbEW!aUg:L2RWqj1NEUAGRS:LJ21+9[jo25R?OPjWVd.@E"9$URaW`>Z5VsPCnhF)%ffZA7D"m,JWIdPXiaQ=,5b5kFgbee*^q+Ae1[AS=/3KSq6/^EL]pk/qEgagqhKGY*8im9d=;iX7^Z&bt0\\_!"E,@5Om,#mR4:Of%^f%@RN[BH3["@K\MBD%0RJhMfr.q'-jGoLn!"5*&8),0lO`mW]"T<I[IcjsH_X7(T!28UgG<ReA-AnsU"19"Qpu%YKrm9@$/d:35%XeW#JR5RVAH-osY8_q>f5S31-74U;2n#T0\(_bp'ZX$#n1GWSH'QB.mHcoPQR@cILkNIF_$>N8^dR\$eX'LT=P-7$'W)F\a2JAc+%+;uNOI>;(84;em?MVbS%"W4VC&tg[#,7J:m6NR!+o4e>RU5&,@![kdJW'&>DnmgVEW.::WZF"a71URl,;se99G_?0h+?@Qnd?YqH%@]-:lO<AE<Bk_.5kH_#Z7H1H4$s^auBk5:t&f\-A'tPE-e^g!X(Gmh\9ilh=D.(!Tlf#TRRi[]K9bArD<2_rmK^n"`[TnNSK&P99%IGjjeCg"6IM6TK;4dN%Q%6`]'+jOG2[g\+"B3^ON59l25VMN%+06st+,#A<kdZ+ui!?5+8PX$1cmolKn%K&uq0.hfML![FVd:1:2%<A:E+b<:d.:kLY_I(sR("a+XX`IT-=*p$?8kt7@VK2YO._hQosRCC).aZ^8>Z7Zq[G1fi*BV`a*piZ0?<QUG;P3p8b6d(CDRi8;"%/BAA1[OugVnWYW.m0MTk>u-C&$:q_&j:t>qZt2l3Z\i10fR_Eu*LFo,bDtlSTTu9+LB\G<;AS<g3d@o?#Ro%&!Lq5.,'u%ghP*0#%/VuesA95n:GopK>iYo+6\`4K*oP9Wu6Ia.O,<ZeK>95j42Yml&e1IC9p8)Uf2J0eXN,=dM^TB7Jk9Y;YDO*Q=)&=QUKTWG,Cf!?@%3,!L<.@(qWG<`O\DV<b2^<J9>8AkZLCs4=6!Hm6qOQ@cDq([>N$&G($G0k(^k(EiX(+i*3es\AqA?A'pouju\98i!jCB_pe93h\%%CDH<-76NW,QnN8V\:.0[bUes730k;RIPLBD"TX_pA3*GK']*(/!K>pBDV*-*7c?H+M@`;si!s!Ya[e,A9U(_sU^ZbQ<<7JgkK"bV%PW*SI(iM)Y38=!N77pZIROMl6+?TuH]hG7A/9M]hi`:82(W7s27H7^ZKAWS,Nhr9/U<>h&^kIGOHO]m793YM]^/)?0".9ZsA:D8U%U7B1_90b#=oRjJ.YP*MmMJPjd->D,2OedL]45h:n9X8QoMb+fk66^EtnQ>NGfKmP1(d*s53tdugpm7r!A:=KiIZTh3%6\*KiD?Ut%LUf](`6U_jo3#_tP>'Cb0j*k]8_5aq;oL?Ab!E6`QN%D_@1n`f->]@fV&bPO;W=u3aCA'i.Ak!e&-6LfQf7.7B[%`4brTngLI5='%dbJsLA\Y5d'Eac04BXY^i4T.XBUM.MKl%kbg((j@HSmd`(J.F2c:b+alS]lM=j#kZ5=&)qL^I[aem)WS-0oVV\HWYAPe(RrB$^9<%@P_T1M34&:^e0?X?Z^<aU;"nFj+(DB'dLec^u0*h!'6?#I:!RX)mGD4K'L"J#8moDU,N9R2sTrO(*>i(BQK`2VUfu%ZgLN(dA&>X%\*A!J1&5FVbD=Q(HU"ue;HK(l8.a!Vej]r,[oat;M?'t.4-#D?@+We7oqAM,ZgV$L3@A;klDQV;PR!Voh15QO7rBk52q"E[qQ*>r%ZtV(fRur:_l--fXBkc34**tk<@D*`;o5='-mZ9lg311t5'md,9@o0GjggmMK74.hB=6JXJN-[.p'2)dCTpoq>grA$bF/-g-B9&ss%=K>$A`eqHfEjJ2S$`'(3N+r2f]4k6gU/TW>#)e/D83>r`V]Ts&4MlbFi9i^l[7;i,g%Q8o!N_XnmX0rk?\O?bJi%]WS0ID_&,,Fe%Zp@'I[O?PkkGc(_i0BcW\m(oeEE!uK5^ga*?'_i3!UWW)c/-,^3OQ`"\>lT]SU9kSifS(qqt8VlnBomgQC03\W%Z8F`uofSIk=qG%+rPVB2X/[E"?4>`9hUW'OO7,Hjc[iE/NqCl9X<Am*`Eo="@Dl^UgRV_aYL>pQ846A\hi;Wq(aI/N9k6ad,=.3X#45a^bimQRro+L%MEEbaZEaXfnp$H)kD$+"8Bl24W>,K(g!_i.QXR.d#6l+M?-@`1SpnRBM=/U'WXB";iS^).[(L62!mo?EnlmsZ';Ht.!414K'a&t#%#CkOe@e>%PXthaI9=C%K)-Pc]QRuXDDD@q4jdnKOEVBJMATCF?MaM5"%WgLL>%I34gEB_AQ*:n%XqXQQm[;$J1\A5b<5r(l,<*%q%_&7+cG4)+?85.Wc(sc\gV9=LN`"n8RS1Uu^`+YagPL?PDAC0\:NI/8t'FC"5(]Vhac,c*F=I>B"$:`dpKigsu3"SD5C[IuR+<ZqZ%=ZP'sU:^l7b@K?P/raQIKinXA-[jhu*>HQUdZ!5W0p^l>YO$Co7=AJo2k3;W;\\hVG`/ZDo9su=KKI'<#&]S<XKY9$j@-pH!#2K4%`rZ+"ei.u.!bZ2PS.!!:Mf$(hp*3KhqoNFJ+JDKhJ\9Sb;(c!X^4Z7Jm7s)_<>oM_G2&OZ]cL=1jUW,*Y2EACs6Y!%JOgu*0.L^H%Z<((G!^XPf,X$6>e27$2G\kZk?56s#>+LtK.SbDnqkq>]D*\WYaJWc.MZkslgE>&rXuup'_Z]W.!9+3O0c1E?^^lWoR1HKQE7[HB%o*7p?Zocb!oH".0G`o^oY6BNK#bXk(3[,:-*XD$t]WR&E*b9`Ca^8efQW/!'2Go1u_"<X:S#,X]Oei--14s,!gI?;:;@?YP2Y2p8%bNZ`3bS6Fd'N!jf1_,]W3TbRI`OM.1HM%VZnuP^">W0',iJJnXX7")5GQJDqYrW1?J&dj[#Z]_EaK=.e9h(7Df-Y`"LPi.Seh%&]%WHKjYhE<rXgPnDY(_kcK4*.RR4rKfpn.s$2]5cu%JLL/u_]$FG-\tI4o`Y>7V?N'(UnP1Ag<%6+p759C_F>!%=kpg1-IP/0@8`*k%&0R`W"5Vn2*+m`<j(\dSp9G?J(6^n\`J&&>+PuQR]Ep",'*%"B$:FO,7,N0a!]gQR1]<T'k%8*=kZ,d)U-t+s*"RJmWLsCR>ELDL%3Y?/J'[)2h7mZ(HBP6]W7(X_[g`PrP]I#&0;PV_QY4YN"l(UdAYV"l\rM9W-8b.t.S38c/JgbFF+^(=e!GFj)M!$04fPV:=oHLn.%f:JZ,Z0n4ohr"Il,A-B"dOd,,M7YObd$CU2Dk;0D&$C'JOo`7c/1l&.G1P,-Y!0:@:u.2`_a=uR)=udj.=T%a6@QQ3X,ACNP!do0%As:1U%q3D`gJQ7OaJ-e[1u\p"a(`!Jp'4]=hSB#2OKKobDt&K0OfV1(\q;B]]]lkm*JR>L@Li%05d6_/M.W;_1qQr7KJ3P)28N)N%$!uai14,;.K'p$TRtm+dkE:cc$G+,dJVEW.9Ubrk2?t[460=)+h]MX8;3l5pVVJ&b,%!L&Jid947kG%Jq'm']V?:N*[,#grd5A0!%g63oV7LckRN9TBZ&jQjFgN4MYra)V;IPZ'7?ntl5Ohj4aNC&8Dgf=Sqnq+f731MkYI7Gp%K9Srt3CPj'n7"ImO\Doh,BkBHh6Y$G%M[\_dPl+O!"XV6Ym9qRD?G^/2U+81K8e\"u*")o:%'cO/(.ne^/dcuAWFTF/0>>fWM?T&6[OP0$d]mh)9X&cZh7+^lBjd3X@9<9d%K>MM'UPp(%SI"qTO'#om;(XDdf7Uf(*->VWM2&Q!I(ffoY"Lo5\'e1jA5NW&):PZJ;l+XSb3eU"4@=f&k%V;c:t\.a:LN7-l[Rr3%h5.qu6;aEXQGRiDnln(c2G]Z2T7ja+c[4q.9IO&4?omje,7ru.L:\\M[Ma[aZTiG_"i=J?fs50R6(CB`;[N03)&Z4S(Yk!IM+\^^%$VHfWi"p9^%=[aeH\35j`IYjH:BB8k7kK,*_gjjq_@sM2,\NN_kZ#Ze#3:)^!ffG^.V1&FI+43id1X7!P#:oF!Jn`g]rB(q8$-T#%(m5&PGf4Z*[_m?P<KV?iJ-a!>>%!KaWr'q\BYqBjAq*L3/7U3%F"SppJ$XNEmAf\I4c&n@h95#;$G;>?S7[>(n6j5pE@0fqSE?Us%3]3V%?n_E8(g>>(W=sY$5^BYg4QP)Ho'7fASnb'H<`DG#IU9`CL>7-7:3Iu[BE_Y/nh?)s#C[W2RBX_nm_CT1iu-[>M7AMWDmC7s%C^n,oGbTmETYb:I"-OS0(DP[hj6Hd[9d30*(pcmJ:6E[O@>"&b*DF%u@BXYZ-CK3u[7=0eX*>%?2I[H2P-SkphNe=n.s`-Efc=PP%9&LqQQ@m-H.QZdnRsGu%i3S;+2PY)qp==))Ek==;!tEC2bK'#h+V1>Zd"HX@[R4%R)MU:)%IuJI%i/aoa^uD&AOts9>i</?+q!n(%BNr"q")fK%=b5)c4ns-B8kSCU,2jQu<kf?TX[5;96sGfgW-"Z>`$D]2Ye&L>!4cDJbHtE</#BW,&Atto/J)EErfZ8+7b]BtU.=Lb%r<hkDgT7ka7+:UU_P+Ujk8_B<[S>qcF&U;%%DalK)@H<V[ocdXk3`*jW(Yg0>IF^G5`MM^[QmW3Z%V(tBVC.=&7"U7.W)^@kC=VZ%/8Y]<eOe'O.f=091toY#qj':i+j/%sq%n#N9G[&?Pd/MJaGmF3m%G[6KK9+/Co397k9''(0m0oS+,V+%j<`1_d2TE`9MB[5BsZkD%m>]t>;7MOK7]b0QGC]L,/7a<'d:m$O@<+e?cA`5s/35Q<@VMh2KIgGF2uqJ$>`4cnl'j/a#?G7Gj00r%@DrS<iPrnf-g(DAKMXRg%.>2?N@T&ueVH^Eo_Kblk,13UP)Nm4.Rq#ZfeTVMWE=cCII,uUT7T;ao!JS<!U:@@*+,b^qFC9CJrXAn(X.E`^=:jlt+t9Z)0_`3b%'5gQ_5r(fS2$:07r^n%t[S=m]Zp-SOJI#U)[G:Tg\tWT(?l7T5L"Wi'"'b9]M9I!`n]^rg6=/$rOP@tHB[Xo2=\b0hojP&M#@!h`%DsU]abEb6pA_gOoi+Or]Qc,peeZdJrBp<d3_2D1'LgE."k0CZo_hM:V.T+n^E8>;&H4Q(VD8\PRrW)lV[D2jGP60/FY5i'\)J##+%hodat:pSf]7$6//JIOk`d`,#<h/uWXNbFUG$M3K(h^ntQSTTD$9c!VKQJ.9Q[cKR9YqId%$cZcg2%#9REL!M9/-fd?)B]oK*G?+q%L#^=[rRJ&^>EQ7"c9)3)U9I)d4R#.I0:j8^U--DsK'j$AkOtoqCHb&7%cd#j#`,\#nqXN1ItV3a.&W(<[(!1_MU:I*:n_;+3)3T_%nG=]2/5)bA;aRud*K.+2auZEr8gf:6bY+]700?;CZ;K)bI?C1><F5Cq.'<(5!WoXel6n+X%N'u4S*\Bs?l]!X;O""'R;dV8%sWMd%NE=,^K"Tp,!7G2I$o]=WaS.cZnq<hj=U[ag#HSg&Z>4a7pPW>o8jRZgL'i=%#Rs%K)p1!ul3i4u2,;tP/'`#@08dSbkO@as+HXaN%;o$7Jj9m<8Y.XXbXiTdlGl$muR;n]rI&&#t&B[UET99h6UVg!;[Yf*DY`9s$9KC&7qkM^>&Iu?4>,)-M*3r&Q['+L1XAN\[X]W&n%*7k+1.rg$OBF$:W.XH+?72Xo[DI6V1fN*EQ&>eS35!K[&M&[O@3*nehpo+u:2&PP11.6DPn\Pc:OLu,);C^2kBIMe]emous)We+K%CB+`FU_Gj9mlTuSeGbiM649G@VCku&9"a.%Ps]#ckZ]^X4">XmJpE#%buc8_gU<M]f<&U08B"U>dZ)jl$kt@ond@ouOZb+A==efn%%EYCX0A$&Y!g/6VFKgB<JI'<e_V6jKKFAH06LI=22PrpR1VM!e;9EQ0-IHC?@FFPBc?*JXK1t_FLo\U<jt/i!7?E#fA'7K:1=Ui8%#=W>K<jG:*!6c'En,^Q2>(\&nis@jmOJ:8R@^h))LeG'o@4_UKBOTclV:t;/0jdP/jLDMD(RkGnpqiu'Q&St[m.@Z'?W=&[6@]Cs%6402ipifn`pO^Dh[?kYBGXnMc^_Hm[-JL]jZ;7-PgWi0SIBj/FCg:$NdRNY9T35!(mP&i%'_?jGTUWe-HU4ob"+I"U0jang0l$"f%Ab$mC:a,a("hN2&#n1C?OU_s87`HN,$B#<d*_6i+oA#1C;^TKWq'%E);`Vhod.b@7lf!BF^ao`,d)Dg=[T:9S]M@V&k]7R`SE6RD%1CX^*jimg!p2!O*0Jfho@sOBl?s!W$J_E0$.(_$Y*G8Y>*EILK",`'PXQYnCi]uK-#VrGf2#o646@WdiKT$G2"b.nr-tdbJ!=h*s%f(7-m0MH@YR\bBY%$2jZ2Cm&hJe\_DL,'*>0_<`Mhho?,1RejhR-O``,X$&,m#R>>&6ptVZ"c'C-%2DL8TMp#6,I:mN,\^AF40?o%U=!;J@&2Ho^ggtd#>t4.LYiuhi</F8T7K@WNqUV!_a.6i_LSJ]OHiik-lmFtEtHM8('8\?1@[t"*'AgC3CMlN8M*9@/[b0nVhJFm%WHd*0C#E6P,`6U">_#)HCtoTYVM/l++fn3M/<4HVZ=*3-s28'G2`[,Ml+k;#OZUL:hTM?+1;otNbe5\=U/?2uXZU`q.@K:JgoT#%%%K1GO[cN'r2D-)a_;h^u525XT\J%MhOFjd$(H2E=H>S*R5s+'HiZ`o:YR:c.`a+O:2,)5-/^1)5[6Cn0`7ShWPG'nUTkLcG&=]Tp%6Q?VM&AI^q-Zk5nDF4le+!&\\U>#H9aJ.CeSG(I71b)"`8rt]K'.]%XL,*J>PoH,U(.9UA>+P_tFkn4t:+rZ?U?eb++L$k:X>O3c%@4+*(`$8`?QtiMCX5P8GRalABFjYQO-:7Z'*c(9<\$d>amOQj3Z[t2F#&4O;H(#0VOek4M$:Pc<)GLs7NB>\<CEGTCnn.h_(?:W_%s17_2[h/T@2mS)(D,WaBG!gc1#K<k^cAUnRG?gP!5W\0G)%b$T1VKmZqal+>f3glDd"%HC"FX\i`<YDA1XR>o)+BtedO)Y&@hRV`%7V9$(??sc%&``HC@RFVYOU@44-h:Rh1fX7L;-\EEBb#q6Y@':!n9ooMXI%s*gSG+00I-kMoiXY6cQ>SY;bXD]PV/2BHi0iG4Ug@L%7,VPh/LKOj<O??MLEq.$$9ttI=m/"_71oeXisZZ#ah>ZebWqj";1mMb&Q^2F`520Y\<lBTpDKL0-<#]ek=(PjQ%Ijh688X21:"k!%J1'eNRBiQ3gce.cS6Kd9qEh0P<'WH!_^=;:RD.kboeMk>`&uPjC`jmEWu#KC<.+f.I-D)8-!10C9^TdebrM=G('3Z!0^F:WTtH-Q%J55%u8F'A&0OPD"E:%46$D(rKC1mjuQEt'LB;]'kYh,SM'PkOD7C155]#"PN7p>!"nYNMc,2P>K3R)*$eec$U$V4GlNUX!AQkd1l%8SLgSSMakm^Pf8m=j^QQK41FlVSk@5,SpR*Q)l4i+_#@FR]Al*<[rZ'd7-ZV>hnC;iI*a9D!#.\H>OCK?CW+[Y"PR%0litU4DkLQ%!#nS<QdF3445#Ij"[bOt8_`S^gU`LeH2B1^!tJn<KCQ6Yq?R<`]Y*Kt[hjB-%Z,@7,KYTP/`W*cYUQeCX;A,g0G*hFT!@lf%WX=M%R5*M3**\C/5,Q-r@qX;!5-\%feZ_uT).:[d1RMj]DG(HsGSSU?bG"-#TE2>Jrfh&@ZQgpuFtbaaGoh_J]RT+!WiR'(_3.fc6F3)k%MU&#0$7gk?DCdSpV-29[m++'2BUWu;=9tYiIL-A[Ld_O?COq@V5P!@W"UluFeeoI>`+Ha1Prkj,>aEa\oLQF!PkgtGUNJN^"-hS/%iH:Mr(BD2-ci@k)gHC(send<g#7!=[Zs%NJ-nSrN]`p:_X@!X/67iKldmRgsU/pH=RcB!nYIHd_IZ"[i7ta'HOC#'i+:YK0(*,IZ%%O";q8DoJJ!bA$%j;uIM/3SsYhX_]+W2E?fghVJ:Il[^-_^s+@@p7q`KEg,,J/mdOmG8c<@OPiD>hTVi=\si6)^<S%5K\LmNY!Y6%^!!7NbC](60jB`5TJ[YNKcY=Hk--OpR,[1?^eU3`R."..&#WFJ%O4O(8i(tMQHf?<=cNJK?6AFZ&54N'>2`'rKHNa67'HcJJ)bik%ct/m\U8NlTit2)3ifti-`jo*EhtrP0C/ZHSN]p70g_gZeLCKrM'D`ik3fZd!XTLW_%j5'e$cI&Mk.?mY1@Ojr&/g;'?Gg-7C@j`U%hPN94*`JWY:a[cNVDYY."L!$e-WP1.CJ^C6,96bJRg*U\Hu.rJFIZ#s7lI$"0,G+c`HA+:U]Z.Lf2Ts1Su%!,Is!&10T#1nS>'E?%BWa7O'n@\BmnQj7\)))[g`+`SCCVo/OBi&$(J+cE5LeU9?tb*EfmnYdn)Za84a/?1?Sj?ODTYnY?'Mo5X+=@0LOq8q$1A.)@gZW]%b/0L`LDgQl9s#3$LGCNN\9i/ooP!0.&V?qdEY9RbY6U0&+!#r>Z;1,_BOD6JU_LErL^>2W"Lu7&n<=gYWK\+<JG9jkW_$u!@2C9P%ZN-2!%.dr=OBgmD(=8%5Ml2_CMO]X.lR<4FCe*![&U[KBBiMtNP4O%!ZXGr*,2N@2--I;ogjj2eFINe&=pO.nUK[pY&Z42s3c"nB%5>n!VKq+Mr)W>#C&khmu/Ega1.*N#;*:&^Ya&X2<1MS$<S4+N^=rSBsX>k8$Ag'8ZbX@>`&<=gV;_/f,1]l7<XS.d/Gft;I79TMC%SsVq!L.=+->']5K<Erk01GD[=Yag/V;;;jLM=TXOUiQ^YKN0X!.,qbi!^MU8eQ)-(prN6C=b9aFi&\j^.;/i<*65cJ&1MU8KPCQM%8nJNQe:CQD68'#0Y2U3;rsm,]d\Uk%1u%fU7U,(V!U:maD!!EiFmM//-O'\g:?@#mZD(rXSYGFZ]bS2CEBrBSBOd'&k_3oLmH$5L%#IR.XFi_!/]q<#GK10_O.Tp4AYg#7k+_s*C*[1<3(o$0t%fho<k-!li#9X$`%j51,Q4fhrER=)8<DYY5HI@/<+c1!HU+;\-O@/9Q%kgTVh_DaNk=R*VM'G8p"jJW/OcTj@<.0'M3Ab8.e<6X5o21boe(V3qD$+e@<'bN^>Y,Qr%VV(MX'PF4ckc,+X$\D!k3_\]'g<p!e%$IoEFKE8kNp_2=8&*9[s@;*iIdnn*Qp[hK1*tTJ])6a:gZr[RNHZ'%E\R_2\dA!;MYtiakacCbYc"I)kf!q9TNjr;Xnp&(n+,UtP%OQIJPK3f`@QR@U_q?e]:8mc%S6#S"N4/"a831pj^#E[m;:JZ9Xs"Wg<<&^UsOBL"%!);\\9PL`-"2Z<,D=^a-s5DON!6FB93PBG:%gd"WZTFSaEdpCf'1$D[.^`-aeGbUmlms?'a%FD3A,D^^Sm1/P'G.\m#\nHX`]a>J3c7NPS%E*gm7T5.j*Q<>cjZJ7!)qS^.KfOAC%3WK3N95\&@+SnoG?O)D@]A(@4aKaFE;0MDmRFhPgM@F^:=bCRN35DW^,D_.d_pmXM(-p3%AF5]V2Ae[B;'mI=WSU,%N9pbq/`g4s%15[eDF#j?K::eEX@qqs[j4eG=,J]9+,=mmb7_@ktAp9Qc.6G"7GjiF"mo[P<DBR4BJ2rL%c1X>2X$X/VgB$!_RVa(a.JGU3^oOeW%*3(81$#IKJ!&+M&#;lne#VlHb/LE%dl!)c5d3-k:6@/,.ft8KA*2/@96TbZ8`+FiR)'a3XgZ"&HUdF:bpl9'p`cD/48<Lo8/oj)t%#((`qrisbGiR9&:!mE&WJnUGl)l?o4>uuGk0[+`]1<Y%m'f4*q!40q2+<'E5!,_0m"9P4-H(H-,An)i9!Ai(E!-4iX#I3k4TN?[E%!(OP^Ss2kAY6ck!h>HB,R$j&DS*<MSEUJ!r:e/>"J$[(gbSMFkWP2<6f5M'RA,QZeCOHFFF+":]]q,3lWOp-`e`\?,p+:!WNHSIR%g2-8Gc\@>dh.kj2]@XkNZ,+lGW4-"!aeEa>e4o\uNN&?6;5?(Q>Lj,'Z!6Yt5XH3pc*Ig)WLNA>1g*qPf,4R9^h5'B56H]gI($Y1%nY(r;g$h#s4G@C1D^WO1QuF@JS+1-K:2([4,`)q(&G%\t&D!T:l*8Ba'S7r\6'>>E-BtAB/c-5)1N((LW;Y.4[trW[be.NH?%gO>%9*]T?0WWc#0=uHfJgfKdo[/=N[(:rNMKdHW[X4RD4L$Nseag#emdC2u7%m&@,meerPWUQq<4_]f_K2-G8U(\PmXQpT21NCT@1Eq,%Islf'mp9$MZ"t]<Kgi32N?F1<Ef%GHg'A6"-oH++4#,>%?%"La>0dI9?KCG4KP*bIj#gH_#$*'q=aM/kW?=bZ:K^s(9^L\Cj!1mh%6N-'l]W5W%DS3^bU*A7^O[,s6b0Y*.]F*b!N/i(,#A?`R0@fB!AR>FfpTZ+l=m203CS2$DQ.c8rE+q4_"2Mifa.Fm`Q=o42XNIG&%#iQ6R6MLPB&.S]Cl#n5?6Hg"g!l-])d=M?LMc=.%_U61VY?_EhamQrHQLG7PTg:7RO3npXl7b?1$/l??L%#+2_#fUth2oI5#Q't0%`p>Cmb'%G^RjfAC0T+h'dp8_Ta%j>!8C<>X6Uur^O$dFek\-*#:HM$Gnlf.ZRtT?]rWEL]Hk1W7]TLke**uBhq4^0L>fgYgSTSj\%!W-?8%#!r%34^QG,uB=^)ek%ZWE>Gg>_,/;J7o`?nP*cD7_LFh1)or<DUltsg=]F<X'Sk!!KFLhX#Af?aAX.nU'0Rs=GIU<\EX>R%c9$QtSC'k7"8Bf3Ebsi#B9_PdoDC'li82@0G_M!1a_V-MetY6FZJINF6aLSs?Kt`2h(Oi=\&;0XE[e;+Lo$1I-HkXL'7H%SLWf+m%@mZjY4'q!9:!I>[E)sP"!+^L6J@L6!Xbh:(8"Cg8eCQ\$XMjl=!-CDFR4_](W1=q<i26s/1+SHY5gK#U.0[.nbHGsqN&0QMWZ@b\%gql_ACQ1Ms>q3bp)T"q."1&=7Q$[]n)?E;p"%\RY)Q(%.jFE_<F,H`[O=]dCYHo7]_c2Ut<i\N<EL,)>(fT^ZXR\W8*T;j@BcZL.%9n:keIOMZC%3WpL(idSh6;HE[J@eg[mr_ZW+<(5\,nCiZBU&kXQP#XpjlX"*??M'a`*fK=-Q!(FP4J4DM^+:D[F[q++8seU*!K!c%*.mSm?['SkK]>G1+D@mCd:CmOoUY"E7[/\0r"SgB7]!m)N%9'[P=QdaWXq)FQpJnqCkfnKVH+D)\d-FXmq((j_m2W5VNa=`WkhNg%kkZ8!)6,!s7i6\_Wb_9`N8S%)*16;ueZe,e-pns^71mFDY$Vk`k73?"),5m\VSiM*+%7uML9->>OK9%>0U/98Ke*l`5@?BH>2-:i%.%Dq-#qX)Y$+*Z>AP-e+`tF_k:VFud<8Sh6(g9T!S55?DX.n!;Jb_&$_7b9n18)r]4i@=gF13T.#lGp0:DL7aYMR*Q]O:476%Hgg%Oc.Z2r.)n2LDj#3d&#*I*M3IN8tl=o@9-NI0e.rcfTaBT$a?qR[Qt--MP\>06fNthB)p)9T_Cqg)8fr3lRP6i*/anqS<s4H.l/"8%W[7kR1u;:SiaFU+dG6"jTi:a^]j0;oFM\'1F8-(RY*K)t?s)tr'W!EEGjE::M2N!m6Ua<KH^)A!,+gL,#a^Bg&MT!ER\7#]5\u.l%/rk;G%F8)+6GV,0eBgOnJ%M$`]b*@lGbDK'm?SU3Yl9;EJsaO\!<=`M8D.j=ZX0sXb0sVD3/bn_d`[%8VenpSo*[8:T`R#Z-stn/%EWQc/KD-uq`j6(^QM$;bn\u_.$P^@sLoc=5)7cmpAOjsB:5D>F_6CH1Lm<b#0UTg-:5on!m'L6i0MiGDe"MLp)ioQDb`+b^-uqrA%JNt#-PdL"YKUV*=<Z\'Ycso"b^]]5LT("4"h#:TG*J2C@oSh-D.m$6hR^+ci=agrJOK>1Bq1oF$eBMX2<\O%P->sr?n0s,.pbnAU%:-*pWLXBWY7`;JRhbUVK'40fP&52!_\3]0/^N]\GAb,k4<KjFk-V/#];_kE1"aC\i;MQ/aZ@E^0)fd?B&gIC_oRkSs!/G8^,G&kY%:5:\FhLOiumi;&/^gW5SD1&a1BSX<h3"k-Ykf`AQJ.k=$)o4@N5np_V,%1n'&BH,OeJ/_mob$<Rg]4B!mqV=@m];4-WVd-)Nlm<H%m![$L+<Oomhn6nnp3_kIIpNgr*cP(Q>;+=6CK3SQ#kECq=l[Xf:,*jHj5KIOKKsn)U=1e?-!IV;di8EHP/hK?`eRTd'nfLuArpS&%9I!N$9o,2q]8iLO9.Y.gN'D/:-43f^F768<6p=S\?Q9X$*5=3%XH2ku'_W.T=(ic<bBh=[b#(1&XH^drf;s`@6ZTO#C,^1kGt,6R%eSa!S2%>SVDT]eMjj>k^l_aR?O@3O?>;u']P`[M=74@J">.K*e.]Yq;@>Wo=L>FVKq/!7K0F2O*-uT_lK"=45"YXmiI+kT#a@bWP%(*VJ9=kQuk>edKjpf`YdZC82*fk%PI#P&/R]Y"Hdj*ckRfk)s(37#j@H?;8cHH<?9$CrAfbYWl1#tOYHl#k-W1$k>O+EK\CO`Le0%65[P#ZZ6UcRXN$>f"+e5(S+gDCuhtl+&%PL\nVdeDk7%e.MY'`Z##B&_dun[(^>Id&BQhG]Se)@g_OH2nL_=(MRr@6DgF0@][]8B%LQ-0A_DG0g+F,imkj"!L,h,E@RXATLq0%k=!tf8:3d<YY9&I!?C(Qm!<JMDD>$7dj&T#,?&dcQ9Yr6J@)h[T",k*P"\)fp\T4jJ8%"\l;7ZiuM:c=.oQW+7hS%;<eAUfu/[XoUqTnI\nOV77Vg3\b`X<Nnkq^+YQMD2mT$i@@lUiugc-P_mrkN25^2LTCmHX[_I%LM_jL%kYl-p9i6s]2?[Q%*un+a.1p$iZ0?#J:o<W,=GBQ=-3/X2"!l6FH>/iQ70MBV$baq4m"Aam-PJ#=*TMZAao/@^^c5$$n\qlHbJlVh%=Fj'@A^1uE2JX0c$)2X3oP3dVb%;/$oQ(3u$Fu1$NJWO./Q2L\4*Ga$G.!iY8G19p0K^][9XR7*Z5)gM*AP34)Wfscm*WUa6BJ'Y%Z,_0Q_EI*fhX#A>#.6b>@HpN^=:,&7Cp&(YB<h1;R1?lpCAh/HZf1Xl>XS6SL@W9\p'+'<2MMuZPQ$qsHds-[069g7YbosTb<IUT%iYg"NN=mT\aW,*KSYjt):ce0@O%!K=Xi@+4#/!0poVZ$hGmk80FHP7b@0.=1;]]r/HW:O-6+2g=T\"Da=p.#%ZS3771]9td>4"bc%fOQW"9m]Q\>/^[_0Q8m9W2jLA+R7BI7adj<Md&Ri/p@a>-mh#'5XO\1o?i^L3f,"&%pf<JZsKO5Y=7n[8Q][>>N(2E952^<n@lnO%[P'i"Q!'t2]0Gl\-P8bVn2U_=^s8+VkI;qZ.!Rl(@,-%N@^(fecjNV?g(3Qp--*P.T;A#Hrl%B5#*-\>Cr@uP(MP9Fji8GcFH-cH%P/HjMS9Z0#E3V>N=q.u?Eb"+AQkr4EceGe:6[8&Up4ELWimom-8&^Eo]g>/%l!s'kT1+N'Hb#XIgC4ZIDoDfP+f4rVC@ZOT4=IgT%l>N6uh:_9BRBNLQ$thEh:f`TT!#>kVbSkNP+\?V!"e">b=uX,<cI]qGCc=ST`d/(<(E=XQHUE$1VDD^G)mcJAhBmr=$_e"b.e':L%9[Q9fW/qCu125AKYR-I1*.hMlCtg;J^Z.&P*dund0cJ9QOu?,"8e@"5BU]._>i[shMdF4hdP%t/jQm$QOq:#HL12n'CG&=Q<*!,H%0Q!C^T8Qat;NtfR.LZ\Y-uDS9kcE:;=\YBkGP!q^)%O_mFg6_<3#G2lXP8s.N5KKb\lQf9"Ls>n:0RsVaUOj_[-3)Lh_i91NY(9`%B:<B!o@P*\ROn(Oe:f[Z1Z7XU0W[\rSb"EY.gl`4;l/#pThoo\k(bn.Tf?ui&j"pV6mjGXeH(G'MXq=NF7O]\j^biO]H#uTm!o96%B33DC4&SOh`T&!*D&F&5#)W=q\s9\&oPesjjXGfD\Z;9IXC:OC-QgGZgSf?@"`86[3Yd"\HWg4EB;XF2+<2$$$m<8L^8A&]NW>8.%7hB62J"OcLS)+\5#4BO-`d*ZIq*;nSE)8_M0b$hN>j6WW*3.Z/OM-dT=..'g'(Z;$.[c-%JisUe.p>LK!;DuA-6DD,b/_YK!%-qo%PkR4hl0+ji7*oD"cZm\E;.2FI;qBJOZ7F"XMSWf&n@F1T)[i8HbU16T,0V&JAEb;rS8$7(>\8*o]hmhm<Pr%-\Jf@4*Q,V7<2>e`%N1q?Eb\Vp6%PK6BGW5auni?d0.V>G9Q`L0P*f;RsZ#;Es=r$kLC&a[q^)h2Ndf;?hq7mci]=o7(r7NiRg)C/cF..Ah"M'G<Rt9,S%rBMlG"]Voc&f;p$DgSj6c.hGp!A4Q93Yr9pUheA9R1f`a.$mqp1%A:)DK-s_l&iImd5Kp@&5o\;@]UUf7,[`JHTu`XaD#<0m?n]V%9mY8i!c^l$?"C%SnKF)M,)ND6IkmqA`"p$inGfq>/\@:t5kGHT&$sAu7b;Lh+%qCo$#(YeYX_R#)N[8iAO[gASt'leeHsEhpia.6%Eg9p1`s$Sf=]V)pIG_T>(kZ9f`f][I16+lX^B.fEUp_CS2AY?$PUGQ?:&Tl98>t]H$=?lB'i=_EIi]e-g%k,g'Q@eL8:q7^+n0>D%cct_]Z*IO!k^iA3a!kp)!)U*j/E&^Z7m/c7neX'!CR[:u+FJ>6ClK-"lNe"*@6.FmH*siqnp/euMCtF7pg@EK54sKn9SUSsfe6D!%jSo39j:tMs\e9F3>e7(Ip>p!Ad_KgMi_t(7p@D-qE5;0?d!/d/T/@YrO\l2d^2*k''?t>Jr&m:`G<f'PJ=JuiH<rcV5AN_`?$%A0%bFS1hliKdAAlj9fVP`t51-kIq+D<I2:^nYDTr\@#?9R(CLd]5eI9r.FZ]Z==kg_1)kE'#p>C,V]Hk)B:;#ul\!_KC1_W!@IdX9Ma%f(&N!D!A7M-N6k5#cb2TQ@M$<]_cNOIMet!9rY2iU1ntqdY?W(r7hFL9*J5&VfG4H@&>h%AP"e"dqY)AQ"AcP<>-qCgY`h&B3GsJ%)a\5c>tjVU+nlN/j6hmr1tt:p)3okXOZs67L*co07-"X!C9)l$E`pMUFUOh\2e#"`W2"5EYpm-FSI?m,MKLVWF$dsLN*!LLS_@[k%jrL-%YCOkkJKt<Q1*0nRnS287/d'p-4L:$0^@E^?l*3\0]!8uT:"NtKq38$35kRj0W]F^\`J$RoQ@DDc&lGRCs4tlH7J]C/gM,l_%DVqF1qNNtn";nPJ:/[E7,q&7P_1L't;r(G&[#+tXk>;B%rXOdj^N8^M#c%SFn;1[h=rBC-4d%0f47&klElj^i28pL\Tq3\g;acNK%reUCD,[-@mGgS[?I9Iu]@OqYPB.U"jd*O+p2t3#uO*"e1,]SsG^E3L?8'E]jD4'&7btENf&5f\S&Xq]+nFK\+Ws>SS":h9e9]q7>%=E9-_Cn1@1pGFlZ0b1a^_*/607(&!qE>VLO^hjqE!Win&!%-sAMb!.0V&Xd=U+k1`JNNFZ2l+tboLN/kN[OA'>udWZN.[(fj7MV(%TdQpGQp`X7V`&0;L=F1?o=sr3CACdA")O27Lk/6U*_-:LA:]%&!SACGNst%@#lH`Jj7LEuLu`sp^j6._<c(3ph<hrJm.8RV#_U5&%5u,#2OVd?AS@sgn4t.>to%&qC#<oSuR(H>ZF]lCUpu9)l(8FDN&<O*K!.7WG5ZUrhpVZPK6T6-Q'/$oD*hX@<p2CHCP0l1.K*L7!%GWbWJ5Z"CoZ=.I`[>"(1V%5(a.^MB<c$4'Tben=K.@QZ+Xt4-'$hbCfBg0K+:Q#Z)9rf*M:k%Q'5%N;XZFjj!/%E%HPm1Y!$4o?M%OEunfY+t@PLD;kL@lIl?'Q#a-DoqMkb(m'>1j.bKcJqmO`gl9Bl=uT=.=u>-Mut5%%\t7e.-%`B\H=;]o0<a83*\RB_b+s(#KhCD%%F@l@fhbtiN'E+],UFiL'N-8J3qm-MM?=2Q^9+:[9Y(`6;ZY\R<$;"/I,717Outp'*[mALCa1YB[H`oW*)J8ifuE)5+/8]%qOYqj%MU>mS4fXQ;+?GaKFW+kbf4!>Vcl=:>M:,S^0N+"M^M0j.P7SXE<sO!0VA<?HE9J&`J:i%\##eeN0E-/$PQMNYIA7EN9JWDPB['`g%($SrGP%dK1=t$#g4ld)@,#ohQ8d1pmRGhGn;Il(fc)=q<J^j@dEE*Al.'IFI;^Dt]<<7C;QW`RBihH;#fDW5f>1TB(_]Dr\AF/rN%&;Vc-&9>r05_SA'o#rSh:A,=kAlj*n[#d4er=tQU-=-K\c`RTto;`M0$nFH:[3_T0Dn9I^<\HO#0nqIC9o)Ef6J_^@<#1C;"!I=t%h(i3dmD<jl6Z=,2X&-:8b5Kl1quqCDj6&>$SIot,XFMc"!m*^kNqd)0=G(&:WgU[lo=]g\)m8'W>q]]Aqt6"q3n%n>pH[=g3cE#:%/h4V=hfKHuVmbQ<=Gt/7.hI+YOSXB^XAp2WjPPu]5q=UL2QNB`1^+[Ad$ImMi]r79#Cmh^)%fXe6K3N#CKjKF64A_bJ40rf6c"Ji%S_T*l'jdtYFp,3XTjj<MHd,9Kb@9g;;6k"<>`celL;Y*EPNB);0u%j(Vc?)=6LLp+6JbgJF6k2@%Z&*o1.G%&U80P6aT5WVfdkJD%]LZt%3&r,DF+cGaBuI%?<K^omRt/(%7mAla*8nf,"gBt-Klg'=c]ngSRk9cGXW/tS-PaJPi%fU<!5_^0]&pLJnA'#d!Bf*n&ao3=%Wb,+7[-Lc(Ck71%qol5qJG6!-l88Rp3"66:]'':\,KH;?pC]%3X`?o8=@9Ar;dNbEAQ4]OMX8PM?3(D+"(@'n7aMfH#b?I7K8gI`%N#SrC>9\mKTj4sINA_dE`PUi++YJh7UJo;n7=uJGC8cfAA294B2l,ZRW?/nJ`l],9:<,[F3S!0S\_&+!rl,_hp4)r<k4ZD/kH>u"%If"6en+HMTqjZ?pTC5!OIsJd.j72tnoD._Nhq*)H:JY?3h1*'9p%"`!T:`;o^O:CA^AId(Q[aOur5>)^hL>CeLR\;D'L*jZ~>%AI9_PrivateDataEnd