%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UOM-Rev_H_PMS.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Bedovian
%%CreationDate: 7/18/08
%%BoundingBox: 0 0 434 144
%%HiResBoundingBox: 0 0 433.3633 143.5484
%%CropBox: 0 0 433.3633 143.5484
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 294 C)
%%CMYKCustomColor: 1 0.5800 0 0.2100 (PANTONE 294 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2006-05-22T06:11:15Z</xap:CreateDate>
         <xap:ModifyDate>2008-07-18T16:15:18+10:00</xap:ModifyDate>
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>88</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A45nZvJuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ks&#xA;3/K7yA3mvV6zUaxsiJrq2LNE1xEjKJI4piPTVgXQNyZdmFDXMXVajw4+ZcrS6fxDvyDOPMHkgWt+&#xA;1zeflRemaQljBpuotJZMSTSiwRSun+oGHtTMXHnsUMo+I3crJho2cZ+B2Yw2uS2mqjSbL8srGHUC&#xA;pZdPvLfULq6KAFi3B5VfZVrXj2OX8FizkNd/p/U0HJRoYxfnZU7bzBZahqraZeflrZ3WoIxSWw09&#xA;dQtLgFdmHppJIyke64TjIFjIa86KjICaOMX5WGT+XPKOkTassa/lpfgyn0po9R1JUSJJPgdo1ljt&#xA;+UgBIj5N9rpuMoyZZCP94PgP7W/Hhjf92fiWtT/5x/sPL2h6jrvmLWPTtbZZHtrSAAE70hEk0gFS&#xA;WKqfTib2xh2gZyEYhEtAIAykdniubN1i+JUaVFd/TRmAaQgniCdzQbmmJSGZf4T8jNoVxrkev6kb&#xA;G3vYrAj9FweoXmjklRgDfgceMJrWh6bZi+Lk4uHhF1f1f8dcjwocPFxGrrl+1BeYfKmj6f5etNb0&#xA;/VZb+G9vruzt0e1EAMdoVpNyMrt8ayIQpQU38N548sjIxIqgDz70ZMQERIG7J6K7eSdNFp5RuTqk&#xA;3HzQ8iuotVrbencfViR+/wD3v7wH+Xb7sHjG5Cvp8+e19y+AKib+ry/ag/OPl/QdDv7rTbHVLi/v&#xA;7C8nsryOe0W2UGBiheNlnuOaswNK8T7ZLDklMAkUCL53+gMcuOMSQDZBrl+1ZYeWbO68m6p5ha9k&#xA;jn024t7YWQgDLIbnmVb1vVUrQRNX4D2xlkImI1zv7FjiBgZXyUjoFn/g0eYBeSG5+vfUDY+iOA/d&#xA;er6nrepXptT0/pw+IePhrpaPDHBxX1pMPP35f6h5N136jeS/WdNkdhaapAoKSrG3CQAcqCWJgVeM&#xA;ts3elDkNPqBljY59zPPpzjlR5d6NX8vNLPnDVPL41iYw6dYy3y3otFrJ6NsLlk9I3A4/DUA8zv2y&#xA;P5g8AlXM1z867mf5YcZjfIXy/all75Ts08kWnmixv3uhJeGwv7N4FiNvL6fqJ8Ylk5q6/ZPEdDk4&#xA;5T4hgR0v3tcsQ4OMHrSaaF+XWm6nrflzRJtXltdR163+sSxi0WRbYOHaAMfXQv6iIH6CisOuQyag&#xA;xjKVbR8+f2M4acExje8vL9qX6T5a8tax5n0fRtO1i6aHVJFgkuZ7FI5IZpHKIDEtzIrKdiWEmwPT&#xA;tk55ZRgZEDbz/YwhijKQiDz8v2qOr+VLW38vjX9Nv2vNPF82mzJPCLadJxH6qngsk6sjKDuH27jp&#xA;hhlJlwkUatZ4gI8QNi6V9a8p6Ro2kWUl7qU36X1DT4tStrZLattwnYcIjcGQMX9OrMRHQN8PXBDK&#xA;ZE0Nga5pnijGIs7kWuvvKfl7TodEudQ1i4S21iwa/cx2SvJGRI8SxIv1gCQl423ZkFPfbBHLKXEA&#xA;ORrn+xMsMY0SeYvl+1F655N8m6PDpzz6/fM2q6eup2g/RsSr6btIqpIwvXIcmI7BSvT4huRHHmnI&#xA;n0jY1z/YmeGEauR3F8v2qd1+XkMfmLTbO31P19A1O1GoRa6YAiraoha4dofUajQFGVk51qKdSMI1&#xA;HpJI9QNV59Pmp0/qAv0kXbHLXSX1LXIdK0Yvdvdzrb2RkQQvIXbipZA8ip13+I08cuM+GNy2poEO&#xA;KVR3Ty38teT5dX/Qp8wSJdl/QS/NqP0eZ68QDJ63rCItt6npe5WmVHJPh4uH7d20YocXDxb+7ZE2&#xA;v5e2tvY+Y5/MN/cadP5auYLS8tra1juy7XLOiMjPcWwpWI/RSmROoJMREXxC+dfoKRpwBLiNcPl+&#xA;1iepQ2MN9NFYXDXdmjUguXj9JnX+Yx8n4/LkcyIkkb82iQAOxsIbJMXYq7FXYq9TsPNGq2/5b+Xt&#xA;V8tu2nal5a1V7Ke3gFUunvo2kjndSDzdhG0TKa7dKDYYEsQOWQluJRv3V+Lc+OUjFEx2MTXvt7b5&#xA;N84R6xIi6iYLC/is1FzpEL1aUyn92ymGULIxC1C+kNm2JGavPh4eW4vn+P1uzxZOLnsa5JlrHl1r&#xA;zzV5W8xW8FvDqMcc1peWxkZXFlOhYvHJFvzhNQKChL/aA3yuGSoSieX6f2spQuUZdf0IPT9ButO1&#xA;XzJq5vrdtS1SRJ7S1kWKFks4+fpQzRuEK1bkedfi/a6ZOWQSEY0aH3ojCiTe5+5kt/dWNrpP1zU5&#xA;jbwOvH960T/HxLgAs7QdqDiF3GURBMqH4/S2kgCy8E/OzzzHqHlPTLWxH+47VmaSJg1C62UhiLn0&#xA;0hDoWHFOY/ZY0+w2bfRYOGZJ5j9Lq9bmBgAOR/Q8PzaOrdirMbIWzflRqcTXVut0dYtLiK0aeFZ2&#xA;jit543cQlhIVBmUbL+o5jSvxht/CfvDkxrwTvvxI241q4sfyu0GKwv7dblb++kurVZYJJ1SVYREz&#xA;QktIoJjb9n+GRELyysdB+lmchjijR3so69ukvIPy3vJ9Rs5LmF2S/X6zbK0H+5F50M6hx6QMTg1Y&#xA;D33yMRRyCj8j3MjK/DJI8+XegvzWlv7nVtSuZL3TLjTJNWu5tM+ozWU00kU7lhJJ9ULPxCIn998V&#xA;T88lpABECjfCLu/0/oYaokk7iuI1VfoQPlOeyvfKHmDy291DaajfT2V3p5uXWGGVrYyrJE00hWON&#xA;uM3JS5ANKVyWUETjKthdscRBhKN7mlmrW403yrY+XHurabU7m/e+uI4J4pYoEMKRQiSdGMQZiXLA&#xA;N8IpXDA8UzKtqpZjhgIXvdsk1rzhpMfnHzNoOtMmpeTdX1Ke8jls5I5mtpZXYx3tq8ZdeXFvjX9o&#xA;bHfKIYTwRlHaYHz8i3TzDjlGW8Cfl5hT0S400fmJ5hddTtXs/wBF31ra3000VvHMXsjBDwMrKKua&#xA;UFdsOQHw47G+IfemEh4stxVfoSf8t9Q0V/0x5Z8w3Qs9F1i35vd7MIbmyPrxSL4llV49uvLLNTGW&#xA;04i5D9LTppR3hL6T+hG/l/5ht73849P12+mg0+yFy8nK4lSGGC3SJkiiDysBSNAqKK12yOox1gMR&#xA;uaZYMl5hI7BU0L9IW/n/AMoXWu3+kxpbXUbNJa3Fh6UcEM/rNJNJat6ALF2C1bltTwwZKOOYiJcu&#xA;4/p3TAnxImRH2foU9Qn07zH5cbRknsdJ1jRLq4uY7cTRQ2N/HPxDOkzOYRcIEUD46MvTcYYgwlxb&#xA;mMh8R+xZkTjw7Ag/A/tba+mtfId/oevXNnqWmxwRXPlmWO4gnube7mkjZ44xHI0scfp+p6qsKBl8&#xA;SKvDeQSjYP8AF7vxyUmsZjIgjp70t8+PbyaH5PENzbzvb6T6FxHBPFK8Un1maThIsbMyHhIp+LJ4&#xA;L4p/1v0BhqCOGO/RU/MmS2ls/KDW91bXP1fQba1uFt54ZmjmSaZ2jkWNmKkLIvXBprue38X6l1NV&#xA;Hf8AhCI0/V5h+Tmpad9egWQanF6Fo08K3JtXTncKkbN6vpNNHCxCihYV7HBKH78Gun29P0soz/ck&#xA;X1+xIfIHmK38uec9I1u5RpLayuFedU3b0yCrlRtUhWJAy3UYzOBiOoacGQQmJFH3XkWCPWT6Os6e&#xA;3l5pPUj1cXcNRbFtma35G4EoXrH6fKvtvkRn9PI8XdX6eTM4PVzHD32y6fztDqem/mPrlnPaW0+q&#xA;X2ny6fZ3bWxllht3lDFbectzYIyE0U79Mxhh4Tjib2B7/JyDmsZJCtyK5PKtRvp9Q1C5v5womu5X&#xA;nlEahEDSMWIVRsq1OwHTNhGNCnAlKySh8LF2KuxV2Ks+0u0gP5VRwzzi2Gs+ZIYRMwqI4rW2b1Ja&#xA;VBNDdDb27ZiSP77+rD7z+xzID91X86aNvPLWsnzPL5D8r3tvrl1qLLPc6vGRUqAJKNMWYKsQWpK7&#xA;mtB9riYjLHg8SY4a6M5QlxeHA2T1en/kXr/nuXVdX8oeYVeS90MGRbu6laWeJnZYzbtJyfnGQOac&#xA;SOnUilMDX48dCceUvxbl6Kc7MJc4pz+cv5j+YfImmW0enWsc82rCU/pckUjnBGwho37H2OTHYU3p&#xA;lWi00cx36dG3V6iWIbDn1fKlxf3ty0hnnd/WcyyKWPEuxLFqdK1Y50AiA6IzJ5st81hLn8uvJV8h&#xA;+KAahp0w7BorgTofpW5/DMbFtkmPcfsr9DkZd8UD7wwrMpxXYqnlp5J81XdtHdW2myy28yh4pF40&#xA;ZT0I3yo5oA0S3DTzIsBV/wCVfec/+rVN/wAL/XHx4d6fy2Tud/yr7zn/ANWqb/hf64+PDvX8tk7n&#xA;f8q+85/9Wqb/AIX+uPjw71/LZO53/KvvOf8A1apv+F/rj48O9fy2Tud/yr7zn/1apv8Ahf64+PDv&#xA;X8tk7nf8q+85/wDVqm/4X+uPjw71/LZO53/KvvOf/Vqm/wCF/rj48O9fy2Tud/yr7zn/ANWqb/hf&#xA;64+PDvX8tk7nf8q+85/9Wqb/AIX+uPjw71/LZO53/KvvOf8A1apv+F/rj48O9fy2Tud/yr7zn/1a&#xA;pv8Ahf64+PDvX8tk7nf8q+85/wDVqm/4X+uPjw71/LZO53/KvvOf/Vqm/wCF/rj48O9fy2Tud/yr&#xA;7zn/ANWqb/hf64+PDvX8tk7nf8q+85/9Wqb/AIX+uPjw71/LZO53/KvvOf8A1apv+F/rj48O9fy2&#xA;Tud/yr7zn/1apv8Ahf64+PDvX8tk7nf8q+85/wDVqm/4X+uPjw71/LZO5IZoZIZnhlXjJGxR1PUM&#xA;poRloLSRWyzFDsVdirsVenWXl2TzJ5S8geX7e4jsnv7vV3kuZ/hiBVod6n7TcUoFHtmDLJwTnI70&#xA;I/pc4Y+OEI8r4mK2Ghapp/nldEttWtrLUbe5e3XV4pytvGyghpFnQVUUrvQEd6dsiWQHHxEWK5NE&#xA;cZGThBo971X/AJx7NwNW84Q3GoSRXxkgMmqQyc4/U9SeNpGVqpKrvIPtL35VXrmv7QqoUNu75Odo&#xA;L4p2d/7XrHmDyhBqHpaPrtmmv6MVUWocpBcwuqry9N09JauUYmjIKcVUUVs1+PNXqieGX2OfPEJb&#xA;SFh8w/mv5N0byl5pfTNKu554igleC6iMcsBfcIXoFlFOjL/ad7pM0skLIdJqsMccqBVGUy/kqjsu&#xA;1p5jZEc71FzYglR4U+r1PjXB/l/fD7j+1P8AkP8AO/QwjMpxXYqqCCcwGcRt6AYRmWh4ByCQvLpU&#xA;gE0wWmjVqeFCpLb3EU3oyxPHMKVjZSrbio2O+9cAKSCDSI/Q2r/8sNx/yKf+mDjHey8OXcVM6dqA&#xA;uPqxtZRcUDeiUbnxIqDxpWlDh4hzRwG6pq4sb22ANxbyQhtlMiMoJ9qgYggqYkcw3Bp2oTp6kFrL&#xA;LHWnNEZhUe4GJkAogTyCye2ubdwlxE8LkVCyKVNPkaYggoMSOayOOSR1jjUu7GiqoqST2AGFACOu&#xA;vL+vWkJnutNureFftSywSIo+bMoGQGSJ5EMzjkOYKEt7W5uHKW8TzOBUrGpYgdK0FckSAxESeTdx&#xA;Z3ltx+sQSQ868fURkrTrSoHjiCCpiRzXtpmpLEZWtJliA5GQxsFp41pSmPEO9PBLuXLpGrMoZbKc&#xA;qRUEROQQfowcQ70+HLuKHlhmhkMcyNHIOqOCpH0HJAsSCObkhmeOSRI2aOIAyuASFBNByI6VO2Nr&#xA;RaRHkdUjUu7EBVUVJJ6AAYoARJ0nVVKg2U4LGigxPuaE0G3gMjxDvZ+HLuLY0bWCaCxuK/8AGJ/6&#xA;Y8Y718OXcUIysrFWBVlNGU7EEdjkmDWKuxV2Ksin/Lvz1Bp8eovoV6bCSJZ0uo4Wkj9J1Dq/JAwA&#xA;4nvlI1GMmuIW3HT5ALo0n9jaN5i/KSe2tgX1TyjeS3jQj7R069RRM6jqfTliBbwGUyPBms8piviG&#xA;6I48NDnA/YWM+TdAtfMHmWz0q8v49Mtrlm9a+mpxjVELknkVG/Gm5y/NkMIkgW0YcfHIAmnpX5G3&#xA;eieWfzK1vSdU1W3GnPaz2gupXSO2nZJUpUuSByTlT4vbMHXiU8QIG935uboyIZTEnZ9BaJq2m6i4&#xA;On6rDenT7j6lLMsiSLcK0YmRCwLcpI0YHkO4bpVqafJAx5irF+52sZA8jyYL/wA5B+X/ACrrPlu7&#xA;vrm5httW0KNWS7+0wMrD07WVU5OfW5VTb4actlJzL7OyTjIAD0y/F/BxtdjjKJJ5h4h5ts5dG8j+&#xA;WPKvFm1a8km1u/tQKvGbpUhtYyBU8zDFyKkVFRm1wniySn0Hp+XN1mWPDjjDqd/1Mb1DyX5t03Tf&#xA;0nqOj3llYVVRcXMLwoS/2QOYWtadsujmhI0CCWmWGYFkEBJctanvP5VeSdM8yfk7qujTOkesaxdz&#xA;3Wkc9iXsI4lUqT2DylW9mOanV5zDOJfwgb/F2ulwieEjqeXwea/lt5Xt9W83JHrFLfRtJDXuuPKC&#xA;AkFuRyRgPiq70joN99sztTlMYen6jsHD02LinvyHNPP+ciNPFn+amouqBEu4ra4QKAB/crGTt4tG&#xA;cp7OleEfFs18aynzZ9qw/MO//JPyW/lWbUpNQBIunsJZUl9FA6IHZGViooAK5iQ8IZ58dV5uXMZD&#xA;hjwXbyPUtQ83R/mDa3Guyyw+YbaWyjmkL/vlMMcSIWZSfjKKC29eVa75sYxh4dR+ndwDKfiji+rZ&#xA;k3/OSdxPJ+Z9zFJIzxw21usKMSVQFORCjtVmJyjs0Dwh8W7tE/vPgmX/ADjPcXv6c8xWkEsgR9Jl&#xA;kWFWIUyrIio1K05DmQD75X2mBwxJ/nM+zibkPJrzovmWz/JDTLPzfBPLq0uqNJpVzOPWeKy9IGjz&#xA;/FxLsx4ozVI7UXY4eE6gmHLh3965uIYAJ872U0tf8Cfkzp/mHTR6PmjzRcGP9JBaTW1oBJ8FvJ9q&#xA;MuqKSy7nl7DG/FzmJ+iHTvKK8LCJD6pdWJeRfzQ8zeWddgu3vp7vTZJB+krCeRpI5omNJKq5Yc+N&#xA;aN4+22ZOfSxyRqt+hcfDqZQld2Or0Hzz5U07yv8Anx5Vm0MC0stXvLG4+rwfAiM90IpVQLtwcCtO&#xA;m5HTMLBlOTTy4uYB+5y8+IQzxMdrI+9i/wDzkXPNJ+aupRySM6QxWyxKxJCKbdGIUHoOTE5kdnD9&#xA;yPj97R2gf3pROoXl23/OOGnI0zlR5haEKWJHp/V5X4f6vLenjkYgfmj/AFP0spSP5Yf1v1o7TNc1&#xA;y0/5xzlns7+5t5oNdEMUsMroyRemj8FZSCF5mtPHIyxxOp3A+lnGchprB6qX5q6wup/lf5Jn1w+p&#xA;5ylWV5JXAE5sQzrG0ooGIkpGyk9fiO++HSQ4cs+H6P0o1U7xQ4vr/Qh/yJvtD05PNV/5gt/rGhJY&#xA;Qw6hHxEg4XFykYqvU0ry23223w6+MpcIj9V7fJGhMQJGX00lX5pfldc+UbmHVtKkN95U1EiXTNRQ&#xA;8uAcc0jkYftU+y37Q96gWaXVDIKO0xzDXqdMcZ4h9JRH5r61cvH5Dmt55o5YPLdhIsnIhhKryRlw&#xA;QftcouvXBpID13/PKdVM+j+qHqf51Wv5tv5602byb+kzp6WcPqJaSyJam4FxKSJVDLGfh4cuXbrm&#xA;v0Jw+GePhu+vPk5urGXjBhdU+aLqSWW5mlmp6ruzSU6cianp75vBydNI2d1LCh2Ktrx5DkCVruAa&#xA;Gnz3xV9Wflb+dNh5jhTQbLR5NL/RttGqTyy/WbeK3iAjDSuqRNtt1AHiwzn9VoTD1E3Z9zvtNqxP&#xA;YCqeaawvmvTvzv1PUPJEB1ZjIjTvBGps5lngja5SVkpEsfqOwJZvhO5bkK5nQ4JYAMm33+ThzExn&#xA;JgL+5mWj/k75Jj1q41nVtNP1Z+N02mfWR+jrOB1YsxuT6Rlo60Cnio3HxAVzGnrMnDwg799bn4OR&#xA;HSQ4uIj4dAmvmD8x/wAvfKly9hZTy6bBNFGIY7DT5Ik4rJ6pkVqWquGWiApX4d+RyvHpsmQWd/ef&#xA;7Wyeox49uXwVrbzl+XnnWN7iFba5vlcKGvIXtJIm51jZLsICshH2VSdT/rHqDhyYtt68t/s/YmOX&#xA;Hk3H4+KR6p+WV9aX83mSC2vvMxi9W5tvLOpXRkpdxhR6zFq/Wo0L0KHi5Ip8Yy2OqBHBYj/SA6fo&#xA;a5acg8W8vInqkv5Kajqz+efMeveZ5o7XXGjXl+k4zE7M7HlFFy4PG1EVRxVqLtwO2W62A8OMYfT5&#xA;NWjMuOUpfV5qn52/nHoesaXqHk9tHukuonQm7mPo+lPGwYFYmX1GVl2+MI1DuoODQ6KUSJ2F1mri&#xA;QYUXgYBJAAqTsAM27qXr2qarrnkPTvyzufqskTabBcX9wpXiJPr9wWkidgKcmgUChNR4ZrowjlOQ&#xA;Xz2+Q/W7GUpYhjPd+lF/nfq/lawtpovK8vOTzq0Gs6tIh+H0EX9zHTqPUmLyuDvyGR0MJn6/4Nh+&#xA;PsZa2cQPT/HuVn/ORFlqGoDyp5nMLvFf6REk8wUlVkB9ajECi1+sbVx7OIHFDul+PuR2hEnhl5Jn&#xA;5x8peZ9S/I3yTa6fpd1dXdu5kmt4YmeREkWQoxQDlQgjemQw5oR1EySGzNilLBEAbvM7ny95rTzt&#xA;pNlq0ckuu3rWkj27AmdQxCxrMKVD+mik17dd65nDJDgJH0i3COOfiAS+o09A/PvyD5z1b8xp77S9&#xA;Gu76zuLe3Ec9vE0iVVODBmUEKQR3zD7P1GOOIAkAuVrsE5ZLAtU/IHy5qdh5u84WbJ6xsbC506Se&#xA;Kpia4EyqFRiBWvptTB2hkBhA95BTocZE5Du2U/IUOs+XPy087WXnS1m0/Rbm14aXa6jG8TSXzo4U&#xA;W0cnEk8uDEqNiAa7HDnMZ5YHGble9d3mjAJQxzE9o9L712gyWf5j/k9B5Nt54ovNvl6X1tPtpmCt&#xA;dRLzosbNT/dchWnYqtaDcDIDhz8Z+iXPyWBGbDwfxReeaR+V3nO81lbC70q502CJ1+v315E0Fvbx&#xA;Vq0sksgCABQSN9+1czZ6qAjYN+7q4kNLMyoimT/mh+Zemap+aGlatpAD6T5bktktHUUEv1ab1mdQ&#xA;f2SfhX2Fe+UaXTGOIxlzlf2t+p1AllBHKKafnf5J8wa/5qXzZ5as5tc0TWLeCSG509GuKNGgiKss&#xA;YLD7AO49uoIyvQ54whwTPDKPez1uGUpccRYPcx3zosugflt5f8oXzBNaa7n1W/sa/HbJIojgSYCt&#xA;JHUluJ3A65dh9eWUx9NV72rN6MUYH6rtl/lU+btI/wCceLvUdFe5s70at9ZjkgVvUe3IjiYjb7HI&#xA;bn2zHy8EtSBKiOFyMXHHT3HnaF8w6bb/AJt+Vk806Ki/450qJYte0qMUa6jTZZoVHU06D/Y9QtTj&#xA;kdPPgl/dnke5jkiNRDij9Y5hj/5f6Hq0nkX8wYjZzh/qVrQek9eUVyJCtKdeKk/LL9RMeJj36n7m&#xA;rT45eHPboqflZ+acGjQS+UvNsX1/ydf1imhlBc2pc7so+1w5bso3B+Jfi6x1WlMjxw2mPtXTanh9&#xA;E94H7FX889CtrbzN5Z0fQna/tV0S2i050IkaWNrm4MZBTZqg9RjochMZSlseLf5BOth64xjv6f1s&#xA;z/P7yx56vPzG0fWPLOnXk721jCkN7aRswjnjuZn3ZRRaB1O+YvZ+XGMRjMjn19wcjW4shyCUQeTw&#xA;TWdLn0nV77S7hle4sLiW2maMkoXhco3EkCoqu2beEhKII6uqnHhJHcg8kxdirsVZ/wDlH+Y2l+S7&#xA;68bUrCW7tr4wc5LdwkqCBmcABqBgzMrfaXdRvmJq9OcoFGqcvSagYybHN6ZqX/OSflAQH6npupX0&#xA;oBES3hhh4H4CrCVXuTUPHzrx65gR7Nn1IHu/Ac2XaMOgLyDzt+ZnmXzbJ6d46WmmKxeLS7UGO3Vi&#xA;a8mWpLt7sdu1BmywaaOPlue91+bUyyc+XcreX/zL1OztV0nX4E8yeXP2tLviSY/8q2n3kgb/AFTT&#xA;2wZNMCbj6Zd4/T3px6kgVL1R80L5l/MXzFrluunh003Q4trfRbBfQtUX3Vd5G8Wck5LHp4xN85d5&#xA;5scmolLblHuDIvJP54a/oVm+lavF+m9Hki+r+nLIUuI4+ypNR6qv7Kupp+zTfKc+hjM3H0ybsOtl&#xA;EVL1B6F/0MP5QaHksmr27FUBthDHIAY2UgKxulUhuNJCy1bf7IJGYf8AJ8/6P4+Dmfn4ef4+Lxf8&#xA;xPNcPmzzjqGvw2v1OO8MfGAtyP7qJYuTEbVbhU0/Hrmy0+Lw4CN3TrNRl8SZkxsEg1HXL2lUeeeQ&#xA;UkkZx1oxJFfpxpJJKwknqenTFC83E5TgZG4dOPI0oPbBSeIr0vr1GDJcSqw6MHYEfccaCeM96xri&#xA;dpTM0jGVt2kLHkSfE9caRZu1SPUdQiJMV1KhPUrIw/UceEJE5d6mtxcLXjK68jU0YipPfGkcRdPc&#xA;3E7cp5XlYbBnYsfxxApTInmsVmVgykqw3BGxBwoRN1quqXcaxXV5PcRpQIksjuoA6UDE5ERA5BkZ&#xA;yPMoXJMUVaapqVmrraXc1usgIkWKR0DA9QeJFciYg8wyEyORQzMzMWYlmY1ZjuST3OSYqgurkDiJ&#xA;XAGwHI0pgoJ4isSSRDyRirdKqaH8MKg0v+t3X+/n/wCCP9cFBPEe9SJJNT1wsV/qygqQ7VQUQ1Ow&#xA;8B4dcaTZVY9Qv4yTHcyoSKEq7Co+g4OEJ4z3ofCxdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir2X/oVf8wv+rhpP/I65/7J81n8q4+6&#xA;X2frdj/JuTvH2/qd/wBCr/mF/wBXDSf+R1z/ANk+P8q4+6X2frX+TcnePt/U7/oVf8wv+rhpP/I6&#xA;5/7J8f5Vx90vs/Wv8m5O8fb+p3/Qq/5hf9XDSf8Akdc/9k+P8q4+6X2frX+TcnePt/U7/oVf8wv+&#xA;rhpP/I65/wCyfH+VcfdL7P1r/JuTvH2/qd/0Kv8AmF/1cNJ/5HXP/ZPj/KuPul9n61/k3J3j7f1O&#xA;/wChV/zC/wCrhpP/ACOuf+yfH+VcfdL7P1r/ACbk7x9v6nf9Cr/mF/1cNJ/5HXP/AGT4/wAq4+6X&#xA;2frX+TcnePt/U7/oVf8AML/q4aT/AMjrn/snx/lXH3S+z9a/ybk7x9v6nf8AQq/5hf8AVw0n/kdc&#xA;/wDZPj/KuPul9n61/k3J3j7f1O/6FX/ML/q4aT/yOuf+yfH+VcfdL7P1r/JuTvH2/qd/0Kv+YX/V&#xA;w0n/AJHXP/ZPj/KuPul9n61/k3J3j7f1O/6FX/ML/q4aT/yOuf8Asnx/lXH3S+z9a/ybk7x9v6nf&#xA;9Cr/AJhf9XDSf+R1z/2T4/yrj7pfZ+tf5Nyd4+39Tv8AoVf8wv8Aq4aT/wAjrn/snx/lXH3S+z9a&#xA;/wAm5O8fb+p3/Qq/5hf9XDSf+R1z/wBk+P8AKuPul9n61/k3J3j7f1O/6FX/ADC/6uGk/wDI65/7&#xA;J8f5Vx90vs/Wv8m5O8fb+p3/AEKv+YX/AFcNJ/5HXP8A2T4/yrj7pfZ+tf5Nyd4+39Tv+hV/zC/6&#xA;uGk/8jrn/snx/lXH3S+z9a/ybk7x9v6nf9Cr/mF/1cNJ/wCR1z/2T4/yrj7pfZ+tf5Nyd4+39Tv+&#xA;hV/zC/6uGk/8jrn/ALJ8f5Vx90vs/Wv8m5O8fb+p3/Qq/wCYX/Vw0n/kdc/9k+P8q4+6X2frX+Tc&#xA;nePt/U7/AKFX/ML/AKuGk/8AI65/7J8f5Vx90vs/Wv8AJuTvH2/qd/0Kv+YX/Vw0n/kdc/8AZPj/&#xA;ACrj7pfZ+tf5Nyd4+39Tv+hV/wAwv+rhpP8AyOuf+yfH+VcfdL7P1r/JuTvH2/qd/wBCr/mF/wBX&#xA;DSf+R1z/ANk+P8q4+6X2frX+TcnePt/U7/oVf8wv+rhpP/I65/7J8f5Vx90vs/Wv8m5O8fb+p3/Q&#xA;q/5hf9XDSf8Akdc/9k+P8q4+6X2frX+TcnePt/U7/oVf8wv+rhpP/I65/wCyfH+VcfdL7P1r/JuT&#xA;vH2/qd/0Kv8AmF/1cNJ/5HXP/ZPj/KuPul9n61/k3J3j7f1O/wChV/zC/wCrhpP/ACOuf+yfH+Vc&#xA;fdL7P1r/ACbk7x9v6nf9Cr/mF/1cNJ/5HXP/AGT4/wAq4+6X2frX+TcnePt/U//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
         <xap:MetadataDate>2008-07-18T16:15:18+10:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.038889</stDim:w>
            <stDim:h>209.902778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 294 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 294 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>58.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>21.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:InstanceID>uuid:E36E330B7756DD1194969E87B6366BCF</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -143.548 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 143.548 li
433.363 143.548 li
433.363 0 li
cp
clp
[1 0 0 1 0 0 ]ct
433.363 143.548 mo
0 143.548 li
0 0 li
433.363 0 li
433.363 143.548 li
cp
false sop
/0 
<<
/Name (PANTONE 294 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.58 0 0.21 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
148.839 34.1011 mo
148.809 34.1968 148.279 36.4233 148.279 36.7124 cv
148.279 37.0054 148.443 37.1099 148.584 37.1099 cv
148.834 37.1099 148.938 36.9058 148.995 36.7515 cv
148.993 36.7573 149.385 36.0415 149.385 36.0415 cv
149.723 35.5366 150.238 35.3833 151.686 35.3569 cv
151.686 35.3569 154.33 35.3198 155.047 35.311 cv
155.047 35.6685 155.047 45.2847 155.047 45.2847 cv
155.047 47.5327 155.047 49.4741 154.932 50.4692 cv
154.832 51.1851 154.719 51.563 154.378 51.6333 cv
154.372 51.6353 153.695 51.7241 153.695 51.7241 cv
153.438 51.7241 153.324 51.8892 153.324 52.0522 cv
153.324 52.4253 153.748 52.4253 153.889 52.4253 cv
155.852 52.3667 li
156.242 52.353 li
156.521 52.3628 li
159.194 52.4253 li
159.707 52.4253 159.762 52.1646 159.762 52.0522 cv
159.762 51.895 159.645 51.7241 159.389 51.7241 cv
158.335 51.6323 li
157.764 51.5532 157.625 51.1792 157.556 50.4722 cv
157.433 49.4741 157.433 47.5327 157.433 45.2847 cv
157.433 45.2847 157.433 35.6694 157.433 35.311 cv
157.761 35.3169 160.271 35.3569 160.271 35.3569 cv
162.583 35.4058 162.971 35.9722 163.045 36.521 cv
163.045 36.5229 163.067 36.7769 163.067 36.7769 cv
163.086 37.0054 163.115 37.3511 163.443 37.3511 cv
163.502 37.3511 163.797 37.3276 163.797 36.8579 cv
163.82 36.0903 li
163.868 34.2183 li
163.868 34.0757 163.868 33.7427 163.563 33.7427 cv
163.277 33.7876 li
162.938 33.856 162.304 33.9839 161.187 33.9839 cv
152.183 33.9839 li
150.309 33.8667 li
150.303 33.8667 149.533 33.6665 149.533 33.6665 cv
149.23 33.5776 li
149.014 33.5776 148.925 33.8433 148.839 34.1011 cv
cp
0 0 0 0 cmyk
f
181.162 33.9702 mo
180.775 33.9839 li
180.467 33.9731 li
178.063 33.9126 li
177.922 33.9126 177.494 33.9126 177.494 34.2866 cv
177.494 34.4761 177.654 34.6147 177.871 34.6147 cv
178.648 34.6772 li
179.301 34.8198 179.492 35.0786 179.538 35.8823 cv
179.584 41.0562 li
179.584 41.563 li
169.445 41.519 li
169.481 41.0562 li
169.531 35.8843 li
169.577 35.0688 169.758 34.7769 170.273 34.6792 cv
170.273 34.6792 li
170.275 34.6792 170.839 34.6147 170.839 34.6147 cv
171.057 34.6147 171.215 34.4761 171.215 34.2866 cv
171.215 34.0386 171.024 33.9126 170.646 33.9126 cv
168.688 33.9702 li
168.293 33.9839 li
167.979 33.9731 li
165.578 33.9126 li
165.203 33.9126 165.014 34.0386 165.014 34.2866 cv
165.014 34.4741 165.174 34.6147 165.388 34.6147 cv
166.16 34.6772 li
166.818 34.8198 167.009 35.0786 167.051 35.8823 cv
167.051 35.8853 167.102 41.0562 167.102 41.0562 cv
167.102 45.2847 li
167.102 47.5327 167.102 49.4741 166.984 50.4692 cv
166.884 51.1851 166.771 51.563 166.434 51.6333 cv
166.429 51.6353 165.749 51.7241 165.749 51.7241 cv
165.49 51.7241 165.373 51.8892 165.373 52.0522 cv
165.373 52.4253 165.801 52.4253 165.942 52.4253 cv
167.898 52.3677 li
168.293 52.353 li
168.574 52.3628 li
171.247 52.4253 li
171.755 52.4253 171.811 52.1646 171.811 52.0522 cv
171.811 51.8892 171.695 51.7241 171.441 51.7241 cv
170.381 51.6323 li
169.815 51.5532 169.676 51.1792 169.604 50.4722 cv
169.481 49.4741 169.481 47.5327 169.481 45.2847 cv
169.481 42.7593 li
179.627 42.8003 li
179.584 45.2847 li
179.584 47.5327 179.584 49.4741 179.463 50.4683 cv
179.371 51.1685 179.256 51.563 178.914 51.6333 cv
178.908 51.6353 178.232 51.7241 178.232 51.7241 cv
177.973 51.7241 177.854 51.895 177.854 52.0522 cv
177.854 52.4253 178.282 52.4253 178.422 52.4253 cv
180.388 52.3667 li
180.775 52.353 li
181.049 52.3628 li
183.728 52.4253 li
184.244 52.4253 184.299 52.1646 184.299 52.0522 cv
184.299 51.895 184.182 51.7241 183.924 51.7241 cv
182.869 51.6323 li
182.299 51.5532 182.158 51.1792 182.086 50.4722 cv
181.97 49.4741 181.97 47.5327 181.97 45.2847 cv
181.97 41.0562 li
182.016 35.8833 li
182.066 35.0591 182.239 34.7778 182.756 34.6792 cv
182.756 34.6792 li
182.758 34.6792 183.318 34.6147 183.318 34.6147 cv
183.538 34.6147 183.697 34.4761 183.697 34.2866 cv
183.697 33.9126 183.27 33.9126 183.13 33.9126 cv
181.162 33.9702 li
cp
f
196.499 33.8003 mo
196.385 33.8452 li
195.388 33.9634 li
195.391 33.9634 189.9 33.9839 189.9 33.9839 cv
189.576 33.9722 li
187.188 33.9126 li
187.047 33.9126 186.62 33.9126 186.62 34.2866 cv
186.62 34.4761 186.776 34.6147 186.992 34.6147 cv
187.766 34.6772 li
188.422 34.8198 188.613 35.0786 188.659 35.8823 cv
188.659 35.8843 188.709 41.0562 188.709 41.0562 cv
188.709 45.2847 li
188.709 47.5327 188.709 49.4741 188.59 50.4683 cv
188.49 51.1851 188.377 51.563 188.036 51.6333 cv
188.03 51.6353 187.354 51.7241 187.354 51.7241 cv
187.098 51.7241 186.982 51.8892 186.982 52.0522 cv
186.982 52.4253 187.404 52.4253 187.544 52.4253 cv
189.497 52.3677 li
189.9 52.353 li
190.813 52.3833 li
195.831 52.4937 li
196.777 52.4937 197.097 52.4937 197.301 51.7388 cv
197.422 51.23 197.621 49.5806 197.621 49.3628 cv
197.621 49.187 197.621 48.8208 197.289 48.8208 cv
196.984 48.8208 196.93 49.1538 196.9 49.3325 cv
196.74 50.2583 196.477 50.689 195.926 50.9233 cv
195.336 51.1743 194.307 51.1743 193.692 51.1743 cv
191.367 51.1743 191.153 50.8804 191.091 49.3804 cv
191.088 46.3394 li
191.091 45.2847 li
191.091 43.1733 li
191.091 43.1841 194.489 43.3042 194.489 43.3042 cv
195.304 43.3862 195.497 43.7065 195.578 44.0093 cv
195.58 44.0142 195.666 44.7563 195.666 44.7563 cv
195.666 44.9878 195.812 45.1499 196.02 45.1499 cv
196.372 45.1499 196.372 44.7222 196.372 44.5171 cv
196.467 42.9966 li
196.657 41.6343 li
196.657 41.2866 196.429 41.2593 196.358 41.2593 cv
195.874 41.6128 li
195.692 41.8169 195.41 41.8608 194.852 41.9087 cv
194.851 41.9087 191.052 41.9556 191.052 41.9556 cv
191.091 35.2729 li
191.378 35.2173 193.931 35.2378 194.315 35.2847 cv
195.631 35.4292 195.756 35.7153 195.877 35.9927 cv
195.875 35.9878 196.006 36.7847 196.006 36.7847 cv
196.006 37.23 196.27 37.2778 196.381 37.2778 cv
196.502 37.2778 196.659 37.2065 196.73 36.8667 cv
196.732 36.8579 196.823 35.646 196.823 35.646 cv
196.848 35.2593 li
196.848 35.2632 196.992 34.4429 196.992 34.4429 cv
197.047 34.1216 li
197.047 33.7495 196.832 33.7202 196.766 33.7202 cv
196.499 33.8003 li
cp
f
223.872 33.9663 mo
223.462 33.9839 li
223.125 33.9722 li
220.914 33.9126 li
220.775 33.9126 220.351 33.9126 220.351 34.2866 cv
220.351 34.4741 220.512 34.6147 220.723 34.6147 cv
221.498 34.6772 li
222.202 34.8296 222.343 35.1265 222.39 35.8833 cv
222.39 35.8882 222.437 41.0562 222.437 41.0562 cv
222.437 44.0591 li
222.437 46.9272 222.032 48.6519 221.086 49.8247 cv
220.229 50.8481 218.839 51.4858 217.462 51.4858 cv
216.099 51.4858 215.09 51.2778 213.959 50.2124 cv
213.098 49.3921 212.218 48.0601 212.218 44.4165 cv
212.218 41.0562 li
212.264 35.8833 li
212.313 35.0483 212.493 34.7563 212.996 34.6812 cv
212.999 34.6802 213.567 34.6147 213.567 34.6147 cv
213.786 34.6147 213.945 34.4761 213.945 34.2866 cv
213.945 33.9126 213.52 33.9126 213.381 33.9126 cv
211.597 33.9644 li
211 33.9839 li
210.503 33.9683 li
208.238 33.9126 li
208.098 33.9126 207.672 33.9126 207.672 34.2866 cv
207.672 34.4741 207.833 34.6147 208.047 34.6147 cv
208.823 34.6772 li
209.477 34.8198 209.667 35.0786 209.711 35.8823 cv
209.711 35.8833 209.761 41.0562 209.761 41.0562 cv
209.761 44.5601 li
209.761 48.4429 210.907 50.0483 211.908 51.0112 cv
213.535 52.5405 215.781 52.7681 216.977 52.7681 cv
218.271 52.7681 220.203 52.5796 222.045 50.9409 cv
224.057 49.1519 224.316 46.0933 224.316 43.6284 cv
224.316 41.0562 li
224.364 35.8833 li
224.408 35.0591 224.581 34.7778 225.104 34.6792 cv
225.111 34.6782 225.668 34.6147 225.668 34.6147 cv
225.885 34.6147 226.043 34.4761 226.043 34.2866 cv
226.043 33.9126 225.618 33.9126 225.478 33.9126 cv
223.872 33.9663 li
cp
f
230.311 34.9585 mo
230.287 48.7163 li
230.287 50.8657 230.165 51.4565 229.699 51.5913 cv
229.693 51.5933 228.766 51.7241 228.766 51.7241 cv
228.508 51.7241 228.393 51.8892 228.393 52.0522 cv
228.393 52.4253 228.788 52.4253 228.957 52.4253 cv
230.868 52.3687 li
231.262 52.353 li
231.612 52.3667 li
233.804 52.4253 li
233.974 52.4253 234.419 52.4253 234.419 52.0522 cv
234.419 51.9019 234.32 51.7241 234.043 51.7241 cv
232.89 51.5903 li
232.404 51.4429 232.145 50.9976 232.093 48.9761 cv
232.093 48.9761 231.82 38.8706 231.795 37.9683 cv
232.392 38.6245 237.729 44.4946 237.729 44.4946 cv
240.337 47.3032 243.753 50.7798 244.005 51.0142 cv
245.375 52.3745 245.613 52.5933 245.883 52.5933 cv
246.252 52.5933 246.281 52.3081 246.281 50.7046 cv
246.281 50.7007 246.325 36.6421 246.325 36.6421 cv
246.325 35.144 246.451 34.814 247.07 34.6792 cv
247.074 34.6782 247.611 34.6147 247.611 34.6147 cv
247.919 34.6147 248.06 34.4312 248.06 34.2612 cv
248.06 33.9126 247.644 33.9126 247.444 33.9126 cv
245.833 33.9653 li
245.402 33.9839 li
244.89 33.9663 li
242.906 33.9126 li
242.675 33.9126 242.242 33.9126 242.242 34.2612 cv
242.242 34.4858 242.379 34.6147 242.617 34.6147 cv
243.754 34.728 li
244.327 34.8784 244.523 35.2036 244.544 36.8315 cv
244.544 36.8335 244.752 46.3013 244.802 48.5483 cv
244.336 48.0425 243.012 46.603 243.012 46.603 cv
239.367 42.6343 li
231.524 34.1753 li
231.185 33.8032 230.965 33.5776 230.757 33.5776 cv
230.341 33.5776 230.311 34.1245 230.311 34.9585 cv
cp
f
254.912 33.9702 mo
254.525 33.9839 li
254.154 33.9712 li
252.1 33.9126 li
251.961 33.9126 251.535 33.9126 251.535 34.2866 cv
251.535 34.4741 251.695 34.6147 251.904 34.6147 cv
252.609 34.7007 li
252.979 34.7886 253.233 35.022 253.286 35.8833 cv
253.286 35.8862 253.333 41.0562 253.333 41.0562 cv
253.333 45.2847 li
253.333 47.5327 253.333 49.4741 253.213 50.4683 cv
253.11 51.2017 253.002 51.563 252.662 51.6333 cv
252.656 51.6353 251.979 51.7241 251.979 51.7241 cv
251.722 51.7241 251.604 51.895 251.604 52.0522 cv
251.604 52.4253 252.032 52.4253 252.172 52.4253 cv
254.136 52.3667 li
254.525 52.353 li
254.798 52.3628 li
257.477 52.4253 li
257.991 52.4253 258.045 52.1646 258.045 52.0522 cv
258.045 51.895 257.93 51.7241 257.675 51.7241 cv
256.62 51.6323 li
256.049 51.5542 255.908 51.1792 255.835 50.4712 cv
255.713 49.4741 255.713 47.5327 255.713 45.2847 cv
255.713 41.0562 li
255.765 35.8853 li
255.812 35.0688 255.99 34.7769 256.503 34.6792 cv
256.506 34.6792 257.068 34.6147 257.068 34.6147 cv
257.288 34.6147 257.446 34.4761 257.446 34.2866 cv
257.446 33.9126 257.016 33.9126 256.875 33.9126 cv
254.912 33.9702 li
cp
f
276.387 33.9673 mo
276.032 33.9839 li
275.476 33.9644 li
273.683 33.9126 li
273.436 33.9126 272.974 33.9126 272.974 34.2866 cv
272.974 34.4097 273.032 34.6147 273.419 34.6147 cv
274.271 34.6978 li
274.433 34.7827 274.462 34.9722 274.462 35.0776 cv
274.251 35.9321 li
273.766 37.521 270.791 45.3022 269.3 48.8228 cv
268.998 48.02 264.85 36.9585 264.85 36.9585 cv
264.501 36.061 264.211 35.3071 264.211 35.0337 cv
264.211 35.0337 li
264.211 34.9019 264.246 34.7964 264.422 34.7163 cv
265.257 34.6147 li
265.638 34.6147 265.679 34.3677 265.679 34.2612 cv
265.679 33.9126 265.157 33.9126 264.847 33.9126 cv
263.104 33.9653 li
262.614 33.9839 li
262.022 33.9663 li
259.808 33.9126 li
259.468 33.9126 259.002 33.9126 259.002 34.2612 cv
259.002 34.479 259.146 34.6147 259.377 34.6147 cv
260.238 34.7017 li
260.991 34.9204 261.325 35.1274 261.847 36.4438 cv
267.782 51.3071 li
268.229 52.4292 268.362 52.7681 268.764 52.7681 cv
269.06 52.7681 269.166 52.5288 269.522 51.7349 cv
269.934 50.8325 li
272.9 43.8813 li
274.322 40.4507 li
275.727 37.0425 li
276.355 35.4595 276.7 35.063 276.979 34.8706 cv
277.385 34.6147 277.869 34.6147 278.027 34.6147 cv
278.438 34.6147 278.498 34.3931 278.498 34.2612 cv
278.498 34.0298 278.3 33.9126 277.907 33.9126 cv
276.387 33.9673 li
cp
f
289.494 33.8022 mo
289.389 33.8452 li
288.387 33.9634 li
288.39 33.9634 282.899 33.9839 282.899 33.9839 cv
282.584 33.9731 li
280.189 33.9126 li
280.049 33.9126 279.618 33.9126 279.618 34.2866 cv
279.618 34.4761 279.776 34.6147 279.996 34.6147 cv
280.772 34.6772 li
281.424 34.8198 281.615 35.0786 281.66 35.8823 cv
281.66 35.8853 281.711 41.0562 281.711 41.0562 cv
281.711 45.2847 li
281.711 47.5327 281.711 49.4741 281.59 50.4683 cv
281.49 51.1851 281.379 51.563 281.039 51.6333 cv
281.036 51.6353 280.354 51.7241 280.354 51.7241 cv
280.099 51.7241 279.981 51.895 279.981 52.0522 cv
279.981 52.4253 280.409 52.4253 280.549 52.4253 cv
282.506 52.3677 li
282.899 52.353 li
283.816 52.3843 li
288.832 52.4937 li
289.783 52.4937 290.104 52.4937 290.306 51.7378 cv
290.424 51.229 290.621 49.5806 290.621 49.3628 cv
290.621 49.187 290.621 48.8208 290.294 48.8208 cv
289.994 48.8208 289.937 49.1265 289.898 49.3276 cv
289.74 50.2573 289.479 50.689 288.93 50.9233 cv
288.334 51.1743 287.306 51.1743 286.693 51.1743 cv
284.367 51.1743 284.153 50.8804 284.092 49.3804 cv
284.088 46.3394 li
284.092 45.2847 li
284.092 43.1733 li
284.092 43.1841 287.492 43.3042 287.492 43.3042 cv
288.402 43.395 288.521 43.7974 288.583 44.0132 cv
288.67 44.7563 li
288.67 44.9956 288.809 45.1499 289.023 45.1499 cv
289.371 45.1499 289.371 44.7222 289.371 44.5171 cv
289.471 42.9976 li
289.471 42.9946 289.661 41.6343 289.661 41.6343 cv
289.661 41.2866 289.43 41.2593 289.357 41.2593 cv
288.914 41.5737 li
288.694 41.8169 288.413 41.8608 287.851 41.9087 cv
284.055 41.9556 li
284.092 35.2729 li
284.055 35.2173 287.32 35.2847 287.32 35.2847 cv
288.627 35.4282 288.756 35.7163 288.879 35.9937 cv
288.879 35.9976 289.006 36.7847 289.006 36.7847 cv
289.006 37.23 289.27 37.2778 289.383 37.2778 cv
289.485 37.2778 289.664 37.2241 289.727 36.8608 cv
289.726 36.8647 289.822 35.7222 289.822 35.7222 cv
289.854 35.2642 li
290.045 34.1216 li
290.045 33.7593 289.852 33.7202 289.768 33.7202 cv
289.494 33.8022 li
cp
f
297.867 33.9614 mo
297.064 33.9839 li
296.748 33.9731 li
294.352 33.9126 li
294.211 33.9126 293.786 33.9126 293.786 34.2866 cv
293.786 34.4761 293.944 34.6147 294.162 34.6147 cv
294.932 34.6772 li
295.588 34.8198 295.778 35.0786 295.825 35.8823 cv
295.825 35.8843 295.875 41.0562 295.875 41.0562 cv
295.875 45.2847 li
295.875 47.5327 295.875 49.4741 295.752 50.4683 cv
295.658 51.1685 295.544 51.563 295.201 51.6333 cv
295.198 51.6353 294.519 51.7241 294.519 51.7241 cv
294.261 51.7241 294.145 51.8892 294.145 52.0522 cv
294.145 52.4253 294.571 52.4253 294.712 52.4253 cv
296.871 52.3569 li
296.967 52.353 297.252 52.3628 297.252 52.3628 cv
299.918 52.4253 li
300.437 52.4253 300.492 52.1646 300.492 52.0522 cv
300.492 51.895 300.373 51.7241 300.111 51.7241 cv
299.06 51.6323 li
298.488 51.5532 298.35 51.1792 298.28 50.4722 cv
298.157 49.4741 298.157 47.5327 298.157 45.2847 cv
298.157 44.7065 li
298.145 44.7007 301.096 44.7427 301.096 44.7427 cv
301.099 44.7427 301.286 44.8394 301.286 44.8394 cv
301.287 44.8452 302.113 45.9741 302.113 45.9741 cv
303.879 48.3706 li
304.204 48.7954 li
305.402 50.3765 306.196 51.4214 307.18 51.9468 cv
307.843 52.3091 308.487 52.4253 309.835 52.4253 cv
311.54 52.4253 li
311.842 52.4253 312.302 52.4253 312.302 52.0522 cv
312.302 51.8716 312.12 51.7241 311.9 51.7241 cv
310.992 51.6558 li
310.367 51.5562 309.395 51.2759 308.171 49.9839 cv
306.914 48.644 305.446 46.7554 303.748 44.5698 cv
303.748 44.5698 303.418 44.1421 303.284 43.9731 cv
305.215 42.1489 306.132 40.3794 306.132 38.4175 cv
306.132 36.7114 305.042 35.4663 304.398 35.0005 cv
303.061 34.0425 301.374 33.9126 299.9 33.9126 cv
297.867 33.9614 li
cp
298.24 43.2798 mo
298.163 43.229 298.157 43.187 298.157 43.1431 cv
298.157 35.2954 li
298.157 35.2319 298.178 35.2007 298.232 35.1792 cv
298.416 35.1245 299.03 35.0425 299.777 35.0425 cv
302.265 35.0425 303.748 36.771 303.748 39.6646 cv
303.748 41.2964 303.23 42.6196 302.361 43.2065 cv
301.828 43.5845 301.175 43.6323 300.665 43.6323 cv
299.531 43.6323 298.523 43.4497 298.24 43.2798 cv
cp
f
313.374 38.0806 mo
313.374 39.7192 313.916 41.2563 316.562 43.4302 cv
317.641 44.3179 li
319.758 46.062 320.338 46.9614 320.338 48.5024 cv
320.338 49.9956 319.222 51.5083 317.089 51.5083 cv
316.215 51.5083 314.136 51.2847 313.711 49.2065 cv
313.646 48.3569 li
313.646 48.2231 313.646 47.9106 313.295 47.9106 cv
312.977 47.9106 312.939 48.2642 312.917 48.4546 cv
312.917 48.4604 312.899 48.689 312.899 48.689 cv
312.797 51.021 li
312.797 51.6655 312.817 51.8784 313.26 52.0972 cv
313.262 52.0972 li
314.188 52.5493 315.27 52.7681 316.562 52.7681 cv
318.023 52.7681 319.313 52.4058 320.288 51.7202 cv
321.852 50.6099 322.406 48.856 322.406 47.5854 cv
322.406 45.7065 321.82 44.1558 318.829 41.8003 cv
318.161 41.2729 li
315.863 39.3921 315.302 38.6284 315.302 37.3833 cv
315.302 35.8267 316.412 34.7798 318.066 34.7798 cv
320.054 34.7798 320.716 35.605 320.909 35.9595 cv
321.035 36.1929 321.179 36.8198 321.203 37.0894 cv
321.223 37.2593 321.26 37.5669 321.574 37.5669 cv
321.929 37.5669 321.929 37.0874 321.929 36.8296 cv
322.008 34.4683 li
322.018 34.2866 li
322.018 33.939 321.703 33.939 321.601 33.939 cv
320.798 33.8228 li
320.112 33.6558 319.389 33.5776 318.524 33.5776 cv
315.445 33.5776 313.374 35.3872 313.374 38.0806 cv
cp
f
329.484 33.9702 mo
329.086 33.9839 li
328.72 33.9712 li
326.666 33.9126 li
326.288 33.9126 326.098 34.0386 326.098 34.2866 cv
326.098 34.4741 326.259 34.6147 326.473 34.6147 cv
327.168 34.7007 li
327.495 34.7778 327.8 34.9731 327.852 35.8823 cv
327.896 41.0562 li
327.896 45.2847 li
327.896 47.5327 327.896 49.4741 327.779 50.4692 cv
327.68 51.1851 327.565 51.563 327.226 51.6333 cv
327.221 51.6353 326.543 51.7241 326.543 51.7241 cv
326.288 51.7241 326.171 51.895 326.171 52.0522 cv
326.171 52.4253 326.596 52.4253 326.733 52.4253 cv
328.702 52.3667 li
329.086 52.353 li
329.37 52.3628 li
332.045 52.4253 li
332.552 52.4253 332.604 52.1646 332.604 52.0522 cv
332.604 51.8892 332.49 51.7241 332.232 51.7241 cv
331.182 51.6323 li
330.611 51.5532 330.472 51.1792 330.401 50.4722 cv
330.278 49.4741 330.278 47.5327 330.278 45.2847 cv
330.278 41.0562 li
330.331 35.8853 li
330.373 35.0698 330.554 34.7778 331.07 34.6792 cv
331.07 34.6792 li
331.072 34.6792 331.633 34.6147 331.633 34.6147 cv
331.852 34.6147 332.01 34.4761 332.01 34.2866 cv
332.01 33.9126 331.58 33.9126 331.439 33.9126 cv
329.484 33.9702 li
cp
f
334.849 34.1528 mo
334.837 34.1968 334.307 36.4233 334.307 36.7124 cv
334.307 37.0054 334.471 37.1099 334.609 37.1099 cv
334.852 37.1099 334.957 36.9194 335.021 36.7544 cv
335.021 36.7524 335.414 36.0425 335.414 36.0425 cv
335.748 35.5366 336.264 35.3833 337.708 35.3569 cv
337.709 35.3569 340.359 35.3198 341.077 35.311 cv
341.077 35.6685 341.077 45.2847 341.077 45.2847 cv
341.077 47.5327 341.077 49.4741 340.959 50.4683 cv
340.866 51.1685 340.749 51.562 340.409 51.6333 cv
340.403 51.6353 339.724 51.7241 339.724 51.7241 cv
339.466 51.7241 339.352 51.8892 339.352 52.0522 cv
339.352 52.4253 339.776 52.4253 339.917 52.4253 cv
341.874 52.3677 li
342.27 52.353 li
342.554 52.3628 li
345.219 52.4253 li
345.715 52.4253 345.789 52.1919 345.789 52.0522 cv
345.789 51.895 345.672 51.7241 345.416 51.7241 cv
344.359 51.6323 li
343.793 51.5542 343.652 51.1792 343.579 50.4712 cv
343.459 49.4741 343.459 47.5327 343.459 45.2847 cv
343.459 45.2847 343.459 35.6694 343.459 35.311 cv
343.787 35.3169 346.298 35.3569 346.298 35.3569 cv
348.611 35.4058 349 35.9731 349.076 36.521 cv
349.076 36.5249 349.098 36.7769 349.098 36.7769 cv
349.113 37.0034 349.137 37.3511 349.477 37.3511 cv
349.533 37.3511 349.824 37.3276 349.824 36.8579 cv
349.846 36.0894 li
349.893 34.2183 li
349.893 34.0757 349.893 33.7427 349.591 33.7427 cv
349.307 33.7866 li
348.969 33.855 348.337 33.9839 347.218 33.9839 cv
338.215 33.9839 li
336.331 33.8667 li
336.326 33.8667 335.557 33.6655 335.557 33.6655 cv
335.262 33.5776 li
335.051 33.5776 334.954 33.8267 334.849 34.1528 cv
cp
f
366.067 33.9634 mo
365.435 33.9839 li
365.051 33.9644 li
363.852 33.9126 li
363.357 33.9126 363.283 34.1167 363.283 34.2368 cv
363.283 34.4858 363.519 34.5649 363.747 34.6421 cv
363.852 34.6714 364.029 34.7163 364.029 35.1479 cv
364.029 35.4907 363.9 35.8716 363.645 36.2798 cv
363.237 36.9585 360.543 41.5933 359.801 43.0571 cv
359.007 41.7222 355.91 36.4009 355.559 35.7573 cv
355.38 35.4185 355.27 35.1577 355.27 34.9106 cv
355.27 34.8042 355.342 34.7124 355.482 34.6392 cv
355.485 34.6392 355.605 34.5913 355.605 34.5913 cv
355.762 34.5298 355.942 34.4614 355.942 34.2612 cv
355.942 34.0298 355.777 33.9126 355.45 33.9126 cv
353.757 33.9692 li
353.429 33.9839 li
352.867 33.9663 li
351.059 33.9126 li
350.582 33.9126 350.559 34.2036 350.559 34.2612 cv
350.559 34.4692 350.733 34.6147 350.982 34.6147 cv
351.149 34.6147 351.576 34.7397 351.914 34.9683 cv
352.389 35.2847 352.978 35.9292 353.493 36.6929 cv
354.357 37.9692 357.557 43.229 357.705 43.5806 cv
358.023 44.2847 358.246 44.7798 358.246 46.0288 cv
358.246 48.0933 li
358.172 50.4761 li
358.14 50.9546 358.011 51.5425 357.574 51.6333 cv
357.571 51.6353 356.892 51.7241 356.892 51.7241 cv
356.634 51.7241 356.517 51.8892 356.517 52.0522 cv
356.517 52.4253 356.941 52.4253 357.082 52.4253 cv
359.048 52.3667 li
359.434 52.353 li
359.719 52.3628 li
362.385 52.4253 li
362.897 52.4253 362.953 52.1646 362.953 52.0522 cv
362.953 51.895 362.836 51.7241 362.578 51.7241 cv
361.523 51.6323 li
360.99 51.5581 360.75 51.2231 360.695 50.4771 cv
360.695 50.4761 360.625 48.0933 360.625 48.0933 cv
360.625 46.0288 li
360.625 45.2554 360.625 44.5249 360.97 43.6987 cv
361.381 42.7153 364.721 37.0874 365.527 36.1069 cv
366.063 35.4497 366.314 35.187 366.758 34.9272 cv
367.09 34.7104 367.51 34.6147 367.762 34.6147 cv
368.13 34.6147 368.259 34.4106 368.259 34.2368 cv
368.259 34.0874 368.13 33.9126 367.762 33.9126 cv
366.067 33.9634 li
cp
f
376.342 43.1431 mo
376.342 47.7788 379.314 52.7681 385.843 52.7681 cv
391.497 52.7681 395.602 48.5591 395.602 42.7593 cv
395.602 37.2671 391.737 33.5776 385.984 33.5776 cv
378.959 33.5776 376.342 39.4448 376.342 43.1431 cv
cp
378.993 42.4722 mo
378.993 37.7134 381.606 34.7573 385.814 34.7573 cv
389.242 34.7573 392.933 37.4731 392.933 43.436 cv
392.933 51.0972 387.564 51.4858 386.487 51.4858 cv
382.075 51.4858 378.993 47.7788 378.993 42.4722 cv
cp
f
408.074 33.811 mo
407.943 33.8755 li
407.941 33.8755 407.212 33.9497 407.212 33.9497 cv
406.932 33.9634 li
406.936 33.9634 401.036 33.9839 401.036 33.9839 cv
400.721 33.9731 li
398.324 33.9126 li
398.183 33.9126 397.755 33.9126 397.755 34.2866 cv
397.755 34.4761 397.913 34.6147 398.133 34.6147 cv
398.903 34.6772 li
399.561 34.8188 399.752 35.0776 399.797 35.8823 cv
399.797 35.8853 399.848 41.0562 399.848 41.0562 cv
399.848 45.2847 li
399.848 47.5327 399.848 49.4741 399.727 50.4683 cv
399.627 51.1851 399.513 51.563 399.176 51.6333 cv
399.173 51.6353 398.493 51.7241 398.493 51.7241 cv
398.234 51.7241 398.118 51.8892 398.118 52.0522 cv
398.118 52.4253 398.546 52.4253 398.686 52.4253 cv
400.643 52.3677 li
401.036 52.353 li
401.323 52.3628 li
403.988 52.4253 li
404.502 52.4253 404.558 52.1646 404.558 52.0522 cv
404.558 51.8892 404.44 51.7241 404.18 51.7241 cv
403.131 51.6323 li
402.56 51.5532 402.42 51.1792 402.352 50.4722 cv
402.229 49.4741 402.229 47.5327 402.229 45.2847 cv
402.229 43.2407 li
403.121 43.2075 405.284 43.2144 405.817 43.2778 cv
406.453 43.3589 406.805 43.7173 406.919 44.0259 cv
407.033 44.7085 li
407.048 44.8511 li
407.048 45.064 407.191 45.2261 407.396 45.2261 cv
407.748 45.2261 407.748 44.8101 407.748 44.5864 cv
407.845 42.9976 li
407.845 42.9956 408.038 41.6343 408.038 41.6343 cv
408.038 41.2866 407.809 41.2593 407.738 41.2593 cv
407.563 41.2593 407.459 41.397 407.367 41.519 cv
407.165 41.8032 406.948 41.8823 406.355 41.9292 cv
406.354 41.9292 405.287 41.9556 405.287 41.9556 cv
405.285 41.9556 402.214 41.978 402.214 41.978 cv
402.229 35.3179 li
402.258 35.2368 405.952 35.3081 405.952 35.3081 cv
406.813 35.3296 407.309 35.7163 407.43 35.9722 cv
407.43 35.9741 407.625 36.811 407.625 36.811 cv
407.625 37.2554 407.918 37.2778 407.977 37.2778 cv
408.104 37.2778 408.272 37.2065 408.348 36.8687 cv
408.349 36.8589 408.442 35.6772 408.442 35.6772 cv
408.469 35.2612 li
408.469 35.2632 408.609 34.4419 408.609 34.4419 cv
408.662 34.1216 li
408.662 33.8853 408.527 33.7202 408.336 33.7202 cv
408.074 33.811 li
cp
f
151.246 65.5854 mo
151.246 67.0474 li
407.314 67.0474 li
407.314 65.5854 li
151.246 65.5854 li
cp
f
177.046 80.6411 mo
177.045 80.644 167.876 99.895 167.045 101.638 cv
166.883 101.301 157.009 80.9019 157.009 80.9019 cv
156.543 79.9702 156.3 79.7007 155.925 79.7007 cv
155.68 79.7007 155.355 79.8823 155.204 80.7407 cv
151.534 104.914 li
151.334 106.276 151.021 107.565 150.086 107.764 cv
150.084 107.764 148.993 107.875 148.993 107.875 cv
148.824 107.875 148.308 107.875 148.308 108.224 cv
148.308 108.725 148.859 108.725 149.067 108.725 cv
151.348 108.658 li
152.737 108.614 li
153.925 108.652 li
156.629 108.725 li
157.104 108.725 157.609 108.687 157.609 108.224 cv
157.609 108.003 157.374 107.875 156.963 107.875 cv
155.425 107.691 li
154.727 107.527 154.386 107.167 154.386 106.593 cv
154.496 104.864 li
154.496 104.864 156.182 91.9526 156.399 90.2886 cv
156.704 90.7886 158.199 93.9712 158.199 93.9712 cv
160.251 98.3628 li
160.689 99.3843 163.573 104.972 164.518 106.785 cv
164.627 106.988 li
165.189 108.048 165.528 108.687 165.896 108.687 cv
166.296 108.687 166.492 108.316 167.35 106.562 cv
167.351 106.56 175.43 89.7319 175.431 89.73 cv
175.431 89.7319 li
175.431 89.8813 177.631 106.012 177.631 106.012 cv
177.678 106.34 177.696 106.607 177.696 106.818 cv
177.696 107.269 177.608 107.474 177.508 107.507 cv
177.26 107.615 177.037 107.747 177.037 108.003 cv
177.037 108.003 li
177.037 108.338 177.427 108.435 178.195 108.502 cv
179.656 108.611 184.765 108.725 185.729 108.725 cv
186.408 108.725 186.783 108.548 186.783 108.224 cv
186.783 107.875 186.32 107.875 186.098 107.875 cv
185.591 107.875 184.875 107.834 183.826 107.507 cv
182.736 107.181 182.394 106.065 182.076 103.838 cv
178.701 80.9292 li
178.584 80.103 178.337 79.7007 177.944 79.7007 cv
177.547 79.7007 177.34 80.0562 177.046 80.6411 cv
cp
f
206.058 80.3071 mo
205.839 80.3716 li
205.836 80.3716 204.254 80.5913 204.254 80.5913 cv
203.624 80.6245 197.568 80.6294 194.995 80.6294 cv
193.098 80.5708 li
192.664 80.5542 li
192.66 80.5542 189.659 80.5181 189.659 80.5181 cv
189.22 80.5181 188.751 80.5503 188.751 80.9429 cv
188.751 81.3677 189.238 81.3677 189.473 81.3677 cv
190.896 81.4761 li
192.106 81.7319 192.353 82.3345 192.42 83.5063 cv
192.495 84.6899 192.495 85.7065 192.495 91.3589 cv
192.495 97.8843 li
192.495 101.281 192.495 104.216 192.312 105.767 cv
192.146 106.967 191.944 107.6 191.308 107.729 cv
191.307 107.729 189.991 107.875 189.991 107.875 cv
189.697 107.875 189.307 107.916 189.307 108.263 cv
189.307 108.57 189.587 108.725 190.139 108.725 cv
192.699 108.65 li
192.702 108.65 194.811 108.614 194.811 108.614 cv
198.662 108.725 li
198.664 108.725 199.738 108.751 199.738 108.751 cv
205.078 108.836 li
206.506 108.836 206.892 108.836 207.168 107.805 cv
207.359 107.044 207.654 104.531 207.654 103.666 cv
207.654 103.293 207.654 102.907 207.267 102.907 cv
206.91 102.907 206.835 103.169 206.769 103.539 cv
206.506 105.068 206.068 105.792 205.152 106.214 cv
204.207 106.651 202.641 106.651 201.706 106.651 cv
197.856 106.651 197.419 106.039 197.349 103.626 cv
197.349 103.625 197.342 99.4116 197.342 99.4116 cv
197.349 97.8843 li
197.349 94.9556 li
197.349 94.6743 197.416 94.6743 197.48 94.6743 cv
198.313 94.6743 202.021 94.7104 202.732 94.7856 cv
203.906 94.9116 204.522 95.3364 204.73 96.1626 cv
204.73 96.1655 204.85 97.1382 204.85 97.1382 cv
204.877 97.4858 li
204.876 97.7505 205.027 97.8999 205.302 97.8999 cv
205.726 97.8999 205.726 97.4019 205.726 97.105 cv
205.794 95.9351 li
205.874 94.6245 li
206.125 92.3159 li
206.172 91.9146 li
206.172 91.6685 206.044 91.5278 205.82 91.5278 cv
205.606 91.5278 205.448 91.7085 205.209 91.9819 cv
204.846 92.3882 204.313 92.4937 203.44 92.5649 cv
202.893 92.6128 200.789 92.6401 197.517 92.6401 cv
197.4 92.6401 197.349 92.6108 197.349 92.3218 cv
197.349 82.9438 li
197.349 82.6655 197.438 82.6655 197.517 82.6655 cv
198.233 82.6655 202.131 82.7358 202.77 82.812 cv
204.631 83.0347 204.942 83.4829 205.18 84.0894 cv
205.389 84.5933 205.395 85.311 205.395 85.3901 cv
205.395 85.5737 205.395 86.0024 205.82 86.0024 cv
206.183 86.0024 206.255 85.6509 206.282 85.521 cv
206.283 85.5161 206.416 83.8198 206.416 83.8198 cv
206.467 83.064 li
206.467 83.061 206.712 81.0132 206.712 81.0132 cv
206.764 80.646 li
206.764 80.5415 206.764 80.2192 206.449 80.2192 cv
206.058 80.3071 li
cp
f
220.35 80.5825 mo
218.388 80.6294 li
216.506 80.5854 li
213.308 80.5181 li
212.869 80.5181 212.4 80.5503 212.4 80.9429 cv
212.4 81.3677 212.888 81.3677 213.122 81.3677 cv
214.325 81.4761 li
215.535 81.7339 215.78 82.3345 215.85 83.5063 cv
215.923 84.6899 215.923 85.7065 215.923 91.3589 cv
215.923 97.8843 li
215.923 101.281 215.923 104.216 215.738 105.767 cv
215.572 106.967 215.371 107.6 214.735 107.729 cv
214.732 107.729 213.419 107.875 213.419 107.875 cv
213.126 107.875 212.735 107.916 212.735 108.263 cv
212.735 108.725 213.361 108.725 213.567 108.725 cv
216.125 108.65 li
216.129 108.65 218.238 108.614 218.238 108.614 cv
224.025 108.757 li
229.025 108.836 li
230.974 108.836 231.208 108.648 231.448 107.767 cv
231.75 106.675 232.008 103.909 232.008 103.481 cv
232.008 103.126 232.008 102.759 231.621 102.759 cv
231.191 102.759 231.146 103.173 231.121 103.398 cv
231.049 104.091 230.607 105.105 230.18 105.57 cv
229.31 106.509 227.986 106.578 225.911 106.578 cv
222.945 106.578 222.067 106.299 221.486 105.785 cv
220.74 105.144 220.74 102.564 220.74 97.8843 cv
220.74 91.3589 li
220.74 85.7065 220.74 84.6899 220.813 83.5063 cv
220.891 82.1538 221.218 81.6431 222.111 81.4761 cv
223.539 81.3677 li
223.934 81.3677 224.299 81.3149 224.299 80.9429 cv
224.299 80.5679 223.881 80.5181 223.428 80.5181 cv
220.35 80.5825 li
cp
f
244.222 106.545 mo
243.088 106.087 242.98 105.519 242.98 103.074 cv
242.98 94.2866 li
242.98 94.1323 243.035 94.1206 243.111 94.1206 cv
244.702 94.1558 li
246.103 94.229 246.952 94.4722 247.729 95.0288 cv
247.73 95.0288 li
250.941 97.269 251.288 100.882 251.288 102.333 cv
251.288 106.762 247.627 106.985 246.894 106.985 cv
246.051 106.985 245.213 106.953 244.222 106.545 cv
cp
244.445 82.2202 mo
247.755 82.2202 248.988 85.689 248.988 87.8745 cv
248.988 89.6118 248.473 90.9468 247.503 91.7329 cv
246.858 92.3013 245.991 92.4175 244.893 92.4175 cv
243.17 92.3071 li
243.059 92.2808 242.98 92.2427 242.98 91.9878 cv
242.98 82.8325 li
242.98 82.437 243.05 82.3462 243.246 82.2905 cv
243.248 82.2905 244.445 82.2202 244.445 82.2202 cv
cp
243.223 80.5649 mo
240.554 80.6294 li
239.127 80.5933 li
235.514 80.5181 li
235.074 80.5181 234.606 80.5503 234.606 80.9429 cv
234.606 81.3677 235.093 81.3677 235.327 81.3677 cv
236.75 81.4761 li
237.961 81.7339 238.207 82.3345 238.274 83.5063 cv
238.348 84.6899 238.348 85.7065 238.348 91.3589 cv
238.348 97.8843 li
238.348 101.281 238.348 104.216 238.166 105.767 cv
238.028 106.757 237.858 107.588 237.164 107.729 cv
237.161 107.729 235.846 107.875 235.846 107.875 cv
235.553 107.875 235.163 107.916 235.163 108.263 cv
235.163 108.725 235.787 108.725 235.994 108.725 cv
238.553 108.65 li
238.556 108.65 240.665 108.614 240.665 108.614 cv
243.439 108.725 li
243.442 108.725 244.885 108.79 244.885 108.79 cv
246.039 108.836 li
252.94 108.836 256.028 104.732 256.028 100.664 cv
256.028 96.4702 252.612 93.7778 249.361 92.6265 cv
251.584 90.8276 253.063 89.0259 253.063 86.1694 cv
253.063 84.8423 252.488 80.5181 245.077 80.5181 cv
243.223 80.5649 li
cp
f
265.072 93.4702 mo
265.072 83.4565 270.729 81.9604 274.102 81.9604 cv
280.443 81.9604 284.873 87.4556 284.873 95.3247 cv
284.873 106.048 278.921 107.208 276.361 107.208 cv
269.716 107.208 265.072 101.559 265.072 93.4702 cv
cp
259.775 94.6216 mo
259.775 101.665 264.479 109.244 274.807 109.244 cv
283.896 109.244 290.244 102.957 290.244 93.9536 cv
290.244 85.3462 284.471 79.9995 275.177 79.9995 cv
264.595 79.9995 259.775 87.5786 259.775 94.6216 cv
cp
f
318.689 80.5972 mo
317.619 80.6294 li
317.517 80.6235 313.357 80.5181 313.357 80.5181 cv
312.938 80.5181 312.489 80.5503 312.489 80.9429 cv
312.489 81.3677 312.976 81.3677 313.21 81.3677 cv
314.521 81.4761 li
315.732 81.7319 315.977 82.3345 316.046 83.5063 cv
316.119 84.6899 316.119 85.7065 316.119 91.3589 cv
316.119 95.9927 li
316.119 99.9604 315.964 103.153 313.996 105.122 cv
312.215 106.904 309.87 107.096 308.947 107.096 cv
307.666 107.096 305.986 106.926 304.371 105.597 cv
302.886 104.384 301.512 102.45 301.512 96.5493 cv
301.512 91.3589 li
301.512 85.7065 301.512 84.6899 301.586 83.5063 cv
301.664 82.1538 301.99 81.6431 302.886 81.4761 cv
303.941 81.3677 li
304.146 81.3677 304.626 81.3677 304.626 80.9429 cv
304.626 80.5503 304.157 80.5181 303.721 80.5181 cv
301.011 80.5825 li
299.159 80.6294 li
297.179 80.5854 li
293.748 80.5181 li
293.309 80.5181 292.843 80.5503 292.843 80.9429 cv
292.843 81.3677 293.329 81.3677 293.563 81.3677 cv
294.986 81.4761 li
296.197 81.7339 296.443 82.3354 296.511 83.5063 cv
296.584 84.6899 296.584 85.7065 296.584 91.3589 cv
296.584 96.771 li
296.584 101.471 297.642 104.613 299.915 106.663 cv
302.769 109.244 306.578 109.244 308.205 109.244 cv
310.363 109.244 313.199 108.936 315.976 106.551 cv
319.099 103.876 319.529 99.5737 319.529 95.3247 cv
319.529 91.3589 li
319.529 85.7065 319.529 84.6899 319.603 83.5063 cv
319.679 82.1538 320.007 81.6431 320.897 81.4761 cv
320.9 81.4761 321.958 81.3677 321.958 81.3677 cv
322.351 81.3677 322.715 81.3149 322.715 80.9429 cv
322.715 80.5503 322.268 80.5181 321.847 80.5181 cv
318.689 80.5972 li
cp
f
334.59 94.8687 mo
334.389 94.7798 334.318 94.6831 334.318 94.2866 cv
334.318 83.02 li
334.318 82.7446 334.379 82.646 334.585 82.5874 cv
334.919 82.4868 335.517 82.4429 336.524 82.4429 cv
338.598 82.4429 342.105 83.8521 342.105 89.1343 cv
342.105 92.5386 340.758 94.0327 339.955 94.6216 cv
339.319 95.0796 338.856 95.2339 337.377 95.2339 cv
336.32 95.2339 335.279 95.0972 334.59 94.8687 cv
cp
334.726 80.5708 mo
332.004 80.6294 li
330.519 80.5913 li
326.924 80.5181 li
326.486 80.5181 326.018 80.5503 326.018 80.9429 cv
326.018 81.3677 326.505 81.3677 326.739 81.3677 cv
328.163 81.4761 li
329.375 81.7339 329.619 82.3345 329.687 83.5063 cv
329.76 84.6899 329.76 85.7065 329.76 91.3589 cv
329.76 97.8843 li
329.76 101.281 329.76 104.216 329.576 105.767 cv
329.44 106.757 329.271 107.588 328.574 107.729 cv
328.573 107.729 327.258 107.875 327.258 107.875 cv
326.965 107.875 326.572 107.916 326.572 108.263 cv
326.572 108.725 327.199 108.725 327.406 108.725 cv
330.425 108.655 li
331.93 108.614 li
333.126 108.643 li
337.377 108.725 li
337.584 108.725 338.209 108.725 338.209 108.263 cv
338.209 108.146 338.156 107.875 337.674 107.875 cv
335.869 107.726 li
334.878 107.594 334.623 106.937 334.503 105.769 cv
334.318 104.216 334.318 101.263 334.318 97.8452 cv
334.318 97.3276 li
334.318 97.1733 334.371 97.1226 334.523 97.1226 cv
337.746 97.1968 li
338.001 97.1968 338.188 97.2349 338.346 97.4224 cv
338.347 97.4253 340.119 99.8716 340.119 99.8716 cv
342.012 102.532 li
344.177 105.511 345.563 107.177 347.121 108.01 cv
348.126 108.552 349.102 108.725 351.132 108.725 cv
354.65 108.725 li
354.91 108.725 355.447 108.725 355.447 108.263 cv
355.447 108.146 355.395 107.875 354.911 107.875 cv
353.889 107.764 li
353.288 107.644 351.794 107.348 349.787 105.271 cv
347.9 103.287 345.759 100.583 343.046 97.1646 cv
343.046 97.1646 341.897 95.7173 341.801 95.5942 cv
345.201 92.8169 346.662 90.3237 346.662 87.2808 cv
346.662 84.5786 344.986 82.7271 344.101 82.1265 cv
342.029 80.7085 339.465 80.5181 337.229 80.5181 cv
334.726 80.5708 li
cp
f
359.891 81.2388 mo
359.558 103.182 li
359.521 106.378 359.367 107.417 358.474 107.694 cv
357.922 107.851 357.208 107.875 356.832 107.875 cv
356.645 107.875 356.146 107.875 356.146 108.263 cv
356.146 108.725 356.669 108.725 357.053 108.725 cv
360.434 108.637 li
361.058 108.614 li
362.089 108.644 li
365.654 108.725 li
365.959 108.725 366.598 108.725 366.598 108.263 cv
366.598 107.875 366.092 107.875 365.877 107.875 cv
365.328 107.875 364.617 107.846 363.979 107.621 cv
363.179 107.339 362.809 106.135 362.742 103.589 cv
362.742 103.589 362.347 88.522 362.34 88.1909 cv
362.546 88.3696 363.091 88.9614 363.091 88.9614 cv
364.649 90.6733 367.893 94.2378 371.112 97.4282 cv
376.031 102.353 li
382.049 108.33 li
382.475 108.753 382.928 109.167 383.373 109.167 cv
383.879 109.167 383.945 108.542 383.945 107.928 cv
384.354 84.5386 li
384.391 82.4663 384.695 81.7515 385.658 81.4761 cv
385.655 81.4761 386.745 81.3677 386.745 81.3677 cv
387.249 81.3677 387.506 81.2241 387.506 80.9429 cv
387.506 80.5181 386.938 80.5181 386.563 80.5181 cv
383.605 80.6011 li
382.928 80.6294 li
381.621 80.5913 li
378.443 80.5181 li
377.997 80.5181 377.388 80.5181 377.388 80.9429 cv
377.388 81.3179 377.754 81.3677 378.073 81.3677 cv
378.592 81.3677 379.462 81.3677 380.004 81.5835 cv
380.786 81.9097 381.167 82.481 381.205 84.8364 cv
381.205 84.8364 381.553 100.412 381.574 101.388 cv
381.529 101.388 381.484 101.388 381.483 101.388 cv
381.483 101.388 li
381.483 101.349 378.882 98.6499 378.882 98.6499 cv
373.392 92.9634 li
367.755 87.3647 361.96 81.1265 361.902 81.0659 cv
361.557 80.688 li
361.119 80.2065 360.83 79.8882 360.466 79.8882 cv
359.95 79.8882 359.891 80.6587 359.891 81.2388 cv
cp
f
406.412 80.3071 mo
406.197 80.3716 li
406.192 80.3716 404.611 80.5913 404.611 80.5913 cv
403.983 80.6245 397.928 80.6294 395.354 80.6294 cv
393.46 80.5708 li
393.021 80.5542 li
393.018 80.5542 390.016 80.5181 390.016 80.5181 cv
389.578 80.5181 389.109 80.5503 389.109 80.9429 cv
389.109 81.3677 389.596 81.3677 389.83 81.3677 cv
391.254 81.4761 li
392.464 81.7339 392.71 82.3345 392.777 83.5063 cv
392.854 84.6899 392.854 85.7065 392.854 91.3589 cv
392.854 97.8843 li
392.854 101.281 392.854 104.216 392.669 105.767 cv
392.533 106.756 392.363 107.588 391.667 107.729 cv
391.666 107.729 390.35 107.875 390.35 107.875 cv
390.056 107.875 389.664 107.916 389.664 108.263 cv
389.664 108.725 390.293 108.725 390.498 108.725 cv
393.056 108.65 li
393.059 108.65 395.17 108.614 395.17 108.614 cv
399.021 108.725 li
400.096 108.751 li
405.437 108.836 li
406.828 108.836 407.25 108.836 407.525 107.805 cv
407.716 107.049 408.012 104.537 408.012 103.666 cv
408.012 103.293 408.012 102.907 407.625 102.907 cv
407.268 102.907 407.193 103.169 407.127 103.539 cv
406.866 105.066 406.427 105.792 405.51 106.214 cv
404.563 106.651 402.998 106.651 402.063 106.651 cv
398.215 106.651 397.778 106.039 397.708 103.626 cv
397.708 103.625 397.701 99.4116 397.701 99.4116 cv
397.708 97.8843 li
397.708 94.9556 li
397.708 94.6743 397.772 94.6743 397.837 94.6743 cv
398.669 94.6743 402.378 94.7104 403.093 94.7856 cv
404.266 94.9136 404.883 95.3364 405.088 96.1626 cv
405.088 96.1636 405.208 97.1479 405.208 97.1479 cv
405.234 97.4858 li
405.234 97.7505 405.384 97.8999 405.659 97.8999 cv
406.084 97.8999 406.084 97.4019 406.084 97.105 cv
406.152 95.9038 li
406.232 94.6245 li
406.482 92.3179 li
406.529 91.9146 li
406.529 91.6685 406.4 91.5278 406.178 91.5278 cv
405.963 91.5278 405.806 91.7095 405.565 91.9849 cv
405.202 92.3882 404.669 92.4937 403.797 92.5649 cv
403.251 92.6128 401.147 92.6401 397.875 92.6401 cv
397.756 92.6401 397.708 92.6108 397.708 92.3218 cv
397.708 82.9438 li
397.708 82.6655 397.799 82.6655 397.875 82.6655 cv
398.59 82.6655 402.489 82.7358 403.128 82.812 cv
404.991 83.0347 405.302 83.4829 405.536 84.0894 cv
405.747 84.5903 405.753 85.3101 405.753 85.3901 cv
405.753 85.5737 405.753 86.0024 406.178 86.0024 cv
406.543 86.0024 406.614 85.6392 406.638 85.519 cv
406.641 85.5161 406.773 83.8257 406.773 83.8257 cv
406.825 83.064 li
406.825 83.061 407.071 81.0103 407.071 81.0103 cv
407.123 80.646 li
407.123 80.3628 407.016 80.2192 406.809 80.2192 cv
406.412 80.3071 li
cp
f
47.5889 38.5474 mo
47.792 39.1069 li
47.7734 39.1313 44.8018 43.0107 43.5566 44.6357 cv
46.9453 47.5767 47.3945 51.8687 47.3945 54.9282 cv
47.3945 56.2944 47.3032 57.6636 47.2236 58.7046 cv
47.2188 58.7686 li
47.2188 58.7686 45.8281 67.0239 45.8271 67.0317 cv
45.793 67.3003 45.6758 68.1753 45.2461 71.3921 cv
45.0166 73.4917 44.8984 75.5806 44.8984 77.5669 cv
44.9287 79.2583 li
45.2632 92.3745 53.1108 102.819 65.9219 107.213 cv
65.9717 107.232 67.6904 107.875 67.6904 107.875 cv
68.8032 108.299 li
68.7002 108.254 li
69.0205 108.39 li
72.8857 110.042 76.8613 111.765 80.2549 114.869 cv
84.4814 111.204 89.3096 109.258 94.7197 107.29 cv
103.986 104.029 107.368 99.9097 109.838 96.9028 cv
109.834 96.9067 109.91 96.813 109.91 96.813 cv
113.687 92.4058 116.018 85.3315 116.018 78.3228 cv
116.012 77.8188 li
116.012 77.8374 115.836 73.5024 115.828 73.312 cv
115.808 73.1187 115.327 68.5522 115.318 68.4717 cv
115.309 68.4136 114.567 63.981 114.567 63.981 cv
114.566 63.9702 113.863 59.5581 113.863 59.5581 cv
113.706 58.2603 113.631 57.0747 113.631 55.979 cv
113.644 55.1929 li
113.642 55.1997 113.641 55.0981 113.641 55.0981 cv
113.641 50.5581 114.927 47.21 117.535 44.8735 cv
117.638 44.2363 li
110.527 34.8081 li
110.044 34.9463 li
106.913 30.8296 li
106.913 30.8296 106.936 30.8569 106.954 30.8774 cv
106.866 30.77 106.665 30.5142 106.126 29.8252 cv
105.964 30.0063 105.818 30.1685 105.818 30.1685 cv
103.55 32.3276 100.271 32.2148 97.377 31.937 cv
97.3281 31.9321 li
92.2158 31.0825 li
92.292 31.0933 li
88.1221 30.4741 li
85.0869 30.0293 80.585 29.5952 76.3965 30.0562 cv
76.3965 30.0562 71.6982 30.6011 71.5645 30.6167 cv
71.4746 30.6304 65.7969 31.5073 65.7969 31.5073 cv
63.3867 31.9355 57.9883 32.8823 55.0137 29.6904 cv
54.0742 30.9038 51.5659 34.1411 50.749 35.1963 cv
50.3252 35.0571 li
47.5889 38.5474 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
62.0791 31.5356 mo
63.8604 31.3452 li
71.4717 30.1479 li
76.5889 29.563 li
81.542 28.9995 86.4756 29.7739 91.1709 30.4302 cv
97.9346 31.5356 li
100.801 31.7446 103.874 31.6763 105.825 29.5376 cv
106.198 29.1177 li
110.527 34.8081 li
109.824 35.063 108.913 35.3862 108.113 35.7153 cv
108.021 35.6938 li
105.825 32.8022 li
103.546 34.0942 100.704 34.2808 97.958 34.0942 cv
94.0098 33.4819 li
89.1289 32.6851 li
83.917 32.0737 li
80.7939 31.8169 77.6006 31.9341 74.5693 32.2856 cv
70.251 32.896 li
63.0654 33.9771 li
60.2939 34.2095 57.6172 33.8813 55.3848 32.6372 cv
52.9521 35.8013 li
51.9717 35.6245 51.1953 35.3384 50.3252 35.0571 cv
55.0576 28.9058 li
56.7002 31.2739 59.4014 31.4409 62.0791 31.5356 cv
cp
0 0 0 0 cmyk
f
91.3936 106.286 mo
87.5186 107.793 83.7383 109.552 80.2861 112.067 cv
76.835 109.528 73.1006 107.743 69.249 106.196 cv
54.4678 101.757 46.4316 88.2407 46.9658 77.688 cv
47.1318 73.3667 li
47.6689 68.6724 li
49.0332 60.4282 li
49.4072 57.5415 li
49.5488 52.8911 49.3857 47.936 46.2852 44.438 cv
48.8428 41.0142 li
48.8428 41.0142 48.1182 40.1548 47.5889 38.5474 cv
46.0869 40.4985 44.4053 42.7231 42.9512 44.6499 cv
44.2646 45.8228 45.3467 47.186 45.9326 48.688 cv
47.1318 51.9741 47.1055 55.9653 46.6123 59.5591 cv
45.5107 65.9224 li
44.8506 70.6196 li
44.4775 73.7192 44.3604 77.0317 44.499 80.1284 cv
44.7881 89.3384 50.3457 102.724 66.1963 107.743 cv
71.1748 109.648 76.1045 111.688 80.2861 115.422 cv
83.292 112.7 86.7432 111.008 90.2656 109.457 cv
94.4434 107.839 li
111.711 102.176 116.772 88.0854 116.474 77.5688 cv
116.305 73.0142 li
115.886 69.1177 li
114.452 60.2173 li
113.933 57.3999 114.028 54.1831 114.476 51.3179 cv
114.64 50.3286 115.47 47.0698 118.168 44.9185 cv
117.188 43.3394 118.03 44.6343 114.429 47.2974 cv
114.429 47.2974 114.116 49.1724 112.032 50.6313 cv
111.489 53.5669 111.377 57.2583 111.915 60.2876 cv
112.808 65.7349 li
113.464 70.104 li
113.794 73.1782 114.077 76.3491 113.886 79.5669 cv
113.677 88.2778 108.5 101.469 91.3936 106.286 cv
cp
f
56.3779 62.106 mo
58.3232 61.5366 li
57.377 63.2466 li
59.0352 64.5249 li
57.043 64.6929 li
57.043 65.356 57.1396 66.0181 57.1396 66.7085 cv
55.6924 65.4038 li
55.1709 65.7837 54.6494 66.2583 54.125 66.7085 cv
54.2686 64.7856 li
53.6748 64.5503 52.9883 64.5249 52.373 64.3608 cv
54.0547 63.1733 li
53.1299 61.4429 li
54.9092 62.0815 li
55.3203 61.4067 55.4463 60.7075 55.6455 60.2544 cv
55.9297 60.8237 56.0938 61.4907 56.3779 62.106 cv
cp
f
55.4521 60.7974 mo
55.6455 60.2544 li
56.0303 61.2144 li
56.3779 62.106 li
58.3232 61.5366 li
57.377 63.2466 li
59.0352 64.5249 li
59.0322 64.5249 57.043 64.6929 57.043 64.6929 cv
57.043 64.6938 57.1396 66.7085 57.1396 66.7085 cv
55.6924 65.4038 li
54.4766 66.4028 li
54.125 66.7085 li
54.2686 64.7856 li
53.1357 64.5142 li
52.373 64.3608 li
54.0547 63.1733 li
53.1299 61.4429 li
54.9092 62.0815 li
55.4521 60.7974 li
cp
55.4521 60.7974 mo
54.9092 62.0815 li
53.1299 61.4429 li
54.0547 63.1733 li
52.373 64.3608 li
53.1357 64.5142 li
54.2686 64.7856 li
54.125 66.7085 li
54.4766 66.4028 li
55.6924 65.4038 li
57.1396 66.7085 li
57.1396 66.7056 57.043 64.6929 57.043 64.6929 cv
57.0439 64.6929 59.0352 64.5249 59.0352 64.5249 cv
57.377 63.2466 li
58.3232 61.5366 li
58.3232 61.5366 56.3799 62.106 56.3779 62.106 cv
56.0303 61.2144 li
55.6455 60.2544 li
55.4521 60.7974 li
cp
f
67.7861 65.022 mo
68.4277 64.9497 69.0664 64.6665 69.7314 64.5024 cv
68.8086 66.2349 li
69.3779 66.6118 69.8984 67.063 70.4434 67.4897 cv
68.4482 67.6587 li
68.4482 68.2974 68.5684 68.9849 68.5684 69.6743 cv
67.0742 68.3657 li
66.5771 68.7954 66.0313 69.1978 65.5342 69.6743 cv
65.5566 69.0786 65.6035 68.3657 65.7256 67.7271 cv
65.1055 67.5142 64.3936 67.4897 63.7783 67.3022 cv
65.4619 66.1372 li
64.5381 64.4312 li
66.3174 65.022 li
66.6494 64.4771 66.793 63.8149 67.0742 63.2231 cv
67.7861 65.022 li
cp
f
66.7725 63.9829 mo
67.0742 63.2231 li
67.7861 65.022 li
68.9902 64.7212 li
69.7314 64.5024 li
68.8086 66.2349 li
69.9922 67.1294 li
70.4434 67.4897 li
70.4404 67.4897 68.4482 67.6587 68.4482 67.6587 cv
68.4482 67.6597 68.5684 69.6743 68.5684 69.6743 cv
67.0742 68.3657 li
66.5117 68.8325 li
65.5342 69.6743 li
65.7256 67.7271 li
64.6895 67.4956 li
63.7783 67.3022 li
65.4619 66.1372 li
64.5381 64.4312 li
66.3174 65.022 li
66.7725 63.9829 li
cp
66.7705 63.9829 mo
66.3174 65.022 li
64.5381 64.4312 li
65.4619 66.1372 li
63.7783 67.3022 li
64.6895 67.4956 li
65.7256 67.7271 li
65.5342 69.6743 li
66.5117 68.8325 li
67.0742 68.3657 li
68.5684 69.6743 li
68.5684 69.6724 68.4482 67.6587 68.4482 67.6587 cv
70.4434 67.4897 li
69.9922 67.1294 li
68.8086 66.2349 li
69.7314 64.5024 li
68.9902 64.7212 li
67.7861 65.022 li
67.0742 63.2231 li
66.7705 63.9829 li
cp
f
54.2422 76.6665 mo
54.8838 76.5513 55.5264 76.312 56.1904 76.1216 cv
55.2617 77.8081 li
55.7627 78.2808 56.3545 78.6372 56.9023 79.0864 cv
54.9092 79.2544 li
54.9092 79.9185 55.0049 80.604 55.0049 81.2935 cv
54.5293 80.8433 54.0313 80.438 53.5576 79.9644 cv
53.0352 80.3911 52.5127 80.8169 51.9922 81.2935 cv
52.1563 79.3481 li
51.5654 79.1108 50.8525 79.1108 50.2607 78.9204 cv
50.8057 78.5415 51.374 78.188 51.9219 77.7603 cv
51.0195 76.0767 li
51.5654 76.2192 52.2041 76.4536 52.7959 76.6665 cv
53.0586 76.0981 53.2725 75.4575 53.5342 74.8413 cv
54.2422 76.6665 li
cp
f
53.2109 75.6538 mo
53.5342 74.8413 li
54.2422 76.6665 li
55.5674 76.312 li
56.1904 76.1216 li
55.2617 77.8081 li
56.2158 78.5659 li
56.9023 79.0864 li
56.8994 79.0864 54.9092 79.2544 54.9092 79.2544 cv
54.9092 79.2554 55.0049 81.2935 55.0049 81.2935 cv
54.3994 80.7407 li
53.5576 79.9644 li
53.4639 80.0405 li
51.9922 81.2935 li
52.1563 79.3481 li
51.1104 79.1011 li
50.2607 78.9204 li
50.7822 78.5669 li
51.9219 77.7603 li
51.0195 76.0767 li
52.6611 76.6187 li
52.7959 76.6665 li
53.2109 75.6538 li
cp
53.2109 75.6538 mo
52.7959 76.6665 li
52.6611 76.6177 li
51.0195 76.0767 li
51.9219 77.7603 li
50.7803 78.5669 li
50.2607 78.9204 li
51.1104 79.1011 li
52.1563 79.3481 li
51.9922 81.2935 li
53.4639 80.0405 li
53.5576 79.9644 li
54.3975 80.7427 li
55.0049 81.2935 li
55.0049 81.2896 54.9092 79.2544 54.9092 79.2544 cv
54.9102 79.2544 56.9023 79.0864 56.9023 79.0864 cv
56.2158 78.5659 li
55.2617 77.8081 li
56.1904 76.1216 li
55.5674 76.311 li
54.2422 76.6665 li
53.5342 74.8413 li
53.2109 75.6538 li
cp
f
67.5986 77.3794 mo
69.3506 77.3794 li
67.9297 78.4712 li
68.4746 80.2036 li
67.0264 79.1597 li
65.583 80.2036 li
66.1006 78.4712 li
65.6504 78.1138 65.1787 77.7603 64.6807 77.4038 cv
66.3887 77.3794 li
66.7197 76.9058 66.793 76.2642 67.0264 75.6948 cv
67.1943 76.2642 67.3604 76.8354 67.5986 77.3794 cv
cp
f
66.8105 76.3442 mo
66.3887 77.3794 li
66.3857 77.3794 64.6807 77.4038 64.6807 77.4038 cv
66.1006 78.4712 li
65.583 80.2036 li
67.0264 79.1597 li
68.4746 80.2036 li
67.9297 78.4712 li
69.3506 77.3794 li
67.5986 77.3794 li
67.5986 77.3794 67.499 77.0903 67.4287 76.8774 cv
67.5195 77.1499 67.5986 77.3794 67.5986 77.3794 cv
69.3506 77.3794 li
67.9297 78.4712 li
68.4746 80.2036 li
67.0264 79.1597 li
65.583 80.2036 li
66.1006 78.4712 li
64.6807 77.4038 li
66.3887 77.3794 li
66.8154 76.3325 li
66.8105 76.3442 li
cp
66.8154 76.3325 mo
66.8232 76.3081 67.0264 75.6958 67.04 75.7446 cv
67.04 75.7446 67.2627 76.396 67.4287 76.8774 cv
67.2617 76.3911 67.0361 75.7271 67.0264 75.6948 cv
67.0264 75.6948 66.8232 76.3081 66.8154 76.3325 cv
cp
f
67.7158 89.3325 mo
68.3545 89.2134 68.9727 88.9302 69.6377 88.7866 cv
68.7119 90.4712 li
70.3486 91.7505 li
69.7061 91.8696 68.9951 91.8696 68.333 91.9888 cv
68.4746 93.981 li
67.0039 92.6274 li
65.4619 93.9585 li
65.4619 93.3413 65.5566 92.7017 65.6035 92.0122 cv
64.9648 91.8696 64.3262 91.729 63.6826 91.5845 cv
64.2549 91.1821 64.8213 90.8501 65.3662 90.4233 cv
64.4639 88.7173 li
66.2451 89.3325 li
67.0039 87.4829 li
67.7158 89.3325 li
cp
f
67.0039 87.4829 mo
67.7158 89.3325 li
68.7178 89.0522 li
69.6377 88.7866 li
68.7119 90.4712 li
70.3486 91.7505 li
70.3467 91.7505 68.333 91.9888 68.333 91.9888 cv
68.333 91.9907 68.4746 93.981 68.4746 93.981 cv
67.0039 92.6274 li
65.4619 93.9585 li
65.54 92.7456 li
65.6035 92.0122 li
63.6826 91.5845 li
64.3438 91.1392 li
65.3662 90.4233 li
64.4639 88.7173 li
66.2451 89.3325 li
67.0039 87.4829 li
cp
66.2451 89.3325 mo
64.4639 88.7173 li
65.3662 90.4233 li
64.3438 91.1392 li
63.6826 91.5845 li
65.6035 92.0122 li
65.54 92.7456 li
65.4619 93.9585 li
67.0039 92.6274 li
68.4746 93.981 li
68.4746 93.979 68.333 91.9888 68.333 91.9888 cv
70.3486 91.7505 li
68.7119 90.4712 li
69.6377 88.7866 li
68.7178 89.0522 li
67.7158 89.3325 li
67.0039 87.4829 li
66.2451 89.3325 li
cp
f
67.0742 63.2231 mo
66.792 63.813 66.6465 64.4771 66.3154 65.0229 cv
64.5381 64.4312 li
65.46 66.1372 li
63.7764 67.3022 li
64.3916 67.4897 65.1055 67.5142 65.7256 67.7271 cv
65.6035 68.3657 65.5566 69.0786 65.5332 69.6743 cv
66.0303 69.1978 66.5762 68.7954 67.0742 68.3657 cv
68.5674 69.6743 li
68.5674 68.9849 68.4482 68.2974 68.4482 67.6567 cv
70.4424 67.4897 li
69.8975 67.063 69.377 66.6108 68.8086 66.2349 cv
69.7314 64.5024 li
69.0664 64.6665 68.4268 64.9497 67.7861 65.0229 cv
67.0742 63.2231 li
cp
f
121.268 34.4019 mo
120.788 34.6284 li
121.232 34.0288 121.657 33.2583 122.106 32.2271 cv
122.716 30.8247 li
121.221 31.1401 li
118.643 31.687 116.134 32.6489 113.68 33.5933 cv
112.994 33.8579 112.309 34.1245 111.616 34.3735 cv
110.712 34.6997 109.81 35.0337 108.905 35.3599 cv
108.12 35.645 107.334 35.9536 106.536 36.1997 cv
104.403 36.8569 102.228 37.355 100.005 37.5669 cv
99.3857 37.6274 98.7617 37.6587 98.1416 37.7173 cv
97.1738 37.8052 96.2021 37.8774 95.2354 37.9849 cv
94.0635 38.1138 92.9014 38.3286 91.7686 38.6558 cv
90.7275 38.9575 89.7354 39.4146 88.9131 40.1323 cv
88.4463 40.5376 87.9775 41.0825 87.7168 41.6489 cv
87.2656 42.6245 87.0557 43.6353 86.8994 44.5415 cv
86.6357 46.0513 85.5537 48.022 84.667 47.7251 cv
83.7803 47.4302 83.583 46.8071 83.6162 46.0513 cv
83.6475 45.2974 84.3711 44.5083 84.3711 44.5083 cv
84.3711 44.5083 84.9629 44.9351 85.6836 44.2466 cv
86.0176 43.9282 86.1699 43.4126 86.292 42.981 cv
86.3662 42.7222 86.4248 42.4575 86.4795 42.1919 cv
86.5225 41.981 86.6357 41.7251 86.5977 41.5083 cv
86.5742 41.3804 86.4385 41.3032 86.3457 41.2212 cv
86.208 40.8813 85.9131 40.6655 85.5596 40.5923 cv
85.4932 40.4028 85.376 40.2339 85.21 40.1089 cv
85.0537 39.9927 84.8701 39.9282 84.6816 39.9077 cv
84.4648 39.5161 83.9287 38.7769 82.7998 38.4233 cv
82.1445 38.2212 81.499 38.2104 80.9189 38.2817 cv
80.5811 38.1753 li
79.4697 37.8208 77.7793 37.9819 77.0908 39.061 cv
76.8975 39.3638 76.6836 39.9673 76.7451 40.3286 cv
76.7588 40.4116 76.7822 40.4897 76.8125 40.564 cv
76.751 40.689 76.7188 40.8286 76.7188 40.9712 cv
76.7188 41.0415 76.7275 41.1157 76.7432 41.188 cv
76.7588 41.2524 li
76.7744 41.3267 76.543 41.6196 76.501 41.7046 cv
76.4307 41.854 76.3643 42.0063 76.3096 42.1616 cv
76.2383 42.3657 76.1738 42.5786 76.1738 42.7954 cv
76.1738 43.0562 76.29 43.1665 76.4111 43.3745 cv
76.376 43.5005 76.25 43.9399 76.25 43.9399 cv
76.25 43.9399 75.9873 44.9185 75.9834 44.9282 cv
75.8369 45.4751 76.0273 45.7759 76.6006 45.7905 cv
76.5459 45.7876 76.9092 46.5884 76.959 46.6528 cv
77.1318 46.8774 77.123 47.0942 77.2568 47.3267 cv
77.3408 47.4731 77.4688 47.5962 77.6123 47.686 cv
77.9639 47.9048 78.4189 47.854 78.7998 47.7603 cv
78.7666 47.9888 78.708 48.3706 78.7061 48.3774 cv
78.6963 48.3657 78.4824 48.4233 78.4824 48.4233 cv
78.3311 48.4585 78.1367 48.5054 77.9385 48.5942 cv
77.9385 48.5942 77.4209 48.2056 77.4209 48.2036 cv
76.2959 47.3569 75.2412 46.3501 75.166 44.8511 cv
75.1543 44.5884 75.1836 44.3101 75.0928 44.0571 cv
75.002 43.8071 74.7412 43.6646 74.6563 43.4263 cv
74.5674 43.1763 74.5811 42.8638 74.5244 42.5991 cv
74.4512 42.2632 74.3691 41.9263 74.2646 41.5962 cv
74.0518 40.9214 73.7129 40.2544 73.2676 39.6997 cv
72.3066 38.5122 70.376 38.3716 68.9727 38.2085 cv
68.4502 38.147 67.9248 38.1021 67.4014 38.0649 cv
66.9365 38.0308 66.4717 38.0044 66.0049 37.9771 cv
64.0811 37.8638 62.2666 37.7554 60.541 37.2583 cv
60.4443 37.23 58.0566 36.5259 56.3721 36.1665 cv
55.5605 35.9946 54.7393 35.8501 53.9258 35.686 cv
53.376 35.5767 52.8213 35.4849 52.2744 35.3521 cv
51.3154 35.1216 50.3643 34.853 49.4082 34.6089 cv
48.4854 34.3735 47.5625 34.1372 46.6416 33.9028 cv
46.6016 33.8931 46.042 33.7739 46.042 33.7485 cv
46.042 33.7485 46.2197 34.7378 46.4346 35.4985 cv
46.6514 36.2603 47.6279 38.1802 47.6279 38.1802 cv
48.248 39.5708 49.4141 42.1646 51.8398 44.0239 cv
52.3291 44.3101 li
52.4424 44.6157 52.5547 44.9224 52.6689 45.229 cv
52.9756 46.0591 53.5674 46.7485 54.248 47.3032 cv
54.7334 47.6987 55.2559 48.0542 55.8184 48.3306 cv
56.2314 48.5337 57.0283 48.9771 57.5059 48.8735 cv
57.3701 48.9028 57.2432 48.936 57.1416 48.9731 cv
56.9131 49.0552 56.6855 49.1362 56.457 49.2183 cv
56.21 49.3091 56.5625 49.5444 56.3271 49.6724 cv
55.9873 49.8589 55.1201 49.979 54.8398 50.2407 cv
54.5469 50.52 54.6787 50.6099 54.4189 50.9224 cv
54.248 51.1294 53.6475 51.522 53.5068 51.7544 cv
53.4385 51.8687 53.374 51.9888 53.3154 52.1089 cv
53.2822 52.1782 53.2139 52.4556 53.1572 52.4897 cv
52.7139 52.7407 52.2373 53.1069 51.998 53.5649 cv
51.8428 53.8608 51.8799 54.2046 51.9922 54.5093 cv
52.0615 54.6919 52.1563 54.8628 52.2676 55.0239 cv
52.4287 55.2544 52.5605 55.1782 52.7715 55.0376 cv
52.8682 54.9712 52.9648 54.9067 53.0645 54.8462 cv
53.2109 54.7554 53.3213 54.7046 53.4219 54.6685 cv
53.3408 54.6978 53.3574 55.2495 53.3633 55.3306 cv
53.376 55.5142 53.4229 55.6958 53.4932 55.8657 cv
53.6211 56.1714 53.8389 56.4263 54.0732 56.6558 cv
54.2158 56.7954 54.3418 56.9497 54.4971 57.0747 cv
54.5879 57.1479 54.7139 57.2642 54.8193 57.1548 cv
54.9072 57.064 54.915 56.8716 54.9482 56.7544 cv
54.9814 56.6313 55.2568 55.5933 55.4248 55.6235 cv
55.5068 55.6372 56.1729 56.3735 56.3174 56.4692 cv
56.3838 56.5151 56.4307 56.5806 56.5186 56.5493 cv
56.6064 56.5151 56.6592 56.3755 56.6982 56.3003 cv
56.8096 56.0815 56.9053 55.8579 56.9902 55.6294 cv
57.1006 55.3325 57.0723 54.8296 57.1279 54.7925 cv
57.1836 54.7554 57.5557 54.8481 57.582 54.8481 cv
57.8369 54.8403 57.9629 54.9243 58.04 54.6821 cv
58.0918 54.5142 58.1328 54.0708 58.3076 53.9751 cv
58.5088 53.8638 58.6074 54.1548 58.8242 54.0454 cv
59.0811 53.9146 59.4443 53.2915 59.6826 53.1919 cv
59.9375 53.0825 60.1885 53.2222 60.3779 53.2603 cv
60.5693 53.2993 60.7002 53.2388 60.7637 53.3091 cv
60.9092 53.4692 60.6963 53.6743 60.501 54.0259 cv
60.4414 54.1362 61.0186 54.2798 60.9424 54.397 cv
60.8516 54.5415 60.292 54.8335 60.1553 54.9565 cv
59.9727 55.1216 59.8291 55.3413 59.7041 55.5522 cv
59.6064 55.7192 60.043 55.7651 59.9814 55.9146 cv
59.7607 56.4478 58.9209 56.9067 58.3525 57.0435 cv
58.1729 57.0845 57.9805 57.1011 57.8076 57.1626 cv
57.5439 57.2544 57.7295 57.7104 57.7529 57.9087 cv
57.7881 58.187 57.9561 58.4341 58.209 58.5806 cv
58.2939 58.6313 58.3916 58.6665 58.4961 58.6978 cv
58.4893 58.6958 58.2529 58.9751 58.2236 59.0005 cv
58.1221 59.0962 58.0146 59.1821 57.9053 59.2681 cv
57.79 59.3579 57.251 59.6265 57.2949 59.8228 cv
57.3193 59.9263 57.6436 60.0063 57.7285 60.0532 cv
57.8975 60.1528 58.0342 60.2739 58.2236 60.3384 cv
58.5889 60.4614 58.9443 60.4204 59.3076 60.3149 cv
59.4893 60.2622 59.6689 60.1968 59.8467 60.1294 cv
59.9961 60.0737 60.1943 59.9429 60.3525 59.936 cv
60.5986 59.9243 60.874 60.0874 61.1123 60.0532 cv
61.6309 59.9761 62.3105 59.2173 62.7529 58.9585 cv
63.1963 58.6978 63.5342 58.854 63.9102 58.4927 cv
64.3379 58.0864 64.1943 57.7866 64.5225 57.3003 cv
64.833 56.8423 65.4775 56.1997 65.5967 55.6548 cv
65.6689 55.314 65.7451 54.9731 65.8203 54.6313 cv
66.335 54.9243 66.8564 55.2036 67.374 55.4731 cv
67.6162 55.6011 67.8369 55.8882 68.0527 56.0591 cv
68.4502 56.3735 68.9023 56.7388 69.417 56.8267 cv
69.6582 56.8667 69.874 56.8188 70.0977 56.7349 cv
70.1729 56.7075 70.5371 56.5093 70.6143 56.5728 cv
70.7939 56.7173 71.0225 56.7847 71.2871 56.8188 cv
71.2373 56.813 71.1406 57.2485 71.1348 57.2915 cv
71.126 57.3677 71.1924 58.4595 71.2637 58.4595 cv
71.2637 58.4595 72.2842 58.3423 72.3877 58.3315 cv
72.3271 58.5571 72.2422 58.7739 72.2607 59.0112 cv
72.2842 59.3257 72.4385 59.6372 72.5557 59.9253 cv
72.6113 60.061 73.8418 59.6802 73.8271 59.6343 cv
73.9678 60.0737 74.1514 60.4819 74.3311 60.7661 cv
74.5977 61.1841 74.8369 61.6646 75.1494 62.0464 cv
75.1602 62.0054 75.1191 62.228 75.1191 62.228 cv
75.1191 62.228 73.4385 68.1274 73.6885 69.4575 cv
73.8447 70.2915 li
73.6543 70.7583 73.6592 71.3472 73.877 72.1353 cv
73.6182 72.3628 73.5186 72.6577 73.5186 72.9712 cv
73.5186 73.6187 73.7959 74.2329 73.9971 74.8413 cv
74.3633 75.9556 74.1201 77.8257 74.1523 78.3774 cv
74.1787 78.812 74.2061 79.2466 74.2334 79.6821 cv
74.3115 80.9546 74.2666 82.2222 74.7373 83.4341 cv
74.9072 83.8745 75.1367 84.2544 75.4238 84.6284 cv
75.3896 84.8657 75.3389 85.231 75.3389 85.231 cv
75.2607 85.7681 75.2246 86.3345 75.2246 86.9146 cv
75.2246 88.8784 75.6221 90.8345 76.3721 92.6489 cv
76.8486 93.7983 77.7979 94.6831 79.0166 94.9761 cv
79.3271 95.0522 79.6514 95.1157 79.9707 95.146 cv
80.9756 95.2427 81.9717 95.0991 82.9521 94.8872 cv
83.5361 94.7603 84.0576 94.6001 84.4883 94.1646 cv
84.8936 93.7573 85.1738 93.1235 85.4131 92.604 cv
85.3877 92.7622 85.3613 92.9194 85.3613 93.0708 cv
85.3613 93.3774 85.4141 93.6704 85.5186 93.9458 cv
85.9941 95.2056 87.3213 95.5454 87.4717 95.5806 cv
88.6426 95.7993 89.3994 95.5962 89.9609 95.2563 cv
89.9756 95.3286 89.9756 95.395 90.0127 95.4702 cv
90.2803 96.0483 90.8135 96.2446 92.874 95.7163 cv
92.8115 95.8892 92.751 96.0601 92.751 96.2241 cv
92.751 96.5317 92.8643 96.8169 93.085 97.0415 cv
93.9209 97.8872 95.9375 97.3599 96.4063 97.1411 cv
97.1631 96.7524 97.6592 96.395 98.0146 96.063 cv
97.9014 96.1675 98.8936 96.6519 98.9609 96.6704 cv
99.6348 96.8569 100.361 96.8149 101.038 96.6812 cv
101.952 96.5005 102.937 96.2017 103.69 95.6343 cv
104.265 95.1997 104.68 94.6099 104.999 93.9712 cv
105.187 93.5942 105.337 93.2065 105.497 92.8198 cv
105.928 91.7876 li
106.028 91.519 106.114 91.3013 107.202 91.4214 cv
109.456 91.6724 li
107.845 90.0767 li
107.021 89.2622 106.051 87.9712 105.118 86.7231 cv
104.07 85.3257 102.986 83.8813 101.97 82.9028 cv
98.6826 78.9653 li
98.8203 78.894 98.9551 78.7866 99.0781 78.6313 cv
99.0781 78.6313 99.7637 78.5698 99.7705 78.5688 cv
100.614 78.5044 101.644 77.7173 101.841 76.8833 cv
101.967 76.355 101.668 75.9048 101.468 75.436 cv
101.386 75.2476 101.339 75.0239 101.205 74.8618 cv
101.012 74.6265 100.704 74.5024 100.455 74.3403 cv
100.145 74.1411 99.8389 73.9302 99.5283 73.731 cv
98.876 73.313 98.2178 72.9058 97.5615 72.4946 cv
96.2412 71.6685 94.9111 70.8599 93.5635 70.0786 cv
92.8682 69.6753 91.8418 69.563 91.3379 68.8901 cv
90.9951 68.4331 90.7813 67.8804 90.4814 67.395 cv
90.1553 66.8687 89.8057 66.3589 89.4893 65.8267 cv
89.2402 65.4077 88.999 64.9829 88.7773 64.5503 cv
88.4258 63.8696 88.1768 63.1479 87.8799 62.4438 cv
87.8838 62.4565 88.3389 62.104 88.3818 62.063 cv
88.4502 61.9927 89.1123 61.0718 89.0176 61.0044 cv
89.1699 61.1099 89.3311 61.2124 89.4863 61.3071 cv
89.4863 61.3071 90.7021 62.1401 90.708 62.1431 cv
90.8311 62.231 91.2295 61.772 91.2969 61.6919 cv
91.4053 61.562 91.9717 60.7202 91.792 60.5493 cv
91.9131 60.6636 92.0166 60.7827 92.1582 60.8853 cv
92.7256 61.2896 li
93.1982 60.7769 li
93.6377 60.2974 93.7803 59.7466 93.7803 59.2046 cv
93.7803 58.9712 93.7373 58.7466 93.6963 58.5239 cv
93.96 58.5942 94.2207 58.6724 94.3438 58.7651 cv
95.2959 59.4868 li
95.585 58.3286 li
95.6279 58.1587 95.6455 57.9858 95.6455 57.8091 cv
95.6455 57.6118 95.5654 57.4146 95.5244 57.2173 cv
95.5801 57.2368 96.6992 57.6743 96.6992 57.6743 cv
96.833 56.688 li
96.8457 56.5962 96.8516 56.5063 96.8516 56.4165 cv
96.8516 55.8794 96.6318 55.3892 96.4443 54.9751 cv
96.5186 54.8862 96.5967 54.8052 96.6611 54.7056 cv
97.4668 55.2271 98.4746 55.645 99.6689 55.3364 cv
100.613 55.0923 li
100.613 55.0923 100.583 55.0298 100.577 55.0161 cv
101.686 55.4253 102.837 55.6479 104.454 54.8472 cv
105.125 54.5161 li
105.125 54.5161 105.017 54.2642 104.929 54.0601 cv
106.156 54.2817 107.507 54.4224 108.479 53.7856 cv
109.121 53.3638 li
108.717 52.7114 li
108.685 52.6636 108.646 52.6313 108.611 52.5884 cv
109.442 52.5063 110.298 52.2446 110.753 51.4243 cv
110.899 51.1587 110.868 50.9614 110.753 50.6841 cv
111.095 50.6655 111.438 50.6021 111.781 50.478 cv
113 50.0317 113.89 48.9497 114.421 47.2642 cv
114.497 47.0181 li
115.528 46.3989 116.458 45.5024 117.335 44.2817 cv
118.147 42.4263 li
118.552 41.9487 118.929 41.3872 119.1 40.9341 cv
119.226 40.6948 119.54 40.064 119.141 39.5513 cv
119.123 39.5298 119.101 39.5044 119.075 39.478 cv
120.323 38.5757 121.73 36.5122 122.259 35.4985 cv
123.339 33.4302 li
121.268 34.4019 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
83.1465 55.895 mo
82.8076 56.3267 82.4189 56.5337 81.1631 56.5337 cv
79.7012 56.5337 78.9688 55.6079 78.9688 55.6079 cv
79.0273 56.0093 79.3057 56.6382 80.0762 56.8394 cv
80.6973 57.0093 80.917 57.0474 81.9043 56.9624 cv
82.9004 56.8794 83.1465 55.895 83.1465 55.895 cv
cp
84.9443 49.2896 mo
83.001 51.1362 85.7451 56.2563 83.1875 57.3979 cv
78.8428 56.8091 78.0605 57.5405 77.4248 57.3755 cv
77.3809 57.2837 77.6064 57.1353 77.6533 56.9985 cv
76.9443 56.8862 76.3672 56.8198 75.9814 56.1587 cv
75.1162 54.9536 76.4326 54.019 76.8887 53.062 cv
76.8887 53.062 77.2607 52.3013 77.4658 51.6636 cv
77.5332 51.4126 77.7236 52.4458 78.5342 52.4019 cv
79.3447 52.3589 79.8301 52.2798 81.0605 51.7866 cv
80.0146 52.8354 79.6953 52.8774 78.3477 53.2671 cv
78.8955 53.3794 79.9355 53.27 81.002 52.7114 cv
82.2959 52.0327 83.9287 49.8462 83.9287 49.8462 cv
84.3154 49.5015 85.0811 49.1772 84.9443 49.2896 cv
cp
92.5889 88.2173 mo
92.5889 88.2173 85.5225 78.6235 83.6709 77.271 cv
89.6621 86.2749 li
90.46 87.3228 91.8369 88.8188 92.4287 89.8696 cv
92.6123 89.562 92.8623 89.1519 92.5889 88.2173 cv
cp
107.282 90.7935 mo
106.341 90.688 105.535 90.7388 105.196 91.6294 cv
104.152 94.0278 104.152 95.02 101.698 95.9077 cv
100.341 96.2202 98.7764 96.3257 98.5654 95.5933 cv
98.8789 94.104 100.923 93.9097 101.765 93.4565 cv
103.155 92.7251 103.524 91.2622 103.577 89.8022 cv
103.507 89.5063 102.724 88.9185 102.43 88.7563 cv
100.147 87.189 li
96.8223 84.7515 li
96.7988 84.7271 96.7764 84.7056 96.752 84.7271 cv
96.7295 84.7515 li
96.7295 84.7515 100.672 88.6177 102.374 89.7427 cv
102.588 92.2573 100.907 92.3745 98.8789 93.3989 cv
97.6016 94.106 98.4102 95.3853 96.0605 96.5845 cv
95.3818 96.8989 93.0547 97.2134 93.6104 96.063 cv
94.4053 94.8696 93.5576 94.8638 93.5576 94.8638 cv
92.668 95.1255 89.0703 96.1157 91.5732 94.4438 cv
91.9092 94.2349 92.2109 93.6167 92.2109 93.6167 cv
92.5771 92.6245 91.4639 92.437 91.0771 92.856 cv
90.208 93.8188 90.1367 95.436 87.6318 94.9692 cv
87.6318 94.9692 84.6846 94.2905 87.0615 90.9741 cv
88.1563 90.2183 85.2939 88.8599 84.8018 87.7104 cv
83.333 85.3423 li
79.707 79.6948 li
76.9531 75.5044 li
76.3379 74.6177 75.5967 73.6968 74.9814 72.7515 cv
74.1934 70.6646 74.7793 70.3071 75.5293 70.2095 cv
76.4951 70.7485 76.5732 70.4819 77.0352 70.3267 cv
77.5449 70.1567 77.4863 70.8589 77.0352 71.231 cv
76.7881 71.7241 76.7949 71.9224 77.1377 72.3794 cv
77.7744 72.6274 77.7744 72.0942 78.3506 72.2583 cv
78.9277 72.4233 79.5967 74.1772 80.624 74.4731 cv
80.8291 74.4517 81.0557 74.4976 81.1475 74.3384 cv
81.0986 73.8159 80.7178 72.9858 80.6738 72.4868 cv
81.2246 73.0981 83.2295 74.9751 82.9521 73.9019 cv
82.6748 72.8276 82.707 72.1763 82.707 72.1763 cv
82.9111 71.9028 82.9004 71.4224 83.2451 71.4224 cv
83.4463 71.4224 83.6299 71.4448 83.7705 71.5591 cv
84.2217 72.3794 83.9482 73.4712 84.7227 74.1108 cv
84.9053 74.1567 85.1572 74.3687 85.2939 74.2104 cv
87.0488 77.4478 89.8379 80.1665 92.7334 82.4907 cv
92.9375 82.6294 93.29 82.8599 93.541 82.8599 cv
93.6172 82.4087 92.3174 81.4106 91.8301 80.5796 cv
88.1904 77.0474 li
87.6465 76.3853 85.667 74.4224 86.0342 73.5356 cv
86.1992 72.8276 87.0107 72.2886 87.376 72.2388 cv
87.3096 72.4888 86.7734 72.7925 86.958 73.4097 cv
87.2061 73.9019 87.4209 74.0688 87.9453 74.2739 cv
86.5947 75.6216 88.7832 76.7241 91.1299 77.0239 cv
93.5693 76.5024 94.9736 78.3013 97.2559 78.6479 cv
97.2559 78.6479 97.4404 79.3892 97.9385 79.4653 cv
101.38 83.5894 li
103.271 85.3911 105.482 89.0151 107.282 90.7935 cv
cp
71.6982 44.1108 mo
71.4219 42.894 70.8975 41.5991 69.7412 41.1841 cv
67.0391 40.2192 63.4834 40.0825 60.5615 39.5884 cv
62.5889 40.2817 li
66.4824 41.0903 69.4385 41.1021 71.6982 44.1108 cv
cp
76.9268 48.9722 mo
75.6143 48.9487 74.5049 49.5044 73.625 51.0015 cv
72.2881 51.2642 71.375 51.8188 70.1504 53.1431 cv
69.2607 52.9175 67.6689 52.0024 67.6689 52.0024 cv
67.6689 52.0024 68.4746 51.0903 68.6338 51.02 cv
68.4053 50.7026 67.8506 50.7896 68.0127 49.981 cv
68.1768 49.1675 69.3857 49.769 70.2061 49.3804 cv
69.8643 49.061 69.2744 48.7329 69.4941 48.0884 cv
69.7109 47.4438 70.9053 47.7817 71.3838 47.7603 cv
71.3604 47.3052 70.8301 46.5894 71.3018 46.2788 cv
71.7744 45.9712 72.9189 46.0786 72.9189 46.0786 cv
72.9424 45.5298 73.2383 45.0522 73.5088 44.5962 cv
73.4424 44.5063 72.377 45.1479 72.2178 45.5112 cv
70.7451 45.3882 70.5205 46.0239 70.46 46.9175 cv
70.1143 47.4771 69.1025 47.0396 68.8857 47.6265 cv
67.0859 46.5552 66.1396 46.4028 63.2568 45.6216 cv
62.3408 45.231 61.4932 44.2212 61.4287 42.8843 cv
62.6006 43.0132 63.2061 43.2271 64.0039 43.3071 cv
69.5 44.8013 li
69.5234 44.8013 69.5234 44.7788 69.5469 44.7563 cv
67.1533 42.6606 63.9873 42.8267 61.0459 42.0522 cv
59.4482 41.7456 58.4424 41.5396 57.9443 41.3755 cv
56.0352 41.0083 48.4111 38.769 47.2109 35.0005 cv
49.001 35.4126 50.4775 35.8257 52.0918 36.2593 cv
53.3457 36.5532 54.377 36.687 56.1768 37.0698 cv
57.8525 37.4272 60.2949 38.1489 60.2949 38.1489 cv
64.1006 39.2446 68.3604 38.5376 72.0957 39.811 cv
73.3965 40.8833 73.6924 42.4995 73.9414 44.0513 cv
74.3428 44.4507 li
74.3428 46.6079 75.1963 47.6733 76.9268 48.9722 cv
cp
83.9229 48.3579 mo
82.4658 47.7847 82.9678 46.1011 82.7607 44.939 cv
82.6709 44.7114 82.4404 44.6196 82.2148 44.6655 cv
81.7373 44.7788 81.3018 45.3267 80.8027 44.9839 cv
81.0986 44.939 81.3711 44.8921 81.5996 44.7114 cv
81.7373 44.5278 81.9209 44.3452 81.8516 44.0513 cv
81.7578 43.9351 81.5996 43.9351 81.4639 43.9351 cv
81.3271 43.981 81.2568 44.1196 81.2568 44.2544 cv
80.6416 44.2993 80.3252 43.6626 79.6865 43.9126 cv
79.3906 43.9126 79.1826 43.6177 78.9795 43.3892 cv
78.7979 42.6138 78.0254 42.2056 77.4541 41.7271 cv
77.1807 42.1362 76.9736 42.5688 76.9736 43.0688 cv
77.0205 43.4126 77.6592 43.2661 77.8848 43.3091 cv
78.4121 43.4956 77.4248 43.8481 77.4541 44.1196 cv
77.4072 44.0278 77.3838 43.8677 77.4746 43.7759 cv
77.6357 43.5474 77.2939 43.5718 77.2021 43.4595 cv
77.1807 44.0728 76.792 44.5747 76.7451 45.1421 cv
77.2939 45.2368 li
77.4307 45.3716 77.3398 45.6216 77.3604 45.8052 cv
77.3691 45.811 77.3721 45.8169 77.3809 45.8247 cv
77.4912 45.8579 77.6123 45.8687 77.665 45.8687 cv
77.7178 45.8687 77.7588 45.9146 77.7588 45.9653 cv
77.7588 46.0181 77.7178 46.0591 77.665 46.0591 cv
77.6592 46.0591 77.5889 46.0571 77.499 46.0444 cv
77.5332 46.2046 77.5283 46.3774 77.75 46.4653 cv
77.9316 46.6685 77.7031 47.104 78.0439 47.1929 cv
79.1396 47.2397 79.8467 46.3735 80.7324 45.8052 cv
80.5977 46.3267 79.9121 46.5571 79.6865 47.0347 cv
79.5713 47.606 79.6162 48.2212 79.4375 48.7661 cv
79.1826 49.5415 78.2256 49.1323 77.9316 49.7485 cv
78.0254 50.4302 77.7031 51.4106 78.4092 51.7974 cv
79.3906 51.9321 80.2549 51.6372 81.0283 51.1821 cv
82.3975 50.7026 83.3994 49.3804 84.583 48.5396 cv
84.3564 48.4702 84.1279 48.4468 83.9229 48.3579 cv
cp
55.8428 52.8579 mo
55.7686 53.9673 55.7627 54.8208 56.2227 55.3657 cv
56.5508 54.4751 56.5771 54.0688 56.3506 53.5181 cv
56.2705 53.2759 56.0674 52.8521 55.8428 52.8579 cv
cp
56.79 52.9595 mo
56.835 53.7729 57.0674 53.8892 57.5674 54.2388 cv
57.0674 53.2358 58.168 52.4019 57.333 51.7456 cv
56.9668 51.9683 56.7764 52.5767 56.79 52.9595 cv
cp
55.0508 51.4126 mo
54.2744 51.6665 54.2256 51.9204 54.0146 52.4956 cv
54.8564 51.7505 55.9424 52.5981 56.3662 51.6245 cv
56.0557 51.3286 55.4209 51.3022 55.0508 51.4126 cv
cp
60.6455 58.5376 mo
60.0723 58.5532 li
59.2256 58.6499 59.2178 59.4956 58.6084 59.7612 cv
58.9854 59.8442 59.9492 59.729 60.3096 59.3208 cv
60.5059 59.1177 60.6289 58.8462 60.6455 58.5376 cv
cp
58.2588 51.6938 mo
58.0791 52.2075 58.4502 53.103 58.707 53.395 cv
58.6396 52.7319 59.375 52.314 59.0498 51.5259 cv
58.7783 51.02 li
58.5195 51.1841 58.3438 51.4253 58.2588 51.6938 cv
cp
57.2783 50.3716 mo
56.7686 50.1753 55.8643 50.52 55.5654 50.7632 cv
56.2285 50.7173 56.624 51.4653 57.4209 51.1646 cv
57.9346 50.9126 li
57.7783 50.647 57.5459 50.4663 57.2783 50.3716 cv
cp
60.1572 52.6714 mo
60.1279 52.0278 60.3916 51.6499 60.3184 51.2407 cv
60.1885 50.7739 60.002 50.6548 59.8057 50.6255 cv
59.2861 51.0005 59.7275 52.147 60.1572 52.6714 cv
cp
57.3799 49.853 mo
57.9932 50.0435 58.2617 50.4185 58.6709 50.4888 cv
59.1523 50.5229 59.3281 50.3853 59.4248 50.2114 cv
59.249 49.5962 58.0156 49.6255 57.3799 49.853 cv
cp
54.8389 52.8911 mo
54.583 52.7642 53.8428 53.1157 53.6494 53.2456 cv
53.1904 53.4399 52.4697 54.1157 52.6221 54.313 cv
53.8662 53.5513 53.9092 54.4653 54.8389 52.8911 cv
cp
60.6807 55.4321 mo
60.7549 55.6675 61.7197 55.4653 62.1436 55.1997 cv
62.3584 55.1138 63.0713 54.7095 63.1133 54.4243 cv
61.29 54.2886 62.0146 54.8462 60.6807 55.4321 cv
cp
58.5068 57.9507 mo
58.5381 58.1978 59.5244 58.1665 59.9844 57.98 cv
60.2139 57.936 60.9912 57.6626 61.0801 57.3882 cv
59.3096 56.9321 59.9258 57.6108 58.5068 57.9507 cv
cp
54.21 54.769 mo
53.9893 55.5522 54.1689 55.7349 54.5303 56.231 cv
54.3799 55.1167 55.6953 54.6909 55.126 53.7935 cv
54.7041 53.8901 54.3252 54.3989 54.21 54.769 cv
cp
62.1904 57.2974 mo
61.1494 57.522 61.7686 58.7544 60.874 59.4302 cv
61.4785 59.3384 61.7393 59.3384 62.1377 58.6294 cv
62.3193 58.2876 62.416 57.6587 62.1904 57.2974 cv
cp
61.3965 56.0093 mo
61.0801 56.1226 60.3018 56.603 59.9141 56.5376 cv
60.0986 56.7856 60.9424 56.7603 61.2412 56.8062 cv
61.7646 56.8521 62.1377 56.2681 62.4131 55.8579 cv
61.3965 56.0093 li
cp
63.1475 55.9478 mo
62.8486 56.4399 li
62.3545 57.1489 63.207 57.7417 63.1846 58.1978 cv
63.4561 57.9243 63.7705 57.1802 63.623 56.6567 cv
63.5576 56.3823 63.3975 56.1323 63.1475 55.9478 cv
cp
63.6436 54.7476 mo
63.5752 54.9517 63.3857 55.2095 63.4307 55.437 cv
63.5 55.8501 64.1436 56.0239 64.3262 56.6421 cv
64.6953 56.0874 64.2588 54.9282 63.6436 54.7476 cv
cp
64.0039 53.3638 mo
63.8447 54.0952 64.3262 54.8296 64.8955 55.1919 cv
65.0176 54.6372 li
64.9502 54.1128 64.4131 53.6157 64.0039 53.3638 cv
cp
63.2891 53.0327 mo
62.7207 53.0112 61.8037 53.7856 61.5049 54.0825 cv
62.6768 53.7144 63.1074 53.9448 63.3828 53.604 cv
63.4033 53.4204 63.4502 53.147 63.2891 53.0327 cv
cp
92.5889 70.6079 mo
93.6582 71.9653 94.5605 73.1567 94.5605 73.1567 cv
94.1963 72.9038 92.999 72.4585 90.9014 70.1558 cv
90.3682 69.4585 89.46 68.4741 89.3018 68.6362 cv
89.2314 68.9087 89.8438 69.4399 89.9609 69.6216 cv
89.9609 69.6216 92.5303 73.0376 92.1494 73.0552 cv
91.7686 73.0737 90.3076 71.6968 89.4453 70.3423 cv
88.499 68.853 86.7822 66.2017 86.5205 64.4204 cv
86.5205 64.4204 89.3857 68.0591 90.1201 68.4712 cv
90.1201 68.4712 88.0361 65.2739 87.6826 64.2837 cv
87.3291 63.2915 86.2021 60.4966 85.3145 59.7192 cv
85.3145 59.7192 85.4521 59.9204 84.4678 60.4321 cv
83.6299 60.8677 83.3809 60.3765 82.4785 60.7046 cv
81.5732 61.0356 81.7402 61.1968 81.248 61.6079 cv
80.5977 62.1509 79.1104 63.2915 78.3682 61.895 cv
78.3682 61.895 77.1377 62.6372 76.1514 62.1431 cv
76.1514 62.1431 74.3428 68.1411 74.5918 69.4585 cv
74.5918 69.4585 75.333 68.8735 75.9092 69.2036 cv
76.4834 69.5308 77.0537 68.5337 77.7939 68.8599 cv
78.5703 69.2056 77.5479 70.9282 77.8555 71.2036 cv
78.2256 71.5356 78.4531 70.6489 79.1533 71.02 cv
79.833 71.3804 79.2939 72.3765 79.9531 72.3765 cv
80.6094 72.3765 79.9268 69.3755 80.6709 69.3755 cv
80.6709 69.3755 80.7217 71.3071 81.5322 71.8833 cv
81.5322 71.8833 80.5459 67.3638 81.9863 63.6226 cv
81.9863 63.6226 81.7402 68.9048 82.2324 71.1812 cv
82.2324 71.1812 83.1357 69.2114 84.2041 69.9517 cv
85.2734 70.689 84.2041 72.2524 84.8633 72.4175 cv
85.5225 72.5815 86.4639 71.5122 86.8584 71.1431 cv
87.2451 70.772 87.9014 70.6294 88.1094 71.103 cv
88.666 72.3833 87.415 72.0054 87.7402 72.7456 cv
88.0244 73.3862 88.5869 73.0415 89.1357 73.3618 cv
90.1543 73.9478 87.5674 74.3862 88.6436 75.0894 cv
89.5869 75.7026 91.3857 75.8774 92.8672 75.7944 cv
92.8643 75.8188 95.8877 76.8735 96.8633 77.6372 cv
96.5732 77.1001 96.207 76.812 96.1602 76.1528 cv
96.207 76.1528 li
97.335 76.6899 97.8271 77.5005 98.0752 78.4761 cv
98.2578 78.4761 98.5068 78.4146 98.6299 77.8813 cv
98.9033 77.0825 98.2764 76.519 99.0537 75.9272 cv
99.5293 75.563 100.145 75.5171 100.737 75.6509 cv
99.1426 74.5132 93.3828 70.9497 92.5889 70.6079 cv
cp
99.9111 76.1646 mo
99.2656 76.4761 99.3066 77.2896 99.2861 77.9155 cv
99.4941 77.896 li
100.016 77.645 100.892 77.4575 100.892 76.6851 cv
100.704 76.3521 100.327 76.1245 99.9111 76.1646 cv
cp
74.7236 73.4673 mo
74.6797 73.4673 li
74.2861 73.687 74.6963 74.4907 74.7959 74.772 cv
75.0518 75.5073 75.0127 76.3228 75.0518 77.0903 cv
75.1191 78.5103 75.0957 79.9419 75.207 81.3579 cv
75.2725 82.1899 75.3877 83.2896 75.9277 83.9692 cv
77.2695 85.6548 78.5225 87.3638 79.4795 89.231 cv
79.4375 89.2544 li
78.5342 88.729 77.1377 87.0044 76.2451 85.4956 cv
75.8818 88.0474 76.4814 91.2827 77.6387 93.2993 cv
79.1797 95.2798 83.4834 93.9507 83.4834 93.9507 cv
84.8926 93.0894 84.2139 91.4653 85.7021 90.3696 cv
85.2451 89.6401 84.8018 89.4683 83.9023 88.3345 cv
83.0049 86.8774 82.1338 85.7993 81.5205 84.5688 cv
80.3135 82.5884 78.9922 80.6733 77.9424 78.6196 cv
76.0918 75.6802 li
74.7236 73.4673 li
cp
83.0928 58.0454 mo
82.6133 57.7505 81.2842 57.6821 80.6914 57.7056 cv
79.5303 57.8638 78.2275 57.6724 77.2256 58.1509 cv
77.2256 58.1509 77.0771 58.229 76.9941 58.3198 cv
76.7188 58.6411 76.7451 58.5884 76.542 58.9722 cv
76.4971 59.0845 75.7051 60.1538 75.7588 60.2827 cv
75.5752 60.6333 75.4707 60.9741 75.5146 61.229 cv
75.7197 61.688 76.1299 61.4595 76.4951 61.6177 cv
76.1768 61.3892 76.1768 61.186 76.1533 60.979 cv
76.0459 60.4409 76.8682 59.3179 77.1904 58.8286 cv
77.3857 58.6519 77.5674 58.5269 77.7031 58.5181 cv
77.7734 58.5181 li
77.2695 59.1372 76.9326 59.7583 76.6836 60.5103 cv
76.5723 60.7827 76.6377 61.0786 76.8213 61.3071 cv
77.0049 61.4888 77.8525 61.5894 78.1045 61.5894 cv
78.043 60.7876 78.4766 60.4771 78.249 59.7036 cv
78.3652 59.6567 78.5459 59.6567 78.6123 59.7954 cv
78.9111 60.5923 78.4131 61.2583 79.0273 61.895 cv
79.8916 62.1226 80.2295 61.5894 80.8145 61.1558 cv
81.0313 60.2017 80.8789 59.2134 80.6416 58.3364 cv
81.2773 58.5181 81.3975 59.9224 81.7402 60.3579 cv
82.0127 60.4468 82.2412 60.2856 82.4463 60.1021 cv
83.0596 59.4888 82.3555 58.5698 81.9404 57.9946 cv
82.0107 57.9497 82.54 58.0122 82.9717 58.8755 cv
83.4014 59.7397 82.9873 59.6313 83.2813 60.1099 cv
83.4629 60.0415 84.208 60.061 84.3896 59.9243 cv
85.2793 59.2407 85.0146 59.0649 85.4287 59.0415 cv
84.79 58.5884 83.8291 58.2935 83.0928 58.0454 cv
cp
75.3154 53.9448 mo
74.0674 54.4243 72.1924 55.3374 71.0732 56.0913 cv
71.1416 56.2505 72.4854 56.1685 72.5576 56.4204 cv
72.2588 56.8521 71.8057 57.189 71.8965 57.7349 cv
72.2158 57.6665 73.3779 57.5698 73.3779 57.5698 cv
73.3994 57.9595 72.9131 58.8716 73.0479 59.2134 cv
73.4365 59.1694 74.0908 58.7261 74.3633 58.4731 cv
74.3633 59.0923 74.6563 59.9829 74.9756 60.4868 cv
75.1338 60.0981 75.79 58.6294 77.001 57.7056 cv
76.6162 57.5239 76.2295 57.3188 75.8867 57.02 cv
75.2041 56.4751 74.8154 55.6118 75.1133 54.7427 cv
75.2256 54.4692 75.5674 54.2651 75.5459 53.9448 cv
75.3154 53.9448 li
cp
89.0518 53.2095 mo
88.0029 53.1646 86.6572 52.8237 86.1113 53.9146 cv
85.9531 55.1001 85.7236 56.354 84.54 56.9663 cv
84.54 56.9663 83.5283 57.4575 84.3604 57.7349 cv
85.083 58.2739 85.8389 58.3599 86.2695 58.9058 cv
86.3633 59.2935 86.0107 59.2954 85.8096 59.5239 cv
86.627 59.978 87.1836 61.0259 87.7051 61.7534 cv
88.2295 61.4341 88.6484 59.7114 88.8076 59.7603 cv
88.7627 60.3062 90.3252 60.9106 90.6875 61.3687 cv
91.2617 60.6138 91.0771 59.3384 90.9639 58.5181 cv
91.5547 59.0874 91.8994 59.8853 92.6025 60.3872 cv
93.3545 59.5669 92.7852 58.314 92.5576 57.4468 cv
93.0371 57.811 94.2383 57.8481 94.8096 58.2798 cv
94.9893 57.5522 94.4932 56.5493 94.1514 55.979 cv
94.1514 55.979 95.5625 56.5376 96.04 56.7163 cv
96.1299 56.0806 95.626 55.3735 95.4658 54.8276 cv
95.8975 54.9868 96.3662 53.8481 95.8877 53.5972 cv
94.9736 53.688 94.2236 54.1001 93.2422 53.9849 cv
91.8535 53.7319 90.4639 53.3921 89.0518 53.2095 cv
cp
107.847 49.9966 mo
107.591 49.9995 107.333 49.7632 106.959 50.2944 cv
106.163 51.4175 103.906 52.0474 102.061 51.73 cv
99.9863 52.0942 98.1641 53.0942 96.1602 53.5044 cv
97.0928 54.2563 98.1406 55.0532 99.4619 54.7134 cv
99.1201 54.0298 98.5479 54.3237 98.3428 53.5962 cv
98.7061 53.7065 98.665 53.6187 99.0537 53.7319 cv
100.989 54.4165 102.022 55.3081 104.097 54.2817 cv
103.8 53.5972 102.288 53.5962 102.781 53.1821 cv
103.272 52.7729 106.581 54.2231 108.04 53.2671 cv
107.517 52.4243 106.067 52.5269 106.396 52.1147 cv
106.725 51.7046 109.351 52.4575 110.056 51.1821 cv
109.872 50.4302 107.847 49.9966 107.847 49.9966 cv
cp
60.6611 51.0278 mo
61.2852 51.0688 62.1436 51.2192 62.5811 51.6411 cv
61.9795 51.7856 61.8477 52.2798 61.4795 52.5269 cv
61.3955 52.7407 li
61.625 52.9458 62.0127 52.7817 62.2637 52.6665 cv
62.8555 52.4839 63.3477 52.2544 64.0088 52.186 cv
64.168 52.3677 63.8271 52.2788 63.8271 52.436 cv
64.9893 53.5298 66.3779 54.2124 67.7246 54.9194 cv
68.8789 55.7007 69.4326 56.6938 70.5488 55.8062 cv
74.9229 53.2329 li
76.6084 52.481 li
76.7236 51.5923 77.4307 50.9087 77.3604 49.9526 cv
77.1104 49.6782 li
75.7432 49.4761 74.627 50.4517 73.7861 51.4341 cv
72.4854 51.979 71.2783 52.7993 70.1152 53.688 cv
70.2061 53.8013 70.458 53.938 70.3877 54.1001 cv
68.5098 53.5122 67.0654 52.2388 65.2197 51.6245 cv
64.3096 50.9839 63.5713 50.9067 62.4219 50.686 cv
61.7139 50.4673 61.0391 50.6606 60.834 50.8423 cv
60.6611 51.0278 li
cp
63.6123 48.7554 mo
63.6123 48.7554 62.7998 49.0786 61.5898 49.1118 cv
60.708 49.1118 60.0898 49.0142 58.2354 48.9097 cv
59.0557 49.4048 61.1729 50.1763 62.2588 50.3071 cv
64.0811 50.2817 65.2764 50.8696 66.7813 51.6245 cv
67.2354 51.9419 67.3057 51.063 67.6016 50.8813 cv
67.6016 50.8813 67.3613 50.7388 67.2725 50.4722 cv
67.1865 50.2056 67.1299 49.9526 67.6084 49.8149 cv
66.1963 49.3579 65.1172 48.9829 63.6123 48.7554 cv
cp
109.912 48.2114 mo
109.912 48.2114 109.837 49.0405 108.556 49.4438 cv
109.741 50.1958 112.489 50.896 113.663 47.1636 cv
112.514 47.7378 111.714 48.311 109.912 48.2114 cv
cp
104.792 48.3579 mo
104.36 48.606 104.018 49.0181 103.47 48.9966 cv
102.632 49.0854 102.491 50.314 101.534 50.1333 cv
96.1787 50.8394 li
95.3818 50.9312 94.6309 51.1821 93.8574 51.2739 cv
92.082 50.5864 90.0986 50.4741 88.4561 49.4761 cv
87.5928 49.1997 86.7031 48.7437 85.7236 48.9966 cv
83.9902 50.2466 84.8564 52.7544 85.1104 54.4419 cv
85.1553 54.5532 85.1982 54.7349 85.3584 54.7349 cv
85.8125 54.2124 85.8594 53.4624 85.9736 52.7544 cv
85.7451 52.5962 85.4033 52.7075 85.1748 52.7544 cv
85.3115 52.4575 85.6338 52.3677 85.9053 52.2524 cv
88.0947 52.1157 90.1455 52.6646 92.2168 53.0513 cv
93.5381 53.4849 95.1348 53.2095 96.4297 52.8677 cv
100.168 51.7729 li
100.897 51.6147 101.626 51.3892 102.4 51.4106 cv
103.79 51.6372 105.066 51.0688 106.206 50.4517 cv
106.525 50.2944 106.9 49.7524 106.821 49.4058 cv
106.741 49.0562 104.952 49.4282 104.386 49.6089 cv
104.153 49.9048 103.79 50.1108 103.45 50.1333 cv
103.837 49.8589 li
104.11 49.2896 104.932 49.1323 104.997 48.4272 cv
104.997 48.311 104.864 48.3579 104.792 48.3579 cv
cp
107.322 47.103 mo
105.767 45.4761 106.405 45.0356 102.195 46.4028 cv
95.2412 48.0884 li
95.7959 49.0132 94.8096 49.4438 94.8096 49.4438 cv
95.5391 50.0376 97.1533 50.0522 98.0439 50.0073 cv
101.985 49.4604 li
102.556 48.5728 103.534 48.5054 104.353 48.1392 cv
104.604 48.0923 104.765 47.7993 105.036 47.7993 cv
105.13 47.7993 105.22 47.9106 105.267 47.979 cv
105.425 48.2534 105.289 48.7476 105.107 48.9995 cv
105.518 48.9077 105.723 48.8198 106.304 48.8354 cv
106.995 48.8521 107.247 49.1489 107.226 49.3521 cv
107.913 49.1685 108.706 49.0737 109.069 48.3442 cv
107.322 47.103 li
cp
64.2002 46.4712 mo
63.7109 46.2749 63.0635 46.2134 62.2432 46.2085 cv
63.5 48.3394 66.0664 48.9224 68.3164 49.0493 cv
69.1602 49.2759 68.5908 48.7036 68.7549 48.3345 cv
67.1357 47.3853 65.9951 47.0239 64.2002 46.4712 cv
cp
58.5576 46.3081 mo
57.8564 46.2788 55.8506 46.147 53.4697 45.4595 cv
54.207 46.3853 56.7217 48.2388 58.2617 48.3618 cv
63.5 48.3394 li
62.7646 47.606 li
61.5195 46.1372 60.1885 46.3726 58.5576 46.3081 cv
cp
84.1953 42.8208 mo
83.9463 43.0024 84.1953 43.2759 84.1953 43.5044 cv
84.2861 43.6841 84.4238 43.8931 84.6748 43.8677 cv
84.9268 43.6421 85.584 43.6177 85.4287 43.0942 cv
85.291 43.0688 85.1982 43.1382 85.083 43.1606 cv
84.7197 43.2759 84.4033 43.1157 84.1953 42.8208 cv
cp
106.991 44.6782 mo
105.751 45.0669 106.795 45.981 109.045 47.3364 cv
110.269 47.9712 111.14 47.4976 112.162 47.2544 cv
113.96 46.8462 115.367 45.8032 116.69 43.9575 cv
114.903 44.6372 110.839 45.6548 106.991 44.6782 cv
cp
48.3174 37.9927 mo
49.3037 40.2095 51.4414 44.8013 57.1553 45.4595 cv
61.917 45.7544 li
61.2002 43.9575 61.1006 43.0444 58.3174 42.2329 cv
56.8818 41.981 52.2314 40.8286 48.3174 37.9927 cv
cp
85.1455 41.4985 mo
84.6904 41.7026 83.9844 41.9985 83.9844 42.5923 cv
83.9844 42.5923 84.3213 42.6851 84.46 42.7739 cv
84.7119 42.9771 85.0977 42.8872 85.3486 42.7505 cv
85.6201 42.5923 85.8486 42.3188 85.8486 41.9771 cv
85.6895 41.7944 85.5781 41.8384 85.6201 41.6558 cv
85.5547 41.4536 85.3057 41.4536 85.1455 41.4985 cv
cp
77.833 40.9888 mo
77.7002 40.9214 77.4463 40.9458 77.4932 41.1499 cv
77.7666 41.3794 78.5645 42.1118 78.8604 42.2944 cv
82.1455 42.4087 li
82.5576 42.4556 83.0117 42.4995 83.2627 42.8872 cv
83.3291 43.0688 83.2861 43.2983 83.1025 43.3892 cv
82.7832 43.478 82.4199 43.4126 82.2373 43.1157 cv
82.2822 43.0688 82.3721 43.1157 82.4404 43.0942 cv
82.5107 43.0688 82.6221 43.0688 82.6221 42.9565 cv
82.1221 42.7759 81.5654 42.7739 81.04 42.7046 cv
80.7441 42.7739 79.335 42.4722 79.1533 42.7456 cv
79.2324 43.6079 80.9873 43.6294 82.1514 43.6079 cv
82.2646 43.9067 82.5313 44.186 82.7832 44.3452 cv
82.9424 44.5522 83.0117 44.8013 82.9678 45.0728 cv
83.0586 44.8257 83.3291 44.5522 83.5811 44.4604 cv
83.8555 44.1411 84.0371 43.731 83.9463 43.2983 cv
83.6709 42.7505 82.5986 41.6763 82.0039 41.4927 cv
80.7764 41.3364 78.9502 41.3794 77.833 40.9888 cv
cp
102.538 42.687 mo
93.5352 45.5728 li
94.3994 46.0669 94.2705 46.7974 93.8311 47.5796 cv
95.9873 47.27 97.8564 46.8032 99.2471 46.4849 cv
104.363 45.0073 li
106.112 44.6567 106.292 44.269 107.937 43.3423 cv
108.166 43.0679 109.479 42.7271 109.602 42.1714 cv
107.92 41.1694 105.425 41.856 102.538 42.687 cv
cp
84.4541 40.8296 mo
84.1592 41.0112 83.9756 41.3511 84.0195 41.6733 cv
84.3896 41.77 84.4854 41.5679 84.6699 41.4321 cv
84.7607 41.2935 84.8164 41.2388 84.8164 41.0571 cv
84.8164 40.8765 84.6123 40.7817 84.4541 40.8296 cv
cp
82.5479 39.311 mo
81.5586 39.0044 80.5381 39.2358 79.8115 39.4634 cv
79.1973 39.6704 78.3125 40.2163 78.0068 40.6548 cv
79.1445 40.9517 80.5635 40.7466 81.751 40.9302 cv
82.3877 41.1138 82.8604 41.9165 83.6357 41.5552 cv
84.1133 41.0757 84.0967 40.7534 84.0371 40.5376 cv
83.9111 40.2603 83.5127 39.6108 82.5479 39.311 cv
cp
102.858 40.0532 mo
97.4014 39.7856 95.0557 41.2681 90.1201 44.0181 cv
90.4443 43.9712 91.374 44.2231 91.6025 44.4507 cv
91.7607 44.6099 92.2236 45.2778 92.1572 45.4399 cv
99.3682 42.5415 101.667 42.0942 105.904 41.1841 cv
106.426 41.0259 105.685 40.6333 104.381 40.3081 cv
103.972 40.146 103.335 40.0532 102.858 40.0532 cv
cp
118.231 40.1372 mo
115.027 41.3735 112.847 41.6099 110.854 41.856 cv
110.322 42.1646 110.466 42.98 107.92 44.0063 cv
108.216 44.6948 111.579 44.4106 113.387 44.1626 cv
115.769 43.7534 116.132 43.3667 116.993 42.6226 cv
117.562 42.1343 118.231 41.2163 118.388 40.7231 cv
118.634 40.2603 118.602 40.0435 118.231 40.1372 cv
cp
77.9287 39.4058 mo
77.7178 39.6479 77.2402 40.3198 77.6729 40.5688 cv
78.3779 39.1958 79.4375 39.2827 80.3213 39.0591 cv
79.626 38.8325 78.6338 38.8853 77.9287 39.4058 cv
cp
118.106 36.7466 mo
113.779 37.9087 110.468 38.856 106.479 40.8149 cv
107.507 40.9536 li
109.187 41.2485 109.511 41.436 111.266 41.1841 cv
113.727 40.7759 116.357 40.2739 118.358 39.1489 cv
119.466 38.5317 121.013 36.3149 121.561 35.2661 cv
120.717 35.603 120.43 35.9419 118.106 36.7466 cv
cp
116.577 33.4976 mo
110.837 35.6392 li
106.87 37.0552 li
104.316 37.7388 li
101.353 38.6724 97.9355 38.5142 94.792 38.9468 cv
92.3779 39.3813 89.665 39.7661 88.3672 42.2056 cv
87.0898 44.1646 87.8662 47.4009 85.1748 48.3579 cv
85.54 48.3579 86.042 48.3521 86.3838 48.4185 cv
86.8408 48.2876 87.6572 48.5093 88.1123 48.6665 cv
89.9668 49.1938 90.5527 49.8794 92.458 50.27 cv
93.3955 50.4966 94.3877 50.9663 95.2979 50.4673 cv
94.8193 49.9644 93.8604 49.688 93.2451 49.7329 cv
93.8857 49.3696 94.8096 48.9907 94.3955 48.2544 cv
93.667 47.7505 92.8965 48.3862 92.2607 48.5005 cv
92.5566 47.9985 93.8213 46.938 92.999 46.2788 cv
92.0645 45.8931 91.3213 46.3091 90.6143 46.856 cv
90.8457 46.3091 91.7686 45.5415 91.1084 44.9653 cv
90.4521 44.3882 89.5498 44.896 89.3018 44.9653 cv
89.208 44.5337 88.8896 43.6626 88.4561 43.3667 cv
88.502 43.3433 li
88.8232 43.3667 89.1533 43.5249 89.4385 43.8052 cv
91.3525 42.4399 93.2686 41.1841 95.6709 40.3833 cv
97.3027 39.7603 101.167 38.3335 106.354 40.1919 cv
107.712 39.6987 108.892 38.8618 110.118 38.4321 cv
117.459 36.1323 li
119.281 35.4946 120.198 34.7622 121.384 32.0415 cv
119.767 32.3833 118.126 33.019 116.577 33.4976 cv
cp
0 0 0 0 cmyk
f
27.7236 91.2485 mo
27.2949 91.2495 li
27.4014 91.6655 li
28.4131 95.6235 27.3428 99.4702 24.54 101.955 cv
23.6553 102.74 li
24.8193 102.536 li
25.7129 102.379 26.8965 102.212 28.1367 102.309 cv
31.0576 102.493 33.1162 103.092 34.7998 104.222 cv
34.709 104.667 33.041 112.92 33.041 112.92 cv
33.0107 113.051 32.9971 113.18 32.9971 113.303 cv
32.9971 113.859 33.2715 114.342 33.5557 114.752 cv
33.5713 114.774 li
33.5889 114.792 li
34.8701 116.141 36.501 116.588 38.0771 117.024 cv
38.21 117.06 li
45.0967 118.667 52.3662 117.236 58.6846 113.036 cv
62.0869 110.815 li
63.583 109.891 li
65.3838 108.786 li
68.8525 106.729 71.708 105.61 74.9316 105.047 cv
81.5986 103.875 88.7412 105.294 94.042 108.845 cv
94.0615 108.857 94.7354 109.25 94.7354 109.25 cv
94.7188 109.241 99.2061 112.18 99.2061 112.18 cv
99.208 112.185 101.989 113.943 101.989 113.943 cv
108.148 117.813 116.128 118.961 122.813 116.94 cv
123.944 116.563 126.28 115.785 126.611 113.735 cv
126.62 113.675 li
126.62 113.675 124.935 104.909 124.862 104.534 cv
124.866 104.532 125.106 104.357 125.106 104.357 cv
125.03 104.417 li
127.845 102.842 131.532 102.293 134.892 102.95 cv
136.108 103.188 li
135.177 102.37 li
132.37 99.9028 131.319 96.0493 132.364 92.061 cv
132.474 91.645 li
132.046 91.6411 li
127.778 91.5942 123.802 92.1841 120.224 93.397 cv
118.446 94.0806 115.778 95.106 114.991 97.5181 cv
114.976 97.5669 li
114.882 104.559 li
114.882 104.562 114.868 106.517 114.863 107.315 cv
110.708 107.228 107.27 105.145 104.368 103.176 cv
104.369 103.178 103.355 102.475 103.355 102.475 cv
103.349 102.469 99.2021 99.7593 99.2021 99.7593 cv
94.2842 96.7114 89.4111 94.8989 84.3057 94.2114 cv
75.5654 93.0688 66.833 95.2017 59.0498 100.381 cv
59.0469 100.382 55.1396 103.04 55.1396 103.04 cv
52.0693 105.058 48.7295 107.022 44.6748 107.068 cv
44.6787 106.546 44.7217 97.811 44.7217 97.811 cv
44.6982 96.4185 43.6299 95.1294 41.54 93.9741 cv
37.7051 92.1118 33.1904 91.2212 27.7236 91.2485 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
40.5469 101.315 mo
41.6611 100.994 42.8037 100.641 43.7324 99.77 cv
43.7305 100.243 43.7119 106.829 43.7119 107.064 cv
41.2871 106.997 38.5576 106.667 36.5078 104.824 cv
36.5068 104.819 36.4209 104.708 36.4209 104.708 cv
36.1943 104.415 36.002 104.168 36.002 103.864 cv
36.002 103.754 36.0264 103.637 36.084 103.51 cv
36.6787 102.407 37.8564 102.084 38.9932 101.773 cv
39.9189 101.5 li
39.916 101.5 40.5469 101.315 40.5469 101.315 cv
cp
0 0 0 0 cmyk
f
115.866 100.155 mo
116.979 101.129 118.35 101.538 119.686 101.914 cv
120.86 102.243 122.075 102.584 123.079 103.328 cv
123.386 103.602 123.53 103.84 123.53 104.088 cv
123.53 104.199 123.503 104.309 123.448 104.427 cv
122.802 105.657 121.296 106.267 120.22 106.619 cv
118.792 107.019 117.362 107.222 115.866 107.25 cv
115.866 107.012 115.866 100.595 115.866 100.155 cv
cp
f
28.6982 94.5366 mo
28.6982 93.7603 28.6104 92.9712 28.4609 92.1782 cv
32.6152 92.3442 37.3965 92.8247 41.5469 95.0669 cv
42.583 95.729 43.7568 96.6392 43.7568 97.8472 cv
43.7568 97.8794 43.7568 97.9116 43.7549 97.9419 cv
43.5605 99.4878 41.998 99.9595 40.6191 100.375 cv
38.8232 100.927 li
37.3564 101.334 35.8564 101.778 35.1807 103.296 cv
32.8174 101.877 29.8486 101.224 26.3447 101.357 cv
27.8662 99.5464 28.6982 97.1274 28.6982 94.5366 cv
cp
f
121.794 101.545 mo
121.647 101.49 li
119.905 100.963 li
118.485 100.586 117.146 100.23 116.142 99.1138 cv
115.958 98.8491 115.878 98.5083 115.878 98.1694 cv
115.878 97.8647 115.942 97.5649 116.048 97.3257 cv
117.354 95.3169 119.586 94.6157 121.743 93.939 cv
122.312 93.7583 li
124.962 93.0376 127.905 92.6528 131.284 92.5728 cv
131.135 93.4282 131.047 94.2661 131.047 95.0708 cv
131.047 97.6831 131.837 99.981 133.325 101.752 cv
129.894 101.618 126.913 102.254 124.458 103.641 cv
124.056 102.43 122.814 101.934 121.794 101.545 cv
cp
f
65.0771 103.538 mo
64.9473 103.557 64.2744 103.904 64.126 103.981 cv
64.1045 103.866 63.8115 102.286 63.7813 102.125 cv
63.8232 102.167 li
64.0391 102.449 65.0713 103.476 65.1143 103.518 cv
65.0771 103.538 li
cp
67.1475 104.128 mo
67.1475 104.127 64.2393 101.395 64.2393 101.395 cv
64.1787 101.335 63.9805 101.131 63.9805 101.131 cv
63.958 101.088 63.9443 101.038 64.0566 100.969 cv
64.0752 100.906 64.0205 100.792 64.0205 100.792 cv
63.9521 100.77 62.6094 101.479 62.6094 101.479 cv
62.5869 101.543 62.6475 101.657 62.6475 101.657 cv
62.8545 101.621 62.8682 101.649 62.873 101.659 cv
62.874 101.662 62.9385 101.937 62.9385 101.937 cv
62.9424 101.955 63.5811 106.009 63.5811 106.009 cv
63.5938 106.108 63.5996 106.2 63.5361 106.239 cv
63.5186 106.303 63.5771 106.419 63.5771 106.419 cv
63.6455 106.44 64.7061 105.88 64.7061 105.88 cv
64.749 105.858 li
64.666 105.702 li
64.5088 105.722 64.4443 105.709 64.4082 105.644 cv
64.4082 105.641 64.3721 105.501 64.3721 105.501 cv
64.3721 105.497 64.2412 104.715 64.2393 104.713 cv
64.2568 104.741 65.6455 104.011 65.6611 104.004 cv
65.6621 104.045 66.2539 104.597 66.2539 104.597 cv
66.2549 104.598 66.3447 104.702 66.3447 104.702 cv
66.3467 104.708 66.3506 104.713 66.3506 104.717 cv
66.3506 104.733 66.335 104.754 66.2646 104.803 cv
66.2627 104.811 66.2607 104.819 66.2607 104.827 cv
66.2607 104.89 66.3076 104.98 66.3076 104.98 cv
66.376 105 67.4668 104.425 67.4668 104.425 cv
67.4873 104.358 67.4258 104.245 67.4258 104.245 cv
67.2979 104.245 67.2705 104.246 67.1475 104.128 cv
cp
122.874 113.059 mo
122.813 113.024 122.69 113.058 122.69 113.058 cv
122.661 113.2 122.644 113.24 122.434 113.293 cv
122.434 113.293 120.424 113.811 120.419 113.813 cv
120.423 113.813 120.424 113.807 120.424 113.797 cv
120.424 113.657 120.192 112.763 120.157 112.633 cv
120.245 112.61 121.235 112.355 121.235 112.355 cv
121.443 112.302 121.478 112.323 121.513 112.393 cv
121.567 112.418 121.692 112.385 121.692 112.385 cv
121.728 112.327 121.46 111.29 121.46 111.29 cv
121.397 111.254 121.274 111.289 121.274 111.289 cv
121.244 111.43 121.228 111.467 121.021 111.52 cv
121.021 111.52 119.905 111.807 119.896 111.809 cv
119.899 111.808 119.901 111.803 119.901 111.792 cv
119.901 111.645 119.661 110.714 119.661 110.708 cv
119.674 110.753 121.522 110.274 121.522 110.274 cv
121.73 110.223 121.763 110.245 121.8 110.315 cv
121.856 110.339 121.979 110.305 121.979 110.305 cv
122.015 110.246 121.743 109.209 121.743 109.209 cv
121.683 109.174 121.561 109.208 121.561 109.208 cv
121.531 109.348 121.513 109.39 121.308 109.443 cv
118.232 110.24 li
118.197 110.299 118.228 110.422 118.228 110.422 cv
118.536 110.42 118.558 110.462 118.585 110.57 cv
119.601 114.489 li
119.628 114.604 119.627 114.646 119.409 114.731 cv
119.38 114.788 119.41 114.913 119.41 114.913 cv
119.47 114.949 122.649 114.124 122.649 114.124 cv
122.856 114.073 122.89 114.095 122.931 114.178 cv
122.985 114.205 123.11 114.172 123.11 114.172 cv
123.146 114.113 122.874 113.059 122.874 113.059 cv
cp
117.103 112.708 mo
117.097 113.897 116.714 114.277 115.517 114.271 cv
115.517 114.271 114.997 114.27 114.992 114.27 cv
114.992 114.269 li
115.039 114.256 115.054 111.387 115.056 111.125 cv
115.138 111.125 115.53 111.13 115.53 111.13 cv
116.72 111.134 117.103 111.514 117.103 112.687 cv
117.103 112.708 li
cp
115.877 110.27 mo
113.888 110.262 li
113.838 110.31 113.835 110.438 113.835 110.438 cv
114.031 110.51 114.054 110.549 114.05 110.674 cv
114.05 110.676 114.036 114.715 114.036 114.715 cv
114.036 114.838 114.013 114.874 113.854 114.903 cv
113.813 115.075 li
113.862 115.124 115.677 115.131 115.677 115.131 cv
116.469 115.135 117.078 114.932 117.487 114.527 cv
117.897 114.12 118.106 113.509 118.109 112.712 cv
118.114 111.19 117.278 110.276 115.877 110.27 cv
cp
112.238 110.065 mo
112.413 110.184 112.425 110.228 112.396 110.344 cv
111.751 112.952 li
111.604 113.547 111.177 113.805 110.583 113.659 cv
110.287 113.586 110.075 113.446 109.952 113.243 cv
109.83 113.042 109.806 112.78 109.877 112.487 cv
110.521 109.881 li
110.55 109.764 110.58 109.73 110.737 109.744 cv
110.788 109.707 110.819 109.582 110.819 109.582 cv
110.784 109.522 109.442 109.193 109.442 109.193 cv
109.394 109.181 li
109.382 109.231 li
109.354 109.355 li
109.569 109.483 109.573 109.529 109.543 109.641 cv
108.903 112.229 li
108.612 113.42 109.097 114.178 110.339 114.482 cv
110.972 114.639 111.493 114.598 111.886 114.36 cv
112.259 114.136 112.52 113.731 112.66 113.158 cv
113.3 110.57 li
113.329 110.454 113.354 110.417 113.533 110.435 cv
113.586 110.398 113.615 110.275 113.615 110.275 cv
113.58 110.215 112.331 109.906 112.331 109.906 cv
112.272 109.942 112.238 110.065 112.238 110.065 cv
cp
107.161 109.394 mo
107.064 109.752 106.87 111.183 106.864 111.24 cv
106.827 111.223 li
106.729 111.129 106.045 110.8 105.897 110.731 cv
105.975 110.645 107.03 109.49 107.169 109.34 cv
107.161 109.394 li
cp
106.862 108.154 mo
107.015 108.295 107.001 108.323 106.995 108.336 cv
106.813 108.555 li
106.802 108.569 103.952 111.514 103.952 111.514 cv
103.884 111.582 103.813 111.647 103.741 111.62 cv
103.678 111.645 103.625 111.758 103.625 111.758 cv
103.649 111.825 104.731 112.333 104.731 112.333 cv
104.778 112.354 li
104.85 112.194 li
104.769 112.112 104.732 112.059 104.732 112.008 cv
104.732 111.991 104.737 111.973 104.745 111.956 cv
104.745 111.954 104.835 111.838 104.835 111.838 cv
104.838 111.835 105.38 111.27 105.384 111.265 cv
105.384 111.3 106.796 111.961 106.804 111.964 cv
106.772 111.967 106.685 112.797 106.685 112.797 cv
106.685 112.802 106.66 112.936 106.66 112.936 cv
106.653 112.952 106.647 112.963 106.526 112.929 cv
106.47 112.956 106.414 113.068 106.414 113.068 cv
106.438 113.134 107.557 113.661 107.557 113.661 cv
107.622 113.637 107.675 113.522 107.675 113.522 cv
107.598 113.418 107.579 113.396 107.599 113.232 cv
107.601 113.231 108.026 109.264 108.026 109.264 cv
108.085 108.895 li
108.099 108.866 108.126 108.81 108.259 108.863 cv
108.321 108.839 108.376 108.719 108.376 108.719 cv
108.353 108.653 106.981 108.014 106.981 108.014 cv
106.917 108.038 106.862 108.154 106.862 108.154 cv
cp
103.597 110.432 mo
103.433 110.557 103.39 110.558 103.221 110.446 cv
103.221 110.446 101.558 109.356 101.554 109.354 cv
101.61 109.352 103.563 106.378 103.563 106.378 cv
103.63 106.278 103.663 106.25 103.886 106.366 cv
103.95 106.349 104.019 106.243 104.019 106.243 cv
104.006 106.174 102.765 105.362 102.765 105.362 cv
102.696 105.375 102.624 105.48 102.624 105.48 cv
102.804 105.687 102.788 105.729 102.724 105.829 cv
100.508 109.207 li
100.446 109.305 100.408 109.332 100.233 109.245 cv
100.171 109.262 100.099 109.368 100.099 109.368 cv
100.114 109.438 102.751 111.165 102.751 111.165 cv
102.928 111.28 102.933 111.324 102.898 111.409 cv
102.917 111.468 103.022 111.54 103.022 111.54 cv
103.092 111.524 103.718 110.57 103.718 110.57 cv
103.702 110.502 103.597 110.432 103.597 110.432 cv
cp
97.9189 107.51 mo
97.9209 107.51 100.122 103.987 100.122 103.987 cv
100.162 103.92 100.21 103.893 100.32 103.955 cv
100.386 103.938 100.455 103.83 100.455 103.83 cv
100.438 103.762 99.0928 102.92 99.0928 102.92 cv
99.0244 102.936 98.9561 103.044 98.9561 103.044 cv
99.002 103.126 99.0166 103.168 99.0166 103.197 cv
99.0166 103.215 99.0107 103.227 99.001 103.243 cv
98.9609 103.302 98.4805 103.639 97.9717 103.995 cv
97.9717 103.995 96.875 104.774 96.7051 104.895 cv
96.71 104.875 96.7139 104.85 96.7178 104.827 cv
96.8115 104.557 96.9521 103.762 96.9521 103.762 cv
97.0615 103.111 97.208 102.218 97.2529 102.141 cv
97.2666 102.12 97.2881 102.101 97.3877 102.119 cv
97.4385 102.096 97.5049 101.991 97.5049 101.991 cv
97.4893 101.924 96.1309 101.07 96.1309 101.07 cv
96.0615 101.085 95.9961 101.193 95.9961 101.193 cv
96.0986 101.328 96.0947 101.377 96.0537 101.445 cv
93.8525 104.967 li
93.8047 105.042 93.7529 105.054 93.6689 105.007 cv
93.6025 105.024 93.5352 105.134 93.5352 105.134 cv
93.5518 105.202 94.5986 105.852 94.5986 105.852 cv
94.6416 105.879 li
94.7314 105.734 li
94.6436 105.635 94.6162 105.581 94.6162 105.538 cv
94.6162 105.51 94.6279 105.487 94.6436 105.463 cv
94.6436 105.463 96.1543 103.044 96.3594 102.715 cv
96.3506 102.745 96.3477 102.775 96.3408 102.804 cv
96.1846 103.332 95.8213 105.124 95.8213 105.124 cv
95.5889 106.438 li
95.6104 106.489 95.7266 106.56 95.7266 106.56 cv
95.7842 106.558 96.9795 105.7 96.9795 105.7 cv
96.9795 105.7 98.6152 104.484 98.8975 104.274 cv
98.8213 104.397 li
98.3975 104.987 97.1279 107.016 97.1279 107.016 cv
97.0908 107.076 97.0518 107.112 96.915 107.038 cv
96.8506 107.055 96.7813 107.159 96.7813 107.159 cv
96.7979 107.227 97.874 107.902 97.874 107.902 cv
97.9424 107.885 98.0107 107.777 98.0107 107.777 cv
97.8652 107.618 97.8857 107.563 97.9189 107.51 cv
cp
92.8799 100.927 mo
92.7969 101.286 92.6572 102.725 92.6533 102.785 cv
92.6143 102.768 li
92.5088 102.676 91.8184 102.377 91.6709 102.313 cv
91.7471 102.225 92.7529 101.032 92.8848 100.875 cv
92.8799 100.927 li
cp
93.4639 104.744 mo
93.751 100.652 li
93.7822 100.401 li
93.7959 100.37 93.8213 100.308 93.9561 100.358 cv
94.0186 100.332 94.0674 100.213 94.0674 100.213 cv
94.04 100.15 92.6475 99.5581 92.6475 99.5581 cv
92.583 99.5845 92.5361 99.7036 92.5361 99.7036 cv
92.6611 99.811 92.6797 99.8521 92.6797 99.8706 cv
92.6797 99.8755 92.6787 99.8794 92.6787 99.8813 cv
92.6768 99.8813 92.4932 100.112 92.4932 100.112 cv
92.4873 100.117 89.7529 103.171 89.7529 103.171 cv
89.6855 103.244 89.6201 103.307 89.5459 103.284 cv
89.4854 103.313 89.4385 103.428 89.4385 103.428 cv
89.4658 103.492 90.5654 103.958 90.5654 103.958 cv
90.6104 103.977 li
90.6787 103.817 li
90.5752 103.731 90.5518 103.668 90.5518 103.628 cv
90.5518 103.606 90.5576 103.59 90.5615 103.583 cv
90.6475 103.463 li
90.6533 103.46 91.1729 102.87 91.1748 102.866 cv
91.1768 102.9 92.6123 103.51 92.6201 103.513 cv
92.5908 103.516 92.5361 104.348 92.5361 104.348 cv
92.5342 104.352 92.5127 104.489 92.5127 104.489 cv
92.5049 104.503 92.499 104.518 92.3818 104.487 cv
92.3252 104.515 92.2744 104.631 92.2744 104.631 cv
92.2998 104.696 93.4355 105.177 93.4355 105.177 cv
93.5 105.151 93.5518 105.034 93.5518 105.034 cv
93.4697 104.932 93.4502 104.913 93.4639 104.744 cv
cp
89.6514 103.034 mo
89.7256 103.055 89.8154 102.997 89.8154 102.997 cv
89.835 102.936 89.3604 101.783 89.3604 101.783 cv
89.3115 101.751 89.1992 101.757 89.1992 101.757 cv
89.1523 101.813 89.1396 101.984 89.1396 101.984 cv
89.1396 101.988 88.9268 102.223 88.9268 102.223 cv
88.7021 102.35 88.3896 102.381 88.1094 102.301 cv
87.3643 102.098 87.0186 101.328 87.2627 100.431 cv
87.4248 99.8325 87.6787 99.4302 88.0127 99.2417 cv
88.2803 99.0894 88.6133 99.0659 89 99.1733 cv
89.2666 99.2466 89.5049 99.4185 89.6221 99.6255 cv
89.6826 99.9653 li
89.6631 100.084 li
89.7334 100.138 li
89.7998 100.135 90.6592 99.2446 90.6592 99.2446 cv
90.7588 99.1431 li
90.5811 99.1079 li
90.3975 99.1323 li
90.3945 99.1323 90.251 99.0005 90.251 99.0005 cv
90.0723 98.8188 li
89.835 98.5903 89.5537 98.4341 89.2119 98.3413 cv
88.5986 98.1704 87.9756 98.2388 87.46 98.5327 cv
86.9014 98.8501 86.498 99.4165 86.293 100.167 cv
85.915 101.553 86.5322 102.762 87.7939 103.108 cv
88.6025 103.328 89.0645 103.122 89.3389 103.001 cv
89.5596 102.934 li
89.5947 102.945 89.6279 102.98 89.6514 103.034 cv
cp
85.1201 98.9673 mo
85.1855 98.9556 85.999 97.9341 85.999 97.9341 cv
85.96 97.9038 li
85.96 97.9028 li
85.9561 97.8989 li
85.8584 97.8208 li
85.8018 97.8726 85.7549 97.8989 85.6777 97.8882 cv
85.4697 97.7798 li
85.2354 97.6392 li
84.9326 97.4673 84.5732 97.354 84.1689 97.2993 cv
82.8818 97.1274 82.3213 97.8267 82.2324 98.4771 cv
82.1006 99.4692 83.0342 99.811 83.7842 100.088 cv
84.3564 100.299 84.8506 100.481 84.7988 100.87 cv
84.5938 101.258 li
84.4111 101.398 84.0947 101.439 83.6553 101.381 cv
83.2764 101.33 82.7588 101.128 82.5791 100.893 cv
82.5186 100.712 li
82.5303 100.594 li
82.4111 100.524 li
82.3438 100.538 81.6553 101.58 81.6553 101.58 cv
81.6299 101.618 li
81.7529 101.711 li
81.8291 101.697 81.9463 101.615 81.9482 101.615 cv
81.9482 101.616 82.1963 101.737 82.1963 101.737 cv
82.4463 101.881 li
82.4482 101.881 83.499 102.228 83.499 102.228 cv
84.415 102.35 84.9629 102.106 85.2617 101.877 cv
85.5596 101.649 85.7529 101.326 85.7998 100.969 cv
85.9482 99.8521 84.9775 99.4985 84.1982 99.2124 cv
83.6611 99.0142 83.1982 98.8442 83.2461 98.4868 cv
83.417 98.1694 li
83.5479 98.0708 83.7373 98.0366 83.9814 98.0708 cv
84.623 98.1587 84.875 98.4302 84.9385 98.5122 cv
85.0088 98.6978 li
84.9912 98.7896 84.9795 98.8491 84.9795 98.8491 cv
85.0039 98.897 85.1201 98.9673 85.1201 98.9673 cv
cp
80.9727 101.054 mo
78.8867 101.054 li
78.8867 101.054 78.9307 99.939 78.9336 99.8462 cv
79.0205 99.8462 80.0479 99.8462 80.0479 99.8462 cv
80.2627 99.8462 80.292 99.8794 80.3057 99.9517 cv
80.4814 99.9907 li
80.5322 98.8716 li
80.3545 98.8228 li
80.29 98.9526 80.2637 98.9868 80.0479 98.9868 cv
78.8867 98.9868 li
78.9346 97.854 li
80.8467 97.9038 li
81.0596 97.9038 81.0869 97.9341 81.1025 98.0112 cv
81.2803 98.0503 li
81.3291 96.9282 li
81.1533 96.8794 li
81.0869 97.0103 81.0605 97.0425 80.8467 97.0425 cv
77.668 97.0425 li
77.6182 97.2202 li
77.9287 97.2964 77.9287 97.3462 77.9287 97.4556 cv
77.9287 101.502 li
77.9287 101.621 77.917 101.663 77.6787 101.692 cv
77.6357 101.867 li
80.9727 101.917 li
81.1895 101.917 81.2139 101.949 81.2314 102.038 cv
81.4072 102.079 li
81.458 100.942 li
81.2803 100.893 li
81.2139 101.023 81.1895 101.054 80.9727 101.054 cv
cp
75.583 99.1265 mo
75.4814 99.2642 75.29 99.3511 75.0146 99.3892 cv
75.0146 99.3892 73.9951 99.5337 73.9883 99.5356 cv
73.9932 99.5337 73.9951 99.5181 73.9951 99.4878 cv
73.9951 99.2778 73.8877 98.4995 73.8701 98.3696 cv
73.958 98.3579 74.8506 98.231 74.8506 98.231 cv
75.3467 98.1626 75.6123 98.3188 75.667 98.7085 cv
75.583 99.1265 li
cp
76.8076 101.369 mo
76.71 101.223 li
76.71 101.222 75.835 99.978 75.8213 99.9556 cv
75.8408 99.9468 75.8564 99.9341 75.876 99.9243 cv
76.4668 99.7339 76.7529 99.2114 76.6533 98.4956 cv
76.5361 97.6587 75.8369 97.2231 74.8311 97.3628 cv
72.5869 97.6821 li
72.5459 97.7368 72.5635 97.8647 72.5635 97.8647 cv
72.7666 97.9087 72.7939 97.9419 72.8105 98.0669 cv
73.3779 102.07 li
73.3916 102.201 73.3721 102.236 73.2451 102.278 cv
73.2139 102.331 73.2295 102.457 73.2295 102.457 cv
73.2861 102.499 74.5967 102.314 74.5967 102.314 cv
74.6445 102.307 li
74.6221 102.135 li
74.415 102.086 74.3867 102.051 74.374 101.932 cv
74.374 101.932 74.1494 100.352 74.1475 100.337 cv
74.1572 100.383 74.9189 100.274 74.9209 100.274 cv
74.9209 100.274 li
74.9209 100.317 75.8232 101.583 75.8232 101.583 cv
75.96 101.824 li
75.96 101.833 li
75.96 101.852 75.9463 101.887 75.835 101.913 cv
75.8154 101.942 75.8105 101.99 75.8105 102.029 cv
75.8105 102.065 75.8154 102.09 75.8154 102.09 cv
75.8701 102.133 77.1982 101.948 77.1982 101.948 cv
77.2402 101.892 77.2236 101.766 77.2236 101.766 cv
77.0479 101.721 76.9893 101.643 76.8076 101.369 cv
cp
71.8896 101.17 mo
71.835 101.169 71.7383 101.234 71.7383 101.234 cv
71.7256 101.305 71.8086 101.459 71.8086 101.459 cv
71.8096 101.461 71.7607 101.767 71.7607 101.767 cv
71.6416 101.994 71.3838 102.195 71.1045 102.282 cv
70.7822 102.377 70.458 102.348 70.1689 102.194 cv
69.8115 102.002 69.5352 101.631 69.3896 101.147 cv
69.208 100.554 69.2061 100.081 69.3877 99.7407 cv
69.5342 99.4644 69.7959 99.272 70.1904 99.1528 cv
70.6182 99.02 71.0879 99.1606 71.1748 99.4438 cv
71.1846 99.4751 li
71.2354 99.5698 li
71.3223 99.5767 li
71.376 99.5396 71.6328 98.3228 71.6328 98.3228 cv
71.6611 98.1831 li
71.4873 98.2505 li
71.3447 98.3696 li
71.3428 98.3716 71.1406 98.3335 71.1406 98.3335 cv
70.9033 98.2759 li
70.5771 98.2104 70.2559 98.229 69.9189 98.3325 cv
68.8076 98.6724 67.915 99.7642 68.4268 101.441 cv
68.8467 102.817 70.0166 103.51 71.2705 103.127 cv
72.0723 102.885 72.3525 102.464 72.5225 102.213 cv
72.6748 102.038 li
72.708 102.027 72.7529 102.042 72.8076 102.073 cv
72.8799 102.051 72.9219 101.95 72.9219 101.95 cv
72.9053 101.891 71.8896 101.17 71.8896 101.17 cv
cp
60.3945 105.196 mo
60.3945 105.196 59.5283 105.757 59.5205 105.763 cv
59.5215 105.761 59.5225 105.761 59.5225 105.759 cv
59.5225 105.686 58.999 104.868 58.9248 104.754 cv
59 104.705 59.7568 104.211 59.7568 104.211 cv
60.1768 103.944 60.4834 103.973 60.6963 104.303 cv
60.6982 104.303 60.7979 104.717 60.7979 104.717 cv
60.7627 104.884 60.6279 105.043 60.3945 105.196 cv
cp
62.8564 106.24 mo
62.7021 106.145 li
61.3643 105.375 li
61.3779 105.359 61.3848 105.342 61.3975 105.327 cv
61.8535 104.906 61.8955 104.305 61.5029 103.696 cv
61.042 102.985 60.2275 102.886 59.376 103.438 cv
57.4756 104.668 li
57.459 104.737 57.5244 104.842 57.5244 104.842 cv
57.7314 104.797 57.7705 104.817 57.8369 104.92 cv
60.0361 108.318 li
60.1064 108.428 60.1006 108.469 60.002 108.559 cv
59.9951 108.623 60.0654 108.73 60.0654 108.73 cv
60.1318 108.746 61.2412 108.028 61.2412 108.028 cv
61.2842 108 li
61.1865 107.851 li
60.9854 107.896 60.9482 107.877 60.8799 107.77 cv
60.8799 107.77 60.0088 106.433 60.002 106.419 cv
60.0313 106.454 60.6748 106.04 60.6768 106.038 cv
60.6768 106.067 62.0479 106.847 62.0479 106.847 cv
62.2754 107.008 li
62.2783 107.011 62.2822 107.019 62.2822 107.03 cv
62.2822 107.051 62.2686 107.086 62.1963 107.142 cv
62.1963 107.158 li
62.1963 107.222 62.2549 107.315 62.2549 107.315 cv
62.3232 107.329 63.4521 106.597 63.4521 106.597 cv
63.4658 106.528 63.3955 106.424 63.3955 106.424 cv
63.2197 106.458 63.1357 106.409 62.8564 106.24 cv
cp
58.7764 108.412 mo
58.7783 108.441 58.7803 108.467 58.7803 108.489 cv
58.7803 108.577 58.748 108.622 58.6045 108.713 cv
58.6045 108.713 56.8643 109.839 56.8564 109.844 cv
56.8564 109.844 56.8584 109.844 56.8584 109.84 cv
56.8584 109.768 56.3154 108.924 56.2412 108.809 cv
56.3164 108.76 57.1719 108.204 57.1719 108.204 cv
57.3525 108.088 57.3936 108.098 57.4502 108.153 cv
57.5107 108.158 57.6172 108.088 57.6172 108.088 cv
57.6318 108.019 57.0498 107.122 57.0498 107.122 cv
56.9795 107.108 56.876 107.178 56.876 107.178 cv
56.8799 107.209 56.8818 107.234 56.8818 107.256 cv
56.8818 107.347 56.8447 107.392 56.7061 107.481 cv
56.7061 107.481 55.7373 108.104 55.7314 108.108 cv
55.7354 108.107 55.7354 108.107 55.7354 108.104 cv
55.7354 108.026 55.1621 107.144 55.1592 107.139 cv
55.1865 107.178 56.7881 106.143 56.7881 106.143 cv
56.9697 106.024 57.0088 106.034 57.0654 106.088 cv
57.125 106.096 57.2354 106.026 57.2354 106.026 cv
57.249 105.958 56.667 105.06 56.667 105.06 cv
56.5977 105.043 56.4912 105.114 56.4912 105.114 cv
56.5068 105.26 56.5039 105.304 56.3252 105.419 cv
53.6572 107.142 li
53.6416 107.211 53.71 107.317 53.71 107.317 cv
54.0107 107.213 54.0381 107.256 54.1006 107.346 cv
56.2939 110.742 li
56.3584 110.841 56.3721 110.882 56.1875 111.034 cv
56.1787 111.099 56.2471 111.203 56.2471 111.203 cv
56.3154 111.218 59.0732 109.436 59.0732 109.436 cv
59.2549 109.319 59.292 109.332 59.3525 109.399 cv
59.416 109.408 59.5264 109.338 59.5264 109.338 cv
59.54 109.27 58.9482 108.356 58.9482 108.356 cv
58.8818 108.342 58.7764 108.412 58.7764 108.412 cv
cp
53.7666 112.149 mo
53.7666 112.149 52.2627 108.856 52.2559 108.839 cv
52.2783 108.877 53.2217 108.45 53.2217 108.45 cv
53.4053 108.366 53.4482 108.372 53.5264 108.493 cv
53.5869 108.51 53.7031 108.458 53.7031 108.458 cv
53.7275 108.393 53.2578 107.362 53.2578 107.362 cv
53.1924 107.337 53.0762 107.389 53.0762 107.389 cv
53.0703 107.543 53.0498 107.582 52.8643 107.667 cv
50.0605 108.942 li
49.8633 109.033 49.8252 109.014 49.7715 108.938 cv
49.7119 108.922 49.5977 108.975 49.5977 108.975 cv
49.5732 109.04 50.041 110.073 50.041 110.073 cv
50.1055 110.098 50.2236 110.044 50.2236 110.044 cv
50.2217 110.016 50.2197 109.991 50.2197 109.969 cv
50.2197 109.834 50.2607 109.795 50.416 109.725 cv
50.417 109.725 51.4014 109.276 51.4053 109.275 cv
51.4053 109.275 51.4053 109.275 51.4053 109.278 cv
51.4053 109.389 52.8486 112.566 52.8486 112.566 cv
52.8711 112.613 52.8828 112.648 52.8828 112.677 cv
52.8828 112.724 52.8545 112.753 52.8008 112.793 cv
52.7998 112.8 52.7979 112.81 52.7979 112.819 cv
52.7979 112.882 52.8369 112.971 52.8369 112.971 cv
52.9033 112.997 54.0898 112.455 54.0898 112.455 cv
54.1357 112.432 li
54.0596 112.272 li
53.8525 112.288 53.8174 112.262 53.7666 112.149 cv
cp
48.0947 111.364 mo
47.5186 111.359 47.0234 111.354 46.9482 111 cv
46.8818 110.677 47.0771 110.447 47.5029 110.356 cv
48.2188 110.205 48.6475 110.435 48.6836 110.603 cv
48.6836 110.604 48.7002 110.712 48.7002 110.712 cv
48.7451 110.795 48.8818 110.821 48.8818 110.821 cv
48.9385 110.79 49.3623 109.55 49.3623 109.55 cv
49.4199 109.381 li
49.1914 109.489 li
49.042 109.615 li
48.8105 109.583 li
48.542 109.53 li
48.2012 109.468 47.8223 109.481 47.417 109.566 cv
46.1436 109.839 45.8525 110.688 45.9893 111.333 cv
46.1963 112.309 47.1924 112.321 47.9932 112.329 cv
48.6055 112.336 49.1328 112.342 49.2148 112.725 cv
49.2148 112.728 49.1533 113.161 49.1533 113.161 cv
49.0283 113.354 48.7451 113.499 48.3105 113.592 cv
47.9326 113.67 47.374 113.654 47.126 113.491 cv
47.0107 113.344 li
46.9814 113.226 li
46.8467 113.199 li
46.7881 113.235 46.4873 114.448 46.4873 114.448 cv
46.4873 114.448 46.5186 114.454 46.5361 114.457 cv
46.5361 114.459 li
46.6348 114.497 li
46.6416 114.485 46.6465 114.486 46.6533 114.475 cv
46.6689 114.477 46.7002 114.482 46.7002 114.482 cv
46.7295 114.426 46.748 114.394 46.7705 114.391 cv
46.7715 114.389 47.0576 114.417 47.0576 114.417 cv
47.3369 114.469 li
47.3389 114.469 48.4414 114.444 48.4414 114.444 cv
49.8662 114.141 50.3486 113.215 50.1934 112.483 cv
49.959 111.378 48.9238 111.371 48.0947 111.364 cv
cp
43.8281 113.768 mo
43.6191 113.965 43.3447 114.059 43.0146 114.048 cv
42.2305 114.023 41.8174 113.43 41.8496 112.382 cv
41.8682 111.788 42.0293 111.335 42.3125 111.073 cv
42.5186 110.878 42.792 110.785 43.1201 110.797 cv
43.4502 110.808 43.7178 110.918 43.9131 111.127 cv
44.1768 111.41 44.3057 111.872 44.2861 112.461 cv
44.2686 113.052 44.1104 113.504 43.8281 113.768 cv
cp
43.1494 109.936 mo
42.542 109.917 42.0088 110.106 41.6035 110.485 cv
41.1406 110.919 40.8701 111.582 40.8457 112.349 cv
40.7959 113.836 41.6572 114.863 42.9863 114.908 cv
43.5928 114.927 44.126 114.739 44.5303 114.36 cv
44.9951 113.925 45.2646 113.263 45.29 112.496 cv
45.3154 111.727 45.0889 111.047 44.6533 110.583 cv
44.2754 110.18 43.7549 109.958 43.1494 109.936 cv
cp
38.5771 111.43 mo
38.5771 111.43 37.7354 111.306 37.7266 111.305 cv
37.7715 111.3 37.9238 110.289 37.9443 110.152 cv
38.0313 110.166 38.748 110.272 38.748 110.272 cv
39.1084 110.324 39.3242 110.416 39.4307 110.556 cv
39.5029 110.977 li
39.4395 111.399 39.1885 111.522 38.5771 111.43 cv
cp
39.0322 109.446 mo
36.8877 109.129 li
36.833 109.17 36.8145 109.293 36.8145 109.293 cv
37.0205 109.399 37.0313 109.446 37.0156 109.564 cv
36.4229 113.568 li
36.4053 113.685 36.3838 113.725 36.2061 113.72 cv
36.1553 113.764 36.1367 113.892 36.1367 113.892 cv
36.1777 113.949 37.543 114.149 37.543 114.149 cv
37.5908 114.158 li
37.6182 113.981 li
37.4521 113.898 37.4141 113.854 37.4141 113.778 cv
37.4141 113.758 37.415 113.738 37.4189 113.714 cv
37.4189 113.714 37.6533 112.133 37.6543 112.121 cv
37.6592 112.167 38.6123 112.307 38.6123 112.307 cv
39.8447 112.491 40.3936 111.816 40.499 111.124 cv
40.5986 110.43 40.2676 109.625 39.0322 109.446 cv
cp
54.5635 104.577 mo
60.6025 100.688 li
67.918 96.0366 75.7861 94.1968 83.9873 95.2222 cv
88.7188 95.8335 93.2305 97.4399 97.7773 100.132 cv
101.663 102.564 li
105.64 105.153 li
109.454 107.745 114.095 108.78 118.708 108.066 cv
120.57 107.657 122.649 107.17 124.05 105.481 cv
124.132 105.901 125.646 113.731 125.646 113.731 cv
125.423 114.817 124.232 115.349 123.276 115.777 cv
123.034 115.885 li
116.105 118.186 107.697 116.809 101.101 112.286 cv
101.1 112.284 95.1084 108.35 95.1084 108.35 cv
88.8779 104.331 81.4268 102.886 74.1221 104.282 cv
70.54 104.966 67.0342 106.472 63.085 109.021 cv
57.5576 112.608 li
52.1514 116.065 45.8125 117.407 39.71 116.386 cv
37.8408 116.025 35.9053 115.654 34.4258 114.288 cv
34.124 113.961 33.9697 113.668 33.9316 113.344 cv
33.9365 113.344 35.3721 106.186 35.5771 105.163 cv
37.5889 107.379 40.4951 107.864 43.3613 108.019 cv
47.0713 108.201 50.6299 107.106 54.5635 104.577 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Bedovian) ()%%Title: (UOM-Rev_H_PMS.eps)%%CreationDate: 7/18/08 4:15 PM%AI9_DataStream%Gb!Q;k?9Xadce4BmK!Cs.QBFr,+DC`kCA)?OsI-:fDb;Gql/kPbTt&PpAW@DT&m"14WUQ'.p#LtQKsPlok*ACfDSc3Wj'mHTQ3nl%'r+?,O<_$_61^g*E&:2W$nl*`2C4/12A]8S,a2;-.`3_)?D1RB[2YZFV;JC4#(q<4ea3mqO]_<RHn@3[NDd7CXq%4IMEr*Z8fCqF%Wh58mPl+:mLRhUa<,Y`>eQS_sfS7EKHm$1eh_,qd+\Z[5Nj=roo:s.+gX\iQ`[f`kX0^8aPZ*9L4ot'A-hkZI2XkaO8Vp'(JU]Z1%is"a0n.#5$r:-NOfc1FteR>f=Gtu^X?T$QN<d!%;ki,Q%"kXMK(B1T<TsY&/OEO3]"mjEk'U9PL_X]I!?m;oH=0qF@3dO]+2*8_D%i/?Trd]?<IB)BKhk.^qFM?$kTMA1@kC,Pk>S`Z"X.=8#Af1rpM7LNg@]N],N&WmLtO4F5`s(I%cCB(Up"B+Hl7^uD7L!^s4NnWU[%5E3B;^fdkg\a&%5fd8^c9^t6+94ASX'1n-,-<Ni9UT,e63Jh-AA>6B.NQmXV=kZ#^L0a%R+Al0In'CjTcXnO64!uO0-fX!^Os5gK%4SJZs\k*p4P2ZWbR'HY5dN)ERGUWd\.fa)gLQ.>&,*mT#T:!;H9^:[OAl7pEoA)=m%FAW:#DCG).VX#ikqh@DncW8@p#q:Shliq`%BFPmeI7?uR'BQXM)Sr3IIWs:'m!Nn"nSGo9hM>44_lmaVe`bKfM5UWRIn&ZA!%g/0C/A$4g?^,5qn),<$%5:hhS1#;+hXlWbhk$C%c!_j,UWXRMW?9CX7t\#/<O^^<k%B0S9N)$,.(90E(o'E(kaZcDVT23T)E:6=A+O%d$FKLJ!?V5!pR\Rs>0YBB[J/4Q\IIKfg_bl3%Rp[p0j8F`.55A.W2[!:_dsgboRY/%?N>>']g)i4gXiBHeK41MqgfpKB!V4Th2?GIRrbAgO4j,)[8@;BWhH'M:^TMRG5+8$'S.K_4%9f.%J4d>0XbHGZa6)HaA.Zp$`+iq/nm8Ws[!]R\Yp&jppr63HL.*UmSHj.N'AUV[r5>RgE"dM8;@6"1_"kpiUEMr\XL\q`Y8)fS[%lKY<*Hqm'g:TNkPF<e):f`ZTVd$l`:Z\U74Ic.\nLb9@%,Go"aqZm*[JmZ4moQO8jSjXZmR:mV6G8CjU.!P@*-H4&,,e=<"_S9W5%YTe.7JSV>d>9J20A.k1%LmR7T;]8'DoT;`tiiCl8pg4W2`WIkoElQ>q#u#sE1<dRll`l/-#1MolbKrcOZsbon7fu+K%\Q>Tg0Ad>%W_a^:,I,iprGNeZr2Wsf'NY,2d(f$Eb,:mf\N\f+`rFS,Fl76P3-`464rQ=E;K#slCqj?UJ()@VqR<i3I5P7%I\T9bE7)ot^l7dt%Igl?ChLSJ_/"ONB?e,-`$P(]5oFAHdXm'3Cejs_;n:=*A%NJ$n9Uj/>p=K=Blu]h07L6r>]!\/"4UbrpQ5fkWFhK_j;94Jo)\<6&%^o(]T_<\G9T%!DZL^DWK';="7XM2.^@0f):=9$/C]gb]Y5BYKU2fZ+p?_J9k9uE1cT;0<rTSg;jauhXm@EJ&#T*q%0J'h6pIlO9W%O2(^QV=B'1(^sTmgAc>&bR/_i'GNaBH-rS!]\!#1BRYDa3F,+ts"#*)GWs)>I,MU8DUsSM@@!`Ir6MN<GFAafl<g6FidZ8/VWU0O%3WFb8c9M?njT%6]Fh9i\Gjc,.j!coNL=GH-Al[m[r"k0=_Y5[pUOK=269>-dq%$Bg5<X^D@p#jc3]-.be/@GS<7h$Y@AqAtR(W?A%d\o)pmALnqH+%gY4_36EiSG]>Lo;*JB_8'bIUg_A7SRr^AJf89kZ<Ui(bPX8_6D<_rmdqV]D^r?[8lVDS7fq59!-Y17;H2Y3WBi]%2a1Y^"91<+31^%UNG/'i7_a_=)smgKj+Zo7fP5RJd:)'B_f.14_g_?XiR0:seaXPp![=\_7e@^2.O6o=-7pu6cc[B0d?DT..saLc%del%D\QO*k\,2d-f^LSekU1MJ@T/l'Fac4ep7QtdpRJKeC38+3Fp>W0:h8r8kdO]U%\!FKp.#`a?F7)Ap4r+mC;17*dt58D@@a0t%9gALaS`iL;i"YXgS>FuUVNZ,VfA.O"P;QOL[Z.6L<-AFE'.qe)_s2TTeK"Qum$`A'`_K:>gA)^g59&!B\#4/8;dT!W^6?6F^$_PH%G'3<7!**5tN>uMX8*dj#9#HAfJL0su%Zii4Ak0bA5ou"?E`8aHC(I7lctnbH<Kgrq:NX.N`@dN1)m+bX&5Z9meuC<4)?]Qc9o'[(%@D#)0Y[D<^I=-`l(QPL[!o2>;rHb5&5,%3&Bm46;CgE*3X*W;kUG]LYC:)GI\P'<_+UkA4+<cnem$*D0rr#rtL"JrN4S$>$`Wn/u%Hr)`CQSt[%\p6ZRCsL%3XmChOhX=P39jBDBKIB'*YQu1PTeD[n$Y$IQ?Qpl5q,/&d;QO,X`;siBNJ-i1B,[tf[.7r^Y%Y/gaJ-p,%`>3kP(gR.fC5Y.;38?>J^eHe;XTn%+L-MtECV.EeQ)`<9#k9hL:A)KW>&._b%mE^7oen3:X\S(/o]e_j;J2]NO>Y6CCVsJ^T5%h!%:T=TpEk%FQY/YcVL%B692m$8;;uPHKXkdB]j%X=Ap@%Fia.P-qCA-b&2MTBCmQ7(^d/<60D$ko26aDjCRarP4Ykuga2+"[N%c3\m%G.$MjPd]h;X#=IiCTW&cf'NHY*=dDOU!H]CV87iB>Lf/h'04aRFhaO5p@7>NTF)We!2')PpA\tGT?^Jjj88Q#qeZ;.5k,'Cj@e^4%*Mmikm645FV8MHBfUij*\l'h4Kp.7-d,Mt4S7iE=\Cp]A"uPXM!lP+6M,NhLm14RmSMUHP2<mHoQLc&iZ#PFa['^n5&?W(T=Rp:b%Y4d>Lp0!/aCs4q.>Ka*8[!"-qYs%pH$rch"YQ*#;p`6Hm+GKY#SCW8k((X<YS^9F_5Z<U5)f,8Q?E3HVr'\--[JUHN-D6pL,ttAa%:"Yj#W6OJ\A&$kBfZu&5L2kX8[g34f=9Jh'O0jBU9b_?D7Wgr;-o9'\N;8k_XfO/-GZO=\(9jVaUj_<gNGEc1WJ9eRNO)5n6qg6<%^4oP&2C2FRO6VGVHjGr99_lt:C\*n3=5i"N!;8uOmjkWu?iD6\;!YN(s*,2,D,]a/r%JFoL1"QWc3-qW42;8mJ2W)4"nD&qcE#`t%9\G8>93g3[7dp2RG]u'oCA_WtZeS`s2c2I+j[G`[-ci*ur76jd%9/gWJ"%43m'!EbfmVnCq0c9/NIGBq__$2!=.#LEG#K`<8ND3-%Y)Edr&mp[OmF?T;2eau8=ZU7n+,.#X*:N]q>fnimSXLW&+H<Cl:3RQ-b0!bo%"A\Si`Ws+eFWr=lAB"4:!'Fj;.DM(p_q3>G?8iB%_!:ORPc1S_8,`''(i2,*C%aeJmeh=u%6!Oin`p](3,mci-(:7P@D`QI8)8A_o!BXu*=&`lUb*R"$p]p/@;9t7>(\!BFO]hhV-5DE%LS8lb\>G]I&[&Aj5igh.?gS#)hq?fOS4Q;T]Z9k<^!R]7^.D@G<ALZC5PgAs&\<Pd2hG?9>4e"<eu$\XXo4;POTGEhL*66DM-=s6%[H8iO/SNp:X6,9$s/C0(fV8'#+Rb/p/Xj@"Zh29b)kM:W47W02,\nQ0/u[kW`64/QY8ff3m"E=#3f-oRJmJ^W]^-o^b>(I<lpSe8%:.2ar#P"C9'^=6OQX9-9VdFTkqW5TC05%1iJ#_Q\o]rAqg0.6<^YB\)#4Y1.:;7e7C:dX'46T`O+F#M$rGn+K0/jLAEYHhR2\H"/%*qXg:BXPF$#Eg`!!VpaLOY7fJI!IgLq@b/n+^ZCkjWrp1433a_ao87%*Sctl+@^fXlK,o^00]d9ne4kR58!SZ'2^FO6+o;DZ48!J%IKJNj*Q77sj+[!@/(f^1T-ORJnbOZt[,iRO.l`C;+7I("MM!T3kmCJ>%DoN<F9<n.-XA:;$M?_Fl4k;gMa^pF?8)Z;?2ta+PemP+%/3!o;[kJ=S5>`uSMV;P;:2A4XNjDf!@2H:[$Ooo1=_&3)<X;lrfus<PTct8Fh`@(s`R]70jDnjo\6CL(+4WPIM/t;=q9?UkKtXh%%?29e!l<B6iX@*!B3ZN6+8oNh=C2%,TO`A1fpMShH)6Ph2ZPQ]>X%^,!X@a"$q]QU,:;3")Ub`j+CQQ4L?,s:BpWnEacL,U4H[K%&%lM#M'Sc.-apNu>qj?/pfkciB;HgH_i=K7F>L&Ad91[/Y&GGc5j#5n&fqVKhc-PM?T6;1sBM<qlf2gVAlR:CBDWuPs5VFoYLi?f0f%p7ECn_F*SeWjIuGWO^8d\!Pb8_#O_^4L_up<_/3*f3.q6oj55uZ'Eb[q-?W4YEiHCI.S%fp?H<N11?:^Kc]+tL="8oW/s(;g@"]h%6BgB(`Eq\=ol?HYB:2B"PSgQ&M]:!?RlP28>L`LplXp"lXhbarGN4cnPM^'f=^/FpHm97C.&Gl3pX9"COj4n]lf(5pE@,LoVm"Zq%/u5]M1GdZYnR[tihq_XA&I.%K"D2_MUc&J#^7bCAID_\6"B/[<0A$MXl9Cn'SWc?j`pCU[]CLlI5(#r4%f3JY>4rq8C*)iag]ibV%qYff8G^mNKqJL'h-l)GI=QInGDM&F"2boMWK8O%+lKWe[$lXt^X]7nSX`&9QkH9FiQ<o6@lX$XY2CMMH*G=.3NPo4,Bkb-,:[GS9%=L`ih8fsstmXsp\Cp1'5Y?.lZmN6CLA5GDcis=cgG-BcDT^5kU]kH<Rg]#Z8[u>rWNULTZSptR]#oGM0@1EX>:f8c!3Gkm`eQ'Y_%U=aq^Gn'W(J,\_<Gmp.@8oeX6NPlgSC8A62G2Y=B_(m+iH?(*LHf97So[UHj$jmu/%XXdCm/AWHbAMs8Dme$**eT>WCO6S[1\X1h%qg53918dBIDJNN/IEK_LD=5Vb:o<m_>k/_2>)N9#:@aE2@2+.B.^Qn[G2kdM5*K8h`8u>IoF@3Gp9[-SPAphRpJ-F5V[,GdD"6bf%A6\B;2H,p*/.T6S2X!H%.pZ,<*"9t8SLZ9V5#`PTP#8Tob!5RIMq=U*k%*j^FW^8F2kBd4T3f#;HF^H+_l7`bX0d!(\E"Ng5p)<7%j_J>QIF.#,`p)MN,&Rl/M-5SH=m^T_%XRqnrq>b;kWX'/gtQuo[*6Q7Z0P;"HcL922nbtTcTuJUpD8TkK:Xg,HcH;2:frWefTY.N%lc]+qZg4:1B0V0CK7;^9ood@g:V\QMk<UW_^=Ld%?MdDrGh55g&!J$[62Rq1o`]D5P[`4MHHd.nm3C4KQ.+gR6KU:2KL,Euo?`G&%j]?<GG<XtF1m(o"Tj1kJ_fDfinH8YlbKS^E3fAXY3X1:U^OLC'05W`T*HYA+ZpBIol``&9[4XRA*trbCgc^!tB8%<'_=d3t%[n9u%8V]lcV;&(]:r(`7_4j>Qh.)M0%T^*e'2GO&iKr$hA,DqBrI4FQK7i<V/+$sg?(H:_5\!Pd/q0]U8[FaI:H9!!fPS9,;46.:^.S)J%*F,e\FOP,'M*r*ima'S[NRuolbe[M"jS9KlDdgWF.I=jmH9S3G9;_78O<)XnKmhM74nqmE:HMpAGFhUlb$k.gHoe_5$Fb3Kk4uIV%<IJ$CI%'.t*boRg2'&R,hV$pOh_)[9I;F0m4^5#$+*]nJ%TX(JY6R,.5$!/5a4o539jKp\?l.;;Vsd-B*RCWBL%V(Pq/d$T\$>\P%"jaYrT*jg'c_k]d(O=^$WJ7\H@AS2+q=`,DQTOqhgAWPg^3DdE<1Rra#0+ZT+*#0cS`eI*kP_^QolObRjm[!/)e1D;m)aUloBdc?%Dis^=RU+j;'5:7$M$H^oB2)`U3kj]8e*C)uK0AU95.0d&HM+_]QF/mk2D1)bS5WoMT3TQlDE7's4QerDY$Q1O7WrEG4]k1r\rCLV%nm3p8@J1/u1,g<,QeAF?fI^N/frL=J:os@4A*^\ni7*F2?!6PZX:d^`AsJ'K_TWeHNjmYpNP`[%_T'jDjhf#QrG!MTQl+e#'d1>b%r'KuL<?*q)mm"/Ar1sJ$cEDkCgAR/"Ab?-WnMP2M[k")9dd-D%Rb?u2MhRr!,uJ%'8itcZ]E"?PnTacZQEp'KM^K8UYh"kPD3S&j%V=8J)i&=Grc70hKNG#UK/";L>\>>bbpVZ!;1/lnCm^sp_&hb>?G1UcDB/&gAp2]2+)7hfBj]6RT]7n7.0h*b!pZ7;TII"8^+XK4I%#I[`jl(M+C$o'cHc_N@TI.<XH>&*udX(-J9PIl>7S/ghlk4J?``%]Zphs]GAPKRUN^XidY%83(@_C3WYCLs]TS["/>F!n2u7I0Ag%FbOkNFaY1XR?2Y'd2B3Fgq"\Wb_"Ti:n9`k">3T^Igq)d@Pe74ed-u7ro!B].Cc^B&=jDM/I]YE4fGWZ6G'(;.K=C`k^Qe".II.=%,j+dZehlE<cKk1-,Sp/aU-`2i(4H9SZ[A*2QXWss+'&6a8=eUKB"L(96TeWjf@T;ell!EZ$aA$Q^AI80XHgJ*g8R?pb[U:O[EpQA%Q&A@2><T+eY4%ZGI3L)8@@Z0*2Q-;4V^a-7q$alTc#+@_*hfWlUq(T'Q%Zd"1JbZ([Bb+aJ+ZdC12QCCZ]Mc.hD"o1l*pZM*L+Zf%GIJBlIqH-5HV9T#84Q'*\5@G"rTaf(UFS(]i,uE(8[7pBD^B7_D3bo9<dN%+Yfl]kZ%Ccn=/-<_IU%sLBXSc%g7Ym4#SChU[&<Vk%dDes2^R)Y[bgXr-#OB"6`L-@/j+JsnTNPY\LT\A>I,D2,ON>.Ooj-f)Gbn&DY9G^1h(mSS=1T2$*f!oJrm3!9U7.9%lq0=PeV3g8%KJpC5q$EH/T$#_F@Va5<EY3A)9AJeRF,6kX1hLp69?;tn]Co>l46L3Rgf;ep]XVfqQX.d_Qg!\r1CpFAXi**?nVX;%7q+#=INZhH%ouA*CNo'LW3b,mGf4D#+Ws=[,)'4r4V[&E4FWLq:a[KY^VT7d>e>!n#f<b>LFV\#-pL[jQVn<\V@W,2IpnQGVp[:'=RBUsW<p7YF%Vok>M+^F++(/-9]3\[hl>Y8pr+53D3Nc^UT;gc/Zn6BKLAmHbZ;8"L<Jdso@a"M?OQi/:%Il&XS'k38<qdLqGU<+@5_j>R3I/Cr7%RLjUI?X_cpP%MWp>5>Z,;i67!<,*1X+I\HW.53dNkCP)$0dY=$D/'.$(g_,qP\$AilJcd?FoQXZhZnVNkNptJ`AS-JHt6N`B'b[u%Nsga9*RHb&\ZWSfITF;3-taBrAC(t;H-m'=1n$+l5cHBmNIi"_lY%#LXcj4m<5K"94U@uiigrZNj"P*JIqY#jd1Sqh=eFOWl`\oC%2p>e9`2i48g_8!":RCqlpILh`<;L@Pl'8/eMNn%6N,_<?Pp]\mfgh!d*(&E>)i**a'K7R-1ras>\?kQEAN3J6C`ed^&>W8":!To&%rMUn3YpH3mc+oUEMrVEflR]hHE3;#_o7Zd*!nM+YhXZn1i[S=/?0'1>)e#Y-IRFj0^'[J7Ym_Rp1F=8a\U*mbMIWo@'53KlbUaA_%fWc5KX7)fZqehFYXRt<_cl!D9NQ_9gpr^*/1D+;68iCrKL-R\C2Ve9(P%P"0Gt*"-=p'W)h:8(ebY9CEQn#5=XoSEJ3H[eu]>M#m%TX!;.cXL">$m`p?K5p/@A\\#`=+-4KfOX]6#I<b6=(Xo;biUdZ=\6H,2mmMY3Rr(m^slGd7F,HZM)e9Z07:C1_g\CQZi^22;+`a&%Hnme7'1L]d#!3i_.(+c92)T7+9+sMYk8YOtjQ2[jb&^u\XL@.lq.1_g4V-Cjq(MQ:=#`DCc0:?&Z8pftrgW7h/S"(*X/nFR`a._L%Y+>m5Mil@6bKV8CfdflRQ95Z]p%;%tjUW__QP%!/p[hK53jYET23BQLL]$#Re]HmalFs1nQ1j9f9@&k=L1-WWOc\%]gpuP2[j9E1%eh/;bS`\^b`9'A(KqZ8&CRcc5:X@!E5PXkmDXknbc`%:?@NjN2mOM\+(O[l4Ma&F!o5h4EO2b>k1sR\t7cp&d.Auf\?Xt#:<r9ts%g`i7QaM$\%5XuJJ[sYOjfZ%9rgL_qu<r3/9/D.WN_NTXOi]X2MiQ5LT25PB;lKL/Q-&0@eP.N6e0s>uiOmIPdbY4-9j<hEYF-BFm%dP"MBR&M1;!jC6Gn!G[j&,'Y6jC:$j%tjAE>CiZDhntP17BVAMUc#kskL14&nebM.H$5Y5]A?,4jHa_@'uEMSf!d@$-Lei5C.b(b%+1LI3S5LWp+GZqQ@K5RNCc!;K;BZ0o;]qe=m]+)E#C<.4l/8EC*f1IL*&AmB]r^rjoGDeP=;-Nn]8$O][CL)ec:bBXP@c':]=.Z3%n%24/[Fm>kiXogHXE="eOsO2G^=GuN'0hj,ED!aof?S(&'\iig8W51CA*]&+grmY4Ht#[ONP=S"11Yg/it"o2eRT<@J['20faD:r%d4#kHq;p3a1]be0m'ndD0qV?GV^1C<K[nX_&T7\_g&:aS(H.FimE\&@pj%E32eVC&%FL:TU:TfKlC74Oa!-W&gQN.!E^('ObKP['%Dn6DkE7^>kPJH+s5A6Cim!]caJ-QhX#ep=2*V/<h476IC7_Ui;EEj`F+\dL!l`b,!,g9T+`%36Fi0mr.gUKH8:m`#$c3*8%>>>lX%-U!Kp)41=H1#F&.\E1Np#iGC3NpsCn7!X#rkfb1?,]#(/k-=IN]t&G(OG]R2k/kj^gIgoNKCuK'm-;;$p'=0?kgIPBRDlR!FT/nA%3S>m8`a"P.4h`"9$\Nmd-9B$#[TMB<I4!Uqlfqh20fFf[JKn]UmZ_j'Y(6K1@^#h7.#4"T+YjBjQ(4%DRJ5%G#oS)t8sS-B#0R-u%IU)3'#)cufJ?eBK@sK+cjltAR=G!lQr/V2sQjdE-KZWPt]fZV%@/?o.[i17N$!DG(`=_nhR4>bW7UDBs)V^Bqp6\W=qS\Q:q]dp5%I#-8A%8WSuFESZI2']@4%e4>lrs3OlFk:iWo/nY7]^fI87piFbfqVc$,RaIV59KEu&UQPk"Csho-Ji0(I_qW=L^u;N,;?3XG>mnK%/3Zam8P\>Lp7.He61FH,9Ql/`8)F;3\5VX<L@V=>pDM-0]aR6m@q![0q]NfpEm'1.6k&]Ih&5cGQ1$=c%o])DTO^<,fRQVn1ZX^Z%'-^cIK>?u&EX7kejQFa-L@cl)c7C@R2q](#rerWirMcT*aK.Peb#cRVc!!3`W?o/ZYr+QsM8=A-P4Q[DbPbFR?i-spl79D*X/%@\%?:n;2Q""?H\=,'VmE,+`$EM$2EB==XVNfE'CAE6po6;;,EWE#COHNZMV1l>#j>sED1[_GM=A(e2bi!?7:s1e`n7ns1Y5+s%`pIg3%GCSR+f9.d"`j,7fSAk@Xn91VJT[MN\KuYli]ukW3i`8$3C!9I"\\;'*4#(Em]Bjbo[_:#sY3WbGP;@6*]uuH%S"[ubYB&ftPCn9<%b)TtEc')o3o\Mpb7.2L'X!KAMh?t^MLY?\&Z"6SCdca7Ee?$BkDa[%T/1^DY$?XJKjn>I!BDp3sRgSKjp*t-qeoU0"?<^^8#'VCG%iC-Bm!K126[CHhc_s<XIDr-+-gL$75bUX=DgR,^,d!p@j(S\6iV^:Rg&7`lInP,Cr1=+&m(Kt(`G2#J$o!8'pKG$Qps%mW0oHJ_N%A^p.$GR\_rD%lkr.GgUi3hH,#GO*`e(7j2dB;CE6N<85>RD\?"[482@0n10Zek5JM]/p)CZNkXOW4oRBm?(UtQhSuDnGY/l4q'<b%;cdq[IQ7)l/QPo`!OW4dKatF('9@Lu]h9A5A4LO-FPV>9:2RWTY!0e;Za$\*e-t7"g9<FEQ'G51lIle!?,7gE,Krbc]aBI4eJoa[%[U3_RB;hPj)6PB5b_tbPTfN4^Kdu/f9F`W^TBV?gIaai<*6"\/Gg)&tH&m_0^NT.g\9N<emqT'k<C^7=k-h<C4R9k>BAIKbYo1/B%&;c,(=jpF_RsF&FqVc^$%pSX5VbaN*WZJV2_>="*B<!$(m!VD&n@YfWI5<)0<^#fAD*+rd@J'0'"@2*S4m]EI[JJj-<t>OKFbX?b%-3(nS,9&,6oR5o?Alr8j#jdJ)oI[W0cesXdZZ*cu_l+8"Ke<)nmEm6Dr*:[QltGjKkHVY0];MhUX7%:Qr2LT#W4'.V4V$9pVqhS>%q=H#6O>Nc#p[m;ElhDH7Nb;$*3c"L+o:9/(/uC<QFVOEZN6SX?@ifkR.Nu6&W9K!a`:9AQ=E_9V#Ca*Ze]U])%5p'!H'\<[,Dd(u%994G<B;=OWZ)js^&ST9.gCJFTbp3QO@Y*"_@P2X//pDN3FgKOg9`4K)6ks)hD>a"@D8TU6+na.92h&7qd<,U6eJo_?LC(.m_\N_D%DU`[0%@anIfTN;.o2TuDp0]Y6egmX7X)uCF!(-Eim:H2F/3d@_]:TWl_mWm1Lm>ZG:mV[qcGhFk10$Pf\H?Fs@:Dgeb(UjFfp4R6%j=+4`eJiF"($cAXo`:S]*g+CSG]D^^8\D*:(W4b8L[FGXJ#.+OQ/\d%(WWPSVFFcuk]X.d&*N[Cn@oJ]@K:^crCfYsNhbTZT+^l\%p_kYfS,mJEH/eqRf*?-n\O<S?B$U(cXr2FlS=oe#HI41F6Y'n"@Uj(_O2ijR)Rk=9*oS>aKL8d[#$3CmjLf7E-`hZc1(W7[9fR/D%nt2dKO?FMMG&\cc6\aW`gR4T^T:\eleeEMC01UTMO9q(CE*eQ.-(jJVnCdQ^$X_c2FmhB"&=a%Eo!n*nY:n/"MK;I=LHM^\<La_8%mJ7gSoQbgh]9pUGgH5*nY+`P[a0QaeqgB:Fo7b:"G!2^54g*8c-BK[14K\^m$-2WtY1Cbl&B0>:QPT:Nb)Mh_Y2qF(G)2$bE7Xj@%-&qH^LH6A?[Ai$)TMt'r=J2)m=*^o<M!2QtksAKg4HGq[Up93#Qs./\9_;!(K5:5RL938'oH'$Ko2Cj=3obKcN$gOG_^u2#HqpkN%^4aVi`+%a]m5Ucg)##??3f])9(<fd7RkH,!h\(j,Vn4#$C\PR_CLQ[.YkI9XK8o$tHOS"E4aV9<1fu6e%RG1^k(;l6cYIqV%a38:%i;(l]N0OUZbPc^Q#)A6/bu>VJ=D9&S7nSDHZ')tj"p`kIF"%QA'F"fucou#TYTp*,Vt(@_#!;Z+<GD%X%<c,)&m!btR75`4Ap<1)%LU`Eh[&u4RHl,tbYHDBI;^J[%eQLEZAHiaG9q@&@JWN<.`R#m\]YV0SW&n!5R:W6.7E_5O2tM,Cd/)p%Oi.R0*im'Whr"$a,a)?S%\V]80i^H+M:\_6?M6bfdilDrIo"M_RMYkG5Xmb,\P_iH+&AZcOfL?3e2s-;g7`]$KL&Ig)'+8F8,(`CoZAYWsj"BO\A52QUL#C^9%o8_-JKGD<5!UTM3S!T80#_)/:mV]7Ri>`ed(F4U7-"S.^H1i0fmT_O)VsR@IcXrepj]dJJcX-Jlm'B7H49:BY:O=Ca>>-"P*'37?%pqeVM>fuGl#(Bl5mu?hs&S1WgF#fdSqVP40efXQ6"_NO![A9.M*<gA3<\R*7GIX[2$#=eK?!0DDWaN<)i#+'2?#jdoWN6V;'caB^%Ib(N,\!l7N<7Y9SJnM3epTFoF%l0P1_+)XXMQ5T`-@6k@*BC-Oh.hNdZ$BCS]@@%rI-l-tWaN<)i"08mSZjTrD/tYoe2^J3]@@&5%N/2a["hPM!7cn"llrFcn^@s\?WaN<)?ql9E@o]`\`o^G>lrFc^L9[/IK&(0nK.o3/<No\%E$R@1WaN<)@+,WBYGu!>RUD41F05jn%bL^sI`+Q%VG0AL+6m%ot'>kk+WA@KWO*(VlOY]dIp8VN(H`lL8'g,XC@bRhi\#s[Wk$&Q?VNtlgWaIcml!B)><<^!/:B.W\r2PA)%C4a?66;CPr*1.$mQ`=FP[+T1_!Gu8F:`SR+?C]>>>7<W>ip,OFCQ%BFL"m6j@UtA]ilP[ZDB=sT^.mr\1e$$"QI#2?i\5RBci.e@%:cB?>r,#odP[#c`Bl7[V]XBf8#O>Q!4F(eK`>4s-gVd%GG7dYW4F(d`khMa@DAhos@T-<^Y:cEZ[b1EshQYPLPLgRGId:fuJ+D<&%ie<l+]%AXI_G#ukA]!`la_Qf?^+L4(>s*CLEN!g-\pZ'XIj5qsZc`6Ne]!a((7U`c1OTNf5aTs$Uku+0-XX#h/BOg$G]IDnI8>6b%lJfp$Md=(J3XGjTeJ<qD7LrQ@jGlJg)etQ$ilPtoC&DPJl=/)bgniYBDdfqd6*JVU#1XL<BYn<1`KSmh]4Z8@qCM.>[DarQ]nWU?%Nqc'Lh5cG]T8i.Q%&^,forBZ&4XB!eMeB-L%VbH.?<aLX7jk8g[aF+#=9RC?^em92_W%,c7bQ&<k?VmcD2kho9k(apFu.IG29L":%Aplq(Z9<Og7)dYT29Ocuiq'6KG0<mQ^=Y@)D'ub:2np8BEg**Xf<aX?UJ0ska/YA:6CWlK&pRcU&)%pFX;gcF5-(WOB<AL#<$W6r%[6%s%ZV+<P+/j<g&'Tcs8$2ANSu\i+S^$hq28&OaFe1%/0QaG'3@-=r3KI?VZdLjErQA0JcK;dHgOT;pX`JGMl9&gP-`KS-^=Lsp%F*R,\cK=2"q&Wm>Xn+q<]Q6'81rf9&C7X2YQLh;&%esAYS8+V>H%@mQa(h/>eU?f-`H/,'2C%OoItou$LMrKW5P`XT3r;FKk#L_`%<]\PHj7B6m[X1RE<3<Js-.eZ&S`dmBK5-r)cVU10f%Dn<2%K4JC7S'(A&JpKo<3<1gAUiu3h)D[iMnl8X*$<4D5e>@H`cm%md:@`%FZ*Oj>($@2e2j)Mi`NAV*,D,$i\0o,Fe6ZHR_%'qgogPg[EeBB8oq%Up*tt-ohDS<CRq$lr-tTp3G`5:[T[<bYOIHdJ#_'[6l"l)%C7WV77fHetZeK\Kk?mO;O"V;FU?_r0\Tg<1A%g:(`>RaDS#Y&mf:t=7>%b1iGtq]IE348Sl7TK$CRn0#lu>86>\]hSQ'+3Qr_T`'%O&'JM[E^+A]@p_8Wc^3MSO;6r3E<2f8J\"<T6%2Y%Oj*F^\'^9Xg9lTn^#`HRr$>pho.]nS]sc>hqap0f%KD.])2<@eN-o_I=JEN%fe"O7s&s%kH5NILcVj(F-7WaoV*@lDlr#51#ATgS32:3VcbJ&am*FWfS8575=m6o:n'=ntm![414DUK^h.lk'o(E75;X<\.^AXI'%B.lDn^9u6uJ!NcnWG8!E3K2_eO!?B]ep3=9bu30[?e$-Qc)7_t^T&0tb<5'Y%=3&c>\$TPc2L_fOk>'HRXHRX#&BW"?*f#\Zi(9B%e(6JS=#G>R;g?0jB"rWM2hgEnfBckpCp/,V^96/(WnHPcbS/Ma#@VF4Fj9ohR:#f^Xfg@W20uIClugSP<R$ZYI-R1!X.#0jk#'as%?e]5FPbtX"G0rV`Y-HTHlC-=Q'3c]&WbW*2")gQ]'Qq\"<R#Tci:a9f*m[WRY-*'+2j_P?V_i[)ZiB*B7r]#]c2L_f2!\cI]&rZ'%.NlU[2>chke])7*CUTuiW;\)10fE?Zi"A/O^O'.TYb6B"D[hAiGOaoOCujF0?['7>Q?k_fAliuDR9d%C9D804\I("/3G!@KkEaeT%7IG6=lmg:4Z\qLk5+,]q^tb$.DT-rO@Z8Vt2^IaL?FD=;8$iD/()HkI>+/Z-=1)S=>!?9&d+8M%(LI8"Z->D-&-5C*kr=S2j0eQ]%I)I)DDcjeFXso.RSU3Rnc`7V*h^-0N(/=$`)>Li=h($*dMBbF'%&#,(rmImW)E5Xe9_QA<R8taG2!3WIE::lG1LlOjlX!T[0-!`l%&M=mi\5dU'h$>l3D<=t!^0_Ih(qnJ3kh6X1_(+M"7>MV)i><kBcrXd+WC$;RAsn[Ba5[O+#c&B??PRSu%5nKC7\16cE'.'E-3O\9%RZd[OEFH1S-9L#]ojY33Y#tm+>'pSSGDV$W8=dh0n_0>g?Dr1j2suC=+)el(Gi2bl'_!8G+*Dh<(P^2E=/9"M>ONA0B!/Edf'=U$%[9'cEmtD,_Hr52F>M@Yd`I9h7YbKNl2Il[*pP'7JI_sm;i2EjO.;9hr*=MGOH/G5Vg`6OR1dXslo[V>Y[GY$AE-<lI)6]'D^[EB5%2k7e2.h\QVfjDXbck;u1)pVlmUL!!)6tcs,*USYa:A>92?R+sR;cB.S)pZ0X;+l&=onthoJ&=9_FnA)2"AE)Am?TsPrYs-kX/!_8%3:1o6?+VTi/rIjoHSk4iA<,j_<:d([3:b:hZKEY?k.U<.l+$?-,o8dSkW=US7l/bl=ECTQHL0oZ8s,1p:3)s"Mpa4Z[=lX\[!lXU%0:)VY9Bhqch[!.9WXrdCj23="anH9FN?70@#tunVeg9;!UtP=qgl?0]!b^EV^`Lhj\/ru^X0VZ[2=$gF2#0jl^#R4qX3[md0YMRU%%`^GTSs\+GV>ZHjq!Yq*Z$b1Tmssl@_5-3k2M>!Aa#0\BnJ(Q(7_B85I:i%$`t^>kRVGu>H`(%Vj_EFI9/Ect1Y&eZSkg4TnVmpj%RAU^h=fc0UO*c.PF+c7?@ARE$o*pLX@EEF7n-58!?STH]k,BW.1P(c)1sb>+&lR-tk,)SY^j1G*lS:.;3W,5H0k*#8\923'm;<#M%N(n?)_69?mD5h*<CZ]Tr]A[%n2biEg(r0D/e6Mlfo3S8YfONR.1$]68I)E,UL[(As4MP<K4WibiXl7MYE^+qcj]]+Zb)Y8OeR;'#%Y:$nNK!*(6Xja9`N[_Mc8#Iokp:Nk(6G&DH1f#Ye4fY.*Z<MC\8tAq2]A2+N\+_9HK\j+LL629Qh4]fA;RYgq<jMS6&`t-tOIsn3%n+lG&"LW0eV_dLYF('23f4r-k\RtZQ9$s[nLT_NP8tWbs1af:o`KKBZGSOm`o/op!o&^/cB#!Zo-A8N8p9#@9Ae#CpotS&VJ[#dV%d>;t98.7rVcqad/rQ^r%A#\M#SWa?Y?l**h'PA#o_9#&Vp0\^LHooMG:A/VWZ\r7-.K-7CeffQV\K;$s,32Hn_7)@28b9#1XB(U@%"iqi>]a0IrYrJL'?9+DZ^(!ca%9"eB.Y;%)4sDs,G?%84bCYJB-E?Dh@sjm0HI1]RQ(<q=dF\A&^LE[m$_cZTW6.l%mmhUoj=p=?%]_3_Vlm0&!\/Tdt?]^YPZ4f+J+>,BOALGiMi&?Cfb'Cs&?.-p6NjZ#CKA\gj_r[lX:u58^;*JU(-,HBRc[tk<b!/;Sln8un*uabg%_X%XPGt/SJ"pXS6)n>X>F:F6VKt%^;T*k&i7q)sspLX$liD!VFJ:$S'q:):VSnqnt@90srB0S5j%=cP2pH3]HH01+D4Tra'Zk1bi%17INK]hWL/iu3cb*SA.H^&ruKVKS(p2d\K2E0Q?oDYBgrI[j%\rJH#L5W6<BkPXMpeSD><aR87"^Q"Qmk?Kq:]2qXp)dt0-V_X#[%m5>H=X>f$[DbaDl?3@0aS*G?onU8p3?<tNf$*@gC:?k0Ng4,&!(boD/qMdOM<`qC.[E]0Ma2DX7\[d$Lil`fi+tLo<=3i\WaTDRE%0+ZX;.b4MbltLlZ@26`7_Wo=\f0X6841i57ql?l<DdD/%?T!>E9X4B+aV;LRC#Jocj7<=Nl8Hi0rjeJ.b(lmu9Y(,ladfaW?d.U<%Y;017bo>eknFaWQ0Z+ZIo<L/]DNd#!k$d:2_*#IcShVlOG9>&p"[?PSpq'Pgm3I/;n+Va0rP;EV.h_0/fZm3@oW#h7X7AlTiV#m1%Ku<3%G/)?4=-Lo*_:cZ(qN8=6Ie[/M>D_09QBeRQ/loO<5?dmZM(L?[S#>eQ<\8JCW%2NLhfjeA2-"mL][1EDGCM?JF%86=AD$(/%YFLuAqQs!;f1KY+\D%t7)dlpAE4[&SrsJU1(l8tK9%e6!-bE<`YT[+F[?T#-]JcB_3bMpTL?#W@=<.8pDqcq%IfD78:+#-h&GjF@%'FBW.okf.8_j#2^3MuFG4(@p0:>:Dt([2rAQ-N\gIBJ_7gsq%s;_]_f=2#Dp07TL-alhusN&b)Dnmdt)FWf[b5't]%<$O,BIb`dd%B*p;82$eKP`h8R+n&P0XYJ!\F]2WF`k^99E1QR60.(1\.B30BZ:$H%7(&Q:I%BG,`7QT+?oODXQ5+(5k=48[*:+4u]IW%!2_mR@m%._K]^MVLK%?meI,=Q\Z?l83i1]q)=,im(k%?,!9#T9#:/!I\+b8M6U!hG.*^N?95A$qo>Dq2tZBD06V&W974r*R"$H9;sE.p)[#]%$QH?J.=Q5\876\kd8THkpTpS&1L&rEFGhfUQ3uNoC*n?FDs!3e>NsROipg-Q`:!1!rTqPek:X,?j2Lbnju.27mFA>Y.MbM25!OXH%=Xn'f$LNgHDnoECa1H5Im7P]F-@HYJ'TV0m1ri[dV>)bY.ic!tO1Cn"!CM!!Q74p4X)EcOfrP$\"3=;E.srTaccB:cAQet.Kt$.7%qJL#sP&GWC0&9NW;2<i\l2FMp:?hKqs7KJ5RBZ<<]=D(%GMcNN);.Yb_=gd+Yjj91??`a+_T28MS82\>4>)9=3=DXLF>I;!.M]l,%:)dbk^U8DqI.&+%Z^$=6#qTRnV3C)*nTJMkmnUr1*KAQXmH7OSOa$Acl.8f`f_;UP:[b`5K%NX/hjH&Vg[:@4J@jQ2iIcDHm6<hS%JWJn3Q^)?]T65R'Q3O2`a"[r4<\JMYjmPAZ!Fo3[-e7h%;XsKQZL%5N8aha7^9k*V?d1O1Rk2GtganQYZM/-g[c=EbGjQrVO8#.o%'e0``\R`;!UJ4kQrjQk!hH@e)g_W/WSlKj1XcN2,1'jWpRq\Mfc@HHH#,iu!S>c9>mpa8i`qBb)TB7,3cHCFIba9J7>V`%g<31p^%V-'cM8VP("^$G%8c!VdFDq5QtjKea$@Hh3_r(4OagG&*V]+=4ZC;7%PhXX<;S,@$\1OE8/*G*R>dWtQGj0OfbJ-,RM.D64`"DnfV%_sRAg<,NCB.uEkfG]Q&"*$6ep]*G1LTQ%9P[ZhGC3BRP^Wn5j?J$JMC_UtBBm)@N(.UMauAN\1W-=)L/GN-`(2sJ&(okkls$.<_!%S3)4*G_K)3?Bj:Z=T<u^pR^%Zm2Qh,P@(d-^NI)Mqg:B<g%lOcn3A$:'fPO+AN9Q_.2_=PM!C^_=aK4g/[]V`]@N&*eLTTgAd=IN%:41!nm;MaY<ALXmd']M*HLkPn/`k;bajMbh5=tMkd*pi,SF49)+qUA14mtKT(H2_oanU3`O^t,Tq^^%h.9GM`>?Tl-T6FL0\_:n7%Dm3Rt^"qIVJI\gch!SG@1:_dq5M>;^M7Wr"XusdrT:]EPC7W`[3VuG3o8,-7TALfM5#+[rdbTAdGThSOe+WP2^6PnZDVQ!kc3LPO%LKp1'Ck'"";>nHo4sUN*ea8XoB4plUjsA"TNPV2O3@MWbW.:eT;hjJX_p[kj9c=bfF43DDo"fA.gJX0g;R0s2>\3&[!Fm`lH];83%eb<1pM1KD1TY&WP-Ja#LV<a[o5'suKogYB\YHj^'I,cX,MHp7lb^Y'O(1>uH$>"oKnLYpA[*&9S;u(YA5MFZ9pAX)9&Hi6&55j8O%JrZjY^]QKtSM_7uctISEpLF(rhnWER,+KIE1I@):WI$R7]9.1g$]Vb$DuBEsqr)]6FBNUfMKb96F03s23nOJZ$%Nali$\lM;S9:/%SF(crXVni:o25J`;7h><OR#g"SfHP`AGZ2j<oGIsEaD:Be2[#@,(1@TZCt.]g;*M.aJnLebZ;3$59GS%'!nS@U9G*AD'*=I#JE9p%(DK?hb#p-HTU/C+%k3AuDH*]#m.@9SF9)G\]8u-]M0j24'L(NM`tNqk<JR^1?..+1pmq%c>dSTDg>V-@=4oC,GCkK;@?Hp6C@gm^%3YPprA[e@)^c<4j%(Gb2b:4IEmWS0'e0WP.Zr>KBk"#,cfGeC_*teo(4q$_OoCGq/?Wh^ZI;J)'^SP]'fl*UN3ub<AOdR4(5$f!j%TNpi]$G#`V/Wj>8psF:*&CY3tc:6uM!o`&m)k/Bp3DjZR@"4eAaNBQOGCN\%pU?1Oj4T>kDbUo10A.T\eKgk(%CQM'GF:mq&d@`d%\H(TUD'6-u;;hP4[;jZn]WG%n[gC0UQ'L_I:ifr,5quR@Jpg4f$d1/ZL#;^pgdi\m-FhOX"7cPb.DQ5mhC]S,:H7nYo%0FKkIp^]%Ak39NL_`^.s*WX!4BeSjf?1C@qf>qnV<8W"=6t&S-Tj(-fZW]O/oFbNE3>L]TXfIDbe5du_&q<h.b0PYBjZG!jNHZ]Dm#79+7e4X%ocm/1@V@iI$b;S/^ueFrX6523m4Q:q;KaehFa@36231L-nmB7LN]pkBZ!X4]&IAb[Zm_F8,%pq$-$,=Q<$rKF<FEM48Eh(!)!Z0A%b)RP3:s_(?#?Qa8W^72VLHD?a<bb#[,s3h]f,m$2@)W3aOI48cce/ugEjg"cLT"t@Q,6$E_87rKapu<p)P(6j&W_1Jr3Ud5l&TR7%Fh&G%J4H]Jl!8#qUcp_$ZL[T-ljMKWU9/1eTL#8IPc.Ko5.Chi0%GMHms":WTi7%1(Q2\M</)N?P.S<F>eVV(4J-L(66[ZC`*6G?%0ZQBo1;DM=$s#W0eEc2T-Yd8^>ScYR;Yoeo27'*dZYUus(@C&8EgIWXosG4sSdLnXl&V8pX7VjbaRfhIlkf9H75F1"9V;(B\RR`S%J+YGXL=QTnCUJL\b#7Yg43):Mo&%EA>(c)6\+_NB3q&2@]LZjIAYWBb>fla.3$HHVf(N%Z6+60mdVH=W!lj$H]!-85[dDH:9&o2"%+(D(!`DVOb0qYj+XGG\1W0MCu,rDBbI.LRr"PrlsA<$ocL#R9R)7PI.j&?UIm:E$.B@#1o$ZthWRh%c*adqUj=D9L6\oN(u5CH@d%lY!7<=?#IZh<MWST$4BS4gJ:a$aK/0mJ`*g[>m/[:%N,+\WP_pDeEt6@uL,hSSOkbMOVlHl_=?/gM8>oj6@fYjDO5`g&Dr$!AAu4%Wt"\C2+hdl<WkMBU."(^f#L8[Xd"6E(J=Kmm_p)_hIs9:;Wd\>*+gm_c:3Lc[SY0&HsE;-?I0485*0XLo,K#HV$i`@ordrXYrUNI%p-'8a)s_Zt_b-g88>jm7iFo>OYWY_>NJ`Q)XQAXZci.C^d_>W1j_GZXFGS`,md%2SlM8A8;VI?BK1is.AU)7[+u.hn2W[.PO"#XS%l89lbP`sD6*I$q8!_WK'9])(\G4Tu[H?ne!n]I%jqNP^-8tudn(6#Fa@!*P+Oa)5=JQ\R:pV"T`0\d-ZaIp>4/]/WJ=,aJ*Rb<"9%?-8rJaY)F"!rC&RpT!`14^GCtmfcJnQZ)<Qf#J$GmX[4$dk,0=?:4%OF6S6tMUX_S6(cqo9((t\>ti#^C"=#uHgsG[6n7%W2n$R^%#?n6^DRHl$m18:_.Mat/Vg+i22PhY+C/V]nn#60p8*cu'UOgH\_iu5>TJ:ag$1WOEMT"9te[dqeRoIb!dZpN\Pk5n\6V_C=.9Y[a%ee<TPLY`_".6DR?r?-jU`K&gQBqIpNDsA]?DANgoc!sT;5]/Gc2I7B1ObiHh[`mMJbCSI?4m,TAk<*gt<[GBH(f]8gq"sX$'A`WY%[B1gcrH2U5(r>,!VK:e]_0MI+iU`jdi0G9Y]as6R:rXr0.\^ZO`)$JE[Vh_NjAZ,]qX\DsM>UDFTj-\b_%tM3Xa,(_Y7^KmpAWHT%XrjH<N$M.[g[N7+9YQl!ep^j[r8,uneDn'q\,D=;hE$S]pt)@s/DBV_YASd!J@$"(:((uPV]]=TjoX@>nh*o=ik`&B6[+"KP1ap#%)Km4MiA&.&X8;m^pV*]2Zgf7.\7%H3j.;%j,N<[(qb<rN5KQ#?^m8!7n1'WEoEnn?hliCnFL9qu:Ob8%Z+IaZ.#K,36&=J/Nd!bU%:I+P1rq9!lG,@"<.-0`9m8>ejroCiF+-q#`!J)7E'%ae\%WqJtF@Tk];%#K8rD2_M<LThh#J9Z,HtM^.VaC;8a$],]iOShRW?@(h%r5[)a"^M<9o$6sKW,PBF8_ls-1h`q0e[dUX=Vcp5lZi6>VR]9?O!4m`ICp;1CC=g1ngfFS,O#i3%+k?Jr.Pp%qYi)3Y_NTB>"")M%P:G/.Q[c3*M_uq,k"acNJ2qdRP<`Wgo$'&0-TXn.6XDD^%U4.\[LguYOHlI(6hJscANL-4^W,>UQLI]?k3`3i3Sdr@?;G+8DXJ.A%P8B`m3D(=nk:`F^.$gM3EJ*@;Sp*d[c\Y0$0TsCEY3^S,NlRhg2mQokneY.%[VYeKp]T<<(rs5@Z,D"G=5#BFPVcd)rQO^*\iJX@%`q',<h'n&k*5l9,8umZoA`^V@/:[2PQp-'+j^9OVWOVi'VO_K5E5?@o/im\4V%$TJjeSub:9@c9nXVljM]5a**>4jb2kH%9nV6b<%jb1Tq/Sr*?R"&j*dfdEo/1;"0eQh]_40pLjoPrJXEimAc:EtVBW3r1$j,j.%4HO6ndNNTrD&kk=jFKYD(5[ePYC17l:HVI9dN1Om%((T*d-*%..7G9'"9>d9m'gOG#ish!sgqK["H=Xr"qbT6LK=pmfUpTa[GTd#=mlfUA:@pf5eB_C^O"[eO/9=:t7%-o.L9ds<V3f1W%=K`RZ]cflZZWe,S.?Ack\aQUtHaqPb<7X@aVtn2"B'Umm"<>%g9,;F;/NZ(^W$d3`Zb8D5Hktb#2kPe%m,Q/.7QQ]MgPKgVgZuQ9%KMh0mN'qB"W/]]<db`pHApnl;HO8RhaShX102"qhF1Z^<q*R$l]k*9;CQAV#C$tA-2g]PP2_at"(LnlVQ4T'>oE)*OnGsS+3m4pq%,m=faf8'gj*%YC^Csa(AE:<A_O9>h;8$b:+*I5[pK]OcOaRlodkL`^lbcW#;0mfZN*na-cLJc>sA\XI4D-W3j\b6L>`q@<VR72Y-%E0N#"LM&U$Sp;gW?_`N0$r)t.5sSiFn*F'RqEnJFaZaCJXn$`/<.+)`^C/);Mk]&G#m@L:)D:-7nR8khCgBn59E%%<]t>d/&p9X=%T`-d>TpIN=c*`!1058G^1-Hr$Gj6Q&ZHbZIDjTL8[.LtL\_gWJQ?IWF`Zem#$n(Q@Jcml#[M(s1mU/-<JC'HHOCD!nM*$-#jbNH/%`i&(Q2tiWe>%/_Aqh\[%N0K"_>jFsUP;tV^1g;'(rQeC(1\4"qJl[rVk2*km>*;F93nP[LK[9hXT;0VKVS>iqQWb;^g0?&/G#lms%9'df$prE9blR>sY7d8o#?DD]Y,rYLgd[Y!Xj[Q7E_^#!2A_J"WaYu[h&fr4m".-X30,NMEo`g8a&2&K"FJ+>$qD\&LcF'LcEA"^s%H@+Jmkb4UC$9=oo/!oM_qX/bjKm;=J5p,+_]W;#QQ1DJ>`Ij_J)b)2.1Vb6R$N'RcpM=IQ]fh(e7qmg-Rq!gc]ABmu>gDcEf]<%:%p(:tUUVD<rqlrV9`_3Jq5(Cr'SZ_nGB7<'/4'L0b;%9b(B5^![M,?]2<dG_?+SSf:rM"AWQ+sE2@!4[?=X&V/cXQ1hA"cc4>6WjR%Ch/F%gNMh`guUh#>l;`%O#$l4r%0Q38r6.rSNb;XDMo%ufKI%DJaRuNT;D=<nks/6NS\a>Z/1p<+R27bD4iWRrHJk5[E1P?]^o/p%N<XT7='gmY#L#[2WjpJFBim!8X<-l(1M+frcrqc%gq54djPKW-[%*fQ365EDA30NuoCb=gFeQUM_ukA3'p=XD5aU05bk==dV+G\)%*.sYQg&7Q!LodOA<0h)B\p6#F2>Utak%D"6h2#l92RA/iHekZF9Dq??Wq!9$Tj&JD)kCCo*SnqGk!?Q\Mlh-fNT^S?\`@dCOLSKt%`NJp.jb2`%B_`;Je4^_L[>3rfUc.E;,a_&r5.f7o!)mCe+S@o'isC(_c@5*Aq`X[sEh:NnFP,cY4n_>o/Cd806N5p-=c^c!S/:?Y%@NhU(_*iJ'ZQ$U,UWfu(fMrEiDc<M#K5^p?XoJ%/OH0g4PX;kTR&P1+-IQ<\i<6-%;^Tp9pRE@kDTY@.6=\tQl)%.M_e@g.WH;&c%dbuXG+I-ie6opDgPGHW$R7J-N9pA7/AKi/;RgE!WVG*dQD.A/s\g\<W?nIS<dS6-#LYB`NWH;&cdZIHG5*^$.6om:\PGHW$R7N+g%Ee79%.21t8.o"<B[c\=M<'%ADAtg8+(aUSgDR)Q6e)uh4!Yad0:7hUu':_<HF8?m=q?/.lc($t1ge/9_+D&^f3>W^U?O`APIEo?$%eLuJkk4H2T/49Qqbis34pCBrjRlPnWHEmSbk[mS^,Bp0l-.'o,4pU6s3.Yu0oJoY/pJ7HO3IMBI(kE!81T/Q5kJ]Z:DW^RObU!]l%TURriNp+SN$$7u$c]O*@TEMioe)qp[&.*G7VpBp3)4WrNF8?m,`rZn;Aknu9h%*2PRlPm,3)"8mh9>,)TYgm[d*8(ELUq&)!o;)b%F'*?@FhUK3oJt-WQo*]/ngT^fW1X:)RFC==Oa-U'\s_%18;9N/!o;)bF3\S4f*&[Qe)ri6Yj;[<1T/Q%Eu$.Li<bu;#I<o]jf2HH%MBNVrAkntNI@2jgDj'`Q\$J;'5-O/&%n`La3IMA^^4?T41T/Qm[jNk\DW^ROY`\*mpcOTYlH,`VC?kFO,/r[t:`S_@Sl.+e8m7&C%3HHbc-9=qe5)1s1I^[_&c_6pMQp<TOqAcKFRQB=`D#,,W90`R7bis1^Mg6Yr#oaZhHQDEa0-:sa3UZ:qS&f2fX3#()o7a]se(jh4%',.sWkb`g[S@m(3C^/Ilp&&!rgAYrZ7):\6#9V9G7_`k22h)E?-ZS"epJSFg4_g"E[?`1_[g;#r^S+`f0G<DP&*b)Bqm$n<(&D&^%jg1_^/_3hS5gT6E8O'O,T5gXb;Pq3.n)oj+ldXo+#OVO<g[1l\e65>b!Bl<R41lk(LO(rSVM8lK95h"H4Z%^LZq>Ph5-8G*H7E^k%fY&0E6jWtHhG.V(QR%J_bA:i$7A-oXhfLDnSm@Y&_JoJ$/!]JX4$#0`m>sHYe&O:T!:M/u]i8CKp,6;.$fjd:p[JLs#4%<\A9`GM%Aa;hs.9LE$7e4q=`?DPX%b0.l@@]eAbag)h)GIli>4+O5c&Ed\;Tl.D+t0)=rD2k>](;u5=%E!V=Ccj-)Wd)&V!gh@,(Rr"=0U5(%p8iNd^JARf_cXC8]s^$_%L11#aONYDm%Bu7MbTjsV`srco#,i;k6iBB>D7<bJ<]KFV';7.ZUS&_?@O_XDY%*(^jjL4Qu.;oZCp65%rN7I;DoCdG6QXQ./r%Jg\ao\.__3PjL"+dW61ZZ@X*!>"':'d`'oq,T.l7j]@D/r%q\G"G4"uQFjJ?a]pWi$k@M>2/dQkouX+`P$%pDFtl`XMqRjT^&%n&MR@+:gZ(,BC45=_*6(f(pi;"4M\&j$B+]m:^C-&GL7kkb=19iDT"0pD)2E#J%05^$*O&KCa\CO(VYo4HV>@%p-F)0\=\1u^<Q72=1_XN*X42t#E9N.Zb4Z?Z,P/W3DbRL'#uZIMTL$g4-q5JU1G&'i>PAO=XNlGCH^fph*_FMa+5JCq9X29%tHk0%&&j>#d=rELh0eFM$Z=<q)(TU'M3lF%F0ht0`rLVG9bSSJ3>aL4Ykmn;^]`MV`mMd=<4!T"NAu[UTP3fKL7QAX/&U`8BUQHc0L>%1%ZTKmr(#Z.;SiEf&2tijcPYZ,FKLo/\,@g'uPO?+0W'=DqSm7AmN'1,.MPNraBsIm8*/V4[=gSUF?M`L%4>ZcK,0=98CpeKYHH;n(%T50:g6iG@)>?9Q@:21D.g0>dB`P_Sik$gYhhogc]RY,d,4?1KSgklhn^fu.^:-LdN[[SN<9fmr+k%e\`/2Yp1(3:JIW_goSGEe@G%8]IbnI=&6i"FB_5=)n3)V..d0/rr$$;9k=a<Ap8KB.M05'/POT0tU\l<En@b(A[cT8Il[nb?<fcTknL9ZH,Mifl#b[=`=%"r-raq%qg4m\@EI':7s;:l0'=0DWW^ng/)=is5SQ%8S`k3SlfHX1hX^Ko#VN3=-ZlKid*sX!^O>hmK+$G"3!OSUR0#N3oCCNmJfS&<b&3E2%6)'q*O-TJel)_7rQ?ls6gGBGQ?Ye$(W>Ru^bI(!R<kH'OMSn;V6!aXVq<Vu:2;$/Y.sng(#)-`tn3n01_f*SLXB=Ap-L"q!W^Qc>%;i8L;f_q/d"5tE"@NcoL@M\"U's^oc3:-WjPPMKe5dVAbp&jn"(T@1UIbOSB$D4)^4gKbJm7J0'P/h-,L'#boC:OIYH=64%"_HF-%%u$oZ@7.>rDbGEngUF$Sb&aoaIX+'(pF6t0*9Z1'jM.<4W.co@.!9<m]fJ/X:g9dMdoPKidEL-i(].`>j=kmPgA7t"F-(nKafSt]%g-b+IpsgS9J)e?h*9$'d/YuVHHih"DfV0)\c][?eTs_.@KICjdH@^:AZo/^Ul/G`t**>@?AV<5#km`m5B/CYritL,Gfo9ga+ZO#c%f4(XqboVe]@K<rT$qEHs+MQtVT?U-AqG3k.@AEHZ#6)N4Z5R:7--D&gr5$;NjnD=DqWoJRd-Wdlh<bWOX_>9BfhGLB/ecWQ-PCd^%bk?gGAo62eG,kLjU1jbdSWp;g$dj&1hgIB>I5Tp<MT0)1bU^=89bWoAp'M1PNA/a2r."H"bUqS%hp1-r-7(-$`tZQ`j-Auqe_+Xk%b,I]aT)eAq,)ir5GjcaLis:,0#127)+aOcLHtK*qm.)>EZ9h0HjChFffp!Vb>dPMKfG)[$<`n%.nUd84riH1EGh3C:H1rO=df*Gi%iF7*es$DCdk4]PJGUCB:S-0i]>`)s7'dc4s/B;Nk<L'9uVo#G?6qHj<`7Z:H.rs$@`!0-XKsm-JR734)@TZAP+@VE($`HOMjD@-b%E<=2.h@rGA-qI>PD,=*fU\P0!8u`)[(lkte'LbD$T2Gi+G7X)n'M'-n!X2mFUBhJ9N^>]o@KF?B<(5n+OJjX>">M4m]V5Ee1-$f&%Mi=H_=MWZc`"!JmQFF;$q%TmN,+48o'O`>_BPSun&.o2!JT89$!Y?K_4F*.P77<?>VAKJ3#_EnR'.HJ6J2YMs'iq%OOb\)0kTXP7%d=DWW(3W8L.7AbfiRA"_07n9TL(O,]CF-$O"/:Ysm9U#)$j.21\qcgj=iCDN<DKcKE)CY5'h+\q3=.U@9Rri[CAe/@:c4o_!NBcb%71"MHP7gj\-jYI=Af98_1kHuM)]IA"?iaCH@KXb&U)6?r"iZ?5J4O2k3WtcM^[[2_,?X$JN)_nSh&VW>R$(?-`RmP<5SR'Q[TXri%.4L[OGUl(I&;+^kO@ENa2[L4>I+/W]W"l3WLcS@t#sq$_j=Jdk,U)Yr?4!e9+A^:V+J^u"d#J_KM\'2k,^K_"(_C?>!$Z,$87l#l%YQB-m#QRh'aiZOB,d<.uq#Ml6.KPs=KRdgu<J;#r><AK4L7U^3nVh,`5pm:4p'ZGA[K]ana`\h$Al["L=H6r55W5I]MUnI%![LYP%.$DMO5SO<p6C/'FPn?Q:J3AJ6>/HCi[.#N3Ps@V<gVEZ9X;T:b_S$,uV9k4OJ7ZUM,`Q(sJ,8sA+<q1.+EBo)QaB>BP"N8/LbiAa%L(OEPjCL;-X?IX+,[?Y1//A!p#U,8NN][T;[HknV7#f2"dCWU4G<fD0`^FGko-e)K`lKWF?\nnkbD`AY,fa+g;nRZ_KbXb##Wtng%!.h`FBlsZsDCU/=TGSW0Q\!-fUseLI.?T<mZ%#lj'pL(uWZoJu5_UB"+TWrukUGLh16E"GP#Y?u5uh$<J/!Rb,R@3XOd6:&"<gN*%e[j4<)E5^e6AL/m_;M-S0SLQJj(/f]=O[S<=WO@nqIF+PjsM@.A$mbL1Pd/NQAq_\A@YH;=bE[h(iWsm&J.V:;#ua`XOo4a^F56S%m8f=R4XL^MRt/SthN3FqG8?d,N0Pg\Yeg=;*+tF;RD;4U1,"j8!6?U$6RkMMGg%X\1'8X)ALe<Xk0]jnZ[g8BfRSX)"%85^d>AV<%8Lc7CaUC!e6/km+R0a5),G"NVR/r+V3RLH2#SI<g:1atYObHD"?prisT)4<IVTY..%B.Gi$V1q)!9"Wt58Hrs-`kC`<Dro06`#^7%WPD\K?KUXD$3BG/Q"hcK@RNu"W@EE\=lh7#$UL[A.2Gq&"u.C9%^[VhTRr8(C]e[uk%q%);@^TY5Ye33d\&=qWWGFFa/WEF6/iXt%LTVilYVr;%F)1i]XMA%_'a%uPM%)uk$mXD(3X!N3%+mBO3'EEK)#Br)+)R<D=f\D$]E:-iZ%j<Q0J[:i<(p&_'8-O`;iLrkC+9uA%E)DJ@)61h81'Pf/ce@'HKfCYLI2E>_RgUu]8Wr]`Z`M/l--G(a@73rt&F>ot,u+b@4B\p&-NUNQPrM5"WKfG?5fo0sh$=Q@U96m^%^![*?p/D9#a8sO8;0@D"+onap.BsdQYq"1VTX@ZF!+FVN4*=/gYOa;`VbR5LJmGPb&6N)0Pr]A9FX8pg>qpj47C8cm+Mc5i)gt<[%87,-"e#1,gHDC*=+?6'pKg#O3Bp'B_f#Wc>bR7I?0HgYZQlqSV9qXp?_[*>]+Ne@RC-\37\?h&k6BEU/-FBR&32uuA>h(,HQ*Fi'%15-V*RE/J:D(A!Dct"[-Fd590-b+a(/?"B46?L=[_K;1M?&?@:*?]prXU8+c7?8t2l[(CSBagmG?#kVQ"K:)9W'D!77Q0?M9=8CQ%..@up-aUU3"fnp7#a"#HbGq`7Be0:<PKGqN77f5XEasAMfO2AO!OCY+$IhlZ;G:M$)r<j\)@E)h`[*IF<8O<#lGqJM/]*'IAXft2%&;cL`<EZ[25qbS.&5S-_MOQ:-UU1#DHFJFs6NI6]jfOK)0#EjX</Ld6d'K!7Jr7jS:.C(*Rh,f]8YU#UU[RH%0s$?X.+AuAatt'U%?nOLe_O!No[g?,h."X#)\KoT4UUS]`\3XP(/h$lGYd3\7d*=]!1!9t$0WINJ8"sBo$P5VnLYr/H[K8'^?jWA(:a68HZ9101Ab6O1%nH?Fr!a)g^#fEf6lp+$;mB;+f`5-mH85qT"Lq]nTCmK5aYOb=TPV`q7G;q'uUZeb;5\U:A4GcL!"H?,aGR>'`<ZrTGUUgPD!dY8j%oP!j-OC_rh`#p=-7^.Hj/Z%np!S,7t82?sog&X:0^+_gG_K,jsWt`B(4G)dd]LokG!qdt-,M&0HF(,3e7$8j/9)pGL5NA8FEjA]@%)Tn!ah1/"_U>kejNQr(\0rdK)eAqV$n0qC*MPBSE:aXFd8L5m><Q!s5,FC_bAL)k;QIV6MU)tV9kBJMU7TlqWqQmQX5qiEh3ZnL)%We<?Ch&lr69MneU3ruA"B_JCGbNp(-YYXgFe`.6pl5^a1U681Pd6Ul;[s:E..O2H.8d#-YM0B:l1<XH#a:_97e9-Qi3.OD5';/_:%P"cWZ;$2Z45VQs>/?i)SVRAD2)>0OEOCK\qEkLi-@Kh@/UfqL<CZIiA;WS)L<M%R4Cl!;^?<Do5=NWhTFf&%q&]'!,!4BN%);QYe%BoZ[2:t0cECrgLVp.Qd7+B^re9d]1d18CBm;U@Y*;DuF+hB7AqN@9QkW.(docOcmD*`R1pi[7-]aQdHe[!;mQj!f_ejRE6!GBFK,%l7+.eg:O6;Q:,h*@X$?%N?A\)McgD/]BLF*M@.[cFPerU6UaFtB5iufDi)%6&1CAQXeBS#%&_hbVQtb<MdHjC4N#TLKfd@P2XE\n%aTs'W9uV_VY=1/S>m#YN@-G0EeMVRU[YE0A9b&A!,S8XN2]*%O7R/FVk^%s$P5]8_=:IT-J[)_SmNWJa1+nFYV5upY:gjOg?(NDW%!EgY!2*k9:lfl21321<NC.4`CN([<l2[p9B0RXcU-k@CkU(mgLNFJ(0G[!69%QCSL<C6/Ir,<:H#n0iB=huY3"U%5J.KFf#-7Nt'%!J`VT$*f(AWrE0hR6]4`5T'1g>Kd0a%mNp=:rgJp*.h]QBVhtYS-c*n`[2&Hm!+MQ3>,L_LnZoV9j7V[8]8A4-cO%32D:sCU?f98%9NQkOJ'Mp>W.Mi]9NqMdTJDJ"]$!KB,'%@qdc,*Gi_UI`IpJp8Fl`1H6Vg5@-=^-[A8"B4D"mO)5it+D5bcPuI,QC)M@ooW9L`+4%6*@I>JuP&rNX)T0(g=M.Xq8UMVP?2flKhhYdiC]\;A#_D=U[1DKV>V=&hD^e''5(.:l_AUO).^SmXTiU=Fo#d"B5ZO8f%W[(l:k`%)<jP1_P>#2AJlV<'/i/m3"(h<6Upg2$&Z_^Zq([AErp#*28VL60/$0>aghVda:[H'jf/0dK(+/o4?;[2co=&h-7MgXa[)<<lL>_.%@M#=`\ndm>,!7(NiTTH_>1Ngg)UU*/=qUeDp#PTNMIXWjPXQ-SES5ASll^pdRm;V._[mfg3^C!f>+'ls:%!63-l,03\jugk@-@`E%U<7-V4]+Sh2B[$2fII(2P+n@U49cW7`%\c878O0)m9-*!<Rs<_ACFXMQ`>e>#)WXcV@4;.,ZV.[+70Wa<&9)['h8%$D4tA@E=ucj%eTdD/ib[+F@u8tETP-`62-UN@7*2pJ^3CFD)Hj:)Zk*KMJpfO$4lpQ(lU#DQKgC<'OcV0W.fqQ-0`5'9/#69I[tOu(C4q4)X];Ye%Gh<TPBOPM,104SjdueISK!^mmDeahrTIoe3+bW]-:#dHLp4bC+4Rf]u./b:T=YQCkC)ru899`&?_f2HDNPI9YrL?Cf5V`uZX>^2)%Z!WLXOEGR,869oR2^/u&`1'%p#9bB':RED25_)E+Ji`=9-gLVen2pe>-@u&m]kG9-OgL9278*Xl"bEU!(*K8>OD&R<W67Dn"\o.]%%HgqsV%es^O!$SH8GNIFla:a=lsHT7+;VE%@@WM4[5ZkU)haIZ\oJI_ZNqO9OI[LGr+Ihp6mQ^?)i6N^&`5>gfu'`oeEG.f0;/?A%33-5?+J+=oXTS/ug4_&uZ4&7FBNtfeUgh:L%)=T@`u$*T=_fAcG9Bfrl*#2QOC9>(iFLca_H8\s$.MiU,opj.>/U`3-l"K]FU\W+%K0aInLtYEEfhm$3<)k/k0EpuHd($$s%BgEC)7Q(iS.CQrnKQ"N['1h@r/(seF%DA2PJ[MG:=:AU,aaT77ag>P"B;//?4]M/4"L2@%kRel"#jt!&*qP.hHdEe?E1!pUk`.pECe"a5dgR'4O]!;=*`cPT=G`nu\:RCOB`f!kL=bHb#-D;-N'60\0U:`W'U.R;o+6lE/P"X;%#U6lIeHGMo&Wik&Rs'bnLkZB$/SV-*0PjFMko?u12(,C=,\tST!E`R5M2j'iJgOhrQk;VHUZZV/-Rr9"AEIN%5"U8c#iu\.8`=MM%<.lur25ijGbLg8uG*"?'%%o'EGhlK.JHXX<CEc`13HR01CXADJ11STJ@u=mXhVg16aj<J!dEJZ@!jdohC5So$CGJ2aPurUkMH.Qd%WM;o0q4/t(H,IO<`gRH0_dbOSKWiOaYTKSJ+fq!t7E%fW]Z4^?Y7lQq0rW(p)5/Abcr>f5#)8I>XW!3.T:__$60>'0#m2HF"$sNC%ASB!bArSYk5"N3?-JE^hK53W=BT?<i@10k1i]>.g"H!d>Z[d-VQRUM*plpO`/BTf#8o)HY?OZumf7J^MM5V1-,?*'U(BlMI,R6sU%;./&>-jlDhkR')sCBK_^$j>gYd4pCYf_#ALYp^MnG0&2NEZb@\Vs'gWK7nh!8N1CH:@&N,7>054)IJ.k'ZqX$VL-9MRZ7XF$p(,U%0f=tWpPR$gVQ'e#6omChHIS:716DZK!VG%Z/+QkM09J7[-\=lh?o"g@#qH8o%HA8gapN[pne/do33_KE;Ul[OK'q-M<&?62d1SVf%Q4HY+PB8WiWo:H]J0[.qZ53dE3"8:85'E$jg/rkd"^pVUk1mCq=HTks_Pmfq+_n#j!X^ZQ^,6N,(s/M\BkRQ[@'C+R'c8'*eon>%%7Md+`+Nm*Q5T\qq#QbI'Z_<*#j*;CQ'o^(ENeXWS-Ci)HaVLS2#XK4`Rg4D&/(=#4:eM(,Jilu]\0jc_X(opD_Wsd+^lp(dlA-!/%Q>^nJ&GdXZ[&ola66jF;i)tne'T-:/ouN#QZrrIrZ50=#H%Q@c0eUi*'S4`YO2PbfQl!.d-.=0'Pn@Si!f?Z3@":cI1G:47),g'/%TPPDZMon@[2Oob9"N1amU$@IF<Y3U3r-aA'bc5;97m#0'9H<DBOA6K*+:G*.UT\EK^gq_jmWYs5pG`EO@+@#B8]?pVe[,WZ9:7]t%s#e;aboUTsT)s9gOI'pIG^K?1LqlQHe?ep8CSLO1m0E_hPNKm]0ZhDpW3LkH/oLhifdF&Mpcj?]Sm1RfOh;XTE(X!"]YmZcGLGt3%,"Q9fh3`F&#tW5>1d$[k+=]m3!SuFBkcQ8VU:XTZ\e\`UBr['/3>2DVW/^u\"DN%NTt=bpOh`u!<s2^4!m$&JYm^W<AVTZFW+h&_%7C6d42NY*5)*h,+_usP8;]R""89N@g=/6k2$X%KM9IdA`YEDGOJ6EE_2>q&T$U\';!!$Lc4DY'27-/t/6t3u9%KJk0"b<n@"9f!j%6J=G?!:1g[#J^fp5l`E+MsV`[<,#[/OTU,!NZM,74&1^jaBF+MA4CN-%KNn:ENPNH!-j,9HHe4m1e7c6)Rtn35`Re*o[*d:4=5e"%371!s`@%YH!8q0CEW?Y]cN-9:YDW#n!"*i/!*EH/Nf"-"EW@(Egglq]QK2m.!T;B_B8ija(.#<:Kh*!a&VV?2:I4"=P(jZNVIr[4%#F-;pfNEc5<3+6k,P_W)WLLhbp_.8?,rf)^ko^o7[mRNY5M8M0g4:CXL/]_VJI;5_&Yr%K7AV:2gdg]r_F)GGPQpc958dO3m7@;2%<jZ6aE"uN=r\&80ZR\\oCkk0iH&!G5#.hXc,a1ThUtNc$)TW.Ij)*ENpDMfuqVL):IY,\C?2I6K#"DD"=(gsDA<Oc:`/59a!n.uH%!$("R!s/]-cqCtMTeCSZr`LTGDkHPlq!V9FiQq<:Pp*<`ihP#EgN,m),Oa=a.4@7^L.$JTr+[%H\1Tu!CNb14S_XPCP25<bS]]oo%m(O7mbV.SmXoU\Qio6\<%LgBQVMFKmi/ePln[Or7^N`bEiFX!Xf\T&>ccXr0?l%9[pE!OnT"d;VL-4>g$t#N_rsa+0l&YlB]GT>>%lG^fKrCsLFJHSe=FGA\uFZ[?'#[ooGC`m&&b&>%ITR7>4(Rp!7kHW+CE.N/[*hKLN(q)Mifl5U))/).=.:Wa3IRha6I,nYd72;@C%VJqdSTV6H`DS<jKK&CVT!HGA)&@Ouh+?sSL+X?+/nO'JrXJC%1EM!HOOclfE#i.p^P76D?UZ,fi2J,?oVqnL7?OJ%#h.b+4W-Kqd%ZSt?)_#`f`?3U!f0OAmIIUM6<=VdUd\5&=Jk)ClkrW]qr^DeTI%m6Lh9b<C/`*SJ]=G<66is1a62PB1,JK/c$+GYCfBL(lC'n5$J%LeVf_$SB-^_R@^*"2jT^+T$R4.30q#-,5LWZPDrG@c],IEJms0eAnpbeF%=W8op<Q2\6b[?+aP@1qdb23"BQ4JsPL%$*S8uQ]$X6%5E6]2TAJsNa:dR-&^3sM2ejtms1=db5Z_u`Ib++9T<kAYaD=;\OscZ>HPSk&ihm,c/nf`o)^m'M`c)ZnE(H&raS0r@)9:Vt?9'iM%IkGIuOFG,ZN)sI'T!oWeh%n"8\<&RV0'EXDDIAUqAqT?oj_-g/cBMsC<"t1_/Bd'4W0K.*MQd(`f0r<DnANDbmHcinUYi6sg@',%%l!it.&3SBs%(Yd$\Pcu]66JNao;Nn5:T*[m/18$_K[)L?S&(W'8741Y9]%)3h"pBmEmAZsE,aRIQ+5'VN$@,(^DWjWha%(/\UekD%!4<QUk+#k%0<u%Y1p[>J%[.+97X1$-H.1CO=bSYA^!THn)2huKm4Uri>_OoY[Ee+g#+#jT\pR2\CHI,h3BVR!%aF.?-KJpP8"IPe%")Rd/IOWkKcD84,0?*0HPK-eJ%e]"`-#K:kfT[fEs4&!<+W@k)c\EGg!oFZZY"q5dm6T4mhMZXT\4,,s>:G.K,@@p_O4t0=FCQ"&%_=3DF3LH1K^Mi%,Ta*CDp)r;L_AHb[H^l?rV:1)sHu!%["fIHC+"aVc:2k11NWUK]SDT+J[mOF)I@i`IE9P5k)0r=E;TnQV@6ir^%!+]p`cPtl5Xm70",RPSf%3V[QW'g>%cY%8Q-^M"(ndU76\g(!tT4)&fU)!,?TMOEI9LdpB/$6f5lU+374qKr>o'mhA#V2tREA^O`%VqPLjcK4-^!*F[l2fQor,?/]J1,,\e-gju-h*8H[/Gq$E0q/ajD$T5jpDMlrGcnT]#=`FH7c$E09CB&LJ\H\2m.:e4K0FVk%in/a%S.u$`W")(Hq?7j2E9jqlGB+)Lh^LJW/8<&KnfX^f)@#d&6ghiQ-2JI5q9ZeZ(hTZ0:9hN)*8@/S"W;RR$[b,LC(<cac/G"G^Ojj9%-!GsYhtcXmY^p/NVuIYoO[bp\PhqobAr(=.m3Kqdn@Ic#J^Zf5U4BbQ3;LBp%o[]`SUUt=l5*q])pi:GMBNFS0r9>)G<u"\k5r1]%AH"c;CX'\*WM3f6/9t$.h8-021I11SKGF^6g%MK=C<H4t^F@D"@[())7negk(+cHf2V_<n*L$iR^7_D#ZHH94?ZQ/9`hIpr%8++"%'K,j\i^3\RiJD]g!;Q1]<g^Mh'h/mE>c.s[a1R[r"1fn^9L/!l3aLN,G[C;X4fZ&<PQ3P[$e;kcVi.i_N2AuC*7i(`-aKSJ"6uLN%*d/\j+g'2s^likIpW&;"7u87nB=L=H0*,FdL6'Hl%\@MiT8F4k5g4LZ-OE%.REM_oaqiY')D[8nH)'!ig:r7p%e#2TB0+Xga:?`(%0#rl75`^&?;#`6?c*u^a8P>[Fr.f&OD%U</4LX_VLR.8GCTqR[n2tT;+J=Xd_;iH;m;I"IE>AOp096?YY>`GVPcZ([a,0!ID8od"%-\..qXH-J:Ugk/<+8fXE0:+JA5$U@sR1!/QM$pqm+BVCH/Y\8\B:Y)SI44rCF#2aAppo0OI<s!SoO2Fn63(CGqH@^M33'5o@Su.&%jgr\"EsK3BZ,/FRMus>qkH3q^ctKn9e`2XcHCnerg=5<7/X\5]=FU]pX-*\@>qN5m]+FGB6WWZeK2Z.QLqmrMEWHMBeroLMUE&rM%>rSCBU]DJ8!EB<@.Gm#TEUMbYl\8oc<Lu1a`E5DJbBEuuMCn$%1b`0UNr;9?>lr1Z2NV6lFkD^RcKCnm\Tf@U8!0V1XZ)?)?5muX%HL5*6oaUJ4-tOnoEMNbGmW4Gr!4pZ4kUPP:Q.XgX,J^7rQ$Fo`n]'BIQD@-Ub7K3LBRe@JieE+\=l<kO8gHW>OIYIh3gT&o^+I)(%n8`'W3gT%G]N`G)'s>2P`r_.Jc"%GrBe-;1fI[n]H]oK"IK6,5LcQ`>8roq<AKF,KeMPt',7(A,p)okV>J\]t<NKZg4H]4dB70!a%Va,c\YIWMP2/=i.ZB,k>P$W@RP$WI?'LHqe)8(8k;9roIY?#73R]Yf(T_RTjSLSgaLs,+NU=UoOGBcI5at,t7JpE"qkuF(XA4o7_%/jN9GZNRtq-;q7S6Tu\V@:gX+BF/tsCi_%O1!)q)#-Z1,?9;ghY<0[q'H^lj+kMTX!5h>o77I);`3Dcc%*!ic6^bcj&(e+PF4H1#%75*;j9CHQ)TOVhg9@8Z*$,$Fm0U-42LZ+Zm(CdC)PfmkAOHhtHjC0%k,K^gJDL/Xa]I+N)2O9;k3?$5G#D,&q\Bj[pD?"%.nJ^K;%?A%pQ[?VMdm?-sR;'j7mfcA5#+hBa+2EDu$S.TX,+q25TN^YZlo]^@BPbLbu5W*6P9^?OdeXuX7EPkmm#UD`(<SJjl_TIGUH0Wla%T=2;#Q>F.`Ed5!i.rYK"CBYiCa8;OPQ<_@eZU,le[<`^0rO1F&7/^&`T#<ec$21\pAMVPSJ0M=%77Q1.'%)q*Lu!f8X;rH+#2]I.%O?s%>2L[G[P/;an']_%c+2Lj6OBVhn4qcbQ`F!+GmLGZ-["G52nZSMX3J?QTlCH)I+ALNBTt)AJcrRjV21KDRL%_CH/E2!3k&845%2d.8r*g;[3$nkGiaU[n"KV(endOs/C$'f:j70NegFHBh4$Xjaff/YI+A_2hIKQ(^4Vf6Q3NSOBsf`UXF#A'm8*f+lbEqj+C*ZD`s%%8.K>3r@VR0UX+paLF9#IP/2uM'&9SoUHMIfq>5lY>iZs_*c1q*sA)-nPfFs_7#.IE%h!u3V#lR4s_:rN#/+Di3E/Y?nK^bmSeZo%??aqo7VU;Xqc#L"4HTeR:<`=u(FjO_TR%Y44r'C`nP\?N:]bCD:B_'RntPR%+>J/500U,H-r\t9=G2^5rmZdG62R/,5l"AT-nfiV%NXE0]pS0b*UT=moj\q:H)Q-T4Q2mbVg<Dqe)"2$UZVtb_j2VO^iu!jj8P`*F?U&_\'C+T]V!-A>'g"C"1eU2Iq,3i4hN1Q,;KfiN%QP?Q(JN/GmekeG&BklZF9@0so6Onp%6cKt"YQhAFV#nUsHG&S^7I;qF[IUnM*Bpn1_7!Vr2=/6p$pgfY\guj[_s/7G]B]X_Gd7&o%&%2H&AS8dS$/`'M>$jVA1GP]pHcOE!Z0XrsA.!?4G.?_dq,bl)%QtmQgmM0:VX)6CcC/9nnGL$Ebc73*5r\9nT-,?-,IAZXiq[pG%i`F\RB[d#DkO#S@KriAnoc69S:a$aE[VbQZn.NKSi:bbZDm#0dL14^ESJl1:Cm%<"%LIU-3-M:"m?$H)E9dQCXN#c!PZ7(5>5W%o%?\5b7eK-1[]'alu'?/F&?!gt3o53coTmD2>Jl&=B3P])u?ppqg`(C.R44qhW_D7R8#>%ViK;c%%Vnf?X";C3.7+R9Egk,.ikJ]`$%@tl]2jqa%7F=THS,fRg5ckSpZJMM*F`9`;2Bc5q9mZFR5_E64RAWci.5ll0&-llh>[Xj*R7#:mO8cXQGneEL#!O5E#ZEd,b:c<-J%*,f4)E];&eiH'"f[a<*@8O5i0)"3PR=&G[O-e+GSASgB0qd)>88<W1@5kGj_R/cd3Z%aQJYC6>'`9t+MCZ?D3%,<#*am]*d1BUJa%+0gqca7ap$Ft:_`@iNH#GaA4Z%OWg`g]^#-ZlHK305,ir)p$W"DS5B7!?`1/_OENFs7JfIZnX]ZU_<olR?@pq(.Lc4/6U(a#EBDH%YjtH2LC77Kk(9bWa9LYr?St</9se:0ij@R(6<l>LMRp3:XR'a5+sk$E"Gs@)Y*#X^Qd47`5nKlTYRl?`Ka02"<TF4!/.-Z5:?8dE%_h)sNh_3mjB+[t0LU3u@HN>$d)Q%1`3p35;XR##gZs]!b%^hL@22s_ao?Q^9K?Eu,d'b&0Rb<#mBqKXNA]IO*jmT3caN,`9QH0"'%Z?+!fVCEqnR>_asf,@Ko=I`u(F6!l30cDEeZ)GI+4L.(u#TF`&n*e?M&cgCV39LKd5%Q#EVM):*m?<LF@aQ_teVkUh>p]D"Q`dL7%^A5-l+@2MNq6G::d2?B.OOR*3MRe/U1_oDK,4("H:d5NL@4rD6.\9A]JI/GdgR@MNeZ3Q=*A1R$-lAV+7"gW?BUVZOTcun_Z>L[7%W3G'!1i\7;@o_^JO"Xo(]iV%SIJSr;G:n3<)9+b*@k4"kbncq=:KJdG.u*R5#NCXp\iXA?8^S#97o&,daF!]1"&2A76FSK=*q\hA%n,DIiM[r@6#EBpkl)XLl":q!UZOf58#XuT7+pBLT+J(`u[dC-R^UHk#S'E12XIHdu84=MJN.mV5e7XF(."mYDJHDPa0a3g-5tE!s%(A,]Q--Gq!f6&`C5[:XG`6Z>^G$+,:a5sC%)Es$:Gn$(>7G?-W8HYcAdF2r3A.QopS9IE\Sm*K@e"+@Y7PR0l(TRLd,0:3\K,U3I%pJCn5/Sf5@rBC38V@.:':-]38X(k'(AF\pi4/b]$'NerJ"T"s>N"8RZW=''.?.Y_H@+PpU)I5RUH;3pAb(JQDBYAIqLP#2L7&mad%!)X)gB*P/T1rGAu4RFYU:i&Zi=,u195e3!dBr8(D@IamcKfmn!B<^:r;h210H<mAG&]8%+*7.NY(5"EhOo3>q8=EM&I"5mME_u1[%&_97u8!LHf>T0O3eO([a"UN]jX1[*26UO]*iWLfEI;d_RI'P\e>Z?5QDH,?j<?ZBNWS5<^5hS@*IYcbUJg>bobh6@+1SOS/V*)AD%S0muNm#W<RbeMX0"[]U,L%*k_&9_ML5u:c^@@ri%n9NjI0-KRifdDDI?TT_N8AAhs87(K*P%7YdYY\-3o>c??+sG+HCQ5o#]KI',%5)I=PQC6b)a[s/ocCiEjU8aghll49X=Pq3sg`au(cQ@)@^MdL]1D]ZfWQ@f8<pR*$l&dnnP4J88I53'=HacVb[I?4,L!.1G,pb,l%ZgG=[.L$E!dbH!!cjbo`fS:r@DMZ_[$c8Ij)6E5:DZ2jDKFSA_*9Z*Hr)5*+rbHJ%.DJ%aBZ.BXeRcZdpLVl"CO?af!k=l$X3M:t%^OVG("%_[]CS*l:1"lBWG(RhT]NjS>K?uaC+)a'ZpCsi`TS!_C"Uo#0V)STS@?T!!n0l(5GHcTp:=17Nc<V.&q+A:9't,5Tb':E=%9EN;PWbL.<+Aj&_PPfd&9(UUY/+=A`X7O18$bK"R-&(d];/4iN8pnh/n]mS1TX,Y:L:tC%o-jVW2$%nh>dOYtW0M-3#$!1mhXSCO%6NgtB#*+'nnR;mgS/ZH#7.-fn/+gqf7:S[lK::=P<'s(LJu4QAO8W*m7(E!9#3*urOm<1EED<<*F&a!61V7i=+'/grd&rG*lSLh7%K!;:P.sO&]*B=W<<TdIF"=YrU?(9+/5S78DqpHHu]CX6KFW8ip.-l4c(n(&]1nSLV#k7"]/%\s4XHWRSgkhaCeq2!Z+;L-kIjBCR%4E*::]A#VjlsN+-VhOY&e9_]GI-(GJ\!:+0bZofA+ET`2CUl_T4E@*^HNi!fB/OD$;$$=YG@bH66_#+):2"$/pMWUNdf;C_r"h`3%;46"iFY<JT6RDG/4&>e_Ta(AVkNt-b6ptaFA0h_DoO3Ci0p/5h"!_^&Af'=CJRh<.L5'o.\V1FfjG./Lp3%IAjr$sH$"rQJ.+04-%^a*;[i-biIeeFrl6m$]]?i,!CR_-?JKsu9qOEgY:[`ogR3HG8MH^M[aY%%r'Y%&4MQ<4dM9$Ef\8$<ajn]1\U$A,oidHp-6]LMIL%q2<:S<tGc0$jdoZ#]0LPV7anR5fE[iTMK$P]JNB4*`!_4F0NI*i2eS&'1Jb-gN>SWEB:^!FEen=Q1b+"\5fZU1N_/-FCiCbPE7Y"%LNFmQ9&U.1Frp#YW,@n5[3sJ(V_U:4$i/j#-pt=HL+KtLg<@DXTAmUS79A:o$4ia=eiD/B7+=[,!=)(B!V$0bah:gS*Is+A(D7k4%%Kk4n4"L2C7'h<;phOkLbgp;Pmfo&T2fDuDK4#$DW?'k]RN;A/HYVC[5=e&.l;Fn!Xs;JZ*]J=6YVr$:@aT`kPs'"TGigk41QA)M%s!jUn%t+QaEWN]hJQ#Dt3C+t,5thj-(=h3G(J&`/L,%D2LR:$S-AW8YFQGo.QQ>@Con7/57^P=YFnLtEfE6eG$6Yh$RUtH,nN(eF%i.rMqqXFaMMk*]o8tAcGFMO\67#03+A-X&In/Ytb2ZCQ*c5E=r=24>g2>S<53rB&>]YCGlm%-u24ap5rgfk,h<*T`p&352n/tbHY%$=/*(UrP@OQX=ui_Cs][n,i.3r%K).cCQu8&.(t[/FSTB'PqQ8e4l/sFo,\?$W.,(1"cCj#^I-(*gU0C6/`Vtd,c'Mi3l-m@/,El%[/<6Q>^LGuWP[EifXsOM+-!m:33dm*]6<-K''q]9To8mEEXOn!o+lY?D>S\N$TDbpKf;].(oB\c?BFbO3,5TZ@<2eWXsfLh_J.Ek%bq#RqGZhf8PI-=u#27n.%]Y2K"/M*$cKg7Xc5iPi_**hT-^BY0"JIJ)W6ZI69^kmr0=XCBPXbHXPb?8*3R(:gB`%KRo1^Z8VIXSr%[6m]S`F0&J<qPWOVf-^)2)M>OBsFt@,2;5>[S;0fRH('bOoOLhdA9\W#GDanB,:eM<!8IOqeP@!IBl4/C%og9$9^:]pn7)-@\#A#%=DTD5W^03&DbuUo`WjCCHL/,\MYjo7?C<n9oaAjCQ*,7)OIa-o%k'\K=Y%ORL#1gj;GL4\n]S@'q!od9W0S0]GeE+o(.aF1[B9T7%7beJ*gNNnW8<UF-AGduOb"a*;mt^>O4"L<%ncGXrPl^GB\1t`I`bdd7AaU^+g_=:0n3PLti;VlDs0t>U33J$I]nXhm2YVDD??lW_%[.)\G5(8-[e%D+GV_O,&H's"mNCtmKRJTUZ1Z'GD4WuB?gH<Q>E4Y2T#0![tTOmRNn?VdMBR@K[@IF5"7IW)-!,M6VMUi4BZ^?W9%U"LFB^\JGR%)0NcK/J_ZDD-Xgms+IF"=,:_Aajml%/q9B/]TNC!8n&Qj_M3tG_u4CAaorL*Q3&akf[l7;0pUS*o?fKf_:AZP1sUp%0Bcn<R9`^1qpkc$Bl!Tp5m^lr7Ssla65kHl4TotgTs&^+MD@2T/\="G*+u+\P"rLtktrrR=WR13,'0):lH6$m:t)uSo>_?PZRUEF%bZJ7XF/?M@B/^6+fDB@?O4m(b:sEccAr7cl-$V\+<Mm(gAkQq,684=PSonI/3]Qn-%c`-'MP+Zpg+V6Y?4SL^T/"H-hN<?bL`dHC%@Q;"kB0OUGK_1^lBDR/C\KSO@+K[l,dJL#;Ukc3@3"Sh6j)&1-P+=OnZl/k];=3%H+67Akc&+fVdbFsr@`/>_N;'NBO+Ib8JA@]j%D#W=<,u$57;S\.ESdO44-k&1jr\=B5Q.i7K^4V879)&_gbCBql[<_'Gj?^&#L[U\4mQ\5(>3ZU-8.,eqO!CgF$'E\/Bo5rCA1b%Q%i!7kl.E^'5^="cX,ho<"mKO[\\cqMpS5H^V\5Hp@L7E-V/f=GLV)[1K]?Wl:d(rlVjm.<Q%s#:Y`"\$T&oM,GUeuSN"/kDjWAAoO%JR^_e7&@5bY(e2P8>WHU3[cS[?S2D6Cq=XQa?grR>Si1u2(!.#>"^2#&uB-N>e(6*IPQa@gND*u5aIsE;I<f(Q"`j+KCYO@HWelE%?pTSfn-'pT/Mm9o*FsC\+BMja(F2;l5rRkJ*Rda<UT/J12@*0i+trQiZ(@$aKD$c>/_gLip/I^Pa+et>e5q52f4EQ,9i5-0]]OR$%.H^uXED#*)"/A''.37cE:Gu8WLUj$0\IV\/Cl'$$O6#'`^trGW+OVFfOmpCD/:9,KWNQj8<&]"0Z6pheD!i-8ZT<S*>"8@U&VQ</%#5XlgBq%3(j'fL/mi)u/fEPXLfEF0W48cU>_pa9jVE.hKO\,p"Eri;^58k59bL$;tgELo=jn6[u9Z\-:,@>s8Ml(na?UU:os.*Un%TK("WJ)h+H!bG:EMF[atN0:S?<k#[`W.,meZb4*@A@-nBBH%XQ$g<!:"B:O*hR@S^UAdTh-a&Z\ot]>0#Z5Qomd4Zj8uL*ACFUK\%W5-;4kaIhs:t(b7,WBq&A`0Du*0"'4d,J$$UCdXR>(9g`BV%jGPqBd?8Nq"JgPKQ"F6TjbIR9pIY:$tKnKo1lDiDG3Ds'YVi\0^m%N&f_k!^e3X[+8<FYb')_f,$PrFJdOnC`aId^!W2M)\c4^K<FliJ^*29+#e/Ep)(]h14%5V#03]QQ-Vu>F`#]B>PY>Pc]Gh\k&*Im%eXS^SQ'k4Lg+Hn8S4GOno#G;o$\lq&;"5KXN`)[BfXLt/WFX1K@!P,PB0:WJfX8^WCl&cV`.JG.auR$s!^Y)@=CG/6b%Zo":^Tbd%;V)6h(kGT4oV'(Lo=gT@;-1dHSH)l/;:?TVL`KYtoaZ"7j0(0dF%q&H32Ms1pTgF)%n<5_f3+s.,Q*j^71.IqQR4";b$&a_K[+])%X6`KCqDIm<I)EffgKX$kHJ8g4",2R*)CRo<6[`1*&>8QUpfa'u?oc991]_kpO0+Ji9_X>W?8dXaZt@Vg`>%("[59i3MF?g(,7tk/%OU+(lBk#>E6r4W:B4QcA!4d;`KH`)MWbL6T&I(1QauV[V<fTT;,PH2Vpi4rA&I'F;,iT@oLaR]Oq6fi22""db9#ti0`Y$'IdL>#H%OJ()m:qUQi!^,;K@LGO'[-_)4bc"J9*qEOjY_8fJ@mjuPNf40/@ir,alggTU3Loe>]mW(cO&%R;KMtLP`BA3U"m!!K4uCPbQ=23L%0WbYd+AA9]Dob4]bf>c+7\,3n(Q]eU6Lo3u($a.6YI+O:2FT!,J=n3;&7cjY!]`s&XMa:!_EUt`4QW]'ojn\U9+/+OaQ3d"oE05n%l5"1E59m9Zd1%1OE4SM#/I6O(5jM4.e52Mu;\MGUZ<Es60t5ib;"u6^MVsn9:*BF*jiDk-<q&%P^<\NW/?624bp)cW*T@sF6^hD*%V+]DSiua=@LacAEc4%Eo?\R`aYWfu,LI!['i&Kp%_j!SPYf]\kG^-t)$\l&/&4g5d-Vj8,bsGgV7fe#$:5))`)Xi/(-Y=q=Ug>HK%!/NEO66m]_bQ?l;+u+KO<+=qBG3G#FPZCG-7;#d$[BS1\^u/`o.oDs]1oF'dh3eP6o$+_#m'2/uG37L&he[c1,'.!7;j"2V3f)Zs%?huT2MV#<`=-UP86QG[OHEH%a5$l%]:`g4('"?p*a>0Fqmcd8gRjrZ:TSN)peN.4T#['7lWh@468SE$.>+/B3`-#@bg'*aA8*A):%)H%s0YT%+o+b$WSg1?RK9@i7iDB>P3X`+CHL4U..k6m)K9B[UrXa6E2J3L)hdVbCop;[C.a."aTq"DL!V2Z@Q7#"S_ZqOBIcf%-8%7]jAMeV@]K!3'dkoOWt<>_(ci-TLWoH%B><``69o;RJMdmW5N/k\e.TGUYMs?>RP^Bui6[AT)b9<bY)aD21rH(9)hgHd=FOX8k1a%=6Q-lY\hVJ@l7>N(e.&Z0CslF86UGVs)8o3kMARTM[bT2"UAlc`sZE1ei%WPbMCjT45>s_&10:.9#pc<EG-Y9i:A<I.EFRb2pak^%5bd(4$*77k,\^<RKON@_pGD!eN!P9GN7nQ%8c7Xl/f05`+%=mA<HN)X\<&bn-U+9UJYcLk!p5C.JjrJcA%&Whg$JM[C6#3/1eLAe%?('r[C,CJ]*IS5JFW5Yc.(+o?=.hn^l422Z6BQK5Df=5JObiE@g:353Kj##D8>0^bH'jR%JL^apWFeEFGG+Dbe'ld\[l"&4"p9,:%(s;Q_aki%crD[6A4%>mUhcuUA`r1p&B9F44]qh9h)ETdm-/#_nhQ2(A@oTK)&8Qg*ZW1?pK^ETpAm]$Y.giAXk[2)QS/YDj%2<`d%JQ(*XphS"<p)'*JeT)W"aWE[Rm]Or1mRXiRH(>jZqYnSq;`b/;L/DmoLm`C(=3jkIaH6WOfBS<!SZ>.M)kn^5FNQligSE!n9G%=l%!$n=a8&g9GIXK-6I`5,og6&iW?dl"%k@DFi9Oq`&(=E_,=0Csf9TpWX*^Nsj)MD#_2e@_DRNdpAiKSlI-F;H-n6,FO9^,MX8rP4(%-qX=?njsKiq6\mVZ-iCBpL`mk7e#^P7HIN1!QY;F<B1)=r.GGGp%Z`C)6i<<eXL&@PF5$OKDTtFoRs5h\&&GbEsrTAo$m`O,]FJn%#ePZt..,@K8@le'Tb?A[eljp5icTAkaPEOl8/iCeT1&V1DGXYHl\\W"ZH>bA3!F%1H@UlOJ=Eb;reaVSU;YS'Va)[%LoduC'H7a+%M@I/V'Gn9u.5im>'Gn-:V5R*+5q%dR`MaRAj8(a6TMQjk(h&;1-N#Gh!O0mSS74$)bnd2oc:`$/qJ(1q"Y)EDq%>V[/dFJ5p$i*_%7H3_I@635d&Y<M'?j"?CFo(uE9L+TSN:kFA3jX0CX?qaSQDD-fa@2.t$$j3a:JfEVPdh0CoArt#_1MS)<L35qNIID#MfhuXBU)3F%6+S!sj<BD\pj=TXi57!#\R3C`iLd/QJroT>X&stWg8BjZBc(Q1C7P39E%srt4kbc>,\8_(MMFZ$]LY4*W`EK\MBsYQZI2@VDFgqi%cW)J]`")[EQ$<ILa]njjeOjZ0mAoRT=09C]AAJAAEN=Wj,amPl<e>?:>*%u1#Ri*k't"Yo'X>6P=pYVod:\\\T_Q+']V541?So`J%YTBr^M-&'5*p[YlQtWm]H90(,Eeum!V%0H)SPPJ9!-639<A&iJi<&K6\fG7Il41@0K%lNID;^*qSRo$tXVqh=95sHm4btd8r@kCm%K<$;9Qumq"X26Db"i9(ZK<jWS$*$Je+Q0?e\CHM$PDc>dTDiW'89"4FrD:$-G?[iDQV01#3$]/X>V:S!&67(0Q[mcuCJb%i63p>l%&[`f4Q]NQAm.[Pi_Ra"3%_5hR"0Za%4%Ri<?PW>+#*!]=8l+G6rjqNVS9\(,8>dg3,$.EFfM#k6C5I*Kj@$BY7pM3>=1&1FN&3q&%/Q!fZ_L.K5*7A3)6*_1`9M)?*`%m-sL9,D%c7R-mm+3]]#6J#V;lJZ_MBrs/-J4guA$JF3M;#32_!nrn9#T>rMBuTFWgdd7Go0i;%]hMr&X'"?kZH/X30(4^`&X#U447r=5Btb2D8:RF"rf@*N8,o=;n`$sR5Q:=Gro6"!cK>W^U]#uJqOdcK^]!K5r"fq's*4I^-iDkO%A@QaHB>Yq+"G0^0X$3A=2,moV+`KtiCksF'_1?Z'VM$\g:T,iobQ@*bfoI4(bu/MFWrd<a>@N]ZK%U$s;?^h@RqP]QP$6*Oi^2dH%Un83q1;gL$,m9&["WjtA8)3S\TN$NH,`#;05_urMjE6Wr7Q?B%E&'kgktW@3$JmD.:c"MC<VTiYAGQsZ5DCupWJrG2L7l6KOIM[%%<qS)]YpFVZ2=j=a%m,R1>-=O8.6E_=AsO$=>!]TUU9Wn="#pcPMsTHu1]l[tmnRGCrfs"Jn=G^65u=\rksHL+0*ZY]F+kZ=4t`kV%:oaISKqFE%"F\Oe5ML6Y3;"#NbTM>5LG=+)6Qn@KWrg']OO;?Ke_Q!:!RH$W,qq>#jQU5j.-9C;i/F3UMA:Io28Ys"8V,G8%F@6?%jHN,L>(4d@R4U1gc/"$C>a\_32TS7%&3_,S+$VKs;Zse>0K9"5_TN)sQ1e>u)*p<FAYh`cpTeS(:r\'o1)CTe40(_>Z#fKo)b1a<%N!qsr2AlWH'h0=6NQ;4Yp/"2=5YSG.W$N&1KQJ7OJ[s>iF_SO.QrJG,>b=\#mZ7TK*u`G%'j>0Q4q&J:\a9]<E?/&D/e#BK4q$5*%3BgW2V\sp.0Q>IiP6acgi;)AF:N$XUgoYBEN:21tY4<enV?B`GS`CnN8f_O[5#W"%AW-s5k"?s3+@P;t8PP^d][+RsPLm@S!QlUK%,gFu)V!/&C&!edt;Q78=_@./Nnelg/?jrW<ee,3#)qoeY_g7=N'XSCMT-b";L(a?E#T9'W5MmiL80P3!Bk:3KK'IYS&/"n(5VJms%+;cmY-kXs(!)V2^caRrJ)`s8oI`i3k35n6L(BrF'nhbl)-D*aQ<8E;i/"Vg=MP-]Y`V<hqk);,e!TB04UBsX7L1psGO9t5b>t,)4%U3tu].%gW9mQZ**Vdks2hObi&g7.7poiqplSH7`uA3[V0O-%F$AqakojnlCh-*)7j\NL*GcR7adcR%n?5B54e[D2(/hTPrd7qfX!%5Q:-7o0/4GlBOU`b7f0/N)Xhq%,m:#aG1"NJt;6.RfncH'b#(p2mJ<LTR-T7^\#)71\=b'k3Pneqg!(<Sj<(,)?RpP1rt+_bkD`Z%lmP@o;@_8Z`RSe+M>3NO.#.duJn>7Va[^aH<1&mLG4e9sK;&cf#*I;BTBL41hjDenTh8Js5N2=$dTr>aXLEu$-W`ND/sd?ZB^Dp_%=-IB^KLb"9$jVQjX"Z0Hf$C4bqB1TE<INgOIDl_7C$q_9o-b,Np`N1'YNEpY+Pf;Ae$NW=+1/[a\i?*eEJ.X3?Y%U"`"]E?+@YtR%aWGE$aZWr62EsR`We>[[`<A$)n5#M^Sm^MM>e5>GZT\=,2E4DhN,#'4;5=H8cN-r4QW]A6et"0u_q[XDI\o"<jfNfm_;oA\)CQ&.%.onoB(':58==MQ,o`r1eJ,[6bm>EOA;0ji2UaO+'6L5-.)LMeAY7C#^n3@\@5Ggba(uJ!+@d*RnDoV$a8h3'<><"c@S07\djjUNb%,b*%H8eRX`<bX7A76OCl^(*m[$>[g@2;82E]Yr"pqXBAYm\$LlAr2:jh,C:)JQt-UJ6@g_n2s&2S@u*+8S*jVB^C_'6An%Q+q^aY%D\X"O9OYI^Aa-qgb_0Zs)iH%-fk)>(*i(8Ar#9eX6&&T6JoW^J-jLApE(%$NE4t3j_9l9ROI\.&5Au?TpTMKT^3SAkJ1/MBQNMR>%mSmGGr_!aIg]US5)_2h9S7+fZbW[_.nEJT2P$a#_<G"00&KU8s!+P/GVmV1)NV\due*5L#MG)h>2.Wt7*SV!Ld(HFD3+aA8JRR?'%_f/O-^J/1u1@YQfUYVEt:J,*FNFMl_%fNBTgPf7<Jm:j+*pc&t_rgS01VuT[;0AL/4>,qJi(#d5#>u*]am_onlGip;jC),tX/N_-%QqD=)FZdb"/c[66iJF*524=R2CL^gTN%?(d?_E>nC_GSbU0/OSm=TW.ean<j'Y&t:b4SIZ.mo\J6jI&@fuZYsJW$83(]mqiktrL1%Yu0FLeK"b<R&J14n9OH^]LM`6Nl;,18%jXQ[@_rO&br-L6-_OUj]R2dJ\kT^EmV@!P[k3DeG]cr!I=[j$/=i]TlOJ-&sSt7`[g8A%MuCRH<E[WfFa/n&4Sn\_ABNoUM9upEXBO$UHg8_%8E*HUp4'K^YANY+m:f*\`*:n;n3g,,]J&S1:IX'H,P_5DgD43&92Y8Fh0hOi%<^hL70(3l!#$*Ho!3,2dRfR!MgEDJBBS2brd?3=er>AiDF[F##,OCoc+s&jbee^YqOeVgOh`K>NMU0>Fon-K6e6:.8:r6M("tJI=%>HA\Gciua9cTW`rQ'3(IHL[V+^B"aOD'">t^8q=taUBH(GD6WI+j[SsXf4%SW11a,;"4YMRG-$H_jP]UVJ;gj$cB,OVtr$Yq7Oq<%MFj&F8SagXcc5OQbQ%IO7t1>UDhm;pJApn3L-!B2Dna>[Y:!.@\,b*e7eY(@q(eAPJ;Iou0D"k'kNgd:2j=3l2p:4JqAF0b[(aJJ%O7SReq6Nh-MYqep$1RKQHf;?K6csVFo$&8%pM4+Wlap6pT/HuYNue.B7f<DcG\7Y<IJ:G4cAZ](cs$nIF]uMM^]2IbrloY6TeP7b%BQ,fh6A4jKDh8aG5bCgHOc8om,ZNhbi&&=9>eLjR<Y*.Z*F`ajXXQp\T=q6#)E0b9M(gH@GfM;%b_N-=%m>f!it,#HA&l0(?QbZ'%"O!!(i!'W:!:e[dd"Ge":)uk:+Zpuq`pb`+dD`DD$CRWr\o[aid;oeA;Yh-TPkK(o!reQ9[3W,B)M%/?UZOqK+!gflVoJ$)P/kVA%o+A`OQ;OM1km-5NCc]fOJMj?ll6YW\]*aL6X@TN/,8-.+XA5Pf+D!GMHG#^o+5[r_r'aUpA9S(OrS?MHHg\AHG96usY2nPLSajuY%"0Ff_o&9Mg'n/T$<L)!^1HE0CUT`UL)0hdO^OEh`clWCKk]orXM<sr\Wqis7FJVVN@:'_#I.qWpI`7@lT4ZdL[Tr\-X1eBLmsaWZ%;gnE8DdW.]OF/j/0)W92aI@aq@k_7s5NAqs`u9>r)W+5_2q.0]`-aLrs&[eAQ]Lf([.Dq:`6X/*"73Mjm4<QLE=F*7G1b4t!@\7i%g24i,Q^+ZCSCLc+#n4lAfYC=h*o-iRm.fSK1-<KM2s>]r*FU#dDMCj:jb6q^cY!Y7V'Yks_p/a[$7s6nN;<cOZ#F?X:=h8LJSirE%G5V/Rf67Nq+B5,G8TgLCr\9/nR)ohqmJ>)-$7Q*,oSF;9cGIY."-b,3HU0WJWtH6a$<>DLK(VsOJi\E57*h5%?_KrT0:MLtell&6%=I#Vn5>"lB!&mF.JL9)4hEFMO4XQ#@7)U^*rhS#$qI6\SUaP!_"]C5Dki:Khqf^Gep'^XC%hJbjs*4,pnscM`KIA%.iq;0@o9[kP%Q&\CWSU!GK]_MW?OJPtR;IV,jqo3!?JipJL0+LDp"MW)=4-h<@&K(Gn`.+3'?brJSgWQVmj],6'nBI-n`O2`DN^gmgpc#8MAc:pe%k7),Q4?ROGpm\8Qna:a2-]Du@_OEd\p?1iS-A2-M/%g;`2oG2t!!B;aq!WTl$TuToS+Xs'+aCD#m@1hX1iK;DgPP^N-G>huh^j:'%ajGO9I']^,Y.f=Tju<X[=j_0N_S:S83L._GA$BM*[n[gD.5rZ!`NbB=4F!A<<9$7cH!fF#2a/#XHJ^saGe%i_8mqO[4c1ImS3_:o%LMtuQ%i(XfZPhcU;QL:.c0^R?#0R#U)Y+=i:E:c%kL]*`X3s-lieW5m?$/T9fp)?Xn9l7e6(=Aa)[D(Uj;4gYQqK!T09>,UAL`HH%'8:bD_]D-C.f_iP/=3fNjh1"`f@BYQ)1Sj6YJ7XQi9S:o]Yi(?mBsMerYPLWhqrjE&PZF1I.K@JI60OI9V]'1md8MO1Paj`p+P<'%@&,*;I+*"hr:DI&Pgk0RpO<)@]Ze*KprE+:kiJ:`]_gF_;t1Ie#E4Odrm+TK28lZW$-6k%S\?J5?m0\f*JI!7Z&EqWLkAUHA5D`E%I<lO:VRf'\%U%s(C+bON:0_*K'9.>pV8qW!8gH)hd?Ed;#/QQfIg%8i\A^I)jGE7'(?_W[74ej@=>\u_5bF":W0adGO^[I&h1cpD%K-)usY:"*Zn]0.;$aPGIOTs7QLWA$^F4uZ,$Q8>,EABUTmhR#42?GiGkg8tao6qe5q!pq)J+rPA*`Q()7Sn$UKRF^FD^DlTo`C7-%`<U'hqu5oprQ]=o`#[p:q(eLiI5a=Hc/UGjhA8ek(4k#raPW!R2rEfCQb6#dbOrWbq9*]KiS1:/T3\$cfkU$Ti4XZk!K6iqq"=Z,%H+ogV?g#Yfan9NeIPY:0(Y7-G]`eB6J((.@5QB'!n<7)fEKM!>7,4/,c/_-RURFQ`,TSa&:7I.8iPt."rYBBFN\PD@7b9S*JZ#[`%gi!8-?NS)__oAhngV_3s6+N`:,Lg\8;"^.tf#%O2r%;`P?\@EH,O&:nlk#/3;7HNONiA6.'u3TqBk&a/2t=W&pQ<;D"9[*aa_;Eb%+^Un(rifbIPlK?)X8=!$h@#"E=eeDc2O)A^-7IjXgI?h?n[G[&h-;HcN<.9FZmqr-98^/RjDG^TmM3lF"eTg#+Nf10S[22kdI8*J%)lP,>flVJl9`=c!4>#d2.8R.%W*+8?T1n*7hj>+]No^/?X1p-+;T\#he+dXO(7gaeZ4`>4Jeta_fH%KueqpihADs@mI<F*^ObSXG%'I&;ua-5lU3_[e._/a-^O;`m5OaBOO*pUu*Ji[*nenhlh&hQYU3\3p.DsBh/R0hDIYa9lBL*[+f@'KB-F\df_m#tu32MQ-=D.'5G%SN(Q5o7:J%<0?I+-nuq7cg?)>O>iV%"<fKock:e@`4MP.:D23@hogp"%%QCN(uh0>6Pq)h;bQ28o\*_3(5\7UW44"&(7;X_8>T1U%ie'+a@/Yo@"6u.RHi8'J-J0n$2?Ta/#5]W(<]5LO3ifc"<<l_^HDSUkc3ja%@+D5s[BdmXHi&q?GPX)a8ARfZEt@CBfJCkS0N#i>%r0+3.8t?TZ.I*VO`$YY&l(94:X$Vc@*JB(G9i34Ql:.rO+++/fnS9gP!N@%R&D?f.b\'DgBD"grW;TPW[6o=EWcJ2<^_79k=9;+$%%H".^9'VcP*of,@kL:=\9'RQ^oj5A_*I71#ED",E[,Sj?p_+a/e1ikC/r[a/*O7)nDAi]BRRcGhnai_%H*l1PE%p)P*Yh7;CBNkg%fi2*ggBC/NQ*V)fodPL%V?9jWPRoTmCLmc@%/HS'.O_2pkL$]1LFTRMP80eVo^?9Vj<Tn*QWJcGXjT'RM"`:/3Ji:BAZc$D,<<q*%)]'XMkF>5DbB9D'%MTjM$H'_N&&&JJLU5"3a"0_R74OF!Q<pkn,!bOE2+eY#cgs!3]4*;.<RT^%Vg2se<VfT5F:\uiSO\&4H5E6K%Akf+#3e$(d-M)^_.:*T9n^j/8^I.5Wl5s:Kb9mSK,Y]^;l?Tuh+]AgDkC(W9[&a42+F=iBDAL`@*Dr4p)cV]ge-rSnl]WT:2,e)D%E\s00e1s4AW58Rkp)Yb<`$TUSH`g2qQC\dMOg=(ELrFsiLb=kY]KekVq6q[ulca+]b6Q58&1ae&][Q1TU+3)+3n9_KZp;G,T=g0f%kDMu(KYe5)<6s[q%pl,:AXGJ=/Xb$DAAD]Y7VO6JP3ChSUt;d>SNXca0<NSV9InWr#cXFY1e/(V1B7i@XQ)Hs=HuE@,jFc6//qSG%r2.'5[q62_d6QKk*/mC4gP<@/&Km\_pW]X?!S]RC/M6YjWMFmH%P5RCT2u(%D,],0OLO4&'9\>BW=P:G+U1ICSJ9k/K)T]5Np2.,%5VsYajF^>#=^^EZRbCmNO^lSTQgFr5=]<U)V[>Au9S1k(e=/\.3Yui[l.8`EWqf:&L,0<0eQ&;bfWK`t*F#+!B\24&&AL+G<NTa4%;J(GU3]nec0qkYG+3[W'7n(7Qh60Mc;,i$b'p.0s*+:7.;Vu1TPY%VpOc&TIAoT1j8cW:&P;^28^L^I?WV40>YoZD;-e)l2U,So3%LFF`32p+%Uh<lID&#_QcauLG(*5fHoF_Rp^JN.KPRJmUj268fgok3e,,*ps3!C<N3@8T+-LVto2H+57sc9*#g<Lq!3HNOP/4!)q<%PKG-(-P)3eHd:TDCt/tPl&d_=KX6)jOYlqO\)tFpgmOkQ%$k-u,q\Dl_)l.EI2qs[Bu<-"s6?s3n@cZk"I&sb.'7fHb@gR4X_eMZ%F^8m%$Glh;F9&Ye2Z-Q;r_FkkFPLIC'FlrF\Ta[;a@T=$6M@\EYT&-?*9VG>&&0%k$bCLF<*>'iD_F;TE:]9Y#-@gT;26Khm8OSI%lDU`I%NX8R;>!bmlPF\M<iO+'+_'9E5P,VEVF,EQ,Ps?/(HoQ0pa9E7I5L05%$DZpW)VWeYkXgM`Y&ib=]jNVE<%Gm^"2o7"EiEF%hjjR!-j[lH@Wu8*>3O4=2onmV+g'C-paT]+-4ml-RmqpB;`uhflT.)4;n[?)oR"_)$Sqi,O8mR[F57ui/u]B%N%%Qo1mL0M,*#W^%E%q?TA6:,i?fdXtH-0R6F`]jAlR!,f>3(O:H.;V)1j=(B@SR6ri@1.H(&K'8.R6)u'?W`OMtu1DY[e5@#aJ8H^Tk@a\=aTK$!t3n%><Mm=!^9SkdgK7r4@c@].KB=T:XN%"A<7F)A<`_*,mk@@AHLN]j/K5`>N95(71&eN4t9:+lL?Cfj;JjB7;4[Tr32(D\\rbIT8lb]%;Q).CjkV.-X5#?nedjH-b:m9q,,p`m.]n%_E*II#>1YKg9q/s%A9(QMLrF%0">O@C=G&eK7HFf3fo1AnaU?49mSq[M::ED7SdRmq%SAnUp)f=FC7$ZkC.NK\%CBZa47`"SfPpHOTRcAYe1ucj-QC;/;X2GtZ"[h>/r!*cFmQmEN'naoNc8sk]`3]d-,H+eHaA:s=;kcFL%;ki9m):N`MT21G)p]@91)FE"!%GT_VS/VBXm^d4GC]R7qQW5'RFJj9V&A]89)a'ilHtm[J>V.HO@NLoJMT)LU?tDKqG;?bZ0qsH2%+n`Pt)>A`&]p;*.BV7Jk</]%u<bblL_pF\?eR.VhLd`aePHH[7_^Z:7[D7\/OL7+nLbSga6(;0P39tZre;@^JfQ)%<7uj(8qY@V-%X4>2L_jHDr`lR^7#nd_'@lbSATelnrPKFc,Rqh.^GGs9aZn;o>o2N\AMJF'hOl]P=&'rC'We`4lX!_%YdlHqb0KQeoq,komF8=<X%#*ZY7+kE$s%%TnJ43pcB'E3siC:Fu^R6XLOp5OI*1;M%->Wi@M:p$k?)M:dD4X4N+&iGDlVe&_(nU-t_S7l3*[cnZ8@T->"7<b=q%4OORZ?0?[%#R[p7&Y6L8U!19K<_Fu431I#g`K43T)@4jsJN,4`CZrPG1T_(_ZhFO@[cL<ua/t;Kk?u[>kqsGL&$602)6L(fe<-hW%5tK7GEE1<T:<TX[a=cdnr]+R!pnoEVNd$/s)33qnA&3R/C:Kk.71-!kgWCA++Tu!#kQ_thco5AAJn<*jUSHJ&miCP];oHSKjE_15%&o*Ek:4h/t/9Q.32OEa'.>6[R6E)Tn7,OaT#*L;7J)>%VlGMjVP=SPQYt*5DG8mCnC*?:NFg"Q[m59[%p!99BkH12A_-0^g!41G/%mni4OCZSN8&BpY&U_tb^d#+#1/jN<-8r$Tal;q8+R_#dMr7*#;3`nEOaP-X8/[0Aub/FD8ps$m)!FgQ^=oB4fNSDe>LVUDngW1(e%M\)3iTr#gd;dH/oG0'`^/utE,bV[6>^^J4ATsI"QlTMZ4&UUk#Z@l9td\A$D:RD!"/(Nj@b)/@lg:5G)6k\c'FnL=gFS%7U:3WD`%`c9(o<,iOJou-IAp7A0_Zn7/gTi&5RD$7MLStaL2$!VMOqhZZ'a&W7&SB\&@a&=,#^kJFT1a(Of9PApT+l*1P'-l"ZTKVhp*V-U\%V^XhMU7q63GmF>RaXgjk/8lcO*dQ#g#oug3G.[N-pjC/t+=j"cajGN!Dgre^XMTIVm?tO17?FA^XVEW0VZ"uslu3V+_/)WSk+N1q%e%Q75",^q,lk8FAi=s)#0bpc6n)OnBEjs/6kHKjFd,1M]'Z.elo&=`p'd?JPG@h7fa=h\8$`pH<KVT[?8WlT:lZoifG?;a+PVM-<%d!2p5CTNc-"_.#mjMTjrpp`Eu"@tpmL%iL`J[/-%7O'+,.C>oPp8N"(b_0T%.Hjc(OrStR.T$Chffp4?U,@'$2ihi<+Iamgaj^AT%65tQ$ElK(fYrb6jQN/$^rYV9f_-;?1Y\Xu2kcGm/>KZ/KOdLfpWGEA929!?>JLiAr<<6R?_.N3*HP894O;,)d#dUoVUK#[+"pAT,%Va=H_BS+e%]ZT#@b)nCc?A!q>H^L'7gO<NY?j0*a3Z>V"+Ijl>1sh61)TEEW<Ji!RcM(_!!$X;E.neV=%+(9EmMl`(EBf`%;HDjt%(mVMIrJ]C#p$!.<-sa+#R&;b"OBkl5KNL20:uJ\3W+T'<[YNXZ:3t38;I.L"&(rfeIbD_9cqo\f+$]D'Wh_cMU&X9";WC7l"]fUF%Ok1#`[R3D+%RWgN[X[MT,+8*L$,=\jH(mbTSJ(?ejBXAhMZq@=V`E*m4Ur;B[=YsBm2AY=j,0Trr!Z#Qg-`mlI@4K?1CC9HK6c7;%dU4>$FMd%WbCo.7'@UhTIPZb(1t0.NCdd"dqOn<L>;_O,L#UEBG<ni`WcXK<(Ib>l<4@e]+DGF<A?[4tolWWQq^80A-3=0DN;b3.%oC?;RCsqB*$E6uaH<:.3"beJ9JN!(LAr.9S6aoNEPoM>&d?01tq[9!6b/t1S'KWN.P9:`OOZuCV%]orVDeO9%CR"*XE_$dOX3/!G%XMD6:Ft*Z$U,a3^H;Ja]LB\9m@t)(-?#6'ZDkYVd4^3Xlq[pLkn?hCI`<>P7KJ(RSb3-A'/DL<lfC\L,)5)Yh/ec78`t0P.-'9sK%_/&<h9dKR/F8Fc**kq91`j2JEr]E>g*"5<e6[/Vd:9MZ)?[]RA4A<]cdh.i,'JY]S"tUbM*on5iKBK(nU@*V-HR>-uDV'n5J&jkU%>bAr.NuN`Wb1'G[r_[f>V:<Y%Lk.Xl6!+^pM8;jp/P(b7CSfK*+YeLNN_Or0JL#$]<`uRGC1P&.rjZHS)o]Rg0@sIJ#/tI;c=rTo%q]s5$7iX2_-cn),R_f6'>Re()/5o4WZqlg!HMmT!;]_SC.W-t%bJ35hMnK:NXe[i%PkY?G-RPUrGlblCBpos4A-#Elk%t]dE_NLq%Eb9:%7/OlmVt;2!=uso2h6T,f_dOh2q.q47M6r7gr8]YS>+0e,qIeesEJZE9$dO>ppH5,78%[Ig&Sk8alUjDR@_j-/a2?j6(NZZI%F9LO,ltKK"-E(E_[5q5%T0`h<>(MNA<TIn+[-(d`@daS?3MY>YPK)\nPDsSE61>;2:PA_P[*R9Z)DSgs#F78I@hc7rOQs%MYFH@:%DeosFW8J<tRJjLu3`&CHE.e\F:-Dac03q7QiFGaiV./jFT^(A;5/H55El:+;_F2cn5Uq=3oQ2,R_<Y^ggR-:hj/n$*Oo3Q>QFOJ-%Q?d%;Ulc(SY6I/i*#ggmhe*780K/(Ap424f$VK3TP*#CNiXdsi[fM%qcp_PTo2o#5'H_OcFr_^)LE\Hr`3#ld(_SQ:fU7U8L>XZ[%=0kL8:@niE!dYS3$=?(2A877D^BQo"]P9Dg/5h(#U&sj28MLEVFZB3A`e'"XK4!fmDGO>MaJu?(Z?_6@.mrGA4,L$]XGn-9CpqD.%jbS!g7*W12TVFo_"LLpt&4.#$FEe:X[pYXV3=E"Ye0[4#!gT8(-6l#<DJml)jK:3h`=s\s5o&l<OR5pHfa`PLMYJM@2m!?G+RMi"%/#"o-F98b:;IY4n#\2e@7QMeB`NUCJ"EKt9LiWP=cQgT6FPY[$[0?Oe7a8\oK[VLc(E7WZ<\Xh<NYJ4rJ<K2nES1UlP!kK=X^7V*%VRA&cOoU3<nHEH`n6h'*!0QJ*OlucA#;=9s;tU!g54RSSfG#p!?TkNdKd3Qm:ef$`rfia$a!iJ66\_J5Nb>_uk%36hPAAYJfrN#]%-\nTl5)p1Yl?KcQmlS':pMYX-V;kl5*+?!15`gargb<"HLFlF$DFcZulGC,k/qE*EC##Tc,-0n#NEj^$A-NDaZ&KX%UMRnOo`4bS%b)(]HWWNTsc_>X?hZVbH0:D#RE&u_1e`MmRV1@?fmg]dsT5UAJ@E+K'LYeL+Yrs#tiOB@Rr:$I\a*9##%'u/IA/0S'dHc;1-b3\K%N#2CD:uZhX3mcVC='3%jd=6qMe1MOb^upkn!?ede%juhK']OAPgG1p*rlu6#-ej223j;R!#MJ4E9^SCq]"DN@@YmKnfN_L=UrBc;%HU(2oU9paWehf\er0s(sli9AR<)@VFI=dCQPM;"9kmTjdr3:ZWi?me$K%"`K5HtV[?%IfNOkKOh_,s,pM7[inRNo';+7U_lRE15J%ZO,M6Z>)hfL@A&.]#BYHf)]g0I85p[5f2Z%Jg*T=$_;G<#J9KTfHi3@F095E*;D^1"AY+.=:][Nc=\EK&N'=7.53(FnDMY8i[2Rr%P.q97L\]KLCBQJ*DJDl;1Ea?dqQrGBS32$H'gr1f`XAf6F8DfgMGg'DguMB@J"J7pW$tgY;Q#3%hlJ08.J4#dT#kb?WI@J9S*hYL%JV_#>:#0c0S_Z[\#6f]Q'8r-J%W@MbD;$QY$K`f`V2A:3E1-i_Iq'3^=p/6S1D?Eg/t,o(J,lCSA,bfc\-,@a:mGeL:CG0H,nSAY%-B+f5']0KFk.Z:R?&+CK&3E^FPCFqXC6h%$=_A<:6\,J(*f,`>KcE7C;@JA]j?qZUFb8qZ+M$*mh#".Td_f&g2+*smPod.J^H"0q%,<aTLi^4(5k$KXaog)*<hQ-E`f\&LMGr"m8$3ff!1K;RiXcq:qV@QtN;f.[i6'Cq85G!;!:(JlXJb1gck%hCW6g;Fg-LQd*"jb.U%qa9sT0aGtcY2#$=%0"6IP27j$(Eh)OaGiE>Dlo>sm&-CtnhWk+m:R."J?Qm^1gI/!E`0uMn8L$QNLN-4;YN=0J@#F.[15s>^=KRf%q-%+#ltaRgG30Q5I]AN]$ja$TCN!.ZcEu@/m^2aJW(</$JSQE43<WB`3Z3lQo-CSt*ouN^^k2g7i^5oM1c6fU*oWDiFW;rEA6hk!%FctK#&Y9b2ee6qap%NFlQOd!<2.jq%JVFl/A@;QkSRTT8nTW\Omr>8(=i1J#ns5>8NfArZp<-LY%BNF5?cd4:b$8#"*q$b\X^RKm%Jj1$qV^s@j#iNb7Mi$ne^[!'O&9CE`)eg2>/?o9Pdk_j%>p\BVl?Fh`8MbiAM%m$!ku#K$OthXagd6mAUj./<?.`(pcT)qLD\PK]%3*-`68)43+WcBG4l7EcdQ/Hq/!EPQ<0",2R[^4Tg:A'5YB,$+1P68(qk@'"ZF(schB9R-T[e-5_m]c4tWbD6j)*`aRMDHGMXH_[P%Rejk#3\P)u"RnikLeS:J!!'4ArC%//huth@o$q&5gk&V=.'La(r[j\r<UGpTMV`GSkBg'"p0=FX.'^i\>oCL@iVmpiZ=(6E[7_gE%4.IiW%>[N(fP];P`<UbR8S[hIVCDQsmOi5Oa=i2%f1RsV3S7"-_l8Z_[,'C$0mj<qianNP#'BBeF$I(?PuTbD'e$pA&'5iE57D#l%S"\kuJg9_Ig[++\"BB4Hd)+>2O2[WKLhO&&?j,LOe=se'?^hFGeQJQoU<J?t7hIEK7dJp?%n>8c#oYc\g[N7\9.%7\C2]\&-AM>s%R.6U\4\@KfNA,,Tb9]%:df^$G_-SU4=XU_5h!u9QG=FqteX0deZ=[^2J^]S/"`Ci$#m08o^Mod\%q`uc4GOkZE#Y'U56[sCMqr%g%<&/b>]7keO[]7#C%sUK8'Er=J^f%YU#%U=oKC_jm(M9Qj+m1`"B=*/VMj-@=BE'`u*-1VL@iCOqn6:YgZgW[>He:'>/)j-fnj.5l%7,?-f=(0hU.,<5?\1F4e@7;l3RC^Qil65JHID]8m"E&u6*/IZjrG/##PNrrtEuuks[1@2";h;^EC+"4iG](Lb]WZFE'6EWu0G4U7%*DG\KU;3.VgUU"&epF,<eqF@3/Ak<<l].Zd1V+Ru?KGtGG6=2k\!hsA-rs=s""ND9nCcJ)!Kcj`>WH*4)a11`/JgHh2-@YpAk`pD%Xco*>,_JF-7MR"]B@EkE?!;S9T^dEdX4Zg(]@#r5LXR!JW"YDFKYmr<lDu:;24%$?L42OsOAfoL6rJn&ICMuS[/p;4`O<?VTuq/B%,L)Na.oi;?f?sQXTZ83Yj`uRB"i&iN%3cJar/hS<!db[R@7p2JUu%[a7`eP/e;_Q3\V+F,4',iCm0bkD_bRT%qIt@3k59TdE6$uZ%3o.a7##T0.Im89tEgFFb:G)2WEsX/uPdK=i2kr6/(%L<OXTs5IY3O'DE0\!N_>B.(=a'>$F52YVR$W<D"ik=HZl7cB7?OqrkmVo2%Lu<B4]s8nIknH#7/5T=F^pZ*Q')'/4#$aS_o]]=LMrAkG=-=k;gu'`lY0sDgs-&Fq_&Y+D^Gc;>CRB.p"P4X6mdasH@inaAM[K\1%`qs_4:"NrWk:.`i,*frKjdtnYJK*ue:$Z&Xf=>2[Ug=T`h".M`\[mQsF(ZKdZXcV20[p2:7bp=J:1)@kWZtBI/f:Y7[&LN7*0ZUa%iDo(3YF1@<LtQohI:YkQ$lW>Z4N6>07X;!3G#\T:hm.>[J>j+SqTTpI<cK/[=GrN,VEfB%3I:S)iY[%FSSl&jEEf)`^E.]lJf)<W%VE#<1=$uTmC1H,'9.LL9fV4Q&2N$:h(h;k`,n$5LEmelP*G(AIq-^4QMMjSdDUjnEK#P@B+\J;/[SK^jFjt%QX0B]OGcmH2e8:"C%aT9GV*9s6L6\CWT0ql*OO6s,>l/Hcc]!mVc.==9`$d1"U5Fp]+rB7T7V;Lng$H'k^0tptOUQug(U%&K?DeNm`]!pUuS7,M;=2B+t%=!2D(l=JddTC/tA?r1g<es<"/Zmr$cm9et6&o8T%08Ltf(\o.mWch`!(#[]K9q%^.+*>N?b[f*:SjYmK>*NQ6*2RO?UA\MdR$[_J%KOXM`Y)k#U6.i&iZuL'NN%L(LkD])(fe*qds6U%>DK3\!jH@%%]LP.kR]k)]=E95F;nh<hpV9:O`2Hb&]pBqb?'3sHl%rSu,CDdN%alg!\rLkiNW6D\r1"eJ87S&CY@*Q9a4"7kEh?Q(-W'`SDd5Y3TPVNk"?<V6Rb5B#gKXT[b%=Pd<+jp(SS!nc)l,N:^a8=?IjSBIC%'[EX]Y)7j?jnilQKKjTGWae57Tb)ig-<>Jt_b)^?:u$boqD:ZLY^0YGI!UMbjtJrCrpk:L&f_eV/:LWGO`+Rt@=P>3F9`8hekXG=%m_%:C=hU&<899Zp+5:DFO?==S)7C39=jbb\!u`V9Xlr9CQ29(E*ff\c[[:kYG7iQ;Ofh[G^1VNm8$E"sMPXKR"U'V(^FKnV>&WN,%hV,MHLPLKdK"AF)94k2$cfIMKBZK\iU\QrN;57[GD3_9s^r!;9%o7hr;P\=mq]JrRglicj\NLHY_+uF2\gm3GA<qOTarKgf!hrtW%UdWoEB)&Fe:ohX'(San=YsC%f7\5Kjr7'hcY<+.meO&\ZNL-=/#Tf)N;r*Arm5)'gS75NX]G<F3E$V#$X%GDpafJR0W:H]LV/&Pf%PlWtHdN,7Ge"eufV"7cbSXTg$rI*k>E]9l?hd86WKS'too'nUM<aDXrK(,S)]YqmtJd:T:j#/:m=bj?b2Q=nrL(98#l?ufJ\cnja%\-p'9b&,+[C_g'78TmMaMVC1=!fhf:\nskP8H$(O<PC8FcjWdhG@6o\3[39R?83u!UPiB_"7AL)^Vh:5ehub]'kCQjSf@;ud^.O(%Eh+`)@5Ae1@A[Um>.>%0jl8-8hrXPr]bT]k\l_7(.R=urUc!n&N:i08IE4'D]&0+'0h-5lVZB,<qknXodm$,1#L^P<3c\Jf:l0d=%AlsFUES^:aj&ottQO\f7iq,<JX9[Fd02q:k'6,=d,.$mqVm>IZj`2`@CqZtIH(C;`6#o>aoQ((-8%fm?!AqGd\7ck5R[=a:R;mJ!%Qo#7+HJ]l9URdeNKU(@iPmc'O$rU69JI'0#c>K/-o0SG%.>V6NH(8W5];H$kQCK^2Vo:fRq1[Xah)$K_QQfEZ0uibWf]Zr?H\pgC%_n-:MP$A[s6rF"TPdn+lZ)t#f'$Ah/6U$)C[laAtTEhI+dOAYbSua#!]t3'iA_A?qW]OTNL2N!NR3X6dG!qUh,aXLlI,OD3*\?uk%jLDdROapEJJ_uFGF:pNsMburL`U79<A\3aB"cVR\@#tUA:o5M+eKaTbeA<&N'pE0TN8T2qlW%-V!:g\=1cTWF<"dah;@&Csdf^]2%T'B1CUB`:]#(U9cP,4'`h'8:5ml%(l#.E79e2g%N<93TA$1HB;S[KY0G#>nXGe_5hO&9qcN)5`&dSE3HaJh#^(F`l4)+\A_oWZN/%RgaR*rok18PlId;$PLT0Q:`pc5l#4j?EOc]6"'!CE)r8R-F%JfB`-?oG5;7XT`_Z$,a;C0C64Z)0]c/d)K_/"l;HsRm#p=?X$gkk%hW0.V\emR,gmKTeRf[.AVp!V%+M7N9],Hs-PY0SfF7fD_^-3O/)5Q[kC,;^\Ronl+/`kBSe?FZ<0$mBT=/!*6OB&X$Y*3$W#>P>T%gk(D?T[QdU*'+u/fJA-6,*AS-kRo_p]Q&ei?ue$$fUaGRN-T8'kqgC5Y-aE@'[JM)YsK%nNe1@FjG6^Wr.m'l?'9Dh/IkINE;3q<%8+-@j;>suqrFAU`#5#W=e4=1KO^8?B&>oibfp,bik8-Nr999\&#Q=4ao_#Nc@!mU,SWWRlkM-k7b8mr%9K.-/FbN,Y12f@OR_pqP%?"%_?[]N_UgHi&98ut5OX5XO=71Zrddo<O3E$?bQ<;V43oEFQ\R7iH@JOt+)hr@"WD;)0`iAQDcOJ@F_K1_RXZD<hTDc[BPni>e9%1$ACp3;I=$9(#nfbm;qP"aO5c$F*"*XHn$B1&%e[q64847b+u:$)55_*LA;4k(ft2XKdn1])SEaR-'63?Xhg?kDRZb+:=jLd`I.1%_;t6.0$hVFmNHSZAJ08$erNqT03el#kLDDt/V0a352o>&E]mMak^3Gt'1Hb7qKVjhahpQ$B0Img&=o39Sm4]r80[Z($L-K?XW\fF%#W0.u+'HP9Hq9`o/_0ZBZBeGVThAl5K?LCR<r]Fh!`.2_Gp"'bZnXi!gf4,GdHf([&n+C,^nI!DcQciQiDZNJ=^&9+$f-L)bNb<R%4!R=Umk_p;?uW=&$IF3f5&RiTV8U;tanC!qr\Pq,a6+nQN'T3k!&^t=+]P<2Z*(-kPPHl2!_+4D6F_HreM8s^_;uF'(oNY\\0R);%XJ+B82Wo$3`Ob,L"LBj^B8Y\:O?0qfL=q!fNXGka?Q).';8=t_&7fph#R7)cIMu,;,RQYod'+Y?r#mG&qUrs=j`n:=\@VXZ)2Z)H%/[]eb@`%A?Hd&<W1j-T)iS5_V:!_Ab$5O,3*.=hCGe;0VT9gNh(;J+9&X-UdW1g;gOW8St=ru:]V<-L>mmW_a02-AY\QWr'#8h.a%n%1WI.!1fH\i?P*qfRMi_Rp&ks#>0lp:#G2'ZS=L]j^1G%08[A7!5j)Uotu_^)Yrq*(_H3EF*&o]!NQ?&@.(Y7T[PJ$Q.+q[qEGo%XeVU4.oF.JC*n!\2$TrgM\:0aWHBSc$(]1hit:QI,LW5P19?4*+(;761DZaW;SL8^Sk:M=au5C*LD7'%G*8[fFRHZ=(Sns"9#O*O%^^rl$UbHRLN2;8cEY3H<8^ck>M5?Qf2$f'lJ1!:^s$"mZiek:%%OrAB='_O,G`$D2W0<@jJ$O!e>8:G11e/2-dI"*0VfB9\8"9oM%g7gcWX)LjS<_&ZmPfWFr4sDAqcQ(`gk,aNa"Q7rW"!!aY'F@r/,_#Jd7$Os"G*f0aR;=#s9-s[s')&or0<@,=B`X'+O0M`hL!b?!%2W,(X<Mb/?fTd#t&k-JU'7D-<UU)&*e(+s/R>8`gTeFZ-nrPHKh@a7Ur(\JYIE_OMQF;VD9bBZ%s/"19m9q0Eb>=?Dj):G&2Li'o%PtUO<%5(;0k-lTt8*D&:GTCqk,?1MVWRDEi'b'=kUo_q;O<QK9[bM8TM.Jt-*L\quE^L=PU,>H?NZ)J2&Bp:7Z,OR5leku!4Ea,r%ijO6J6^<2:Ua=qJI>A(0.&qg/`PN+`s+K#rp23A<K&h3[KKVe=L3s(>kZ,J1`<^HjG"?UBbHf9h:^s'f=Y\GBgk2<4"TW+?W/EBr%$r2#\(/i[`CcYT/$2r-5g)/O!$Ig[s+m%l09K\O)@V.(J^UciZ7E^GY*'?N%ZuQpl>i%`P;q`6TjHQ@Je?Kq`Yms0r\5G.iPO7mX%#1BnG#2#Nh+i1;<9LZS7-$[VH/@g^l,Z?CT36nufl00i9m%t>+4f0//W.O6[BZ<.+^Ch6Qj_]bVmF'gdjRQOo+GdZ/g]Y+^FdR>Y%C>c,5b/Kh&LSr%h(24K-:*GO;>+$N,PZ)]KKY0F;/_&EMHpAI>4L2lR=I[:VoK"S02"_(L;>6Pi/R?dMg"MI%FUU\hFB(p&]WP1,%N`t6MnGrVY`EcSQ#[dK#]2]j$(9FJpPZ-]6Ak&a=1S=LNY+<PqZ9\=IfC\?OVoXFG`>i)$q(3h0TT3C<.?)#.=hFC8'kaYX\b>lc%[6*DY%DRKE"EE+pnPb8*E(%rnOIemU!/[slIKXHeX"d<pZD^Eu^;0j7q*Vj^$lSOPh<?YU9\j2>+2tr$ZUhZm"W@N_D$%,CL&"lu%%!+qh7]dJnl_ZIuV_b+k0TA%Y:r0*`_Cf>e`fj+2B7X\=o-SD4OC#?T"<Ob8,0+'GZPQQ1(&>PEUNeV%_tn8E;\hsjm[We>OTE#A%.Re@fd9De!FlC+-7;n#2`i8b_VGIYo0?-aP!F!LQ"^d+3./nb2.C_a*F@?(Q[p#?rS>dg\heY2gWm(UAVF?UllHr"Y3Eg5nb2r8-%d]D_(M[5GV)GrpBBiFQ/=YqeeBH>(NL&abhWt]bL"tdFF;?QeqMY[`Y0+,A/*RDo7`'NueDA*Y6T/l2EA]Y#IA*Nd]nAi;2qJ]/V%KIC!DFh&ib?3p%=K$)kIFQ\nfqB)e`B*a]NC.[p!R.sSmlLKagqtCZEX'9-qFDG.CDMl$U8js:&J8(*7],EX>#:6W&Ak<A)9fLnn%,@s:cOeQ^?!Krllj$#*oLTEu-T=`LN_2?$Kf'*tXhqZjLU">D6l$F6<04$e-G`.(#4BQ_8/\bb1CMo<d9Fj=i*ai!i'U_6A<q*^.%9OP&#Bg%gd16'Z7j.'cuX-@=4(=/q>6=Oi(;AdM*chXIBC8BXJV"^YkX3P3R`C)h$>4:HM'pL]nX)6P;b^<-2?D#*&4Hh="]oq`L%MR(\g)CL%K-V(7mJdf_H<llbjRK7O<dWh`?k'C2_H6$QtT7P@-@ag93D2^8_,*ps?mq0<Y:,r_=)B3m?),A4U#s+@?KGsM7S2X#T%PoT?#'T3k"AKW]b7C>DR@\+@QE6WA/X'XeY^-PIgQi]*Y2&TJd*Y_clSRjJ:+f1'_\)<.a0i>fEq:*h)He>WGfsF_KN3(Z:TTh.`%Gn7rl5HIQ;:/+buJ2.<*52bWTj-e6$l/6Zs'IS96>#""f1:O;R$j`%-3iO2Y\u@,d$fMAVfAhpk>\f0(6.#bqpc>b7MPZt3e.>1R%FI\RaLb^nu9XWnp'f(<H"pH/Q2E(5+UaCT&#-IY0,fef;k6sGYBm1RPO)nIeYS!G7+H[gAq,N'@nY!Z<U.%tOau(@uB8F*/CtkMk%'^.BqhWI_RmEpB@4774E]&s>D:pj<H=OhcPN2eFZKiN)-eLrbeBco<u$>qJni'o@,]5.3'7Tj>sZY87!>P10%0#G!R-@C^rLD-1h%`o2VBq$p`V_2<aWH1pp.E5:hs?4PCp@rmg'hhY)t87MMH\P[q,geD9A9`)G6l;&Fm,^PP([*Qua6GMk3\9aCl`b,,DF@m9Vbou-Y%B3B86phOdBL4)CTNN3GE"24MPk9mjIlAdjsUUno%W]ZP-V]2U;+kAW@-UCf<_NUq<f3/Z0[Dtn5=US(jIFK6fa+4)%Eic)&3]@fo%f#l!4,F0W!\WL@'nQ0SllXAg@%A9>./L;K"Y>)Jum3lT^>5eB(bp6Br-:Zrq<qTI_eG&a[fdg5B7lQ31-6&D/b%:RG4\`ta*3Gm:%l\ZPjU47j@.oHVJU0>#o:SRtN3fPRPK^Y'm3Dg4t*t<;\;[qiqO$Z'n)D$;S-Iej].2POa-JpjQ44Qi/kpH&UUs#>snZgCWULL+3%DQV=eJaa4DO^ZN^eL5)a*BWr('cYe$/,@g.A-3%ACNN1%-;scHOErBs/3[e@iYSWjemm<IEgOS=W\e#C.YoCXL<CE<\\`\iN`)tJ%N":O]eU^'?*d$:?FDi^[Z!#*:9%m[J4A<QFY9Wh9C0uhB@Q1/kM5hD2]SAr%5cmu#J3C?+(PAefQ`QB:Aoa]d!D(Wi1X%C4"m=?3%QQ&^E)0>MU<57l;.V1,o"+dPRY)JU8Wkp%HZmf"k+.r*bUj<-Xa8m1>SYYIN,YH8toI3^aqD@lqPBa<#.$]R#M8WL2'-)Bulf9>C%B2Ru3AY52N0?P^Til`gL3$%k"s+eA?X<-h\(=V)PAALT%&V>/IR8Rfe[jB@bUMJ8DkC&`Fl5mU3JKd^e(#AA0oA$rt0>W)C+Zndb%=1rhD9CdoBCc0?eIMR,7AW'qd!4!QoI!q#D7;5g*!#=0B97-LgWX=jJ1.1MbKIVq3)^87,(lsYrb?VZJK-05A0`2pGf6H&I"2*($%1R+-+AUUXFZhq,CH/<cTM4$&Q!./0Ibn9=\ki.#0)FPM)0V8tb:9,(KaQD)ket_JEnEXe-KS$U3U6![&9<)(V".&AjCp`HGW2q[6%p$=Q6Z4e5;7X][k]j"?jSH];r"S#4O)9EH/DP.K.U4W^,2N!LWL_<5.A.,i@<1CR/U+&@6!!*?WNi]T19cu#@J]/B!-cmZ&VH!k[%N.-d,j)FAIlV$`/6s\,p\M.<^G7,/F_d.B<nuiYA(COg+5-HG\+\=$QQ^'t6FDH:jifP7Pf;nT>q[t.4CP;>eRauq9>*8Ff2_O*[%KGXHR?jWMRV7rtY)hc/aKMZ0<_*\4\_&N7h)(kP.7Mh7+[XkOme_Xun,k\-9-Mjr+-]go/j52>kO<kG0ojLpqJL-is*UHd>&B)^4%D6D?NrT\:G8<)7u!b5*?-<]sd3nu:oPAIZu!)SqjS&GV"@uh^pgTR3?B2s-b[7$3$=V\d?j`)(olb#p>iRoK651:\i0u]Z%8DR/k%(KjCOmq0eo7B<PnBh%4#YXRhc#$6h=)*#mY@n,>h3Z+T!SY7RbZoILbWt3TZZCEt10pt?L/29_m7R+.RM([!6;aKir/g`t2W#6VI%FNd0m7.Qr)0AOOjP09MNj<H!\?HH$$2/uO+0hLoNI=9tm9f;1meCrji7NTm4RTgq\&:t$hfu^4!Nr<6gl$"UtWu3*mD>!6>KeOr,%-J"n`0%+4uT>A4bP`IGopU&K',09D@U42^H0tFHY=tG1&/Pp<I.(YMq]KuBEe"M4W-.kKlbh<QQ&.DKg.%$MR\ESkiLAJ!EEj""R%K1!k[*UJXB/6N=@jN@X@L7P&tEN"tLqFrMO.bm4R,t7ck6"XW6^+*L9^Z7\Z`S>bGWj+md[R;K!:QhapkDUf%B7N&?O[UX1"s#ne%i==BmSZB<$H"ULA+A>lk=/VF8RV)4$Y:PmI?K^agBqGO+-To'$dm)u$$c9EZp!#q@K\TrZ8[CbU5k%J>IF_WlS?+Z-Wi-I26A]+i%8$L([r5Y:n=GEr[F@EO*QD;K!f7NeEbZL91:VINHYfqQdc#&X[_kjgr]]G+E`+\Qp`/^e-NcA]*ji+t`APHb/&7gra-$7C21Hrmc%GP?:eK.#>]&a>?gKBHR,(l%Il/?3#=P&,!$ULkVMhR0QP\EVL!g&ise^r(4M)MqgK70K+s;+it0Cap26QcJ>LcPro7&h$>1"YHeA%^*;731cFKR1C&WOla^ZcRr$mI1.cnuF\si/8LC+,10\b$qJh8AUZ3Ks1*97]4V6>s5P3.jhX*5Q^NZ%j2srW@nADOnB`g*uWjktd%N'`AM-g\ICd63QSO=/%7*D>BIRl$*8A,]_>M.-=q&KS)TMcY+[Sm9[H%if_i@f#MH9SbFs.+(uVP-)=/\IB6Fjd-5^4X"A>@nS:`%LMa$n`Vm1V5g!_q<HQ8Sl<btm,Nf5-X&(XRDUse8Wl2]O0k;ThZ7;+:,eS7f8NlC<!)4mu`hP]b5MEV5+Ttj*%Hq-mC&q=,pUI:/%2tlT9=f.hb+5!7FDUO:3\C%*.]7Lp*=gtUfia:K7-r"#>@m6EG35MWLjP5oYM#%-(6HUh&<]<i(XO*VZD/WU"qb*5!\ShU$nZu@G%[=lcAePY$m.T>M3a,&((;IO]R"%-K*(R&p^hOtge=s;jR.:4'gbg00q8i@kuHU\l/7J4S8(ceBFACK6#HBgPs9jQ'a6`qLO3BiEB%(/d%kmBi>KSCY!B%`:9dGqIm*>&:#J/bUWLU=;]sg@N]sGJ&o5Q?36i2bUc:h(1/s%TYr;=CD#_.SX?V6@sbqUV$/t$4&uBhX%'9%)DZ`Ve-d3t2Z"kD7"".GO>Qtl(7'=2>d#"3(pEr(eUll[K(0>(5'Q8!lager:lSAI(WaIL2c014\%efQcg=f/_pgT4[d+WE'-n\h%ZXQC)oV0iXV(#A^=$fd#XZ#iNfb?d'@Z2"A40/E24o%P>;10nHAQRRSTh40Yo?o84i_/@OM2i?SM#1BrAUW!liSe?'U0$;Rqoc!!%@5+/8&^<0Ph?6g&MTbR4&J/+bCcZdHYAQt%=W*MB>7$Openl@bTctD=KN=okRGZa!\WTe446cs'!Y)beRlVC=XlJ\fPoGmPZWt]s%YRD=(SfpnXQCu]_N(k9G=c;*.'Wq'M8u(aj"-J0R'iAT$I+_g@^J04Uk9&\u,o<stW.-T4B&V+>e.f6#lHh_sp8bVsV[l*MBdZ!:%&:gZ,<q[7)iuFuIp$?F-g^`#![/+tmZ2If=jt>JU`quU(Ca4rcUlYS^Q<s@W5BU8#qj=,BRfsYErF5\JL=.;h01G>Cd5jO(g0@0_%/'_Znjsntc?g,<ESu]-)g4lHc-$Q?5ZM\Es^#]3WGD:^d+c71-cGa[%Zf>/jeIWF=J@;*Up%!Ve;PfX)1>M!0=HDI*+"R0?Wl.Io%i%<.%J:8l?D^Z,r(OmH"e8f:C0QMnK>qULV;49h?muf5rmPd2;SK[^$[LANYb>^7[X-^E+)/@Ej6HhN2KW'sEP^&XoN'9Ocp?ZD_%V'U047%mIT>54Dj#nIe$OtWnF44KZPm%"k1(l5Uf<#5Q95q)%E]Aj[ES22F\BVenc"A>+FG/iPT[E4;4`Os>oX^?>S\JJR(TpfD,%SI^9_g]Vh=OSi6HDPpf/Yg^3;OXjLN*IfZuMMd<An!Y#-i`F`gFG/?o:H(DJl`3B1Lr53+6F0T+fjUB\Ugln459,6s<2,CnMHXSa%qIj$%p1kc")A5o:'"E&+fGGu?T2cM*,ZmVCaHDRUmK#L'mAa'4#'5tsG/\[+6,BB5pe]ta#/q:65qIpp"(#/"<'DO(nOllJ9,Ls_%p/!EIb+asIR.Xpui@=[`?80feL/&?P]PPpG6^0'g.UQBCMT&.p0cZKGkJn$Rre-4j:O>s;?Hk\FADA$O-r$9^,.bP"/>Eh3\XUsN%.e02c7>GqaCklokV\YV6"'HdSPU@*#JkDN[[b5u,W8;UmJ/7B>h?lXF_9u^$OJWPtJR^,mj*-]&*q&Ld)YiA/#dKCGBQ&jZ9@:`7%in4^+4WCu/(O7%-V'h%^SY2LL3*/nl(=)d](%"dFQrC!g0:/$PJU`faaOEf&0`a*3j/b^&=bWEk73p%8Rb5gWeQ1pRnLV\ESHmK+%)JUmKqd`QqC1%T3.moSK:*3<N8DU0`"$hM3AA,tuiI.dC)Y^QAbH>#UKb=elF9!i>`Witf-./_C;3Z+IC0F^R?8.\4>Qe0aDo>"@%h<BR=6-;i*p#)riqn2m@dg$gUNK0H?NJ=\DCS:[dVj)/=i^Thd[e%C]W^S.AE,<q3NI"Xf7_bujH$tQKb^lJM].>0k<O/F3;g(u!%9mm;XPf=,K[e@>Fh]6<FK>EnLXkN%AGIVQ%2ArLGYB2*67"ToN!pA]L9WssqI]1j8de8jr#T=NH^%tp:]he//A<HXl^nP_!aFWR\%4B!*E*23b.*J6$s;UAVg*Hr#OD+(!\nYaba;Tt1A4YW?EIutJDShY$r=[Jn0SOr<m?sL$FJi[UG'lJh<a6,n0Y@NQuL]^Z%ce>A#%Y)Ig399Z=q1h;7'rSWOPnRs`ZSR_H=)\f;%2d+\lm]XTY@nBB[h8':8CD,Z([rb+.02>VPFZ(<So-4%G;KSH472H/.s0jN+[Rq30%NRYNu#Vp\uTKTsho.NPe@]Puee2]nZoFJDLF.adrS1>o.:dHu]WEZ3(&p^:A(=r[LX\0_a.`mbgb$M;0cE2\=e6mq,Vk>9u=X]Za%):-6=1:4W;D)&>^OlY3%L`BBgO:2^`&Li8OY)Z=l=Zt]+c>#7:liCa1bD>cKgQ@+7VV>kIG$=N`Wr4:dc"1REVF_m2<8/\G9c%jb%[li@_PCe"De<l.+c-q0&eWGf<k1+5`_B?Uh''db]DO`s_]Uq=B$)k=%75OS8RYKka.W^i[K)o(gk#-`p(AdQVBR893Q"XS$_fTZk%;PgP8c_?tt6@WHD(!e`C(A31plJ34))ZIa6"PJqW!smE;VNEF2<H^FhNS7P.k_7&:CD=q&,A0a5gn>9YEV>j0G'].UJ-"ocW<]S,%k[dDR,">f?#)80=I#q0-L@%iu(Yl/\@`^<9;MclsoEQZhnX)qUD*if]$4BHAmITj8XPYdOoAPW`(p"8q[(Dg*$$+`$TX$q$176&H%F&a#mcQr8T<3&326Hdi._O.&SKN"'s7!1UDOWOS(Z2#>nU)1nuP)_"(q-teeDDn'j]gU+M0geH`Y.?>Ai$^j9<VN5'1QOQV'TYb<%!(VpK=<W/rk[HE(UA!2M-m&*2SL"$3e_/diCDA[-LJSbFEcYlX36VqZ]DIT2H+k\JeH4[DDqraCm)p]=bK9nY+8Ye#9nCf"fkQBd%;X#!W*Z9E-e$,0KnrJ%=XALq[=3VI"f_2j2i2N]V+&53n-uJhCJ`"&]=L-1;%i.M0G*tjAQq$'-9q9FJ25KBGaPQm,*Ro9sW2[<J%K5Wp,cL^[VL!A.VrephjYgO'Pit^g<Eb9J:-`"o,V?!F[FN:`ML2uWdSUsD/*ZH?4A!"0GNXF1"KB:"Z-/<6@lBpBo"U0gj"9Gg;%fH7<dQ6n1ib6b=#rU-;e\F,</_d)I;QC-KcN?Z]Ih6=@Z[AqP"M;OF]FEp^9,u79[fu[HaQ:cpi`eISa7$BuMk`Y)D(Gl4LL[i^Y%L8@jW;$KXgM:GEtHeMnnb:0WTqhAT+K,No\$?>4TWoV9*!Z!L"]ue#abdA->nW'9M1%;&#)e'C0*aSI'7DpF%+'X.(U*-.*3IWDZ%GJ5]/>"\]=Cs'MAm.HmGe+!gBBV.i(%L.@bbEAdT:D)cRR=;lT=<j4F:YEf#VPX<t[W$0XSD(s*mf)ppmN'dUp[(2T`;]gW"msds%?N,`[qOdcK^]!K5r0KVT6k]O['E7GbE`s-^\l$dp6r>`lGE6.jJLa/j&tY2)q#'(;d0@;<%&/VIG(A;McVL's^'V`;%ae/Kne`pr%A!)5U?ZXOH@,)cR%8jqIC/ROE:dU>G6M[^C(V%VY2,Uu\F466c5K^OUW]uYH#BC@R)oPokAPlUIY#N3TLWE1&Oaf9b0u/Qhc3o0V%Vn;U6$)qSYPO#;'#V54)J)!?cijl&DrWs;[9`RaR%oB`WA%&<L1$m"(_IW3<@b:Y<>Gr!;K7D!8):VAO(EmU>L-qmQ>ebGse52"1%#dB4b_k,3pjPGM8;FA9Qjf@N<p]T4)P[&4#W[`V<SYMumCml@T3H^csXgiUC!RI`:JFBS&E6)*[lWq#+/k%CMjW^&l_H5d?dK5Y2%I7&g9pmeFY(2fE6j#Gg_&&1//*5m9n"NI%uBE^qX4ZkG8L89/JE,\2_0IdFk>kQ$,n4U0FH=12LOX$!D=?(BKe?DdX\O%_/@WuO0%0]Jr?Y6+tN%2H3a.\RNO:-8\AC@gV#jZl,j1UdG8?_?[<2Vcap=am?'&5s;_10cf?Tf#t3>muA-)EpDmM=1<8o7o"OW"L\k\sm42%.N#X%]M>`,_tm@-M:H:1iP+K.06rftiKM.g/"";UVI[''$acR+98k>g-kXjRr]Ls2WT<!A&I4,bOGqN4.1/9`nhHjk(i*GG.u)1#%)8HD67T`.2HKq\:WM*Km;"#QI!`4Vj_Sqj\kb6ZcAn*b;>-PZ:kkdoG*J,Q6_`cAO6q*W-jqE^j_.YWHjq:,aLiT4#JhB4+VndlO%/(jJ1/M1tp)A:Ib4N(WWYd%dk0WPK-8QMB><hINAO!s),LDVfM99o,sG\4?mZ2al@n_i7M0FY\&;7LW\`#N4g]7O$d-E)h.Kdc%!%(d(EnqXTZ*d#f?4A$o3PTd&Ap2e:LFYl5bIKrpp2k4r]l:YI@OLY0(.,'!KF532N]859RH'T.JcWSr@R'<;uB''f7FL049PWO0l&%!O<b_X:+Ea[@_oqn2eGA9[kZ[4HG?9P:qLthIZ:c<^=f#Ju_>TR_0K[f\;P9q<A$shqIq07a2eEDbc@kO+7it[:sO0BuWNN1oRt4%*SsWj!Iddf"XV4l)*S5`["K]!J@p`M3p[Cm@3>DI`pX43[Op[([Kkm,HH9RcP>IeZ@kf1K9oqI)L]];NWaMn,icU6XS!FB^%ht;O%j$bG]/;jt[$H[br\:^fM!*#0LeD\0=i#S#N9)IbUjoLJBLn<[@3e/rOp'i3$ddh,g:O_ff.*E![Z)eIeWhggDf#-*X8A.*0fJ;@2%P6D'b2`ouTZA!'O\UrS8^BdUCbnf+SS!'%BNIHet+jkc!e"S"i/*l-DiD$P'R3d6jrq)m*_('_>3ke<pVg8d\Ei\;^38OT62Kp`7%OsJ*<$i1t-Z@E'kQC3m*9'JaO."FP`dQneE:W/oM5S6i]'$DR)rk6<X;,uES?IT3#jtPASQ*1H(%sN*d)m"ir7V'\77;oE7K#VSh%Fca.ib"BR*5g4dRM5?!TWnr[CpYe]dm'\rLMG9obc>K*qC!0beWUtMG5hmUH#-:]Y\bcN*@))Xgicq+@1('^4/;hS4?Z*.)eO80&%&dt2]!-$FfCsNi1f=3oll!0&V;NMJ.p5a'"@aVE)kdY12`n_6a%1.*%A=0SpVo)2Z;K.ON2b(Q;kg&'Oll8Gb73mDbb[,&&%C!*f%2i5.SZ:9a6Q'i2pOobrk[K?rW9kJ+?%SB4K8c+rbPe"Rl]M:L7P'?a:eK^*d@sR"E,)+R!6TZdP[?Q62!cO;Y1s5Q_Ee>FD?co8e%[eSIXkJjE<^G.qPh<'`G[hVKrI&%$MTe,HrgHSI$WA&]7kJX,_ipS)#6e(]G9n$%^Lb6p6Z.SH.Sl#)$9]Oa0`7d5H3*IUV=5BJ,%*[612q;E**8gElH6klO<1NZK0b^m,tApWW`$2Gb1#0Y#(k9P<1-'A&IG>_uopX"Zr=s9N%@pcsPA6Z*7-K)e,Q0`8Z''"(MC7t[+%YXI[rGs[/e!$,j$O@+=)Z2`bR__'LTCP4Y2TO0QfWU)JgA/KpPnJ01n$kFt&S]Wi8ce#63?)Z\iO/t50@M,9^%MDFXOfcOn-t.Mg%)l&67ma%nd@cnQ=O$iUFhQ#'XX4-;L19ILI-a+G`Q;VJG<C-WV%"0]Fmp-hbfSsVBKG$PY?:GL`%RQ(Ua=4/9Rg?ac,K%3XMW`F9%[2#8rFX1p(>m(Xp"1bt-4:7H5E/G@Lk!l\!%]ZSQ97j'f/PG.*@S0fLN`:Hn2L6?hpN@ZF#+8!TA*Q/aO;+<R#q/QTmY5N2)\(p'%_=#nDD@o9%CoD(0F87fmn=@HIR.CV`n_h]Po6/S?\jbdQU>WQgc-CFh_JYTkkN<)$`r`jkcXrs&<LiWUT&#jX=C7+Vl*YMAn)[)V%F#-$5bYph2TRP!UD/S]13f+oPWS3D5IrfopcE6=UlR_Dc6189\dPQ>i.tf%G7LN*p*tED%UGIT4h25gKkXN;V/rBj;&J"Vh1'._o%;I"0ZDGc<f_a7@ng!l?nqfXM^J;T6^\:rcK.2mcAO.3laPZhZaX>$A9j72fQTSoM*%#1uj)t2_uF-EJdF&-\`7D0</(C&bNJrAVr%A\*]'3Re4iQ+%8@_;&\;S`pmo5TCBh-#^t^_U^BQ+cA?gU*!"9lt^YGONha4bbi3j()hY]E?aH7(V,%MVa^#o%3gs>C)-f9Z^f^S%X39ftTYB4LepdKe*/X=sL(]d)^Gf(4hL>'QXRlXg80S+VVrH8-kAF*I>'pgZ%jJr-^=XK\F+S@GoLem)FL#KGiFfQ'Qn"GU<'?6l%;]5EAU-nMLn-YuJi4]mn!3nZk+DhO]^SNY1Y8&3/WaZT4TF,T)-QPW"4$i84,)&Sd6gdP?"E1jbZ@KNP.2&X8WgI!i+SA^bpmJ$,%,\KkqnYG-!<`SA<+c#U_h=#gcl^r\&QTmV4nqWidr;?.n5Q'PCB`%;"hu<DoLVN`ZDtiY:o1q#hr9;Nlrp\lBs7Q2K?Tu.#oY[$1%s6pP+O8>cXrtH3gNmZ>AjRlle;g)\ISq)pi#f:C!0Q/12M*M.m7C12/JIm%FTM;e^S[\q!'QXWm\4Ji?>+_&^#XU@+\'m\6`FLU7%XkfmY$DOL+UKlU@H)B:f?3kT/UaP7T_\H8X$V8hIDr/N]]]oIo5QASp8Mb3[ND'BJ0-IC0BH,s@m4d!/HNK%_i`4I9+]bki[S:VR%T,C8*S3L=^iSL7R@#fFu5p/GcoIr59U6LH\@\U0-BdqG^B7X*I,q]B=GBh[K7XC)Z:I;2l!]3dj5iA4r`"J=:U]IPRL$\T&#u4)7%+Ea:[`#:*Ji]_J9BBi0k#WGg^!BRlVR'j_#P[5Rm"Kd!N`m1`5OdqVN>DBU]Xh2&LjnZTe.C/.g18b9pC;s@j[Wbu';=0;gYNA9P%mKREUqgt8Mq-Y_oX!ET/OnEa*,DY@9U!^3U\3LK!l-)Oh:Fj\!PT;Ig9X7"[8:Cg#.eX62P=(6N=j=IcD7s`86;eBYYUSN(>D'n;%e#=MNq\M2J6[%'/aZdN68ma3%n5GMOOFs=4c)fhQ9,nY`V:T4*oTJPMb5k3r9l\!\]u\r(o,_9;rChqS`bKLJDe(;i1=lakSQLYo%6s`#"Y.J86o@.%60/"f;oI3k3BA.;o+W%o.b]#9YZCECCQ)SDI=#mTgDg$U:M&qkL^;l#\+Dq\:jXgReS(f=]kfqNUaOUg@G&tR&%'\79$c*S21T\XP\Uukq5@HnJ38Y2mQm1+=tergGk5iAmu0JuB(1'"N8SC/<(kDcTUm>8WU%"+!4BK=<Y#/Xj#K)=GGB(nq=OUshP%ONg8RqE%CgSi>n#CS'7aYn`O/)&FW%_B0=^W_;D.C3YU3N2JU8S"!R@PoMs%`geWZBIlRV`0FP<%QE>),_=fAGO&GGG3'1-hfnZt%3Vh+k=>(K;.:#U%Ydc4=JACV+1N[:GY'#`LX>]rbd?R-YbF[c]d$tuT/r3%(<.Q1.9`q%>[O<"CfLH[PF*F`oN-RPUV0h26"B,;^%PVU/.r:KIcljd\>AWd3@lu,_j.=fk`2@GSm%-7)HH)F0'.;9oVVoF67(!j6G[YX)H=h4`,?5oBPGFp@6)'P8p&7!?T;kLsD"TI%s%p^1:=T^M4J(PCfbA3!A$H)9pHHgD%cp,$kUp12\B0m9":4hP9lH1Y*]k,IXO`-K1A$'rDfm&A7r2_=0>R!EL*eR4a@$bX_#mc9jZ%%@D")DY5S.+HuAM'L.+(8U6%sNuH:n-)lf7;Y>bU@>f$:Srmj'8skYh-VPo!@m*(5'r#)a[&E0J\?7Y#5RG6apXfcb2^5dtm*H>]%J$L7pGHaX:6&lkX&>6B)YTm#B.X@Vs6;#MJkRg*LKVF39jGlAC4#W5"$B+8mkB=2:%aSTMP^_9:?DabHR=6_Z\$Tp7[KsIMWIcn7%a(>Z>ISFrnHh]>BrJ19F&aE1lF0CU6V8:h+?lV?]?Z7D<+m:Vu[Z%C497PiMK2I"]U?AqHV/VL*(nfOBrFT&,KE,lW\#aOL^*jji%6i9ZKq&6k8YYY;BrDBp%`tHH\5r4f]I<]Z/*7ejCWVao663cd,BPo8L]7OSLnd<hr'O*1%g-SY?dUhZl$'<-JK!N@.2=rC)_-LF?%$7[Q4'?9I_2X.L=D?2If$hY@Fc(l@p,I>I#V52`u?@i:VMF-=Y#kZP?QK"b`N:Xc_\EU,(H&nMtjFrnj^f'uKeJodQQ5rA&L=AW[%(-,BnH](H6VHs?*h0eM*3j=:c<t;VjRf2c#LhnBaTEt"k"D\+RL;'g(IsH/VI<_d.Gd#c%\4E1cC:c2OLOnJX?AL@s?[o2<(_-nQ%4@tCRrg9a]#rtK)D%YpakObV3MI<W8&qC7`!A\.L5Gfs@L+)Re9)1$M8bGt%kEIki<_q`N7Askja*m]%qb1Bs\spajmr+)#^4JUc%H%*7.Mf(NHVWM2`:]XGs&j;DT"5C^sY'_I"265IDe',H&Ur/46*I$YU^Bo%oau<^LF#G^T`(S/"f7"VfB-<2EmY7q2,tZ3l:V7Un%-bnQ$Ul-_6nJrU)5shO9NOY/u+I@ajjJ[PX6+s+<XMaNd?,:qofHc@Z@&1SibT#Xj!.)1*&\8ns&n*bJ=8gooV1TcQdS39$X_akG%GpKS^kb_Hk4<<bHH`E5JX)UThE2jVZS95sTl5V^,G.(VT!!,[b0r'S;;:ugJ%82sX8NKJI<8#D+ai*<K#suobbS]OU^-4DcHLpT*%P>4m8RsB^r3L2pBK\k08I\^/Z]",RYF5?SSQ2VC7;BmbYBD-ZUnOa/"fcZ5RAdP3J>+CY%P=^^GAf4HO,,q>G/pc?Z:[d"Rl`eUN%mOd*r"9.p&l[hNg@t:UJ<%OIh$6(A638Gn5RE@l30?0MO3uj/$1d*=:o;c.mZY#KtZu0a4/A=eKm!Y1>:[9cOBCFjRB.;M[(VZkI%*_YCOn>)>]U[m:+>k/Ki&1U,HR;Ru8?Ng(!V*"=$BY7>f%&Oa\i^lap7i43Qj6b(1WB'Fh_L/m,GV1p]@&j1t!_MhX7<4E#R<H&F%Vp]Hf@I9PM_BYCO(V,ZY3S/lK@eEj#Y-na7(7WN=Os%VAVDh5&TA5BO"@Taj+89M1\\JNYk$N1.&OJ()EBaOD_-2K.RB-4jVH&J8%gLmQB:7qHeEYs#RaOZC\.J`8)Rr/U;3lO$#)chQu/M]e*6/`I^?@p$o;@aCcp7A?l<Pi$:[J3Vn&AgZX&$Nd7;\aid6uiX-)fr(M%+2h<j/&HNYrbHl1_KV4/E""KnL=DU9p%<hm]dpq@Peq*.1KqNVZ2;$]/PLS"lKVIOLc'm)%E,kiZ)E"16cM9SPGR4p7Wst0K^46>%e:,m'c</nN=T;Tep02_`qaY]ffO=lWB*PuL.PDVB9?m":,F3pY:oL>dE&+t=HJ3Wem`Md9EfU\qe7i3CY"&P<gMS`@UFd_p\uV:"%<_pZI:5a"]7uieNnFkE3s2p-ddplHL19`SInTtir"\aM:4[lhp\e!WK-g?2HE&W]?HhKW#229q/R%)<#=7YlTD6>=@EcU^5Mef#<%Opeq`NNf:A>f7DVhUH@C5"J9:*L?H(2JmS/#LqO=?1BuTQuibPa"t'FMGf\V3C9<8a#?s6?/H:YQ-[mVZ9EiHEeqdkYJX=eSk2Eb%eE)!uTBTfJE"MoN7#J:$F_JD0q\@-ibdl;F^SV%]DWMFK;6<PI'EdJjP-r:5WoPQ/=qkBnLj:.W0,[_U]H2X;oO);>VR;qa6Y[q_%\UhC0(81LSRaKsa;09+f4k_,;/T(8K1E1]+/-N,JPXOHPYQ?jRr8@K0Iuk8.Mb$,LO`4N78ocBS=''Un/(M26=FOJFU2+t^;A,Lt%^Ekl\?tkLg<8E_mB==%`=b^ls@.rV)BCd_08(gsm%@_prj"F,L!KL[%AR$4u;Jt*(\Z>EGK,-!+Ki146SH2^-cDp<05-Cn/Dk?T#%JF/Jsg/e9qos;1pT-g>NT`@#I$s$P[_gK+P:X"FDFdK3+J!$CWG!]3>S]_sGFMZV4F;5$[4;le+qb\C-/?L]R<DCQIh'#B8Tf)&3%FlF#3(n4<t$j^dh003Bn=u$:qro#DS>?QfOmKC1`n2]1j*g)MYqB-DEou.qI(@@=3I\]aP3ciY\k,*<hnjmr*^7+(bA4H0jF\t##%\gc2UgX+Bdr9S3gB9!a3LMEf1%S8Fl!-u&`\U^k871%]4/\gHQ"#.lnr3`AFJME5XNGdE@AP0@-Y,"M+UKPS58aS!C('CBr(n8UK%YiK#]R8'c832N%neY)_!k$(_h<EbBCdT[;>!CUn7c#1o/!JFRfqMA@QJn7,`'c]k&h85.Jm5NDP_`,BS/$R*tN6omHAOE(LU.Wc,%-_]qu)Ea6C]a+3Qj877[S*st7\`A#:C?#e#,A!s=Ef*P8&((o6IWu$Z<I+=SeEG=:KJ+!&)7.g9(H_<A>RfckXfAEt24Rn@lF:fJ%5uhpriOC?'n,<dnnnnpp@\,2d(ikZ_TBYL/YRfQiCM*t]fa14*;5[\'CE,.mQW;*ijHT$d17Ld@ML+\#>A$Q[p(h-%_t0oZE1R+d%,njP].*VK+A[1sR/J`j#(6arVVA@rSZa?dtO'D`Y5r3r=j#QHedpY5cmc*7hId:QOhICi)#XFM3/LMAdoo#XS[N"RB7A3nk:q33*%;6=/i-G_([p1o:kN.q0]DHW23p7s'SNcKB&qK5h38-Pa<f,o;#FTaF_-,h=b\Q60c([,0s!3q7db]&2bCU4Lf+9!akK"/L*6]ZFE%`F.QFoP-[XksZ4Wrm"4m,D".X"=1>i1G,tu;!M23/G[Dje,D@*jY%AuB@.O\^5kFMJl1&B#JR>o;Ur#@.WdtT2YFQ*/K9##"LCPE%%*I%Tj5$XeE3XA&M&=um7Qre.WTPemM#2/q:Pm_/?@`Lm&@/(s4tF:.\W1]cZ)."cj4NJ!h[FKAFNtrAX#"=4"SnXs.b!0Vinh@M%j'h5"N'7.^[:&ZShIiN=aI2)SQ\/8)p&I$QR3p58gl(=LgKF>)WAfW(Pr8EYdb^t+4R@(r.BK<^6jDceKo30ThMg`Hd&(9N6Hc$$%%/WSI$o=_"3B`Y`kd]>gm@.QBPp1FcAK>orVQEIQ_!.?ZJpUjo\Ajst@A`U'fJ/Ko^$%G(iW]#*h$VN+i!biHAo:AOA1/3B\_Uqo%\?lD</U.QIe8K?jPWR)53O<44Ff!k'aflX2C<&uURf8=.#[GuEBaPZqpkgT',A,H]pmo<CmktJh<Hb"_a8f`l$MSId_iYI\)rQ>8%^.Mq9kG)3Q`)S!gKDjk2I$u5XaQGKDWL?b0&U8OgP<pKFGDEhrc0+'*1'FZ>k19Jcc13,/MBeTJQ>u0ElV<MR/qK=qX(c1i3ZnP%%#Z,CM4iRphh-&:CIAe/CSfm18`'-NL#/bcqDgt^Us-(2k2?p5di`PSFB+`gcg*!N[f<25VHQl%!DED_W>_8oE>UdQ$_h3"db;6h=%>]fBTXP.0gj(l<7I4=Abiu+Z*@"<&r?^Ve0HJ[mrQF(!.0dPk=(P6]C-F0M0e"M*UWo=KLD-lO4$NDMgW>:20U+Cu,X0E6hHQ:U!%._`C'Vd$cCrc"sc&'ibBH4\m8:;2c6cQtb'c;cJ1(jfT'[AE>tiudCiEsOJ"oKn6f#8ir!G#Ql9GsjGTSp6V]/d^@=bI/nA=bEb#%,et/\UNRo0N(Z$h4,C$6\>]#1@gA]r3!W_e+*Rlk8j'P(6H4g7h1m;?[g)buGTu15orcPXZQ.W(Pke4F.!<V1*0#rA<W:uV:9()Q%4R8bN\0"GfIrQE^#>:l\3SY2TH)<-$92LYnHeH_(:-P]rW=Z*A4M5]j7]QNq3Qa$Tm(fL5lKF*u(:Sbem_"S1(_*,VS$W*?d[F#'%Y-1s-Eh+$YdVhPPVDQTgp"+;P`nT-EH;lK+NR(Fe&KbI%ki=b)YHk\Y&Aib9Pu^g3"?MtnO92hlk1(SaVnmVZ)2"L)j`Z/`>#Le-%n#")$53N(Z1UdXT>173B<DKnFLH\7>>IlX2q7Z0UFCcCK#i&'V'DeM=S?(*:ORkE\YtV?>f[,Wnr&cQgN`2:A:8c+bC1c>(I%1$#%%Xr/C@^u&ui+J8qbtZ0qG,GVY&m9ERj*l:k==+Y',tB[FS8-`a#_0a<]SkZ,C6XShQ[YWebiZ)mp&-NFQ%6Xq`8iW9R/YU4):0H)%L$I&Ni\\rfih0u7E[4&!!&RTbbWrBXD%<VS+9G[kgR.R1To`5QR'VjNH3U&f\Vb:)'i+1b%eA0Nfmh,dGn1@PS6+W2HsB@*p9q.I%d=]GRnf3akPn%J$8^?Pf7e?o7@hn^1Kpt=C^m!$bkoiSP8XZ+o;B`ZLT44]XAr=be[Kmd.GG68A63gTWlN0ZGK)]/",8LPO('4VU%R0)\e0].,pi^BW^FAeSOX.-VlRo!l411;d(4Tm_9q;E&:H1?;sg$CFPOjPQ;k1X<PeKZ1ho[p]1l8.5*;hT;340t7JatEd9Y;h&*%3/`7C<G-Db6@c-j@Js=YNRek]T!tJYl<elBYq*JF6a;18,\!/Eo5RrWR\L4AP$D$A$p)'pdOIF"`Hu6>aJcRs\6B?o.YgM2HItaS%O-CKM$;"JH[lK^$*ilJ&70F+D#e+')Q:f2C;qHnq"H@3M<cM3J\&RXf@[?&Cs08lOMngoJ5HO7=H.]D,OR#S]A(Rc^>D0`%]bXL4%0D[)/So!D8:oq*iGW\[RNY:kd`q(cnn%LLLWHcs/@LIaJWXkb_CYB]\ZZu(LmhS-@Ec;<oKOanu@-olq>8oODYq(4qUj`PsJS^6)%pLkki0!Grgm2odd,'XE1ko5b'%u?J\3qL]N&`>EL>coHS3I@X$V'c;4A/3^ADHW(":,X:XGSR'L:TdW[k*2If4bT[#q;EAo0aXL9%'4)\rAidHCBZl%EX[m=8#+:H5L\I)iGL[>OUZFA(*eH1PULndEp4&0])7._C@GA'XLLcrp@0Dg?-FX:X\LN0$lOnQCBH2RZ1@9PP%:H[iCG*c:)1A)\tJuFbFX'Y[1,WVHAWZCA:D%f6OAuXPHR,JkNW'.WPO3]Y@%Z;id.X\=e)bYL84RFl!^8Q=2a:Jh#Gm8e_/,PG'%TE6<MbAiia?[ItkDF,tIi^:)$7q"mbSWqnED(=X2m3]B5)'[rgP$AD4Ng_.C+M4)F!Sm6eiXs)r*oZ$t%q5@j,-<$u^X8@I^`dnl%DH:G]`sOM!`H0G!O9WGoaPeA52C$K&kl=_H6LH!bHCc3bJQaVZnoPDE;>1mbRf00Dhem'X&2NN^K6QRKO4C+mC:Q\Ra9p5"eT@ur%RiAHrp.%WO,P:9cO!^i$(6I@m^;NI?pmue-nUddkji:Jt#ZY\\%3L?/$#UZhj[qqq6p_`'jMn]K,FJ`t@</CPk!,gK:@Xk9@(l'b%YmsaYj6JQRMb;]sEep*kp.23^(5,kIq%?!3m5^>0=-+D6_(W>[Ahhui:F@?*oAi(nqpKcM'KoG"7#:EFH<=reOk;[*!O(9s;K?k!%7AC-gUBi!G'MYXQ2qG'Sfd<C=Q;dAf?[3f,'m+*iF@g[;j>$UY+fSfm5[eXBW!C:e*F`LlP0"j-cWeu))YOB_JB6_+<O"]dK1;Z6%3km]@&q"^O'spI%ZKc1R4I\+4!jUdXCL9OTVSYsS!^QtB21^1:UoH[T[^IjTs4eU=,<\RW\&B)R9Damb8As9P;muLaaLcUqJiPmc%3!N6\*,7[@p-uqrM6!lLW@$XfL>S\d8oq(%5?@0,%<m3RA))&NkV%*hG#RW9q'%\cj5us'H7Cjb@9_N]dGX?o1L/b_<a6h6hWpq3%F`lO)_X:RWfS*/0H7H_:\a5O]FaTLUbX(o*#10Wbl/iRr7dmt-1XVSk]9%kBedF2[plQn98Kf4g4f6R,](4!H+9&42P>X1RkY2\$%EsYWcG:_m4D3gQfHQII)WQ8'Ck\Lj?63C2e7F&?kX=Z6$\*jH!ZZn2Jf@c[W%ItLFI)fs3a155@VM`@H".6[:d[&86<@WX&9S(sH%O-$X.%sD;IqAf7VXq!^@TLqBKeK?*PFGWU,@BVqXhJmI(*d5&DAG3Bq!D(TJ1ab-3rcClV]F'bL2#@V]9Y*H0-:ENFOrHLGZ2pli%RD(lfXaUJ-K%V>$$L'*qG^=TD2BUN]M\&Pug<=Q%E$E7daR5*VM+9h6TBRPQ5Oq3\<I#psVJK<n>^K'QLG#50]G)\PL7XYF=&K[8%<l(:4#^8kp!`3P2\cbGJoDl?KB.9"&?W.$/]+@>"Xg7UeqWlV4BFQ/m1=%8E.lNCje$!5#g`9XqU2HaX($6Vam/pBE(<PPn"dXFu%#^^AG*fOZr5Xs&c7J^'cmJ(iR7WSLSe8h(N_fM6^-;W[(JU%d4Q0*j%5sU_UpG97Y7t-GTP.ZFDF2[:?DCVJiW`($`6l4"Qc+,)3%>-rjYosm7Y^#m\_NE\=V("30D!_UftBgrhd8<Sdii*?@5^Q-O3=3pPW_#SS+N=6hqDD/r`e:PP-M"%$,dPB'#"]23ck0j!6-es#0%4YKc4G;X;7,PQ7JgcuCeqKqW:oQ#tkOnlOXmM]_1W-+/k1+!]Ho$BsOBusokI]diKR+l-_"59J\70WgeR6'`Rda!9+N/X#H#1t-G%7oo:s2*2tEN%M<d,CqIVB7(0:UNX)n?0X,Dd)BGM6k&CE6+#)noN6IjF'AgdK9aqapImtokc#$"N;M$m^mUCcKcsu`dU8+<Udi5J%3iW0]4Zhol1,9WaK5!\$Lj`PfCNla_p=sT*4HQgok/07N!H(W^J8j-\#Z_8=+.eUdN"-\ZX/lsrZ_':=0qjY$;KQQXq83;d"ZCUW%\jE$1eI)?kd=C:N/=h=hhCQDI8<&Ro=HS'Y$G6A\dl?[Ii(\'FSpXe]XV=4@e2]:V);TPcUNrOQk,Z4aSF9FcH&di0hIiOQ4;W2S%@+WV>b@?q)RRtSl`K]]d`8d/pT)o!X]^qP+kTM?E2=*5m+'sStO';rNMu_oG!P(B-;@";ii4!Jps.P8(oVdOaYE5JJL41n7BK?EL%*Y?WY!-5aMFQYB2fYsGToL&_8+n'JYjaO_X5#YqE.f^M<;@i_"`?pN]HQeq1Fl&\Jf;[Vr+@8N'1;@0@;Q:^T^Yl_Xe=hQ/7;7?J%!F?1@<C'F:PbX52,/QR[/"?s6Ft3k_Z3*TXr=ll2V\N^Ed&2ZNi+h/C<m(VK)\/gcbOhu,in9kBFB,g5,R@`nGBX0M'Lg#/PUe`c%IJs*#M;5iXmVO&\opX`I9n(t<3GMi(!c-99j5o7.GL!'&,8HbLYf5XiH6juCK5+IV]aPmuj%<N$#!ItM8RDXidA'*WQJ#A+d:4I[%jcba`Q7]r)VnN?\%X8LfQ$U2B0`re]Ld`aOEW1&qY3qt>9GqSk+;,lBG=/+S72.2%fT-T4;./OP(Qd*jJ4-7Z3$QR5T:aR(=,Ae&%_t8O4Tu>hMRk>jF"C069+Td8h-I6@rQ^->fA[Z_$h9(f+1"DKT*m:?W!fHJ$2?`.69.=k&rQ`l#lr;d%P7LiDAP`@0[6Q-%]ncGU%<Q0<HpK5j>:bM=aLUr7a%AbZ$B:IFNpjPkCp9;m912B.9bga4!`J4H\b6N!]++gXmSg'j/9)*QbrhKoI#%D#))o[5kLTkHVT6`ue%JO)0ME/tt]b;XOuN'CH-]TNnnBHN>M-_a/^Jk%F(k-+>>Zn2<g75fA]dZRBjeU@+ILF"rDj0DtFa#N*HBP*+!Vr[=)h.VZ?+[L>7%.T0mn[#MS=;pa0l"matU5XumJZ-=:hgg%KRFo92<Z>D7(+Pu>.F)C;*DH3-LG=Es%7[+m.((cg#`'9NC]L<.2`ZTd4.$C2k.Ufo?%>=8JHF+nu<b-!M$W_K^h;]MXu+?1ahjD?s34tK19A5kj-SuGeO)cEm4.ap^N29jEsE*j'_FAE?:qMCD&4k'Et65aVTHq_d]?_N/X%e0Q_fW;8dTY.7%h+Q\!KL"bgW[r]\-9-1m?fW#2W,Sf"OJL/g`o6"]o\m?l&.N*fCdXiIT\jX,B\?2Jdl;`V0fks^.R:Y40AfB#F%TmoJJ\"ZN+C=Ld@(uU:?]<&_!Z"U15kRqcK_"84d[b@(t&Me9F2ZPHBT@'e%iMskXaq\X:b_!lGWB+t%I6[:9S]XXmOL71=emO=+%_/DVM>/@[lNMC4UqVYG:P*-`WebLXThUb%d6od>0J4?nrL#I9Z4T?H+N4t8H0(nJL#D$:oYl8VIS$F>S/Hq$:Uas(mXK.TpPnRmB%F)=sH<scIMh,dF8E83U$?lR=AfTgVmmjd*_cW*JW(<2MO/EW?4W[l-(O#N0sdGKT+obbld(W?OU>`Q6-NRFB1OM#S=*hI%U/4<B@%_?NEQ)N[WLGne_QaZpC?e<]OH/mXf&(@1p@3r0HqhN]jF+]t3/AQ:W;rlje6X1FP3Rfb5\HdP[B*S3[[PM$B4j8ip%a(mJ2QaKVO%;!=o-8p?P]Wo2\jP2.Y*EMf:So[(>-J+2h]]nc3/fAc#bcO\q3qR>j9^\RDTbNHWhq>''kL[VtSpWpVSnfL)Grkj58q>'"DJ,9)0%0-<CXpu>/bI/`6N+2@g:_s`*Snu#iDqYA=dTE"/*J:'L+LO]'SDuT-2+9!(UD2P:~>%AI9_PrivateDataEnd