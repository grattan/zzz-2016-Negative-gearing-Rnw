%!PS-Adobe-3.1 EPSF-3.0%%Title: UOM-Pos_S_PMS.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: administrator%%CreationDate: 9/10/06%%BoundingBox: 0 0 421 424%%HiResBoundingBox: 0 0 420.2032 423.3975%%CropBox: 0 0 420.2032 423.3975%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 294 C)%%CMYKCustomColor: 1 0.5800 0 0.2100 (PANTONE 294 C)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: UOM-Pos_S_PMS.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2006-05-22T06:11:15Z</xap:CreateDate>
  <xap:ModifyDate>2006-10-09T06:51:14Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;uVT0oxEk3oUPxBQDTn1+7JSjgMzIy2JuqYxOQRqvtQf53+TPP/mjVNATQ9K+t22hlppLyW4t4hPL&#xA;J6RoELhgF9LeoG5yWizY4CXEfqRqMcpEUOSv5s8k+ePzL1PRofMWkQ+W9C0uVp7pfraXtxOX41SP&#xA;0lVVFFpVvGvtgxZoYQeE8Uj5UmeOWQixQCb/AJuflJP5unsdd0O8XTvNGlcfqlw9Qkio/qIrMoYo&#xA;UcllYA9aH2r0mr8O4yFxLLPg49xtIKml+avzli09bfUvI8dxqSAJ9dh1K0itpG/340ZZpEHsAfow&#xA;SxYbsT29xTGeTrH7VT8vvy1vdK1/UvOPma4ivfNmrk8/QB+r2sJoBFCXHI0VVXkewp4kuo1IlEQj&#xA;tAfauLFRMj9RSf8AMj8t/Nn+O9O/MHyV6M2sWgWO806dhGJlVTHVXYhfiibgwJHYjfLNPqIeGcc+&#xA;Xewy4pcQnHmr+ZIvzV88aS/lufy7F5V0++4rqWpT30N44hDBnjhjt9yzUp8VBTbbBjOLEeLi4iOQ&#xA;qky45iq4Wb6hYT6T5NbTNCsWvpLSzWy0+z9SOMkJGIk5SSFFAUbsfuGYsZcU7ka3tuIqNB55+SHk&#xA;jzR5f8tap5U816GBp2oTSztcCeCWNlmhjheF0Ry4qI9iB92ZmtzRnITgdw0abHKMTGQUPJ/kn8x/&#xA;y38xXlnodsPMPkq9cyx27XEUFxAx7gSlV5gfC1NnAB+E4c2bHmiDL0zCMeOeM0N4pjqemeebj83t&#xA;M82xeW5TpFhYvYSIbqzE7F2kJkVfW40+NdiR3yEZYxhMOLcm+RZES8QSramcedPJeh+cNDm0fWIe&#xA;cT/FDMtBLDKB8MkbdmH49DtmLhzSxy4ot2TGJiiw38mvy/1zyDpHmC0vYVvZHuzJYPAyBrmFIlCU&#xA;5soQk1FHIoa9tzk6zPHKYkbbNWnxGAILEPy+8sfm75O8za9rK+U4r+LXHaQ251G2haMmVpF+P96D&#xA;s5B+HMjUZcOSMY8VcPkWnFDJCRNc/N675Kk84zWN7c+areOzvLi7eS0sIpEmW3tfTjVIzIgAc8lZ&#xA;ifft0GvzcAIENxTl4+KvUyLKWbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -423.398 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 423.398 li420.204 423.398 li420.204 0 liclp[1 0 0 1 0 0 ] concat291.71 85.6856 mo292.861 83.8458 293.671 81.6836 294.042 80.1426 cv294.337 78.8926 li293.06 79.0489 li288.945 79.5567 287.14 80.1758 283.861 81.295 cv282.488 81.7637 li282.464 81.7735 274.251 84.8477 272.341 85.5606 cv271.726 84.7481 265.593 76.6661 265.593 76.6661 cv265.585 76.6563 261.839 71.8633 261.839 71.8633 cv260.566 73.4629 li260.154 73.9922 259.765 74.4942 259.263 74.9395 cv255.519 78.502 249.701 78.2676 244.535 77.7715 cv234.408 76.0879 li234.39 76.086 226.171 74.8633 226.171 74.8633 cv219.947 73.9512 210.699 73.0567 201.994 74.0137 cv201.992 74.0137 192.267 75.1426 192.267 75.1426 cv192.232 75.1485 180.675 76.9317 180.675 76.9317 cv172.742 78.3418 164.136 78.9161 160.31 72.4708 cv159.64 71.3438 li158.834 72.3829 li158.834 72.3829 148.851 85.2715 148.168 86.1544 cv146.623 85.7286 144.712 85.2422 142.66 84.8965 cv141.785 84.752 li142.21 85.6211 li142.181 85.795 143.429 88.6114 144.185 91.3731 cv143.71 92.0254 142.808 93.2579 142.808 93.2579 cv142.82 93.2403 133.287 105.688 133.287 105.688 cv132.816 106.307 li133.644 107.139 li133.697 107.18 li139.996 111.795 141.466 118.94 141.466 126.577 cv141.466 128.995 141.32 131.463 141.132 133.913 cv141.126 133.917 138.371 150.321 138.371 150.321 cv138.367 150.352 137.195 159.129 137.195 159.129 cv136.714 163.518 136.474 167.78 136.474 171.854 cv136.474 173.03 136.496 174.198 136.535 175.342 cv137.236 202.768 153.644 224.637 180.433 233.829 cv180.414 233.823 185.798 235.834 185.808 235.838 cv186.445 236.11 li194.46 239.538 202.753 243.083 209.441 249.77 cv210.101 250.432 li210.818 249.631 li211.064 249.364 li211.064 249.364 211.242 249.157 211.375 249.01 cv219.572 241.721 229.152 237.881 239.918 233.963 cv259.175 227.186 266.23 218.592 271.38 212.321 cv271.533 212.133 li279.5 202.838 284.378 188.063 284.378 173.366 cv284.378 173.008 284.376 172.651 284.367 172.295 cv284.367 172.274 284 163.161 284 163.161 cv283.99 163.104 282.958 153.284 282.958 153.284 cv282.953 153.233 281.445 144.213 281.445 144.213 cv280.039 135.389 li279.75 133.014 279.607 130.758 279.607 128.678 cv279.607 128.178 279.613 127.688 279.63 127.209 cv279.63 127.112 279.628 127.014 279.628 126.917 cv279.628 117.936 282.292 111.581 287.769 107.461 cv288.478 106.928 li288.478 106.928 285.582 103.1 284.91 102.192 cv286.898 100.25 287.318 97.5938 287.318 96.1758 cv287.318 96.0332 287.306 95.8926 287.283 95.7618 cv287.236 95.4922 288.15 94.2032 288.019 93.9825 cv289.99 92.1524 292.445 89.627 294.039 87.4571 cv294.089 87.3907 294.054 87.293 294.054 87.2208 cv294.054 86.4649 293.652 86.0723 293.4 85.9004 cv292.99 85.6231 292.439 85.5586 291.71 85.6856 cvfalse sop/0 <</Name (PANTONE 294 C)/0 [/DeviceCMYK] add_csa/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 1 0.58 0 0.21 ] >>add_csd1 /0 get_csdsepcs1 sepf173.669 79.7911 mo177.232 79.4102 li192.455 77.0157 li202.687 75.8458 li212.597 74.7188 222.464 76.2676 231.853 77.5801 cv245.378 79.7911 li251.113 80.209 257.259 80.0723 261.162 75.795 cv261.91 74.9551 li270.566 86.336 li269.16 86.8458 267.337 87.4922 265.738 88.1504 cv265.554 88.1075 li261.162 82.3243 li256.603 84.9082 250.919 85.2813 245.425 84.9082 cv237.531 83.6836 li227.769 82.0899 li217.345 80.8672 li211.099 80.3536 204.712 80.5879 198.652 81.2911 cv190.015 82.5118 li175.64 84.6739 li170.097 85.1387 164.746 84.4825 160.281 81.9942 cv155.414 88.3223 li153.455 87.9688 151.902 87.3965 150.162 86.834 cv159.628 74.5313 li162.912 79.2676 168.314 79.6016 173.669 79.7911 cv1 /0 get_csdsepcs0 sepf232.298 229.292 mo224.55 232.307 216.988 235.825 210.082 240.854 cv203.179 235.776 195.712 232.206 188.011 229.112 cv158.447 220.235 142.375 193.202 143.445 172.096 cv143.775 163.454 li144.851 154.065 li147.578 137.577 li148.324 131.803 li148.609 122.502 148.285 112.592 142.082 105.596 cv147.197 98.7481 li147.197 98.7481 145.746 97.0294 144.689 93.8145 cv141.687 97.7168 138.324 102.167 135.414 106.02 cv138.042 108.366 140.203 111.092 141.375 114.096 cv143.775 120.668 143.722 128.651 142.734 135.838 cv140.531 148.565 li139.214 157.959 li138.466 164.159 138.232 170.784 138.511 176.977 cv139.087 195.397 150.203 222.168 181.906 232.206 cv191.859 236.016 201.722 240.096 210.082 247.565 cv216.093 242.12 222.996 238.737 230.042 235.633 cv238.398 232.399 li272.933 221.073 283.054 192.891 282.457 171.858 cv282.121 162.749 li281.283 154.956 li278.414 137.155 li277.378 131.52 277.568 125.086 278.46 119.356 cv278.789 117.377 280.451 110.86 285.847 106.557 cv283.886 103.399 285.572 105.989 278.367 111.315 cv278.367 111.315 277.744 115.065 273.574 117.983 cv272.492 123.854 272.265 131.237 273.339 137.295 cv275.128 148.19 li276.441 156.928 li277.099 163.077 277.664 169.418 277.285 175.854 cv276.865 193.276 266.511 219.659 232.298 229.292 cv1 /0 get_csdsepcs0 sepf285.8 106.489 mo285.804 106.487 285.804 106.487 285.804 106.487 cv285.537 106.057 285.343 105.749 285.183 105.538 cv285.337 105.743 285.542 106.069 285.8 106.489 cvcp285.183 105.538 mo285.179 105.532 285.173 105.522 285.171 105.518 cv285.173 105.522 285.179 105.532 285.183 105.538 cvcp285.171 105.518 mo285.019 105.317 284.898 105.229 284.777 105.209 cv284.898 105.229 285.015 105.313 285.171 105.518 cv1 /0 get_csdsepcs1 sepf162.267 140.932 mo166.158 139.793 li164.265 143.213 li167.582 145.77 li163.597 146.106 li163.597 147.432 163.791 148.756 163.791 150.137 cv160.896 147.528 li159.853 148.288 158.81 149.237 157.761 150.137 cv158.048 146.292 li156.863 145.821 155.488 145.77 154.257 145.442 cv157.621 143.067 li155.773 139.606 li159.328 140.883 li160.152 139.534 160.404 138.135 160.802 137.229 cv161.371 138.368 161.699 139.702 162.267 140.932 cv0 0 0 0 cmykf160.416 138.315 mo160.802 137.229 li161.574 139.149 li162.267 140.932 li166.158 139.793 li164.265 143.213 li167.582 145.77 li167.576 145.77 163.597 146.106 163.597 146.106 cv163.597 146.108 163.791 150.137 163.791 150.137 cv160.896 147.528 li158.464 149.526 li157.761 150.137 li158.048 146.292 li155.785 145.749 li154.257 145.442 li157.621 143.067 li155.773 139.606 li159.328 140.883 li160.416 138.315 licp160.416 138.315 mo159.328 140.883 li155.773 139.606 li157.621 143.067 li154.257 145.442 li155.785 145.749 li158.048 146.292 li157.761 150.137 li158.464 149.526 li160.896 147.528 li163.791 150.137 li163.791 150.131 163.597 146.106 163.597 146.106 cv163.601 146.106 167.582 145.77 167.582 145.77 cv164.265 143.213 li166.158 139.793 li166.158 139.793 162.269 140.932 162.267 140.932 cv161.574 139.149 li160.802 137.229 li160.416 138.315 lif185.084 146.764 mo186.367 146.62 187.644 146.053 188.974 145.725 cv187.128 149.19 li188.269 149.944 189.308 150.846 190.398 151.7 cv186.408 152.038 li186.408 153.315 186.648 154.69 186.648 156.069 cv183.66 153.452 li182.668 154.311 181.574 155.116 180.582 156.069 cv180.625 154.877 180.718 153.452 180.96 152.174 cv179.722 151.749 178.298 151.7 177.068 151.325 cv180.433 148.995 li178.589 145.583 li182.144 146.764 li182.81 145.674 183.097 144.35 183.66 143.167 cv185.084 146.764 lif183.056 144.686 mo183.66 143.167 li185.084 146.764 li187.492 146.163 li188.974 145.725 li187.128 149.19 li189.496 150.979 li190.398 151.7 li190.392 151.7 186.408 152.038 186.408 152.038 cv186.408 152.04 186.648 156.069 186.648 156.069 cv183.66 153.452 li182.535 154.385 li180.582 156.069 li180.96 152.174 li178.89 151.711 li177.068 151.325 li180.433 148.995 li178.589 145.583 li182.144 146.764 li183.056 144.686 licp183.054 144.686 mo182.144 146.764 li178.589 145.583 li180.433 148.995 li177.068 151.325 li178.89 151.711 li180.96 152.174 li180.582 156.069 li182.535 154.385 li183.66 153.452 li186.648 156.069 li186.648 156.065 186.408 152.038 186.408 152.038 cv190.398 151.7 li189.496 150.979 li187.128 149.19 li188.974 145.725 li187.492 146.163 li185.084 146.764 li183.66 143.167 li183.054 144.686 lif157.996 170.053 mo159.279 169.823 160.566 169.344 161.892 168.963 cv160.035 172.336 li161.037 173.282 162.22 173.995 163.316 174.893 cv159.328 175.229 li159.328 176.557 159.523 177.928 159.523 179.307 cv158.57 178.407 157.574 177.596 156.628 176.649 cv155.582 177.502 154.535 178.354 153.496 179.307 cv153.824 175.417 li152.644 174.942 151.216 174.942 150.033 174.561 cv151.123 173.803 152.259 173.096 153.355 172.241 cv151.55 168.874 li152.644 169.159 153.921 169.627 155.105 170.053 cv155.628 168.917 156.056 167.635 156.582 166.403 cv157.996 170.053 lif155.933 168.028 mo156.582 166.403 li157.996 170.053 li160.648 169.344 li161.892 168.963 li160.035 172.336 li161.941 173.852 li163.316 174.893 li163.31 174.893 159.328 175.229 159.328 175.229 cv159.328 175.231 159.523 179.307 159.523 179.307 cv158.308 178.202 li156.628 176.649 li156.441 176.801 li153.496 179.307 li153.824 175.417 li151.732 174.922 li150.033 174.561 li151.076 173.854 li153.355 172.241 li151.55 168.874 li154.835 169.958 li155.105 170.053 li155.933 168.028 licp155.933 168.028 mo155.105 170.053 li154.835 169.956 li151.55 168.874 li153.355 172.241 li151.074 173.854 li150.033 174.561 li151.732 174.922 li153.824 175.417 li153.496 179.307 li156.441 176.801 li156.628 176.649 li158.306 178.206 li159.523 179.307 li159.523 179.299 159.328 175.229 159.328 175.229 cv159.332 175.229 163.316 174.893 163.316 174.893 cv161.941 173.852 li160.035 172.336 li161.892 168.963 li160.648 169.342 li157.996 170.053 li156.582 166.403 li155.933 168.028 lif184.708 171.479 mo188.212 171.479 li185.371 173.663 li186.46 177.127 li183.562 175.04 li180.677 177.127 li181.71 173.663 li180.812 172.948 179.869 172.241 178.873 171.528 cv182.289 171.479 li182.951 170.532 183.097 169.249 183.562 168.11 cv183.9 169.249 184.23 170.391 184.708 171.479 cvf183.132 169.409 mo182.289 171.479 li182.283 171.479 178.873 171.528 178.873 171.528 cv181.71 173.663 li180.677 177.127 li183.562 175.04 li186.46 177.127 li185.371 173.663 li188.212 171.479 li184.708 171.479 li184.708 171.479 184.509 170.901 184.369 170.475 cv184.55 171.02 184.708 171.479 184.708 171.479 cv188.212 171.479 li185.371 173.663 li186.46 177.127 li183.562 175.04 li180.677 177.127 li181.71 173.663 li178.873 171.528 li182.289 171.479 li183.14 169.385 li183.132 169.409 licp183.14 169.385 mo183.16 169.336 183.562 168.112 183.593 168.209 cv183.593 168.209 184.039 169.512 184.369 170.475 cv184.035 169.502 183.584 168.174 183.562 168.11 cv183.562 168.11 183.16 169.336 183.14 169.385 cvf184.943 195.385 mo186.22 195.147 187.457 194.581 188.787 194.293 cv186.935 197.663 li190.207 200.221 li188.925 200.459 187.5 200.459 186.175 200.698 cv186.46 204.682 li183.519 201.975 li180.433 204.637 li180.433 203.403 180.625 202.124 180.718 200.745 cv179.441 200.459 178.164 200.178 176.878 199.889 cv178.019 199.084 179.154 198.42 180.244 197.567 cv178.439 194.155 li182.001 195.385 li183.519 191.686 li184.943 195.385 lif183.519 191.686 mo184.943 195.385 li186.947 194.825 li188.787 194.293 li186.935 197.663 li190.207 200.221 li190.205 200.221 186.175 200.698 186.175 200.698 cv186.175 200.702 186.46 204.682 186.46 204.682 cv183.519 201.975 li180.433 204.637 li180.593 202.211 li180.718 200.745 li176.878 199.889 li178.199 198.999 li180.244 197.567 li178.439 194.155 li182.001 195.385 li183.519 191.686 licp182.001 195.385 mo178.439 194.155 li180.244 197.567 li178.199 198.999 li176.878 199.889 li180.718 200.745 li180.593 202.211 li180.433 204.637 li183.519 201.975 li186.46 204.682 li186.46 204.678 186.175 200.698 186.175 200.698 cv186.179 200.698 190.207 200.221 190.207 200.221 cv186.935 197.663 li188.787 194.293 li186.947 194.825 li184.943 195.385 li183.519 191.686 li182.001 195.385 lif183.66 143.167 mo183.093 144.346 182.804 145.674 182.142 146.766 cv178.589 145.583 li180.431 148.995 li177.066 151.325 li178.296 151.7 179.722 151.749 180.96 152.174 cv180.718 153.452 180.625 154.877 180.578 156.069 cv181.57 155.116 182.664 154.311 183.66 153.452 cv186.644 156.069 li186.644 154.69 186.408 153.315 186.408 152.034 cv190.394 151.7 li189.304 150.846 188.265 149.942 187.128 149.19 cv188.974 145.725 li187.644 146.053 186.363 146.62 185.084 146.766 cv183.66 143.167 lif292.046 85.5235 mo291.089 85.9766 li291.976 84.7774 292.826 83.2364 293.726 81.1739 cv294.945 78.3692 li291.953 79 li286.796 80.0938 281.777 82.0176 276.871 83.9063 cv275.5 84.4356 274.128 84.9688 272.742 85.4668 cv270.935 86.1192 269.13 86.7872 267.324 87.4395 cv265.753 88.0098 264.179 88.627 262.582 89.1192 cv258.316 90.4336 253.966 91.4297 249.523 91.8536 cv248.283 91.9747 247.035 92.0372 245.796 92.1544 cv243.859 92.3301 241.918 92.4747 239.984 92.6895 cv237.64 92.9473 235.312 93.377 233.048 94.0313 cv230.964 94.6348 228.982 95.5489 227.339 96.9844 cv226.404 97.795 225.466 98.8848 224.945 100.018 cv224.042 101.969 223.625 103.991 223.31 105.803 cv222.783 108.823 220.617 112.764 218.845 112.17 cv217.074 111.581 216.677 110.334 216.746 108.823 cv216.806 107.315 218.253 105.737 218.253 105.737 cv218.253 105.737 219.437 106.59 220.878 105.213 cv221.546 104.577 221.851 103.545 222.093 102.682 cv222.244 102.165 222.361 101.635 222.468 101.104 cv222.558 100.682 222.783 100.17 222.707 99.7364 cv222.66 99.4805 222.386 99.3262 222.203 99.1622 cv221.927 98.4825 221.339 98.0508 220.628 97.9044 cv220.498 97.5254 220.263 97.1876 219.933 96.9376 cv219.619 96.7051 219.253 96.5762 218.875 96.5352 cv218.441 95.752 217.369 94.2735 215.109 93.5665 cv213.8 93.1622 212.507 93.1407 211.347 93.2832 cv210.675 93.0704 li208.451 92.3614 205.07 92.6836 203.693 94.8418 cv203.306 95.4473 202.878 96.6544 203.001 97.377 cv203.027 97.543 203.074 97.6993 203.136 97.8477 cv203.013 98.0977 202.949 98.377 202.949 98.6622 cv202.949 98.8028 202.966 98.9512 203 99.0958 cv203.027 99.2247 li203.06 99.3731 202.597 99.959 202.511 100.129 cv202.371 100.428 202.24 100.733 202.132 101.043 cv201.988 101.452 201.859 101.877 201.859 102.311 cv201.859 102.833 202.089 103.053 202.334 103.469 cv202.263 103.721 202.011 104.6 202.011 104.6 cv202.011 104.6 201.488 106.557 201.478 106.577 cv201.185 107.67 201.566 108.272 202.71 108.301 cv202.603 108.295 203.33 109.897 203.429 110.026 cv203.775 110.475 203.757 110.909 204.023 111.374 cv204.195 111.667 204.449 111.913 204.736 112.092 cv205.439 112.53 206.351 112.428 207.113 112.241 cv207.044 112.698 206.927 113.461 206.925 113.475 cv206.904 113.452 206.476 113.567 206.476 113.567 cv206.175 113.637 205.785 113.731 205.39 113.909 cv205.39 113.909 204.351 113.131 204.351 113.127 cv202.101 111.434 199.992 109.42 199.843 106.422 cv199.82 105.897 199.878 105.34 199.697 104.834 cv199.515 104.334 198.994 104.049 198.824 103.573 cv198.644 103.073 198.675 102.448 198.56 101.918 cv198.414 101.247 198.25 100.573 198.042 99.9122 cv197.613 98.5626 196.937 97.2286 196.046 96.1192 cv194.125 93.7442 190.263 93.4629 187.457 93.1368 cv186.41 93.0137 185.363 92.9239 184.312 92.8497 cv183.384 92.7813 182.457 92.7286 181.521 92.6739 cv177.675 92.4473 174.044 92.2305 170.593 91.2364 cv170.4 91.1797 165.625 89.7715 162.255 89.0528 cv160.632 88.709 158.988 88.42 157.363 88.0918 cv156.265 87.8731 155.154 87.6895 154.062 87.4239 cv152.142 86.9629 150.242 86.4258 148.328 85.9376 cv146.482 85.4668 144.636 84.9942 142.792 84.5254 cv142.714 84.5059 141.595 84.2676 141.595 84.2168 cv141.595 84.2168 141.949 86.1954 142.38 87.7168 cv142.814 89.2403 144.769 93.0801 144.769 93.0801 cv146.007 95.8614 148.339 101.049 153.191 104.768 cv154.169 105.34 li154.394 105.952 154.621 106.565 154.849 107.178 cv155.46 108.838 156.644 110.217 158.007 111.327 cv158.976 112.118 160.023 112.829 161.148 113.381 cv161.974 113.788 163.568 114.674 164.523 114.467 cv164.25 114.526 164 114.592 163.792 114.667 cv163.335 114.831 162.882 114.993 162.425 115.157 cv161.929 115.338 162.636 115.809 162.164 116.065 cv161.484 116.438 159.75 116.678 159.191 117.202 cv158.605 117.76 158.869 117.94 158.351 118.565 cv158.007 118.979 156.806 119.764 156.525 120.229 cv156.386 120.458 156.257 120.698 156.14 120.938 cv156.078 121.077 155.939 121.631 155.824 121.7 cv154.941 122.202 153.984 122.934 153.507 123.85 cv153.197 124.442 153.269 125.129 153.496 125.739 cv153.632 126.104 153.824 126.446 154.046 126.768 cv154.369 127.229 154.632 127.077 155.054 126.795 cv155.248 126.663 155.441 126.534 155.64 126.413 cv155.933 126.231 156.152 126.129 156.355 126.057 cv156.195 126.116 156.226 127.219 156.238 127.381 cv156.265 127.749 156.359 128.112 156.5 128.452 cv156.753 129.063 157.191 129.573 157.66 130.032 cv157.943 130.311 158.195 130.62 158.505 130.87 cv158.687 131.016 158.939 131.249 159.15 131.03 cv159.326 130.848 159.339 130.463 159.408 130.229 cv159.476 129.983 160.027 127.907 160.359 127.967 cv160.523 127.995 161.857 129.467 162.148 129.659 cv162.279 129.75 162.373 129.881 162.548 129.819 cv162.724 129.75 162.83 129.471 162.91 129.321 cv163.132 128.883 163.322 128.436 163.492 127.979 cv163.71 127.385 163.656 126.379 163.767 126.305 cv163.878 126.231 164.623 126.417 164.675 126.417 cv165.185 126.401 165.437 126.569 165.593 126.084 cv165.695 125.749 165.777 124.862 166.125 124.67 cv166.531 124.448 166.726 125.03 167.16 124.811 cv167.671 124.549 168.398 123.303 168.876 123.104 cv169.386 122.885 169.886 123.165 170.269 123.241 cv170.648 123.319 170.914 123.198 171.039 123.338 cv171.328 123.659 170.904 124.069 170.515 124.772 cv170.394 124.993 171.548 125.28 171.396 125.514 cv171.214 125.803 170.095 126.387 169.824 126.633 cv169.457 126.963 169.169 127.403 168.921 127.825 cv168.724 128.159 169.597 128.25 169.474 128.549 cv169.031 129.616 167.353 130.534 166.216 130.807 cv165.855 130.889 165.472 130.922 165.126 131.045 cv164.599 131.229 164.972 132.141 165.019 132.538 cv165.089 133.094 165.421 133.588 165.929 133.881 cv166.099 133.983 166.296 134.053 166.503 134.116 cv166.488 134.112 166.017 134.67 165.958 134.721 cv165.757 134.913 165.539 135.084 165.324 135.256 cv165.091 135.436 164.013 135.973 164.101 136.366 cv164.152 136.573 164.798 136.733 164.968 136.827 cv165.304 137.026 165.582 137.268 165.958 137.397 cv166.687 137.643 167.4 137.561 168.126 137.35 cv168.49 137.245 168.851 137.114 169.205 136.979 cv169.503 136.868 169.898 136.606 170.214 136.592 cv170.707 136.569 171.257 136.895 171.736 136.827 cv172.773 136.672 174.132 135.155 175.017 134.637 cv175.906 134.116 176.578 134.428 177.332 133.706 cv178.187 132.893 177.9 132.293 178.556 131.321 cv179.177 130.405 180.466 129.12 180.703 128.03 cv180.851 127.348 181.003 126.667 181.152 125.983 cv182.179 126.569 183.222 127.127 184.261 127.667 cv184.744 127.922 185.187 128.497 185.617 128.838 cv186.41 129.467 187.316 130.198 188.343 130.374 cv188.828 130.454 189.257 130.358 189.707 130.19 cv189.855 130.135 190.585 129.739 190.742 129.866 cv191.097 130.155 191.554 130.29 192.085 130.358 cv191.986 130.346 191.792 131.217 191.781 131.303 cv191.763 131.456 191.894 133.639 192.039 133.639 cv192.039 133.639 194.082 133.405 194.285 133.383 cv194.166 133.834 193.996 134.268 194.035 134.743 cv194.082 135.372 194.388 135.995 194.623 136.571 cv194.734 136.842 197.195 136.081 197.166 135.989 cv197.447 136.868 197.812 137.684 198.173 138.252 cv198.707 139.088 199.183 140.049 199.812 140.813 cv199.832 140.731 199.75 141.176 199.75 141.176 cv199.75 141.176 196.39 152.975 196.886 155.635 cv197.201 157.303 li196.82 158.237 196.828 159.415 197.265 160.991 cv196.746 161.446 196.546 162.036 196.546 162.663 cv196.546 163.958 197.105 165.186 197.505 166.403 cv198.238 168.631 197.751 172.372 197.816 173.475 cv197.869 174.344 197.925 175.213 197.976 176.084 cv198.136 178.629 198.044 181.165 198.984 183.588 cv199.324 184.469 199.785 185.229 200.359 185.977 cv200.292 186.452 200.189 187.182 200.189 187.182 cv200.035 188.256 199.96 189.389 199.96 190.549 cv199.96 194.477 200.753 198.389 202.253 202.018 cv203.21 204.317 205.109 206.086 207.546 206.672 cv208.168 206.825 208.814 206.952 209.453 207.012 cv211.462 207.206 213.455 206.918 215.414 206.495 cv216.584 206.241 217.626 205.92 218.488 205.049 cv219.3 204.235 219.859 202.967 220.335 201.928 cv220.287 202.245 220.234 202.559 220.234 202.862 cv220.234 203.475 220.339 204.061 220.546 204.612 cv221.5 207.131 224.154 207.811 224.457 207.881 cv226.796 208.319 228.312 207.913 229.433 207.233 cv229.462 207.377 229.462 207.51 229.535 207.661 cv230.072 208.817 231.138 209.209 235.261 208.153 cv235.134 208.499 235.015 208.84 235.015 209.168 cv235.015 209.784 235.24 210.354 235.683 210.803 cv237.351 212.495 241.386 211.44 242.324 211.002 cv243.839 210.225 244.828 209.51 245.541 208.846 cv245.316 209.055 247.298 210.024 247.433 210.061 cv248.781 210.434 250.234 210.35 251.587 210.083 cv253.416 209.721 255.384 209.124 256.894 207.989 cv258.042 207.12 258.871 205.94 259.509 204.663 cv259.884 203.909 260.187 203.133 260.505 202.36 cv261.367 200.295 li261.57 199.758 261.738 199.323 263.916 199.563 cv268.425 200.065 li265.203 196.874 li263.552 195.245 261.613 192.663 259.746 190.167 cv257.652 187.372 255.484 184.483 253.451 182.526 cv246.876 174.651 li247.152 174.508 247.421 174.293 247.668 173.983 cv247.668 173.983 249.039 173.86 249.054 173.858 cv250.742 173.729 252.796 172.155 253.193 170.487 cv253.445 169.43 252.847 168.53 252.445 167.592 cv252.281 167.215 252.187 166.768 251.921 166.444 cv251.535 165.973 250.919 165.725 250.421 165.401 cv249.8 165.002 249.187 164.581 248.566 164.182 cv247.263 163.346 245.949 162.532 244.636 161.709 cv241.992 160.057 239.332 158.44 236.636 156.877 cv235.25 156.071 233.195 155.846 232.187 154.5 cv231.501 153.586 231.074 152.481 230.472 151.51 cv229.824 150.458 229.123 149.438 228.49 148.374 cv227.992 147.536 227.507 146.686 227.066 145.821 cv226.363 144.459 225.865 143.016 225.269 141.608 cv225.279 141.633 226.191 140.928 226.275 140.846 cv226.414 140.706 227.738 138.864 227.546 138.729 cv227.851 138.94 228.173 139.145 228.484 139.334 cv228.484 139.334 230.916 141 230.927 141.006 cv231.173 141.182 231.97 140.264 232.105 140.104 cv232.322 139.844 233.457 138.161 233.095 137.819 cv233.339 138.047 233.542 138.286 233.828 138.491 cv234.96 139.299 li235.908 138.274 li236.787 137.315 237.07 136.213 237.07 135.129 cv237.07 134.663 236.986 134.213 236.904 133.768 cv237.431 133.909 237.953 134.065 238.199 134.25 cv240.103 135.694 li240.679 133.377 li240.769 133.038 240.804 132.692 240.804 132.338 cv240.804 131.944 240.642 131.549 240.56 131.155 cv240.671 131.194 242.91 132.069 242.91 132.069 cv243.175 130.096 li243.203 129.913 243.214 129.733 243.214 129.553 cv243.214 128.479 242.775 127.499 242.4 126.67 cv242.55 126.493 242.705 126.331 242.834 126.131 cv244.445 127.174 246.46 128.01 248.847 127.393 cv250.738 126.905 li250.738 126.905 250.675 126.78 250.664 126.752 cv252.882 127.571 255.185 128.016 258.419 126.415 cv259.761 125.752 li259.761 125.752 259.544 125.249 259.369 124.84 cv261.824 125.284 264.525 125.565 266.47 124.292 cv267.753 123.448 li266.945 122.143 li266.88 122.047 266.8 121.983 266.734 121.897 cv268.394 121.733 270.105 121.209 271.017 119.569 cv271.31 119.038 271.25 118.643 271.017 118.088 cv271.699 118.051 272.388 117.924 273.074 117.676 cv275.511 116.784 277.289 114.62 278.353 111.249 cv278.505 110.756 li280.568 109.518 282.429 107.725 284.179 105.284 cv285.806 101.573 li286.615 100.618 287.367 99.4942 287.71 98.5879 cv287.962 98.1094 288.593 96.8477 287.792 95.8223 cv287.757 95.7794 287.714 95.7286 287.66 95.6758 cv290.156 93.8711 292.972 89.7442 294.031 87.7168 cv296.189 83.5801 li292.046 85.5235 li1 /0 get_csdsepcs1 sepf215.804 128.51 mo215.128 129.374 214.347 129.788 211.837 129.788 cv208.914 129.788 207.449 127.936 207.449 127.936 cv207.566 128.739 208.123 129.997 209.664 130.399 cv210.906 130.739 211.345 130.815 213.32 130.645 cv215.312 130.479 215.804 128.51 215.804 128.51 cvcp219.398 115.299 mo215.515 118.993 221.001 129.233 215.886 131.516 cv207.197 130.338 205.632 131.801 204.361 131.471 cv204.273 131.288 204.724 130.991 204.818 130.717 cv203.4 130.493 202.246 130.36 201.476 129.038 cv199.744 126.627 202.378 124.758 203.289 122.844 cv203.289 122.844 204.033 121.323 204.443 120.047 cv204.578 119.545 204.958 121.612 206.578 121.524 cv208.203 121.438 209.171 121.28 211.632 120.293 cv209.541 122.391 208.902 122.475 206.207 123.254 cv207.302 123.479 209.382 123.26 211.515 122.143 cv214.101 120.786 217.369 116.413 217.369 116.413 cv218.142 115.723 219.675 115.075 219.398 115.299 cvcp234.689 193.155 mo234.689 193.155 220.556 173.967 216.853 171.262 cv228.835 189.27 li230.433 191.366 233.187 194.358 234.371 196.459 cv234.736 195.844 235.238 195.024 234.689 193.155 cvcp264.078 198.307 mo262.193 198.096 260.582 198.198 259.906 199.979 cv257.816 204.776 257.816 206.76 252.91 208.536 cv250.193 209.161 247.064 209.372 246.642 207.907 cv247.269 204.928 251.355 204.54 253.041 203.633 cv255.82 202.17 256.558 199.245 256.664 196.325 cv256.523 195.733 254.96 194.557 254.371 194.233 cv249.806 191.098 li243.156 186.223 li243.109 186.174 243.066 186.131 243.015 186.174 cv242.972 186.223 li242.972 186.223 250.855 193.956 254.259 196.206 cv254.687 201.235 251.328 201.469 247.269 203.518 cv244.714 204.932 246.332 207.491 241.632 209.889 cv240.277 210.518 235.621 211.147 236.73 208.846 cv238.322 206.459 236.625 206.448 236.625 206.448 cv234.847 206.971 227.652 208.952 232.66 205.608 cv233.33 205.19 233.933 203.954 233.933 203.954 cv234.666 201.969 232.439 201.594 231.666 202.432 cv229.929 204.358 229.785 207.592 224.775 206.659 cv224.775 206.659 218.88 205.301 223.636 198.668 cv225.824 197.157 220.099 194.44 219.115 192.141 cv216.175 187.405 li208.925 176.11 li203.418 167.729 li202.187 165.956 200.705 164.114 199.474 162.223 cv197.898 158.049 199.07 157.334 200.57 157.139 cv202.5 158.217 202.66 157.684 203.582 157.374 cv204.601 157.034 204.484 158.438 203.582 159.182 cv203.085 160.168 203.101 160.565 203.787 161.479 cv205.062 161.975 205.062 160.909 206.212 161.237 cv207.367 161.567 208.707 165.075 210.759 165.667 cv211.169 165.624 211.625 165.715 211.804 165.397 cv211.708 164.352 210.947 162.692 210.859 161.694 cv211.96 162.917 215.972 166.67 215.414 164.524 cv214.861 162.376 214.925 161.073 214.925 161.073 cv215.332 160.526 215.312 159.565 216 159.565 cv216.406 159.565 216.771 159.61 217.052 159.838 cv217.955 161.479 217.406 163.663 218.957 164.942 cv219.324 165.034 219.828 165.458 220.099 165.141 cv223.609 171.616 229.187 177.053 234.98 181.702 cv235.386 181.979 236.093 182.44 236.593 182.44 cv236.746 181.538 234.148 179.542 233.171 177.879 cv225.89 170.815 li224.804 169.491 220.847 165.565 221.578 163.792 cv221.91 162.376 223.533 161.297 224.261 161.198 cv224.13 161.698 223.058 162.305 223.427 163.54 cv223.921 164.524 224.353 164.858 225.402 165.268 cv222.701 167.963 227.078 170.168 231.771 170.768 cv236.648 169.725 239.458 173.323 244.023 174.016 cv244.023 174.016 244.392 175.499 245.388 175.651 cv252.269 183.899 li256.052 187.502 260.476 194.75 264.078 198.307 cvcp192.91 104.942 mo192.355 102.508 191.306 99.918 188.996 99.0879 cv183.589 97.1582 176.48 96.8848 170.634 95.8965 cv174.689 97.2832 li182.476 98.9004 188.388 98.9239 192.91 104.942 cvcp203.365 114.665 mo200.74 114.618 198.523 115.729 196.761 118.723 cv194.085 119.249 192.261 120.358 189.812 123.006 cv188.035 122.555 184.849 120.725 184.849 120.725 cv184.849 120.725 186.46 118.901 186.781 118.76 cv186.324 118.126 185.212 118.299 185.539 116.682 cv185.867 115.055 188.283 116.258 189.923 115.481 cv189.242 114.842 188.06 114.186 188.5 112.897 cv188.933 111.608 191.32 112.284 192.279 112.241 cv192.232 111.331 191.171 109.899 192.115 109.278 cv193.062 108.663 195.349 108.877 195.349 108.877 cv195.396 107.78 195.988 106.825 196.531 105.913 cv196.394 105.733 194.265 107.016 193.945 107.743 cv191.001 107.497 190.554 108.768 190.429 110.555 cv189.738 111.674 187.718 110.799 187.285 111.973 cv183.683 109.831 181.791 109.526 176.025 107.963 cv174.195 107.182 172.498 105.163 172.369 102.489 cv174.712 102.747 175.921 103.174 177.519 103.334 cv188.511 106.323 li188.558 106.323 188.558 106.278 188.605 106.233 cv183.818 102.042 177.488 102.374 171.605 100.825 cv168.408 100.211 166.394 99.7989 165.398 99.4708 cv161.582 98.7364 146.332 94.2579 143.933 86.7208 cv147.513 87.545 150.466 88.3711 153.695 89.2383 cv156.203 89.8262 158.265 90.0938 161.867 90.8594 cv165.218 91.5743 170.101 93.0176 170.101 93.0176 cv177.712 95.209 186.232 93.795 193.703 96.3418 cv196.304 98.4864 196.896 101.719 197.394 104.823 cv198.197 105.622 li198.197 109.936 199.906 112.067 203.365 114.665 cvcp217.357 113.436 mo214.441 112.29 215.447 108.922 215.035 106.598 cv214.851 106.143 214.392 105.959 213.941 106.051 cv212.986 106.278 212.117 107.374 211.117 106.688 cv211.708 106.598 212.253 106.504 212.71 106.143 cv212.986 105.776 213.351 105.411 213.214 104.823 cv213.027 104.59 212.71 104.59 212.437 104.59 cv212.166 104.682 212.025 104.959 212.025 105.229 cv210.794 105.319 210.162 104.045 208.884 104.545 cv208.292 104.545 207.876 103.956 207.468 103.499 cv207.105 101.948 205.562 101.131 204.419 100.174 cv203.871 100.993 203.458 101.858 203.458 102.858 cv203.552 103.545 204.83 103.252 205.281 103.338 cv206.335 103.711 204.361 104.417 204.419 104.959 cv204.326 104.776 204.279 104.456 204.46 104.272 cv204.783 103.815 204.101 103.864 203.916 103.639 cv203.871 104.866 203.095 105.87 203.001 107.004 cv204.101 107.194 li204.373 107.463 204.191 107.963 204.232 108.331 cv204.25 108.342 204.255 108.354 204.273 108.37 cv204.492 108.436 204.736 108.458 204.841 108.458 cv204.947 108.458 205.029 108.549 205.029 108.651 cv205.029 108.756 204.947 108.838 204.841 108.838 cv204.83 108.838 204.689 108.834 204.511 108.809 cv204.578 109.129 204.57 109.475 205.011 109.651 cv205.375 110.057 204.918 110.928 205.601 111.106 cv207.792 111.2 209.203 109.467 210.976 108.331 cv210.707 109.374 209.335 109.834 208.884 110.79 cv208.652 111.932 208.744 113.163 208.386 114.252 cv207.876 115.803 205.964 114.985 205.375 116.217 cv205.562 117.581 204.918 119.542 206.33 120.315 cv208.292 120.584 210.021 119.995 211.568 119.084 cv214.308 118.126 216.312 115.481 218.679 113.799 cv218.224 113.661 217.767 113.614 217.357 113.436 cvcp161.199 122.436 mo161.048 124.655 161.037 126.362 161.957 127.452 cv162.613 125.67 162.666 124.858 162.21 123.756 cv162.054 123.272 161.646 122.424 161.199 122.436 cvcp163.089 122.639 mo163.181 124.266 163.648 124.499 164.646 125.198 cv163.648 123.192 165.847 121.524 164.177 120.211 cv163.445 120.657 163.064 121.874 163.089 122.639 cvcp159.613 119.545 mo158.06 120.053 157.964 120.561 157.542 121.711 cv159.222 120.221 161.398 121.917 162.244 119.969 cv161.623 119.377 160.355 119.325 159.613 119.545 cvcp170.8 133.795 mo169.656 133.827 li167.962 134.02 167.949 135.711 166.73 136.243 cv167.482 136.409 169.41 136.178 170.13 135.362 cv170.523 134.956 170.769 134.413 170.8 133.795 cvcp166.029 120.108 mo165.668 121.135 166.414 122.926 166.925 123.51 cv166.791 122.184 168.261 121.348 167.611 119.772 cv167.07 118.76 li166.55 119.088 166.199 119.571 166.029 120.108 cvcp164.07 117.463 mo163.05 117.071 161.238 117.76 160.64 118.247 cv161.968 118.155 162.759 119.651 164.353 119.049 cv165.382 118.545 li165.068 118.014 164.601 117.653 164.07 117.463 cvcp169.826 122.063 mo169.767 120.776 170.294 120.02 170.148 119.202 cv169.886 118.268 169.515 118.03 169.123 117.971 cv168.082 118.721 168.968 121.014 169.826 122.063 cvcp164.271 116.426 mo165.5 116.807 166.035 117.557 166.851 117.698 cv167.816 117.766 168.168 117.491 168.361 117.143 cv168.009 115.913 165.542 115.971 164.271 116.426 cvcp159.187 122.502 mo158.679 122.249 157.195 122.952 156.808 123.211 cv155.892 123.6 154.451 124.952 154.755 125.346 cv157.242 123.823 157.332 125.651 159.187 122.502 cvcp170.871 127.584 mo171.021 128.055 172.953 127.651 173.798 127.12 cv174.23 126.948 175.652 126.139 175.738 125.569 cv172.089 125.297 173.541 126.413 170.871 127.584 cvcp166.523 132.622 mo166.589 133.116 168.56 133.053 169.48 132.68 cv169.941 132.592 171.492 132.045 171.671 131.497 cv168.128 130.584 169.363 131.942 166.523 132.622 cvcp157.931 126.258 mo157.488 127.825 157.849 128.19 158.574 129.182 cv158.271 126.954 160.902 126.102 159.761 124.307 cv158.918 124.5 158.164 125.518 157.931 126.258 cvcp173.892 131.315 mo171.808 131.764 173.048 134.229 171.257 135.581 cv172.468 135.397 172.99 135.397 173.787 133.979 cv174.15 133.295 174.343 132.038 173.892 131.315 cvcp172.304 128.739 mo171.671 128.965 170.117 129.926 169.339 129.795 cv169.708 130.292 171.396 130.241 171.994 130.333 cv173.039 130.424 173.787 129.256 174.337 128.436 cv172.304 128.739 licp175.804 128.616 mo175.207 129.6 li174.22 131.018 175.925 132.204 175.882 133.116 cv176.423 132.569 177.054 131.081 176.757 130.034 cv176.625 129.485 176.306 128.985 175.804 128.616 cvcp176.798 126.215 mo176.66 126.624 176.283 127.139 176.375 127.594 cv176.511 128.42 177.796 128.768 178.164 130.004 cv178.902 128.895 178.029 126.577 176.798 126.215 cvcp177.519 123.448 mo177.199 124.911 178.164 126.379 179.304 127.104 cv179.546 125.995 li179.412 124.946 178.335 123.952 177.519 123.448 cvcp176.089 122.786 mo174.953 122.743 173.119 124.292 172.521 124.885 cv174.865 124.149 175.726 124.61 176.277 123.928 cv176.318 123.561 176.412 123.014 176.089 122.786 cvcp234.689 157.936 mo236.828 160.651 238.632 163.034 238.632 163.034 cv237.902 162.528 235.509 161.637 231.314 157.032 cv230.248 155.637 228.431 153.668 228.115 153.993 cv227.974 154.538 229.199 155.6 229.433 155.963 cv229.433 155.963 234.572 162.795 233.81 162.831 cv233.048 162.868 230.128 160.114 228.402 157.405 cv226.509 154.426 223.076 149.124 222.55 145.561 cv222.55 145.561 228.281 152.838 229.753 153.663 cv229.753 153.663 225.584 147.268 224.878 145.288 cv224.168 143.303 221.916 137.713 220.14 136.159 cv220.14 136.159 220.416 136.561 218.447 137.584 cv216.771 138.456 216.273 137.473 214.468 138.129 cv212.658 138.792 212.992 139.114 212.007 139.936 cv210.707 141.022 207.734 143.303 206.248 140.51 cv206.248 140.51 203.787 141.995 201.816 141.006 cv201.816 141.006 198.197 153.002 198.695 155.637 cv198.695 155.637 200.177 154.467 201.328 155.127 cv202.476 155.782 203.621 153.788 205.099 154.44 cv206.652 155.131 204.607 158.577 205.222 159.127 cv205.964 159.792 206.418 158.018 207.818 158.76 cv209.177 159.481 208.099 161.473 209.418 161.473 cv210.73 161.473 209.365 155.471 210.853 155.471 cv210.853 155.471 210.957 159.334 212.576 160.487 cv212.576 160.487 210.605 151.448 213.484 143.965 cv213.484 143.965 212.992 154.53 213.976 159.083 cv213.976 159.083 215.785 155.143 217.919 156.624 cv220.058 158.098 217.919 161.225 219.238 161.555 cv220.556 161.883 222.441 159.745 223.228 159.006 cv224.001 158.264 225.314 157.979 225.73 158.926 cv226.843 161.487 224.341 160.731 224.992 162.211 cv225.56 163.493 226.685 162.803 227.785 163.444 cv229.82 164.616 224.646 165.493 226.8 166.899 cv228.687 168.126 232.285 168.475 235.246 168.309 cv235.24 168.358 241.287 170.467 243.238 171.995 cv242.658 170.92 241.925 170.344 241.832 169.026 cv241.925 169.026 li244.181 170.1 245.166 171.721 245.66 173.672 cv246.027 173.672 246.525 173.549 246.771 172.483 cv247.32 170.885 246.066 169.758 247.617 168.575 cv248.57 167.846 249.8 167.754 250.988 168.022 cv247.796 165.747 236.277 158.62 234.689 157.936 cvcp249.335 169.049 mo248.042 169.672 248.125 171.299 248.084 172.551 cv248.5 172.512 li249.542 172.01 251.294 171.635 251.294 170.09 cv250.919 169.424 250.168 168.969 249.335 169.049 cvcp198.958 163.655 mo198.871 163.655 li198.082 164.094 198.902 165.702 199.101 166.264 cv199.615 167.735 199.535 169.366 199.615 170.901 cv199.75 173.741 199.703 176.604 199.925 179.436 cv200.058 181.1 200.285 183.299 201.367 184.659 cv204.05 188.03 206.554 191.448 208.472 195.182 cv208.386 195.229 li206.578 194.178 203.787 190.729 202.003 187.711 cv201.277 192.815 202.474 199.286 204.789 203.319 cv207.871 207.28 216.478 204.622 216.478 204.622 cv219.296 202.899 217.941 199.651 220.918 197.459 cv220.003 196 219.115 195.657 217.316 193.389 cv215.519 190.475 213.781 188.319 212.552 185.858 cv210.138 181.897 207.496 178.067 205.394 173.959 cv201.695 168.081 li198.958 163.655 licp215.695 132.811 mo214.738 132.221 212.082 132.084 210.894 132.131 cv208.57 132.448 205.966 132.065 203.962 133.022 cv203.962 133.022 203.668 133.178 203.5 133.36 cv202.949 134.002 203.001 133.897 202.593 134.665 cv202.507 134.889 200.921 137.028 201.031 137.286 cv200.66 137.987 200.453 138.668 200.541 139.178 cv200.951 140.096 201.771 139.639 202.5 139.956 cv201.865 139.499 201.865 139.092 201.818 138.678 cv201.605 137.602 203.248 135.356 203.892 134.377 cv204.281 134.024 204.644 133.774 204.918 133.756 cv205.058 133.756 li204.05 134.995 203.376 136.237 202.878 137.741 cv202.656 138.286 202.789 138.877 203.154 139.334 cv203.519 139.698 205.216 139.899 205.72 139.899 cv205.597 138.295 206.464 137.674 206.011 136.127 cv206.242 136.034 206.601 136.034 206.738 136.311 cv207.335 137.905 206.339 139.237 207.566 140.51 cv209.294 140.965 209.972 139.899 211.14 139.032 cv211.574 137.124 211.269 135.147 210.794 133.393 cv212.066 133.756 212.306 136.565 212.992 137.436 cv213.537 137.614 213.994 137.292 214.404 136.924 cv215.632 135.698 214.222 133.86 213.394 132.709 cv213.535 132.62 214.591 132.745 215.457 134.471 cv216.314 136.2 215.484 135.983 216.074 136.94 cv216.437 136.803 217.929 136.842 218.292 136.569 cv220.07 135.202 219.539 134.85 220.369 134.803 cv219.091 133.897 217.169 133.307 215.695 132.811 cvcp200.142 124.61 mo197.646 125.569 193.896 127.395 191.658 128.903 cv191.796 129.221 194.482 129.057 194.625 129.561 cv194.027 130.424 193.123 131.098 193.304 132.19 cv193.943 132.053 196.265 131.86 196.265 131.86 cv196.31 132.639 195.337 134.463 195.607 135.147 cv196.382 135.059 197.693 134.172 198.238 133.667 cv198.238 134.905 198.824 136.686 199.462 137.694 cv199.779 136.917 201.091 133.979 203.515 132.131 cv202.744 131.768 201.97 131.358 201.285 130.76 cv199.919 129.67 199.144 127.944 199.738 126.206 cv199.964 125.659 200.646 125.25 200.601 124.61 cv200.142 124.61 licp227.613 123.139 mo225.515 123.049 222.828 122.368 221.734 124.549 cv221.418 126.92 220.957 129.428 218.589 130.653 cv218.589 130.653 216.57 131.635 218.234 132.19 cv219.677 133.268 221.189 133.44 222.05 134.532 cv222.238 135.307 221.531 135.311 221.13 135.768 cv222.765 136.676 223.878 138.772 224.921 140.227 cv225.97 139.588 226.808 136.143 227.128 136.241 cv227.037 137.333 230.164 138.542 230.886 139.458 cv232.035 137.948 231.666 135.397 231.441 133.756 cv232.621 134.895 233.308 136.491 234.714 137.495 cv236.222 135.854 235.082 133.348 234.628 131.614 cv235.585 132.342 237.988 132.417 239.13 133.28 cv239.492 131.825 238.498 129.819 237.816 128.678 cv237.816 128.678 240.636 129.795 241.591 130.153 cv241.769 128.881 240.761 127.467 240.443 126.376 cv241.308 126.694 242.246 124.417 241.287 123.915 cv239.458 124.096 237.958 124.92 235.996 124.69 cv233.218 124.184 230.437 123.504 227.613 123.139 cvcp265.205 116.713 mo264.691 116.719 264.175 116.247 263.429 117.309 cv261.839 119.555 257.324 120.815 253.632 120.18 cv249.484 120.909 245.839 122.909 241.832 123.729 cv243.699 125.233 245.792 126.827 248.435 126.147 cv247.753 124.78 246.607 125.368 246.197 123.913 cv246.923 124.133 246.841 123.958 247.617 124.184 cv251.492 125.553 253.556 127.336 257.705 125.284 cv257.109 123.915 254.085 123.913 255.074 123.084 cv256.054 122.266 262.673 125.167 265.591 123.254 cv264.546 121.569 261.644 121.774 262.3 120.95 cv262.96 120.129 268.214 121.635 269.623 119.084 cv269.257 117.581 265.205 116.713 265.205 116.713 cvcp170.834 118.776 mo172.082 118.858 173.798 119.159 174.675 120.002 cv173.47 120.292 173.207 121.28 172.472 121.774 cv172.3 122.202 li172.761 122.612 173.539 122.284 174.039 122.053 cv175.222 121.688 176.207 121.229 177.527 121.092 cv177.847 121.456 177.164 121.278 177.164 121.592 cv179.492 123.78 182.269 125.145 184.96 126.559 cv187.269 128.122 188.376 130.108 190.609 128.333 cv199.357 123.186 li202.73 121.682 li202.957 119.905 204.373 118.538 204.232 116.626 cv203.73 116.077 li200.998 115.672 198.765 117.624 197.084 119.588 cv194.482 120.678 192.068 122.319 189.742 124.096 cv189.923 124.323 190.427 124.596 190.287 124.92 cv186.531 123.745 183.642 121.198 179.951 119.969 cv178.132 118.688 176.656 118.534 174.355 118.092 cv172.941 117.655 171.589 118.042 171.179 118.405 cv170.834 118.776 licp176.738 114.231 mo176.738 114.231 175.111 114.877 172.691 114.944 cv170.927 114.944 169.691 114.749 165.982 114.54 cv167.623 115.53 171.855 117.073 174.031 117.334 cv177.675 117.284 180.066 118.459 183.074 119.969 cv183.982 120.604 184.123 118.846 184.714 118.483 cv184.714 118.483 184.234 118.198 184.054 117.665 cv183.886 117.131 183.771 116.626 184.73 116.35 cv181.906 115.436 179.746 114.686 176.738 114.231 cvcp269.335 113.143 mo269.335 113.143 269.187 114.801 266.623 115.608 cv268.992 117.112 274.488 118.512 276.839 111.047 cv274.539 112.196 272.939 113.342 269.335 113.143 cvcp259.097 113.436 mo258.232 113.932 257.546 114.756 256.451 114.713 cv254.775 114.891 254.494 117.348 252.582 116.987 cv241.871 118.399 li240.277 118.583 238.773 119.084 237.226 119.268 cv233.675 117.893 229.708 117.668 226.425 115.672 cv224.695 115.12 222.918 114.208 220.957 114.713 cv217.492 117.213 219.222 122.229 219.734 125.604 cv219.82 125.827 219.91 126.19 220.228 126.19 cv221.136 125.145 221.23 123.645 221.458 122.229 cv221.001 121.913 220.32 122.135 219.863 122.229 cv220.134 121.635 220.779 121.456 221.32 121.225 cv225.701 120.952 229.802 122.049 233.945 122.823 cv236.587 123.69 239.781 123.139 242.371 122.456 cv249.847 120.266 li251.306 119.95 252.761 119.499 254.312 119.542 cv257.093 119.995 259.644 118.858 261.923 117.624 cv262.562 117.309 263.312 116.225 263.154 115.532 cv262.992 114.833 259.416 115.577 258.281 115.938 cv257.82 116.53 257.093 116.942 256.414 116.987 cv257.187 116.438 li257.73 115.299 259.375 114.985 259.507 113.575 cv259.507 113.342 259.24 113.436 259.097 113.436 cvcp264.156 110.926 mo261.044 107.672 262.322 106.792 253.902 109.526 cv239.996 112.897 li241.101 114.747 239.13 115.608 239.13 115.608 cv240.589 116.795 243.818 116.825 245.599 116.735 cv253.484 115.641 li254.623 113.866 256.58 113.731 258.218 112.999 cv258.718 112.905 259.041 112.319 259.582 112.319 cv259.769 112.319 259.953 112.542 260.046 112.678 cv260.363 113.227 260.089 114.215 259.726 114.719 cv260.546 114.536 260.957 114.36 262.121 114.391 cv263.503 114.424 264.007 115.018 263.962 115.424 cv265.335 115.057 266.925 114.868 267.652 113.409 cv264.156 110.926 licp177.912 109.663 mo176.933 109.27 175.638 109.147 173.998 109.137 cv176.511 113.399 181.644 114.565 186.144 114.819 cv187.832 115.272 186.691 114.127 187.019 113.389 cv183.783 111.491 181.5 110.768 177.912 109.663 cvcp166.626 109.336 mo165.222 109.278 161.212 109.014 156.453 107.639 cv157.925 109.491 162.957 113.198 166.035 113.444 cv176.511 113.399 li175.041 111.932 li172.55 108.995 169.886 109.465 166.626 109.336 cvcp217.902 102.362 mo217.404 102.725 217.902 103.272 217.902 103.729 cv218.084 104.088 218.359 104.506 218.859 104.456 cv219.363 104.004 220.679 103.956 220.369 102.909 cv220.093 102.858 219.91 102.997 219.677 103.042 cv218.951 103.272 218.318 102.952 217.902 102.362 cvcp263.494 106.077 mo261.011 106.854 263.101 108.682 267.601 111.393 cv270.046 112.663 271.791 111.715 273.835 111.229 cv277.429 110.413 280.246 108.327 282.89 104.635 cv279.316 105.995 271.191 108.03 263.494 106.077 cvcp146.144 92.7051 mo148.121 97.1387 152.394 106.323 163.824 107.639 cv173.343 108.229 li171.912 104.635 171.712 102.809 166.146 101.186 cv163.275 100.682 153.972 98.377 146.144 92.7051 cvcp219.804 99.7168 mo218.892 100.126 217.48 100.717 217.48 101.905 cv217.48 101.905 218.154 102.09 218.433 102.268 cv218.937 102.674 219.707 102.495 220.207 102.221 cv220.753 101.905 221.21 101.358 221.21 100.674 cv220.89 100.309 220.668 100.397 220.753 100.032 cv220.621 99.627 220.123 99.627 219.804 99.7168 cvcp205.179 98.6973 mo204.912 98.5626 204.406 98.6114 204.5 99.0196 cv205.042 99.4786 206.64 100.944 207.232 101.309 cv213.804 101.538 li214.626 101.631 215.535 101.719 216.035 102.495 cv216.171 102.858 216.082 103.317 215.716 103.499 cv215.078 103.676 214.351 103.545 213.984 102.952 cv214.076 102.858 214.253 102.952 214.392 102.909 cv214.533 102.858 214.755 102.858 214.755 102.633 cv213.757 102.272 212.644 102.268 211.591 102.129 cv211 102.268 208.181 101.665 207.818 102.211 cv207.976 103.936 211.486 103.979 213.816 103.936 cv214.041 104.534 214.574 105.092 215.078 105.411 cv215.398 105.825 215.535 106.323 215.447 106.866 cv215.628 106.372 216.171 105.825 216.675 105.641 cv217.222 105.002 217.585 104.182 217.404 103.317 cv216.853 102.221 214.708 100.073 213.519 99.7051 cv211.064 99.3926 207.41 99.4786 205.179 98.6973 cvcp254.587 102.094 mo236.582 107.866 li238.31 108.854 238.052 110.315 237.173 111.879 cv241.486 111.26 245.224 110.327 248.003 109.69 cv258.238 106.735 li261.736 106.034 262.097 105.258 265.382 103.405 cv265.843 102.856 268.468 102.174 268.714 101.063 cv265.351 99.0586 260.363 100.432 254.587 102.094 cvcp218.421 98.379 mo217.828 98.7422 217.462 99.4219 217.55 100.067 cv218.292 100.26 218.482 99.8555 218.851 99.584 cv219.033 99.3067 219.144 99.1973 219.144 98.834 cv219.144 98.4727 218.738 98.2832 218.421 98.379 cvcp214.605 95.3418 mo212.628 94.7286 210.585 95.1915 209.132 95.6465 cv207.906 96.0606 206.136 97.1524 205.523 98.0294 cv207.8 98.6231 210.64 98.2129 213.011 98.5801 cv214.287 98.9473 215.234 100.553 216.783 99.8301 cv217.738 98.8711 217.707 98.2266 217.585 97.795 cv217.334 97.2403 216.537 95.9415 214.605 95.3418 cvcp255.23 96.8262 mo244.312 96.2911 239.623 99.2559 229.753 104.756 cv230.4 104.663 232.261 105.167 232.718 105.622 cv233.035 105.94 233.96 107.276 233.824 107.6 cv248.248 101.803 252.843 100.909 261.32 99.0879 cv262.363 98.7715 260.88 97.9864 258.273 97.336 cv257.457 97.0118 256.181 96.8262 255.23 96.8262 cvcp285.972 96.9942 mo279.566 99.4668 275.203 99.9395 271.218 100.432 cv270.156 101.049 270.443 102.68 265.351 104.733 cv265.943 106.11 272.669 105.542 276.285 105.045 cv281.048 104.227 281.775 103.454 283.498 101.965 cv284.634 100.989 285.972 99.1524 286.287 98.1661 cv286.779 97.2403 286.714 96.8067 285.972 96.9942 cvcp205.369 95.5313 mo204.947 96.0157 203.992 97.3594 204.855 97.8575 cv206.269 95.1114 208.386 95.2852 210.152 94.8379 cv208.765 94.3848 206.777 94.4903 205.369 95.5313 cvcp285.724 90.2129 mo277.07 92.5372 270.445 94.4317 262.472 98.3497 cv264.525 98.627 li267.886 99.2168 268.533 99.5918 272.042 99.0879 cv276.964 98.2715 282.226 97.2676 286.228 95.0176 cv288.443 93.7832 291.537 89.3497 292.632 87.252 cv290.945 87.9258 290.371 88.6036 285.724 90.2129 cvcp282.666 83.7149 mo271.183 87.9981 li263.25 90.8301 li258.144 92.1973 li252.218 94.0645 245.382 93.7481 239.095 94.6133 cv234.267 95.4825 228.841 96.252 226.246 101.131 cv223.691 105.049 225.244 111.522 219.863 113.436 cv220.591 113.436 221.597 113.424 222.279 113.557 cv223.193 113.295 224.824 113.739 225.736 114.053 cv229.445 115.108 230.617 116.479 234.429 117.26 cv236.304 117.713 238.287 118.653 240.105 117.655 cv239.152 116.649 237.232 116.096 236.001 116.186 cv237.281 115.459 239.13 114.702 238.3 113.229 cv236.845 112.221 235.304 113.493 234.033 113.721 cv234.625 112.717 237.152 110.596 235.509 109.278 cv233.64 108.506 232.156 109.338 230.74 110.432 cv231.203 109.338 233.048 107.803 231.726 106.651 cv230.414 105.497 228.609 106.512 228.115 106.651 cv227.927 105.788 227.292 104.045 226.425 103.454 cv226.515 103.407 li227.156 103.454 227.82 103.77 228.386 104.331 cv232.216 101.6 236.048 99.0879 240.853 97.4864 cv244.117 96.2403 251.845 93.3868 262.218 97.1036 cv264.935 96.1172 267.292 94.4434 269.75 93.584 cv284.429 88.9844 li288.074 87.709 289.908 86.2442 292.277 80.8028 cv289.042 81.4864 285.761 82.7579 282.666 83.7149 cv0 0 0 0 cmykf104.96 199.217 mo104.101 199.219 li104.314 200.051 li106.335 207.967 104.199 215.661 98.5909 220.629 cv96.8194 222.2 li99.1495 221.792 li100.937 221.479 103.304 221.145 105.785 221.338 cv111.626 221.706 115.744 222.905 119.109 225.165 cv118.929 226.053 115.593 242.561 115.593 242.561 cv115.533 242.823 115.507 243.081 115.507 243.327 cv115.507 244.438 116.054 245.405 116.623 246.225 cv116.654 246.268 li116.691 246.305 li119.25 249.002 122.515 249.897 125.666 250.768 cv125.929 250.84 li139.707 254.053 154.242 251.192 166.882 242.792 cv173.683 238.35 li176.679 236.502 li180.279 234.292 li187.216 230.178 192.925 227.94 199.375 226.815 cv212.707 224.471 226.992 227.309 237.595 234.411 cv237.632 234.434 238.98 235.219 238.98 235.219 cv238.949 235.202 247.921 241.081 247.921 241.081 cv247.929 241.09 253.488 244.606 253.488 244.606 cv265.808 252.346 281.765 254.643 295.136 250.6 cv297.398 249.846 302.072 248.29 302.734 244.19 cv302.751 244.071 li302.751 244.071 299.378 226.538 299.236 225.788 cv299.246 225.784 299.726 225.434 299.726 225.434 cv299.574 225.553 li305.201 222.405 312.574 221.307 319.296 222.62 cv321.726 223.096 li319.863 221.459 li314.25 216.526 312.15 208.819 314.238 200.842 cv314.458 200.01 li313.603 200.002 li305.07 199.909 297.115 201.088 289.957 203.514 cv286.404 204.881 281.07 206.932 279.492 211.756 cv279.464 211.854 li279.277 225.838 li279.277 225.844 279.246 229.754 279.238 231.35 cv270.925 231.176 264.05 227.01 258.246 223.073 cv258.25 223.077 256.222 221.67 256.222 221.67 cv256.207 221.659 247.918 216.239 247.918 216.239 cv238.078 210.143 228.335 206.518 218.121 205.143 cv200.644 202.858 183.175 207.124 167.611 217.483 cv167.605 217.485 159.792 222.799 159.792 222.799 cv153.652 226.836 146.972 230.764 138.863 230.856 cv138.867 229.813 138.955 212.342 138.955 212.342 cv138.91 209.557 136.771 206.979 132.591 204.668 cv124.921 200.944 115.894 199.163 104.96 199.217 cv1 /0 get_csdsepcs1 sepf130.605 219.35 mo132.832 218.708 135.117 218.002 136.976 216.26 cv136.972 217.206 136.935 230.377 136.933 230.848 cv132.085 230.713 126.628 230.053 122.527 226.368 cv122.527 226.358 122.353 226.135 122.353 226.135 cv121.898 225.549 121.515 225.057 121.515 224.448 cv121.515 224.229 121.566 223.995 121.679 223.741 cv122.869 221.534 125.224 220.889 127.498 220.266 cv129.349 219.719 li129.343 219.721 130.605 219.35 130.605 219.35 cv1 /0 get_csdsepcs0 sepf281.246 217.03 mo283.472 218.979 286.21 219.795 288.882 220.547 cv291.232 221.206 293.66 221.889 295.671 223.376 cv296.283 223.924 296.574 224.401 296.574 224.897 cv296.574 225.118 296.517 225.338 296.41 225.575 cv295.113 228.034 292.101 229.254 289.953 229.958 cv287.095 230.758 284.236 231.165 281.246 231.221 cv281.246 230.745 281.246 217.911 281.246 217.03 cv1 /0 get_csdsepcs0 sepf106.908 205.793 mo106.908 204.241 106.732 202.663 106.433 201.077 cv114.742 201.409 124.304 202.37 132.605 206.854 cv134.679 208.178 137.025 209.999 137.025 212.415 cv137.025 212.479 137.025 212.543 137.023 212.604 cv136.632 215.696 133.507 216.639 130.75 217.471 cv127.158 218.575 li124.226 219.389 121.224 220.276 119.871 223.313 cv115.146 220.475 109.207 219.168 102.201 219.434 cv105.244 215.813 106.908 210.975 106.908 205.793 cv1 /0 get_csdsepcs0 sepf293.097 219.811 mo292.804 219.7 li289.322 218.647 li286.484 217.893 283.802 217.18 281.796 214.948 cv281.425 214.418 281.269 213.737 281.269 213.059 cv281.269 212.45 281.398 211.85 281.609 211.372 cv284.218 207.354 288.683 205.952 293 204.598 cv294.136 204.237 li299.435 202.795 305.32 202.026 312.08 201.866 cv311.781 203.577 311.605 205.252 311.605 206.862 cv311.605 212.086 313.183 216.682 316.16 220.225 cv309.3 219.956 303.337 221.229 298.427 224.002 cv297.621 221.581 295.14 220.588 293.097 219.811 cv1 /0 get_csdsepcs0 sepf179.668 223.795 mo179.406 223.834 178.062 224.528 177.761 224.682 cv177.722 224.452 177.136 221.292 177.074 220.971 cv177.16 221.053 li177.589 221.618 179.656 223.672 179.74 223.756 cv179.668 223.795 licp183.806 224.977 mo183.806 224.975 177.992 219.51 177.992 219.51 cv177.867 219.391 177.472 218.983 177.472 218.983 cv177.429 218.897 177.398 218.795 177.625 218.659 cv177.664 218.532 177.55 218.303 177.55 218.303 cv177.418 218.26 174.73 219.678 174.73 219.678 cv174.687 219.807 174.806 220.034 174.806 220.034 cv175.218 219.961 175.25 220.018 175.257 220.038 cv175.261 220.043 175.39 220.594 175.39 220.594 cv175.394 220.629 176.671 228.739 176.671 228.739 cv176.699 228.936 176.71 229.12 176.585 229.198 cv176.55 229.327 176.668 229.559 176.668 229.559 cv176.8 229.6 178.921 228.481 178.921 228.481 cv179.011 228.436 li178.843 228.124 li178.531 228.165 178.402 228.139 178.328 228.008 cv178.328 228.002 178.253 227.723 178.253 227.723 cv178.253 227.713 177.994 226.151 177.992 226.147 cv178.027 226.202 180.804 224.743 180.832 224.729 cv180.835 224.811 182.019 225.915 182.019 225.915 cv182.023 225.917 182.201 226.124 182.201 226.124 cv182.203 226.135 182.212 226.147 182.212 226.155 cv182.212 226.186 182.179 226.229 182.039 226.327 cv182.037 226.342 182.035 226.358 182.035 226.374 cv182.035 226.5 182.128 226.68 182.128 226.68 cv182.261 226.721 184.445 225.571 184.445 225.571 cv184.486 225.436 184.363 225.209 184.363 225.209 cv184.109 225.209 184.052 225.211 183.806 224.977 cvcp295.261 242.838 mo295.136 242.768 294.89 242.836 294.89 242.836 cv294.832 243.12 294.796 243.2 294.378 243.307 cv294.378 243.307 290.359 244.342 290.351 244.346 cv290.355 244.346 290.359 244.334 290.359 244.315 cv290.359 244.034 289.896 242.247 289.826 241.987 cv290.001 241.94 291.982 241.43 291.982 241.43 cv292.398 241.325 292.464 241.366 292.535 241.506 cv292.648 241.557 292.896 241.491 292.896 241.491 cv292.966 241.374 292.429 239.299 292.429 239.299 cv292.308 239.229 292.062 239.297 292.062 239.297 cv292 239.581 291.968 239.655 291.55 239.76 cv291.55 239.76 289.322 240.334 289.304 240.338 cv289.31 240.336 289.312 240.327 289.312 240.303 cv289.312 240.01 288.832 238.149 288.832 238.137 cv288.859 238.227 292.556 237.268 292.556 237.268 cv292.972 237.167 293.037 237.209 293.109 237.35 cv293.224 237.399 293.47 237.331 293.47 237.331 cv293.541 237.211 293 235.139 293 235.139 cv292.875 235.069 292.632 235.137 292.632 235.137 cv292.574 235.417 292.535 235.5 292.125 235.606 cv285.976 237.2 li285.906 237.319 285.968 237.565 285.968 237.565 cv286.582 237.561 286.626 237.645 286.683 237.86 cv288.712 245.698 li288.769 245.928 288.765 246.012 288.328 246.182 cv288.269 246.295 288.332 246.545 288.332 246.545 cv288.453 246.618 294.808 244.967 294.808 244.967 cv295.226 244.866 295.289 244.911 295.371 245.077 cv295.484 245.129 295.732 245.065 295.732 245.065 cv295.802 244.946 295.261 242.838 295.261 242.838 cvcp283.718 242.135 mo283.707 244.514 282.937 245.274 280.544 245.262 cv280.544 245.262 279.503 245.26 279.496 245.26 cv279.496 245.258 li279.589 245.233 279.619 239.495 279.621 238.969 cv279.785 238.971 280.57 238.981 280.57 238.981 cv282.949 238.989 283.718 239.749 283.718 242.094 cv283.718 242.135 licp281.265 237.26 mo277.287 237.245 li277.187 237.34 277.181 237.596 277.181 237.596 cv277.574 237.741 277.617 237.819 277.613 238.069 cv277.613 238.073 277.582 246.151 277.582 246.151 cv277.582 246.397 277.535 246.467 277.218 246.526 cv277.136 246.87 li277.238 246.967 280.863 246.983 280.863 246.983 cv282.449 246.991 283.668 246.584 284.484 245.774 cv285.304 244.959 285.724 243.739 285.73 242.145 cv285.738 239.1 284.07 237.272 281.265 237.26 cvcp273.988 236.85 mo274.335 237.088 274.359 237.176 274.3 237.409 cv273.011 242.624 li272.718 243.815 271.863 244.331 270.677 244.038 cv270.085 243.893 269.66 243.612 269.414 243.206 cv269.171 242.803 269.121 242.28 269.265 241.694 cv270.55 236.483 li270.609 236.249 270.671 236.18 270.984 236.208 cv271.087 236.133 271.148 235.883 271.148 235.883 cv271.078 235.764 268.394 235.106 268.394 235.106 cv268.298 235.083 li268.275 235.182 li268.218 235.43 li268.65 235.686 268.66 235.778 268.597 236.002 cv267.316 241.178 li266.738 243.561 267.703 245.077 270.187 245.684 cv271.453 245.999 272.496 245.917 273.281 245.44 cv274.029 244.993 274.55 244.182 274.832 243.036 cv276.113 237.86 li276.171 237.627 276.22 237.553 276.578 237.59 cv276.683 237.516 276.742 237.27 276.742 237.27 cv276.671 237.151 274.171 236.532 274.171 236.532 cv274.054 236.604 273.988 236.85 273.988 236.85 cvcp263.834 235.508 mo263.64 236.225 263.25 239.086 263.238 239.2 cv263.166 239.167 li262.968 238.979 261.601 238.321 261.304 238.182 cv261.46 238.01 263.574 235.7 263.847 235.401 cv263.834 235.508 licp263.236 233.028 mo263.541 233.311 263.515 233.366 263.503 233.393 cv263.14 233.831 li263.117 233.858 257.414 239.749 257.414 239.749 cv257.281 239.883 257.136 240.014 256.992 239.959 cv256.867 240.01 256.761 240.237 256.761 240.237 cv256.812 240.37 258.972 241.387 258.972 241.387 cv259.066 241.428 li259.21 241.108 li259.05 240.944 258.976 240.838 258.976 240.737 cv258.976 240.702 258.984 240.667 259.003 240.631 cv259.003 240.627 259.181 240.397 259.181 240.397 cv259.187 240.391 260.271 239.26 260.281 239.25 cv260.281 239.321 263.105 240.643 263.119 240.649 cv263.058 240.655 262.882 242.315 262.882 242.315 cv262.882 242.325 262.832 242.592 262.832 242.592 cv262.816 242.624 262.804 242.647 262.566 242.579 cv262.451 242.631 262.339 242.856 262.339 242.856 cv262.386 242.989 264.625 244.042 264.625 244.042 cv264.757 243.995 264.863 243.764 264.863 243.764 cv264.707 243.557 264.668 243.512 264.71 243.184 cv264.712 243.182 265.566 235.249 265.566 235.249 cv265.683 234.51 li265.708 234.452 265.765 234.34 266.027 234.446 cv266.154 234.399 266.261 234.159 266.261 234.159 cv266.214 234.026 263.472 232.749 263.472 232.749 cv263.343 232.795 263.236 233.028 263.236 233.028 cvcp256.707 237.584 mo256.378 237.834 256.289 237.836 255.953 237.612 cv255.953 237.612 252.628 235.432 252.619 235.428 cv252.734 235.424 256.638 229.477 256.638 229.477 cv256.769 229.276 256.837 229.219 257.283 229.452 cv257.412 229.418 257.55 229.206 257.55 229.206 cv257.523 229.069 255.042 227.444 255.042 227.444 cv254.904 227.471 254.761 227.68 254.761 227.68 cv255.117 228.094 255.089 228.178 254.96 228.377 cv250.527 235.133 li250.404 235.331 250.328 235.383 249.98 235.209 cv249.853 235.245 249.71 235.456 249.71 235.456 cv249.738 235.596 255.011 239.049 255.011 239.049 cv255.367 239.28 255.375 239.368 255.308 239.538 cv255.347 239.657 255.558 239.799 255.558 239.799 cv255.695 239.768 256.945 237.86 256.945 237.86 cv256.918 237.725 256.707 237.584 256.707 237.584 cvcp245.351 231.741 mo245.353 231.741 249.757 224.694 249.757 224.694 cv249.835 224.561 249.933 224.506 250.152 224.629 cv250.285 224.596 250.421 224.379 250.421 224.379 cv250.39 224.245 247.697 222.561 247.697 222.561 cv247.558 222.592 247.425 222.809 247.425 222.809 cv247.515 222.973 247.544 223.057 247.544 223.114 cv247.544 223.151 247.533 223.174 247.511 223.206 cv247.433 223.325 246.472 223.999 245.457 224.709 cv245.457 224.709 243.261 226.268 242.921 226.51 cv242.929 226.469 242.939 226.42 242.949 226.374 cv243.136 225.834 243.418 224.245 243.418 224.245 cv243.632 222.942 243.925 221.157 244.017 221.002 cv244.042 220.959 244.087 220.922 244.287 220.958 cv244.39 220.913 244.521 220.702 244.521 220.702 cv244.488 220.569 241.773 218.86 241.773 218.86 cv241.636 218.891 241.503 219.106 241.503 219.106 cv241.708 219.376 241.699 219.475 241.617 219.61 cv237.218 226.655 li237.121 226.805 237.019 226.829 236.847 226.735 cv236.716 226.768 236.582 226.989 236.582 226.989 cv236.613 227.124 238.708 228.424 238.708 228.424 cv238.792 228.479 li238.976 228.188 li238.8 227.991 238.744 227.881 238.744 227.795 cv238.744 227.741 238.767 227.694 238.8 227.647 cv238.8 227.647 241.82 222.809 242.23 222.151 cv242.212 222.209 242.207 222.27 242.191 222.329 cv241.882 223.383 241.156 226.967 241.156 226.967 cv240.689 229.596 li240.734 229.698 240.964 229.84 240.964 229.84 cv241.078 229.836 243.468 228.12 243.468 228.12 cv243.468 228.12 246.742 225.688 247.308 225.268 cv247.156 225.514 li246.304 226.694 243.769 230.752 243.769 230.752 cv243.691 230.872 243.617 230.944 243.339 230.795 cv243.21 230.831 243.074 231.038 243.074 231.038 cv243.105 231.174 245.259 232.524 245.259 232.524 cv245.398 232.491 245.531 232.274 245.531 232.274 cv245.242 231.956 245.283 231.846 245.351 231.741 cvcp235.273 218.575 mo235.105 219.292 234.828 222.17 234.818 222.29 cv234.738 222.256 li234.527 222.073 233.148 221.475 232.851 221.346 cv233.003 221.17 235.017 218.784 235.281 218.471 cv235.273 218.575 licp236.437 226.208 mo237.011 218.024 li237.078 217.522 li237.103 217.459 237.152 217.336 237.421 217.436 cv237.548 217.383 237.644 217.147 237.644 217.147 cv237.593 217.02 234.806 215.836 234.806 215.836 cv234.677 215.889 234.584 216.127 234.584 216.127 cv234.832 216.342 234.871 216.424 234.871 216.461 cv234.871 216.471 234.867 216.479 234.867 216.483 cv234.865 216.483 234.5 216.944 234.5 216.944 cv234.488 216.954 229.017 223.063 229.017 223.063 cv228.882 223.208 228.75 223.334 228.605 223.288 cv228.48 223.346 228.386 223.577 228.386 223.577 cv228.443 223.704 230.644 224.637 230.644 224.637 cv230.73 224.674 li230.869 224.354 li230.66 224.182 230.613 224.057 230.613 223.977 cv230.613 223.932 230.625 223.901 230.634 223.885 cv230.808 223.647 li230.82 223.641 231.855 222.459 231.863 222.452 cv231.865 222.52 234.736 223.741 234.75 223.747 cv234.691 223.752 234.584 225.417 234.584 225.417 cv234.582 225.424 234.537 225.698 234.537 225.698 cv234.523 225.727 234.511 225.756 234.277 225.694 cv234.162 225.75 234.058 225.983 234.058 225.983 cv234.113 226.112 236.382 227.075 236.382 227.075 cv236.511 227.022 236.613 226.788 236.613 226.788 cv236.449 226.584 236.412 226.545 236.437 226.208 cvcp228.816 222.788 mo228.96 222.831 229.144 222.713 229.144 222.713 cv229.181 222.592 228.232 220.286 228.232 220.286 cv228.136 220.223 227.91 220.235 227.91 220.235 cv227.816 220.346 227.789 220.688 227.789 220.688 cv227.789 220.696 227.365 221.167 227.365 221.167 cv226.918 221.42 226.289 221.483 225.73 221.323 cv224.238 220.917 223.546 219.376 224.037 217.583 cv224.363 216.385 224.869 215.581 225.537 215.204 cv226.074 214.899 226.738 214.852 227.511 215.067 cv228.044 215.213 228.523 215.557 228.757 215.971 cv228.876 216.651 li228.839 216.889 li228.98 216.997 li229.111 216.991 230.832 215.209 230.832 215.209 cv231.031 215.006 li230.671 214.936 li230.306 214.985 li230.3 214.985 230.013 214.721 230.013 214.721 cv229.656 214.358 li229.181 213.901 228.619 213.588 227.937 213.403 cv226.708 213.061 225.464 213.198 224.433 213.786 cv223.312 214.42 222.507 215.553 222.097 217.055 cv221.341 219.827 222.574 222.245 225.101 222.936 cv226.718 223.376 227.64 222.963 228.187 222.723 cv228.63 222.588 li228.701 222.61 228.769 222.68 228.816 222.788 cvcp219.75 214.655 mo219.882 214.631 221.507 212.588 221.507 212.588 cv221.433 212.528 li221.433 212.526 li221.423 212.518 li221.226 212.362 li221.117 212.465 221.023 212.518 220.867 212.497 cv220.451 212.28 li219.982 211.999 li219.375 211.655 218.658 211.428 217.849 211.319 cv215.273 210.975 214.156 212.374 213.976 213.674 cv213.712 215.659 215.578 216.342 217.078 216.897 cv218.224 217.319 219.21 217.682 219.109 218.459 cv218.699 219.237 li218.332 219.516 217.699 219.598 216.82 219.483 cv216.066 219.379 215.027 218.977 214.671 218.506 cv214.546 218.145 li214.57 217.909 li214.334 217.768 li214.199 217.795 212.822 219.879 212.822 219.879 cv212.773 219.956 li213.019 220.143 li213.171 220.114 213.406 219.95 213.408 219.95 cv213.408 219.952 213.902 220.194 213.902 220.194 cv214.404 220.483 li214.406 220.483 216.511 221.176 216.511 221.176 cv218.341 221.42 219.437 220.932 220.035 220.475 cv220.628 220.018 221.015 219.372 221.109 218.659 cv221.41 216.424 219.466 215.717 217.908 215.145 cv216.832 214.749 215.906 214.409 216.003 213.694 cv216.347 213.059 li216.607 212.862 216.984 212.793 217.474 212.862 cv218.757 213.038 219.261 213.581 219.386 213.745 cv219.527 214.116 li219.492 214.299 219.468 214.418 219.468 214.418 cv219.519 214.514 219.75 214.655 219.75 214.655 cvcp211.457 218.829 mo207.285 218.829 li207.285 218.829 207.373 216.598 207.378 216.413 cv207.55 216.413 209.609 216.413 209.609 216.413 cv210.035 216.413 210.093 216.479 210.125 216.624 cv210.476 216.702 li210.574 214.463 li210.22 214.366 li210.091 214.626 210.039 214.694 209.609 214.694 cv207.285 214.694 li207.382 212.428 li211.205 212.528 li211.628 212.528 211.685 212.588 211.718 212.743 cv212.072 212.821 li212.168 210.577 li211.816 210.479 li211.685 210.741 211.632 210.805 211.205 210.805 cv204.847 210.805 li204.748 211.161 li205.369 211.313 205.369 211.413 205.369 211.631 cv205.369 219.725 li205.369 219.961 205.345 220.045 204.867 220.104 cv204.783 220.454 li211.457 220.553 li211.89 220.553 211.941 220.618 211.976 220.795 cv212.328 220.877 li212.425 218.604 li212.072 218.506 li211.941 218.766 211.89 218.829 211.457 218.829 cvcp200.679 214.973 mo200.472 215.249 200.093 215.422 199.542 215.499 cv199.542 215.499 197.503 215.788 197.488 215.792 cv197.496 215.788 197.503 215.756 197.503 215.696 cv197.503 215.276 197.285 213.719 197.25 213.459 cv197.425 213.436 199.214 213.182 199.214 213.182 cv200.203 213.045 200.738 213.358 200.845 214.137 cv200.679 214.973 licp203.128 219.458 mo202.931 219.167 li202.931 219.165 201.183 216.676 201.152 216.631 cv201.195 216.614 201.222 216.588 201.265 216.569 cv202.445 216.188 203.015 215.143 202.816 213.711 cv202.582 212.038 201.185 211.167 199.171 211.446 cv194.683 212.084 li194.601 212.194 194.636 212.45 194.636 212.45 cv195.044 212.538 195.101 212.604 195.132 212.854 cv196.265 220.86 li196.296 221.122 196.253 221.192 196.003 221.276 cv195.937 221.381 195.97 221.633 195.97 221.633 cv196.085 221.717 198.703 221.348 198.703 221.348 cv198.8 221.334 li198.757 220.991 li198.339 220.893 198.285 220.823 198.257 220.584 cv198.257 220.584 197.81 217.424 197.808 217.395 cv197.824 217.487 199.347 217.268 199.355 217.268 cv199.355 217.354 201.16 219.885 201.16 219.885 cv201.431 220.368 li201.431 220.385 li201.431 220.424 201.406 220.495 201.183 220.545 cv201.14 220.604 201.132 220.7 201.132 220.778 cv201.132 220.85 201.14 220.901 201.14 220.901 cv201.253 220.987 203.906 220.616 203.906 220.616 cv203.992 220.504 203.96 220.252 203.96 220.252 cv203.609 220.163 203.492 220.006 203.128 219.458 cvcp193.289 219.061 mo193.181 219.059 192.988 219.188 192.988 219.188 cv192.96 219.331 193.128 219.639 193.128 219.639 cv193.132 219.643 193.031 220.254 193.031 220.254 cv192.794 220.708 192.279 221.11 191.718 221.284 cv191.074 221.475 190.427 221.417 189.851 221.108 cv189.136 220.725 188.582 219.983 188.292 219.014 cv187.929 217.829 187.921 216.881 188.285 216.202 cv188.578 215.649 189.103 215.264 189.89 215.026 cv190.746 214.76 191.687 215.042 191.859 215.608 cv191.88 215.67 li191.984 215.86 li192.156 215.874 li192.265 215.799 192.777 213.366 192.777 213.366 cv192.832 213.086 li192.488 213.221 li192.199 213.459 li192.197 213.463 191.792 213.387 191.792 213.387 cv191.318 213.272 li190.664 213.141 190.023 213.178 189.349 213.385 cv187.125 214.065 185.341 216.249 186.363 219.602 cv187.205 222.354 189.546 223.741 192.054 222.975 cv193.656 222.491 194.214 221.649 194.554 221.147 cv194.859 220.795 li194.927 220.774 195.019 220.803 195.126 220.866 cv195.269 220.823 195.355 220.62 195.355 220.62 cv195.324 220.502 193.289 219.061 193.289 219.061 cvcp170.3 227.112 mo170.296 227.112 168.57 228.235 168.55 228.247 cv168.554 228.243 168.558 228.243 168.558 228.239 cv168.558 228.092 167.507 226.456 167.363 226.229 cv167.511 226.129 169.027 225.143 169.027 225.143 cv169.863 224.608 170.48 224.667 170.904 225.327 cv170.906 225.327 171.105 226.155 171.105 226.155 cv171.035 226.489 170.765 226.807 170.3 227.112 cvcp175.226 229.2 mo174.914 229.01 li172.24 227.469 li172.265 227.438 172.281 227.405 172.308 227.374 cv173.218 226.532 173.304 225.331 172.519 224.112 cv171.595 222.69 169.966 222.493 168.265 223.596 cv164.46 226.057 li164.429 226.194 164.562 226.405 164.562 226.405 cv164.974 226.315 165.054 226.354 165.185 226.561 cv169.582 233.356 li169.722 233.577 169.71 233.659 169.515 233.838 cv169.5 233.965 169.64 234.18 169.64 234.18 cv169.777 234.211 171.994 232.776 171.994 232.776 cv172.078 232.721 li171.886 232.422 li171.48 232.512 171.408 232.475 171.269 232.26 cv171.269 232.26 169.531 229.586 169.515 229.559 cv169.574 229.627 170.859 228.799 170.867 228.795 cv170.867 228.854 173.609 230.415 173.609 230.415 cv174.062 230.737 li174.068 230.743 174.078 230.758 174.078 230.78 cv174.078 230.823 174.046 230.893 173.904 231.004 cv173.904 231.036 li173.904 231.165 174.021 231.35 174.021 231.35 cv174.16 231.377 176.414 229.915 176.414 229.915 cv176.445 229.776 176.304 229.569 176.304 229.569 cv175.953 229.635 175.781 229.538 175.226 229.2 cvcp167.062 233.543 mo167.07 233.602 167.072 233.655 167.072 233.698 cv167.072 233.874 167.007 233.963 166.72 234.147 cv166.72 234.147 163.24 236.399 163.226 236.409 cv163.226 236.409 163.228 236.409 163.228 236.401 cv163.228 236.256 162.14 234.569 161.996 234.338 cv162.144 234.241 163.855 233.127 163.855 233.127 cv164.214 232.897 164.296 232.917 164.412 233.026 cv164.531 233.036 164.746 232.897 164.746 232.897 cv164.775 232.758 163.613 230.963 163.613 230.963 cv163.472 230.936 163.263 231.077 163.263 231.077 cv163.273 231.139 163.275 231.188 163.275 231.233 cv163.275 231.415 163.203 231.504 162.923 231.682 cv162.923 231.682 160.988 232.928 160.976 232.936 cv160.98 232.934 160.98 232.934 160.98 232.928 cv160.98 232.772 159.835 231.008 159.83 230.999 cv159.886 231.077 163.087 229.006 163.087 229.006 cv163.451 228.768 163.531 228.788 163.64 228.897 cv163.761 228.913 163.98 228.772 163.98 228.772 cv164.011 228.635 162.843 226.84 162.843 226.84 cv162.707 226.807 162.492 226.948 162.492 226.948 cv162.525 227.241 162.519 227.329 162.162 227.559 cv156.828 231.004 li156.794 231.143 156.933 231.354 156.933 231.354 cv157.533 231.147 157.589 231.233 157.71 231.413 cv162.101 238.204 li162.23 238.403 162.255 238.485 161.886 238.788 cv161.869 238.918 162.007 239.126 162.007 239.126 cv162.14 239.157 167.658 235.592 167.658 235.592 cv168.021 235.358 168.093 235.383 168.218 235.518 cv168.343 235.536 168.562 235.397 168.562 235.397 cv168.593 235.26 167.41 233.432 167.41 233.432 cv167.273 233.405 167.062 233.543 167.062 233.543 cvcp157.042 241.018 mo157.042 241.018 154.039 234.432 154.023 234.399 cv154.066 234.475 155.953 233.62 155.953 233.62 cv156.324 233.452 156.408 233.463 156.562 233.706 cv156.687 233.741 156.918 233.635 156.918 233.635 cv156.968 233.506 156.027 231.444 156.027 231.444 cv155.894 231.395 155.664 231.499 155.664 231.499 cv155.652 231.807 155.611 231.883 155.238 232.055 cv149.632 234.604 li149.238 234.786 149.164 234.749 149.054 234.596 cv148.933 234.565 148.707 234.67 148.707 234.67 cv148.66 234.799 149.593 236.866 149.593 236.866 cv149.722 236.917 149.958 236.809 149.958 236.809 cv149.953 236.752 149.951 236.702 149.951 236.659 cv149.951 236.389 150.033 236.311 150.343 236.17 cv150.345 236.17 152.316 235.272 152.32 235.27 cv152.32 235.27 152.32 235.27 152.32 235.276 cv152.32 235.499 155.21 241.852 155.21 241.852 cv155.253 241.946 155.277 242.016 155.277 242.075 cv155.277 242.168 155.222 242.227 155.113 242.307 cv155.109 242.321 155.107 242.34 155.107 242.358 cv155.107 242.485 155.187 242.663 155.187 242.663 cv155.318 242.713 157.691 241.629 157.691 241.629 cv157.781 241.584 li157.628 241.264 li157.216 241.295 157.146 241.245 157.042 241.018 cvcp145.699 239.448 mo144.548 239.438 143.558 239.428 143.41 238.721 cv143.273 238.075 143.666 237.614 144.515 237.432 cv145.949 237.129 146.806 237.59 146.878 237.926 cv146.878 237.928 146.914 238.145 146.914 238.145 cv147.001 238.311 147.275 238.362 147.275 238.362 cv147.386 238.299 148.236 235.821 148.236 235.821 cv148.351 235.483 li147.894 235.698 li147.595 235.95 li147.132 235.885 li146.595 235.78 li145.914 235.657 145.156 235.682 144.347 235.852 cv141.798 236.399 141.218 238.096 141.49 239.385 cv141.902 241.338 143.894 241.362 145.498 241.377 cv146.722 241.393 147.777 241.405 147.941 242.17 cv147.941 242.176 147.818 243.042 147.818 243.042 cv147.57 243.428 147.001 243.717 146.132 243.905 cv145.378 244.061 144.257 244.028 143.763 243.702 cv143.531 243.409 li143.474 243.172 li143.203 243.118 li143.087 243.19 142.486 245.616 142.486 245.616 cv142.486 245.616 142.546 245.627 142.584 245.633 cv142.582 245.639 li142.781 245.713 li142.794 245.69 142.804 245.692 142.816 245.67 cv142.849 245.674 142.91 245.684 142.91 245.684 cv142.97 245.573 143.007 245.508 143.05 245.502 cv143.054 245.499 143.625 245.555 143.625 245.555 cv144.185 245.659 li144.187 245.659 146.394 245.608 146.394 245.608 cv149.244 245.002 150.208 243.151 149.898 241.686 cv149.429 239.477 147.359 239.461 145.699 239.448 cvcp137.168 244.256 mo136.75 244.651 136.201 244.838 135.539 244.817 cv133.972 244.766 133.146 243.581 133.21 241.485 cv133.25 240.295 133.57 239.391 134.136 238.866 cv134.55 238.477 135.093 238.29 135.75 238.315 cv136.414 238.336 136.945 238.557 137.339 238.975 cv137.865 239.54 138.125 240.463 138.082 241.643 cv138.046 242.825 137.73 243.729 137.168 244.256 cvcp135.808 236.592 mo134.597 236.555 133.529 236.932 132.718 237.69 cv131.792 238.559 131.25 239.883 131.203 241.418 cv131.105 244.393 132.828 246.446 135.484 246.536 cv136.697 246.575 137.763 246.198 138.572 245.44 cv139.5 244.571 140.039 243.247 140.093 241.711 cv140.142 240.174 139.689 238.815 138.818 237.885 cv138.062 237.081 137.023 236.635 135.808 236.592 cvcp126.666 239.581 mo126.666 239.581 124.98 239.333 124.964 239.331 cv125.054 239.321 125.359 237.297 125.4 237.024 cv125.574 237.051 127.007 237.264 127.007 237.264 cv127.728 237.368 128.16 237.551 128.375 237.833 cv128.517 238.674 li128.39 239.518 127.886 239.764 126.666 239.581 cvcp127.578 235.612 mo123.289 234.979 li123.177 235.061 123.14 235.307 123.14 235.307 cv123.552 235.518 123.574 235.612 123.542 235.848 cv122.355 243.856 li122.322 244.09 122.281 244.17 121.923 244.161 cv121.824 244.249 121.785 244.504 121.785 244.504 cv121.867 244.618 124.597 245.018 124.597 245.018 cv124.695 245.036 li124.746 244.682 li124.416 244.516 124.339 244.428 124.339 244.276 cv124.339 244.237 124.343 244.196 124.349 244.149 cv124.349 244.149 124.816 240.987 124.82 240.961 cv124.828 241.053 126.736 241.334 126.736 241.334 cv129.199 241.702 130.298 240.352 130.509 238.967 cv130.709 237.581 130.046 235.971 127.578 235.612 cvcp158.636 225.874 mo170.716 218.096 li185.347 208.793 201.082 205.114 217.486 207.165 cv226.949 208.387 235.972 211.6 245.066 216.985 cv252.839 221.848 li260.789 227.026 li268.418 232.209 277.699 234.28 286.929 232.852 cv290.652 232.034 294.808 231.061 297.609 227.682 cv297.773 228.522 300.804 244.182 300.804 244.182 cv300.359 246.354 297.976 247.418 296.062 248.274 cv295.58 248.491 li281.722 253.092 264.906 250.338 251.714 241.292 cv251.71 241.288 239.728 233.42 239.728 233.42 cv227.269 225.381 212.365 222.493 197.753 225.284 cv190.591 226.653 183.582 229.665 175.683 234.762 cv164.625 241.936 li153.816 248.85 141.136 251.534 128.929 249.493 cv125.191 248.77 121.322 248.028 118.363 245.295 cv117.759 244.643 117.453 244.057 117.375 243.409 cv117.384 243.409 120.255 229.092 120.666 227.045 cv124.689 231.479 130.5 232.448 136.234 232.758 cv143.656 233.122 150.771 230.932 158.636 225.874 cv1 /0 get_csdsepcs0 sepf120.992 272.385 mo120.746 272.471 li120.638 272.518 li120.621 272.52 119.546 272.647 119.546 272.647 cv119.55 272.647 113.632 272.67 113.632 272.67 cv113.283 272.659 li110.707 272.592 li110.554 272.592 110.095 272.592 110.095 272.999 cv110.095 273.2 110.261 273.35 110.494 273.35 cv111.33 273.416 li112.037 273.569 112.242 273.848 112.294 274.717 cv112.347 280.295 li112.347 284.852 li112.218 290.44 li112.113 291.194 111.988 291.62 111.621 291.694 cv111.615 291.698 110.882 291.793 110.882 291.793 cv110.609 291.793 110.484 291.971 110.484 292.147 cv110.484 292.549 110.939 292.549 111.091 292.549 cv113.632 292.469 li114.613 292.502 li120.023 292.624 li121.044 292.624 121.388 292.624 121.609 291.809 cv121.613 291.803 121.953 289.245 121.953 289.245 cv121.953 289.057 121.953 288.663 121.597 288.663 cv121.271 288.663 121.21 289.022 121.179 289.211 cv121.005 290.213 120.722 290.678 120.125 290.93 cv119.49 291.202 118.38 291.202 117.722 291.202 cv115.214 291.202 114.98 290.883 114.914 289.266 cv114.91 285.987 li114.914 284.852 li114.914 282.577 li114.914 282.586 118.578 282.717 118.578 282.717 cv119.459 282.803 119.667 283.151 119.751 283.475 cv119.753 283.483 119.845 284.282 119.845 284.282 cv119.845 284.532 120 284.708 120.226 284.708 cv120.609 284.708 120.609 284.245 120.609 284.024 cv120.71 282.385 li120.916 280.915 li120.916 280.542 120.669 280.512 120.595 280.512 cv120.082 280.881 li119.875 281.112 119.574 281.161 118.968 281.213 cv114.875 281.262 li114.914 274.057 li114.875 273.999 118.392 274.071 118.39 274.073 cv119.808 274.225 119.943 274.536 120.074 274.834 cv120.074 274.842 120.214 275.69 120.214 275.69 cv120.214 276.168 120.498 276.221 120.617 276.221 cv120.746 276.221 120.916 276.143 120.994 275.778 cv120.998 275.768 121.093 274.487 121.093 274.487 cv121.121 274.043 li121.121 274.045 121.273 273.166 121.273 273.166 cv121.334 272.817 li121.334 272.416 121.101 272.385 121.031 272.385 cv120.992 272.385 li1 /0 get_csdsepcs1 sepf150.251 272.651 mo149.812 272.67 li149.449 272.655 li147.066 272.592 li146.916 272.592 146.457 272.592 146.457 272.999 cv146.457 273.196 146.628 273.35 146.859 273.35 cv147.695 273.416 li148.451 273.581 148.603 273.901 148.654 274.717 cv148.705 280.295 li148.705 283.532 li148.705 286.626 148.269 288.483 147.25 289.745 cv146.328 290.848 144.83 291.538 143.339 291.538 cv141.871 291.538 140.785 291.311 139.566 290.165 cv138.638 289.278 137.691 287.842 137.691 283.915 cv137.691 280.295 li137.738 274.717 li137.794 273.815 137.984 273.502 138.527 273.42 cv138.531 273.42 139.146 273.35 139.146 273.35 cv139.38 273.35 139.55 273.2 139.55 272.999 cv139.55 272.592 139.093 272.592 138.945 272.592 cv136.378 272.67 li135.839 272.651 li133.402 272.592 li133.25 272.592 132.789 272.592 132.789 272.999 cv132.789 273.2 132.96 273.35 133.195 273.35 cv134.027 273.416 li134.734 273.569 134.939 273.848 134.988 274.713 cv135.039 280.295 li135.039 284.073 li135.039 288.256 136.277 289.987 137.355 291.026 cv139.109 292.672 141.533 292.918 142.82 292.918 cv144.214 292.918 146.296 292.713 148.285 290.948 cv150.453 289.022 150.73 285.725 150.73 283.067 cv150.73 280.295 li150.783 274.717 li150.832 273.827 151.017 273.526 151.58 273.42 cv151.589 273.416 152.191 273.35 152.191 273.35 cv152.423 273.35 152.593 273.2 152.593 272.999 cv152.593 272.592 152.132 272.592 151.984 272.592 cv150.251 272.651 li1 /0 get_csdsepcs1 sepf157.195 273.717 mo157.169 288.551 li157.169 290.87 157.039 291.504 156.535 291.649 cv156.525 291.651 155.527 291.793 155.527 291.793 cv155.25 291.793 155.125 291.971 155.125 292.147 cv155.125 292.549 155.552 292.549 155.738 292.549 cv157.8 292.489 li158.218 292.469 li158.597 292.487 li160.957 292.549 li161.14 292.549 161.625 292.549 161.625 292.147 cv161.625 291.971 161.5 291.793 161.214 291.793 cv159.976 291.647 li159.453 291.489 159.171 291.01 159.113 288.831 cv159.113 288.831 158.82 277.936 158.796 276.965 cv159.437 277.67 165.195 284.002 165.195 284.002 cv171.957 291.026 li173.435 292.495 173.693 292.733 173.98 292.733 cv174.378 292.733 174.408 292.42 174.408 290.694 cv174.408 290.684 174.457 275.534 174.457 275.534 cv174.457 273.92 174.593 273.561 175.263 273.416 cv175.265 273.416 175.839 273.35 175.839 273.35 cv176.175 273.35 176.328 273.151 176.328 272.967 cv176.328 272.592 175.882 272.592 175.662 272.592 cv173.927 272.649 li173.464 272.67 li172.91 272.651 li170.773 272.592 li170.519 272.592 170.058 272.592 170.058 272.967 cv170.058 273.211 170.203 273.35 170.458 273.35 cv171.687 273.471 li172.304 273.633 172.519 273.983 172.539 275.741 cv172.539 275.743 172.765 285.995 172.814 288.368 cv172.312 287.825 166.955 281.993 166.955 281.993 cv158.505 272.881 li157.675 272.229 li157.228 272.229 157.195 272.819 157.195 273.717 cv1 /0 get_csdsepcs1 sepf181.324 273.061 mo181.324 273.061 licp183.718 272.655 mo183.296 272.67 li180.683 272.592 li180.535 272.592 180.074 272.592 180.074 272.999 cv180.074 273.2 180.244 273.35 180.476 273.35 cv181.228 273.444 li181.628 273.538 181.906 273.788 181.964 274.717 cv182.011 280.295 li182.011 284.852 li181.882 290.438 li181.773 291.213 181.652 291.62 181.287 291.694 cv181.285 291.698 180.55 291.793 180.55 291.793 cv180.273 291.793 180.148 291.975 180.148 292.147 cv180.148 292.549 180.607 292.549 180.757 292.549 cv183.296 292.469 li183.593 292.481 li186.48 292.549 li187.031 292.549 187.089 292.268 187.089 292.147 cv187.089 291.975 186.964 291.793 186.691 291.793 cv185.552 291.694 li184.943 291.608 184.789 291.206 184.708 290.44 cv184.708 290.438 184.578 284.852 184.578 284.852 cv184.578 280.295 li184.632 274.717 li184.685 273.827 184.873 273.526 185.429 273.418 cv186.035 273.35 li186.277 273.35 186.445 273.2 186.445 272.999 cv186.445 272.592 185.984 272.592 185.832 272.592 cv183.718 272.655 li1 /0 get_csdsepcs1 sepf206.867 272.651 mo206.482 272.67 li205.882 272.647 li203.951 272.592 li203.681 272.592 203.179 272.592 203.179 272.999 cv203.179 273.129 203.246 273.35 203.664 273.35 cv204.582 273.438 li204.757 273.53 204.785 273.733 204.785 273.846 cv204.562 274.77 li204.033 276.493 200.824 284.881 199.226 288.666 cv198.9 287.799 194.425 275.876 194.425 275.876 cv194.085 275.004 193.742 274.108 193.742 273.799 cv193.742 273.659 193.777 273.545 193.964 273.458 cv194.867 273.35 li195.261 273.35 195.324 273.11 195.324 272.967 cv195.324 272.592 194.761 272.592 194.423 272.592 cv192.548 272.649 li192.019 272.67 li191.378 272.651 li188.992 272.592 li188.625 272.592 188.121 272.592 188.121 272.967 cv188.121 273.204 188.281 273.35 188.529 273.35 cv189.457 273.444 li190.269 273.68 190.628 273.901 191.191 275.321 cv197.523 291.186 li198.07 292.559 198.218 292.918 198.644 292.918 cv198.964 292.918 199.085 292.655 199.476 291.78 cv199.908 290.831 li202.898 283.827 li204.537 279.881 li206.152 275.965 li206.832 274.26 207.199 273.833 207.503 273.624 cv207.496 273.631 208.632 273.35 208.632 273.35 cv209.072 273.35 209.14 273.11 209.14 272.967 cv209.14 272.717 208.921 272.592 208.503 272.592 cv206.867 272.651 li1 /0 get_csdsepcs1 sepf221.248 272.385 mo221 272.471 li220.894 272.518 li220.875 272.52 219.796 272.647 219.796 272.647 cv219.804 272.647 213.886 272.67 213.886 272.67 cv213.546 272.659 li210.964 272.592 li210.808 272.592 210.349 272.592 210.349 272.999 cv210.349 273.2 210.519 273.35 210.757 273.35 cv211.591 273.416 li212.294 273.569 212.5 273.848 212.546 274.713 cv212.546 274.717 212.601 280.295 212.601 280.295 cv212.601 284.852 li212.472 290.438 li212.367 291.194 212.246 291.62 211.878 291.694 cv211.875 291.698 211.14 291.793 211.14 291.793 cv210.863 291.793 210.736 291.975 210.736 292.147 cv210.736 292.549 211.199 292.549 211.351 292.549 cv213.886 292.469 li214.873 292.502 li220.277 292.624 li221.304 292.624 221.648 292.624 221.867 291.809 cv221.869 291.803 222.207 289.245 222.207 289.245 cv222.207 289.057 222.207 288.663 221.855 288.663 cv221.531 288.663 221.468 289.006 221.429 289.211 cv221.259 290.213 220.976 290.678 220.382 290.93 cv219.746 291.202 218.636 291.202 217.976 291.202 cv215.464 291.202 215.236 290.883 215.171 289.266 cv215.166 285.987 li215.171 284.852 li215.171 282.577 li215.171 282.586 218.832 282.717 218.832 282.717 cv219.82 282.815 219.945 283.249 220.011 283.479 cv220.015 283.483 220.105 284.282 220.105 284.282 cv220.105 284.538 220.253 284.708 220.486 284.708 cv220.863 284.708 220.863 284.245 220.863 284.024 cv220.968 282.385 li221.171 280.915 li221.171 280.542 220.921 280.512 220.847 280.512 cv220.369 280.85 li220.132 281.112 219.83 281.161 219.222 281.213 cv219.22 281.213 215.13 281.262 215.13 281.262 cv215.171 274.057 li215.13 273.999 218.652 274.073 218.652 274.073 cv220.054 274.225 220.195 274.536 220.334 274.836 cv220.332 274.833 220.464 275.69 220.464 275.69 cv220.464 276.168 220.753 276.221 220.875 276.221 cv221.001 276.221 221.171 276.143 221.248 275.776 cv221.347 274.547 li221.378 274.045 li221.587 272.817 li221.587 272.428 221.376 272.385 221.289 272.385 cv221.248 272.385 li1 /0 get_csdsepcs1 sepf230.023 272.647 mo229.152 272.67 li228.812 272.659 li226.23 272.592 li226.082 272.592 225.617 272.592 225.617 272.999 cv225.617 273.2 225.789 273.35 226.027 273.35 cv226.859 273.416 li227.562 273.569 227.765 273.848 227.82 274.717 cv227.871 280.295 li227.871 284.852 li227.742 290.438 li227.636 291.211 227.515 291.62 227.144 291.694 cv227.14 291.698 226.41 291.793 226.41 291.793 cv226.132 291.793 226.005 291.975 226.005 292.147 cv226.005 292.549 226.464 292.549 226.617 292.549 cv228.945 292.475 li229.046 292.469 229.359 292.481 229.359 292.481 cv232.23 292.549 li232.789 292.549 232.847 292.268 232.847 292.147 cv232.847 291.975 232.72 291.793 232.441 291.793 cv231.304 291.694 li230.687 291.608 230.539 291.206 230.464 290.444 cv230.464 290.438 230.332 284.852 230.332 284.852 cv230.332 284.227 li230.316 284.221 233.5 284.266 233.5 284.266 cv233.505 284.266 233.705 284.37 233.705 284.37 cv233.705 284.374 234.652 285.665 234.652 285.665 cv236.503 288.178 li236.859 288.651 li238.148 290.346 239.001 291.469 240.058 292.034 cv240.771 292.424 241.468 292.549 242.921 292.549 cv244.757 292.549 li245.084 292.549 245.578 292.549 245.578 292.147 cv245.578 291.952 245.386 291.793 245.144 291.793 cv244.168 291.717 li243.492 291.612 242.447 291.307 241.125 289.918 cv236.382 284.11 li236.382 284.11 235.988 283.604 235.849 283.428 cv237.921 281.463 238.929 279.557 238.929 277.448 cv238.929 275.612 237.75 274.266 237.058 273.764 cv235.621 272.733 233.8 272.592 232.214 272.592 cv230.023 272.647 licp232.078 273.809 mo234.759 273.809 236.359 275.672 236.359 278.792 cv236.359 280.549 235.802 281.977 234.865 282.608 cv234.289 283.016 233.587 283.069 233.039 283.069 cv231.816 283.069 230.726 282.872 230.421 282.69 cv230.332 274.084 li230.332 274.004 230.365 273.975 230.414 273.956 cv230.418 273.961 232.078 273.809 232.078 273.809 cv1 /0 get_csdsepcs1 sepf246.736 277.084 mo246.736 278.852 247.322 280.51 250.171 282.852 cv251.339 283.807 li253.617 285.69 254.242 286.659 254.242 288.319 cv254.242 289.93 253.039 291.561 250.742 291.561 cv249.796 291.561 247.554 291.319 247.101 289.079 cv247.099 289.079 247.031 288.163 247.031 288.163 cv247.031 288.018 247.031 287.682 246.652 287.682 cv246.308 287.682 246.265 288.061 246.244 288.268 cv246.244 288.276 246.222 288.538 246.222 288.538 cv246.113 291.034 li246.113 291.727 246.136 291.958 246.617 292.194 cv247.615 292.682 248.777 292.918 250.171 292.918 cv251.746 292.918 253.136 292.528 254.189 291.792 cv255.875 290.59 256.474 288.702 256.474 287.331 cv256.474 285.305 255.841 283.633 252.613 281.096 cv251.898 280.526 li249.419 278.499 248.812 277.674 248.812 276.334 cv248.812 274.655 250.011 273.528 251.792 273.528 cv253.931 273.528 254.648 274.416 254.859 274.799 cv254.859 274.803 255.175 276.018 255.175 276.018 cv255.199 276.213 255.242 276.53 255.574 276.53 cv255.958 276.53 255.958 276.014 255.958 275.737 cv256.042 273.19 li256.054 272.622 255.714 272.622 255.605 272.622 cv254.742 272.495 li254.734 272.495 252.289 272.229 252.289 272.229 cv248.968 272.229 246.736 274.182 246.736 277.084 cv1 /0 get_csdsepcs1 sepf261.703 273.061 mo261.703 273.061 licp264.101 272.655 mo263.671 272.67 li261.066 272.592 li260.914 272.592 260.453 272.592 260.453 272.999 cv260.453 273.196 260.625 273.35 260.855 273.35 cv261.605 273.444 li261.958 273.526 262.287 273.737 262.343 274.713 cv262.39 280.295 li262.39 284.852 li262.265 290.44 li262.156 291.213 262.035 291.62 261.671 291.694 cv261.666 291.698 260.933 291.793 260.933 291.793 cv260.656 291.793 260.529 291.975 260.529 292.147 cv260.529 292.549 260.988 292.549 261.138 292.549 cv263.671 292.469 li263.976 292.481 li266.859 292.549 li267.41 292.549 267.468 292.268 267.468 292.147 cv267.468 291.971 267.347 291.793 267.066 291.793 cv265.933 291.694 li265.316 291.608 265.168 291.206 265.089 290.444 cv265.089 290.438 264.958 284.852 264.958 284.852 cv264.958 280.295 li265.015 274.717 li265.062 273.838 265.253 273.526 265.812 273.418 cv265.808 273.42 266.421 273.35 266.421 273.35 cv266.656 273.35 266.828 273.2 266.828 272.999 cv266.828 272.592 266.365 272.592 266.212 272.592 cv264.101 272.655 li1 /0 get_csdsepcs1 sepf269.89 272.838 mo269.88 272.874 269.3 275.612 269.3 275.612 cv269.3 275.928 269.476 276.038 269.625 276.038 cv269.892 276.038 270.003 275.834 270.07 275.653 cv270.07 275.661 270.496 274.887 270.496 274.887 cv270.855 274.344 271.41 274.178 272.972 274.149 cv272.972 274.149 276.066 274.108 276.597 274.1 cv276.597 274.483 276.597 284.852 276.597 284.852 cv276.476 290.44 li276.371 291.194 276.244 291.62 275.878 291.694 cv275.875 291.698 275.142 291.793 275.142 291.793 cv274.863 291.793 274.738 291.971 274.738 292.147 cv274.738 292.549 275.199 292.549 275.351 292.549 cv277.884 292.469 li278.195 292.481 li281.062 292.549 li281.601 292.549 281.681 292.297 281.681 292.147 cv281.681 291.975 281.554 291.793 281.277 291.793 cv280.136 291.694 li279.525 291.608 279.375 291.206 279.3 290.444 cv279.3 290.44 279.171 284.852 279.171 284.852 cv279.171 284.852 279.171 274.487 279.171 274.1 cv279.523 274.108 282.226 274.149 282.226 274.149 cv284.718 274.2 285.14 274.811 285.222 275.405 cv285.222 275.409 285.246 275.678 285.246 275.678 cv285.261 275.924 285.291 276.295 285.654 276.295 cv285.718 276.295 286.031 276.272 286.031 275.768 cv286.105 272.92 li286.105 272.768 286.105 272.409 285.777 272.409 cv285.476 272.458 li283.218 272.67 li273.513 272.67 li271.486 272.543 li271.48 272.543 270.648 272.327 270.648 272.327 cv270.332 272.229 li270.105 272.229 270.003 272.495 269.89 272.838 cv1 /0 get_csdsepcs1 sepf303.539 272.647 mo302.857 272.67 li302.441 272.647 li301.148 272.592 li300.617 272.592 300.537 272.811 300.537 272.942 cv300.537 273.211 300.792 273.295 301.041 273.377 cv301.148 273.409 301.343 273.46 301.343 273.924 cv300.925 275.143 li300.507 275.846 297.589 280.866 296.787 282.446 cv296.453 281.874 292.207 274.581 292.207 274.581 cv291.902 273.668 li291.902 273.551 291.976 273.456 292.125 273.376 cv292.429 273.258 292.626 273.186 292.626 272.967 cv292.626 272.717 292.449 272.592 292.093 272.592 cv290.269 272.653 li289.918 272.67 li287.359 272.592 li286.847 272.592 286.82 272.905 286.82 272.967 cv286.82 273.196 287.003 273.35 287.277 273.35 cv288.281 273.729 li288.794 274.071 289.429 274.768 289.984 275.588 cv290.91 276.956 294.361 282.627 294.527 283.014 cv294.871 283.782 295.109 284.311 295.109 285.655 cv295.109 287.879 li295.029 290.448 li294.994 290.963 294.855 291.598 294.384 291.694 cv294.382 291.694 293.648 291.793 293.648 291.793 cv293.367 291.793 293.246 291.971 293.246 292.147 cv293.246 292.549 293.703 292.549 293.855 292.549 cv296.388 292.469 li296.695 292.481 li299.57 292.549 li300.125 292.549 300.183 292.268 300.183 292.147 cv300.183 291.975 300.056 291.793 299.777 291.793 cv298.64 291.694 li298.066 291.612 297.808 291.254 297.748 290.448 cv297.671 287.879 li297.671 285.655 li297.671 284.819 297.671 284.03 298.042 283.143 cv298.488 282.081 302.089 276.012 302.957 274.958 cv304.285 273.684 li304.287 273.682 305.367 273.35 305.367 273.35 cv305.738 273.35 305.902 273.143 305.902 272.942 cv305.902 272.729 305.693 272.592 305.367 272.592 cv303.539 272.647 li1 /0 get_csdsepcs1 sepf314.613 282.542 mo314.613 287.542 317.82 292.918 324.855 292.918 cv330.953 292.918 335.378 288.379 335.378 282.127 cv335.378 276.21 331.21 272.229 325.007 272.229 cv317.435 272.229 314.613 278.555 314.613 282.542 cvcp317.472 281.819 mo317.472 276.69 320.292 273.502 324.83 273.502 cv328.523 273.502 332.5 276.43 332.5 282.858 cv332.5 291.118 326.714 291.538 325.554 291.538 cv320.796 291.538 317.472 287.542 317.472 281.819 cv1 /0 get_csdsepcs1 sepf349.062 272.385 mo348.828 272.483 li348.683 272.553 li347.892 272.633 li347.589 272.647 li347.593 272.647 341.238 272.67 341.238 272.67 cv340.894 272.659 li338.308 272.592 li338.16 272.592 337.699 272.592 337.699 272.999 cv337.699 273.2 337.871 273.35 338.105 273.35 cv338.939 273.416 li339.644 273.569 339.851 273.848 339.9 274.713 cv339.9 274.717 339.957 280.295 339.957 280.295 cv339.957 284.852 li339.824 290.438 li339.714 291.213 339.595 291.62 339.23 291.694 cv339.222 291.698 338.494 291.793 338.494 291.793 cv338.214 291.793 338.089 291.971 338.089 292.147 cv338.089 292.549 338.552 292.549 338.703 292.549 cv341.238 292.469 li341.542 292.481 li344.421 292.549 li344.972 292.549 345.033 292.268 345.033 292.147 cv345.033 291.971 344.906 291.793 344.625 291.793 cv343.496 291.694 li342.876 291.608 342.726 291.206 342.654 290.444 cv342.654 290.438 342.523 284.852 342.523 284.852 cv342.523 282.647 li342.503 282.612 346.39 282.688 346.39 282.688 cv347.078 282.774 347.453 283.161 347.576 283.495 cv347.576 283.499 347.703 284.233 347.703 284.233 cv347.714 284.612 347.871 284.788 348.093 284.788 cv348.472 284.788 348.472 284.338 348.472 284.098 cv348.574 282.385 li348.785 280.915 li348.785 280.542 348.537 280.512 348.457 280.512 cv348.273 280.512 348.162 280.661 348.062 280.792 cv347.843 281.098 347.609 281.182 346.968 281.233 cv345.816 281.262 li342.503 281.288 li342.523 274.108 li342.554 274.02 346.535 274.096 346.535 274.096 cv347.46 274.116 347.998 274.536 348.128 274.811 cv348.128 274.815 348.335 275.715 348.335 275.715 cv348.335 276.088 348.535 276.221 348.714 276.221 cv348.832 276.221 349.039 276.163 349.117 275.776 cv349.117 275.768 349.218 274.477 349.218 274.477 cv349.25 274.045 li349.25 274.051 349.402 273.163 349.402 273.163 cv349.46 272.817 li349.46 272.561 349.312 272.385 349.105 272.385 cv349.062 272.385 li1 /0 get_csdsepcs1 sepf71.962 306.737 mo71.962 308.309 li348.003 308.309 li348.003 306.737 li71.962 306.737 li1 /0 get_csdsepcs1 sepf99.7745 322.963 mo99.7725 322.967 88.9307 345.731 88.9053 345.78 cv88.9053 345.422 78.1729 323.249 78.1729 323.249 cv77.6749 322.254 77.4014 321.952 77.0069 321.952 cv76.7432 321.952 76.3916 322.147 76.2276 323.075 cv72.2725 349.131 li72.0538 350.602 71.7139 351.991 70.71 352.206 cv69.5342 352.323 li69.3506 352.323 68.794 352.323 68.794 352.7 cv68.794 353.239 69.3897 353.239 69.6124 353.239 cv73.5674 353.122 li74.8506 353.163 li77.7647 353.239 li78.2764 353.239 78.8194 353.196 78.8194 352.7 cv78.8194 352.463 78.5694 352.323 78.1241 352.323 cv76.4639 352.126 li75.712 351.95 75.3467 351.563 75.3467 350.942 cv75.4659 349.077 li75.4659 349.077 77.542 333.178 77.542 333.174 cv77.542 333.258 79.5303 337.487 79.5303 337.487 cv81.667 342.069 li86.2686 351.147 li86.3897 351.376 li86.9952 352.512 87.3604 353.198 87.7549 353.198 cv88.1866 353.198 88.3936 352.797 89.3194 350.907 cv89.3194 350.907 98.0342 332.766 98.0342 332.764 cv98.0342 332.764 98.0342 332.764 98.0342 332.766 cv98.0342 332.93 100.404 350.319 100.404 350.319 cv100.453 350.67 100.476 350.956 100.476 351.182 cv100.476 351.67 100.38 351.893 100.273 351.928 cv100.003 352.043 99.7627 352.186 99.7627 352.463 cv99.7627 352.823 100.183 352.924 101.013 352.999 cv109.132 353.239 li109.869 353.239 110.271 353.049 110.271 352.7 cv110.271 352.323 109.789 352.323 109.533 352.323 cv107.084 351.928 li105.91 351.575 105.539 350.37 105.197 347.971 cv101.56 323.276 li101.433 322.385 101.164 321.952 100.742 321.952 cv100.312 321.952 100.089 322.336 99.7745 322.963 cv1 /0 get_csdsepcs1 sepf131.046 322.606 mo130.814 322.674 li130.808 322.674 129.105 322.911 129.105 322.911 cv129.109 322.911 119.125 322.952 119.125 322.952 cv117.209 322.893 li116.611 322.87 li116.609 322.87 113.371 322.831 113.371 322.831 cv112.875 322.831 112.392 322.866 112.392 323.292 cv112.392 323.749 112.917 323.749 113.167 323.749 cv114.705 323.866 li116.011 324.143 116.273 324.792 116.349 326.053 cv116.427 334.522 li116.427 341.553 li116.427 345.217 116.427 348.381 116.226 350.051 cv116.05 351.346 115.835 352.03 115.148 352.165 cv115.146 352.166 113.73 352.323 113.73 352.323 cv113.55 352.323 112.992 352.323 112.992 352.741 cv112.992 353.239 113.667 353.239 113.89 353.239 cv116.646 353.159 li116.648 353.159 118.925 353.122 118.925 353.122 cv124.156 353.268 li129.992 353.358 li131.531 353.358 131.949 353.358 132.246 352.249 cv132.453 351.424 132.771 348.713 132.771 347.784 cv132.771 347.383 132.771 346.969 132.351 346.969 cv131.968 346.969 131.888 347.25 131.814 347.647 cv131.535 349.295 131.062 350.077 130.074 350.534 cv129.054 351.002 127.367 351.002 126.359 351.002 cv122.207 351.002 121.738 350.344 121.66 347.743 cv121.656 343.198 li121.662 341.553 li121.662 338.397 li121.662 338.094 121.732 338.094 121.8 338.094 cv127.464 338.215 li128.73 338.348 129.396 338.809 129.619 339.698 cv129.619 339.702 129.748 340.756 129.748 340.756 cv129.777 341.122 li129.775 341.409 129.937 341.573 130.234 341.573 cv130.691 341.573 130.691 341.032 130.691 340.711 cv130.851 338.04 li131.173 335.118 li131.173 334.852 131.035 334.7 130.791 334.7 cv130.128 335.198 li129.744 335.626 129.167 335.741 128.226 335.819 cv121.841 335.899 li121.718 335.899 121.662 335.868 121.662 335.557 cv121.662 325.448 li121.662 325.149 121.755 325.149 121.841 325.149 cv127.503 325.303 li129.511 325.547 129.847 326.028 130.101 326.684 cv130.103 326.684 130.334 328.084 130.334 328.084 cv130.334 328.284 130.334 328.745 130.791 328.745 cv131.187 328.745 131.261 328.366 131.289 328.221 cv131.289 328.219 131.433 326.403 131.433 326.403 cv131.49 325.581 li131.49 325.577 131.753 323.368 131.753 323.368 cv131.81 322.969 li131.81 322.856 131.81 322.51 131.472 322.51 cv131.046 322.606 li1 /0 get_csdsepcs1 sepf146.457 322.901 mo144.339 322.952 li142.31 322.905 li138.865 322.831 li138.371 322.831 137.886 322.866 137.886 323.292 cv137.886 323.749 138.41 323.749 138.664 323.749 cv139.957 323.866 li141.265 324.143 141.531 324.793 141.605 326.053 cv141.683 334.522 li141.683 341.553 li141.683 345.217 141.683 348.381 141.484 350.051 cv141.337 351.118 141.156 352.016 140.402 352.165 cv138.984 352.323 li138.802 352.323 138.246 352.323 138.246 352.741 cv138.246 353.239 138.921 353.239 139.146 353.239 cv141.902 353.159 li141.906 353.159 144.179 353.122 144.179 353.122 cv150.347 353.272 li155.81 353.358 li157.908 353.358 158.164 353.155 158.421 352.208 cv158.738 351.047 159.023 348.03 159.023 347.588 cv159.023 347.204 159.023 346.807 158.605 346.807 cv158.179 346.807 158.105 347.166 158.07 347.497 cv157.988 348.247 157.515 349.336 157.054 349.838 cv156.117 350.85 154.691 350.92 152.453 350.92 cv149.253 350.92 148.308 350.624 147.679 350.069 cv146.875 349.377 146.875 346.596 146.875 341.553 cv146.875 334.522 li146.953 326.053 li147.039 324.598 147.39 324.047 148.355 323.868 cv149.894 323.749 li150.32 323.749 150.712 323.694 150.712 323.292 cv150.712 322.866 150.23 322.831 149.775 322.831 cv146.457 322.901 li1 /0 get_csdsepcs1 sepf172.191 350.893 mo170.964 350.397 170.855 349.784 170.855 347.147 cv170.855 337.676 li170.855 337.51 170.906 337.497 170.996 337.497 cv172.707 337.536 li174.214 337.616 175.132 337.877 175.972 338.475 cv179.433 340.889 179.808 344.786 179.808 346.348 cv179.808 351.12 175.861 351.362 175.07 351.362 cv174.162 351.362 173.259 351.327 172.191 350.893 cvcp171.14 324.741 mo171.168 324.741 172.429 324.668 172.429 324.668 cv176 324.668 177.328 328.407 177.328 330.764 cv177.328 332.637 176.775 334.077 175.726 334.922 cv175.031 335.534 174.101 335.661 172.91 335.661 cv171.054 335.543 li170.937 335.512 170.855 335.471 170.855 335.2 cv170.855 325.327 li170.855 324.901 170.927 324.805 171.14 324.741 cvcp171.113 322.885 mo168.234 322.952 li166.697 322.911 li162.8 322.831 li162.304 322.831 161.822 322.866 161.822 323.292 cv161.822 323.749 162.349 323.749 162.601 323.749 cv164.132 323.866 li165.441 324.143 165.703 324.793 165.781 326.053 cv165.859 334.522 li165.859 341.553 li165.859 345.217 165.859 348.381 165.66 350.051 cv165.507 351.159 165.328 352.018 164.582 352.165 cv163.158 352.323 li162.976 352.323 162.421 352.323 162.421 352.741 cv162.421 353.239 163.099 353.239 163.32 353.239 cv166.078 353.159 li166.082 353.159 168.355 353.122 168.355 353.122 cv171.347 353.237 li171.349 353.239 172.875 353.309 172.875 353.309 cv174.148 353.358 li181.585 353.358 184.918 348.936 184.918 344.549 cv184.918 339.961 181.125 337.034 177.578 335.825 cv180.08 334.022 181.722 332.063 181.722 328.924 cv181.722 327.495 181.101 322.831 173.109 322.831 cv171.113 322.885 li1 /0 get_csdsepcs1 sepf194.669 336.797 mo194.669 325.999 200.765 324.387 204.402 324.387 cv211.238 324.387 216.009 330.311 216.009 338.792 cv216.009 350.356 209.597 351.604 206.839 351.604 cv199.673 351.604 194.669 345.516 194.669 336.797 cvcp188.957 338.036 mo188.957 345.627 194.027 353.799 205.16 353.799 cv214.957 353.799 221.8 347.018 221.8 337.315 cv221.8 328.038 215.578 322.272 205.558 322.272 cv194.154 322.272 188.957 330.444 188.957 338.036 cv1 /0 get_csdsepcs1 sepf252.466 322.916 mo251.312 322.952 li251.203 322.948 246.714 322.831 246.714 322.831 cv246.265 322.831 245.781 322.866 245.781 323.292 cv245.781 323.749 246.304 323.749 246.558 323.749 cv247.972 323.866 li249.279 324.143 249.542 324.793 249.617 326.053 cv249.695 334.522 li249.695 339.514 li249.695 343.792 249.527 347.233 247.41 349.352 cv245.484 351.276 242.96 351.483 241.964 351.483 cv240.582 351.483 238.777 351.301 237.031 349.866 cv235.429 348.561 233.951 346.477 233.951 340.114 cv233.951 334.522 li234.027 326.053 li234.113 324.596 234.468 324.045 235.427 323.868 cv236.566 323.749 li236.773 323.749 237.304 323.749 237.304 323.292 cv237.304 322.866 236.822 322.831 236.328 322.831 cv231.41 322.952 li229.277 322.905 li225.578 322.831 li225.082 322.831 224.599 322.866 224.599 323.292 cv224.599 323.749 225.125 323.749 225.378 323.749 cv226.91 323.866 li228.22 324.143 228.484 324.793 228.56 326.053 cv228.636 334.522 li228.636 340.354 li228.636 345.42 229.777 348.807 232.226 351.014 cv235.304 353.799 239.41 353.799 241.164 353.799 cv243.49 353.799 246.548 353.471 249.539 350.897 cv252.906 348.01 253.369 343.374 253.369 338.792 cv253.369 334.522 li253.451 326.053 li253.533 324.598 253.884 324.047 254.847 323.868 cv255.988 323.749 li256.414 323.749 256.808 323.694 256.808 323.292 cv256.808 322.866 256.322 322.831 255.867 322.831 cv252.466 322.916 li1 /0 get_csdsepcs1 sepf269.605 338.303 mo269.388 338.206 269.316 338.102 269.316 337.676 cv269.316 325.528 li269.316 325.231 269.378 325.127 269.601 325.065 cv269.601 325.061 271.695 324.907 271.695 324.907 cv273.929 324.907 277.707 326.426 277.707 332.122 cv277.707 335.79 276.255 337.401 275.39 338.036 cv274.707 338.53 274.207 338.694 272.611 338.694 cv271.472 338.694 270.347 338.545 269.605 338.303 cvcp269.751 322.889 mo266.82 322.952 li265.216 322.911 li261.343 322.831 li260.847 322.831 260.365 322.866 260.365 323.292 cv260.365 323.749 260.89 323.749 261.144 323.749 cv262.679 323.866 li263.984 324.143 264.246 324.793 264.32 326.053 cv264.398 334.522 li264.398 341.553 li264.398 345.217 264.398 348.381 264.203 350.051 cv264.046 351.157 263.871 352.018 263.121 352.165 cv261.703 352.323 li261.519 352.323 260.964 352.323 260.964 352.741 cv260.964 353.239 261.642 353.239 261.863 353.239 cv265.113 353.163 li266.738 353.122 li268.029 353.151 li272.611 353.239 li272.834 353.239 273.511 353.239 273.511 352.741 cv273.511 352.616 273.453 352.323 272.929 352.323 cv270.988 352.163 li269.918 352.022 269.644 351.311 269.511 350.053 cv269.316 348.381 269.316 345.198 269.316 341.51 cv269.316 340.952 li269.316 340.786 269.367 340.733 269.535 340.733 cv273.009 340.811 li273.281 340.811 273.484 340.85 273.654 341.053 cv273.656 341.053 275.55 343.674 275.55 343.674 cv277.605 346.567 li279.941 349.772 281.433 351.567 283.113 352.467 cv284.203 353.051 285.253 353.239 287.437 353.239 cv291.234 353.239 li291.511 353.239 292.093 353.239 292.093 352.741 cv292.093 352.616 292.039 352.323 291.513 352.323 cv290.414 352.206 li289.765 352.077 288.156 351.758 285.992 349.516 cv283.929 347.346 281.585 344.387 278.613 340.639 cv277.324 339.012 li281.035 336.127 282.621 333.432 282.621 330.124 cv282.621 327.211 280.814 325.215 279.863 324.565 cv277.628 323.04 274.863 322.831 272.453 322.831 cv269.751 322.889 li1 /0 get_csdsepcs1 sepf296.88 323.612 mo296.519 347.264 li296.48 350.71 296.312 351.831 295.351 352.127 cv295.347 352.127 293.582 352.323 293.582 352.323 cv293.378 352.323 292.843 352.323 292.843 352.741 cv292.843 353.239 293.41 353.239 293.822 353.239 cv297.464 353.145 li298.136 353.122 li299.248 353.155 li303.093 353.239 li303.421 353.239 304.113 353.239 304.113 352.741 cv304.113 352.323 303.57 352.323 303.335 352.323 cv301.289 352.049 li300.421 351.749 300.023 350.446 299.953 347.702 cv299.953 347.702 299.517 330.952 299.517 330.928 cv299.519 331.047 300.326 331.928 300.326 331.928 cv308.976 341.063 li314.285 346.374 li320.769 352.811 li321.226 353.272 321.714 353.719 322.193 353.719 cv322.742 353.719 322.814 353.043 322.814 352.383 cv323.25 327.168 li323.292 324.936 323.621 324.163 324.66 323.866 cv324.666 323.866 325.828 323.749 325.828 323.749 cv326.375 323.749 326.648 323.594 326.648 323.292 cv326.648 322.831 326.037 322.831 325.632 322.831 cv322.449 322.922 li321.714 322.952 li320.304 322.911 li316.878 322.831 li316.402 322.831 315.746 322.831 315.746 323.292 cv315.746 323.698 316.136 323.749 316.48 323.749 cv317.039 323.749 317.98 323.749 318.562 323.981 cv319.406 324.334 319.816 324.948 319.859 327.489 cv320.259 345.432 li320.222 345.358 317.375 342.399 317.375 342.399 cv299.05 323.424 li298.679 323.02 li298.207 322.499 297.898 322.151 297.5 322.151 cv296.945 322.151 296.88 322.983 296.88 323.612 cv1 /0 get_csdsepcs1 sepf347.027 322.606 mo346.8 322.674 li346.792 322.674 345.091 322.911 345.091 322.911 cv345.093 322.911 335.109 322.952 335.109 322.952 cv333.183 322.893 li332.597 322.87 li332.593 322.87 329.355 322.831 329.355 322.831 cv328.861 322.831 328.378 322.866 328.378 323.292 cv328.378 323.749 328.902 323.749 329.156 323.749 cv330.691 323.866 li332 324.143 332.259 324.793 332.332 326.053 cv332.414 334.522 li332.414 341.553 li332.414 345.217 332.414 348.381 332.214 350.051 cv332.062 351.157 331.886 352.018 331.136 352.165 cv331.134 352.166 329.714 352.323 329.714 352.323 cv329.531 352.323 328.978 352.323 328.978 352.741 cv328.978 353.239 329.656 353.239 329.875 353.239 cv332.632 353.159 li332.634 353.159 334.91 353.122 334.91 353.122 cv340.14 353.268 li345.98 353.358 li347.519 353.358 347.933 353.358 348.232 352.249 cv348.437 351.432 348.757 348.719 348.757 347.784 cv348.757 347.383 348.757 346.969 348.337 346.969 cv347.953 346.969 347.871 347.25 347.8 347.647 cv347.519 349.295 347.046 350.077 346.058 350.534 cv345.035 351.002 343.351 351.002 342.343 351.002 cv338.191 351.002 337.72 350.344 337.648 347.743 cv337.64 343.198 li337.648 341.553 li337.648 338.397 li337.648 338.094 337.72 338.094 337.789 338.094 cv343.451 338.215 li344.716 338.348 345.382 338.809 345.605 339.698 cv345.605 339.702 345.734 340.745 345.734 340.745 cv345.761 341.122 li345.761 341.409 345.923 341.573 346.218 341.573 cv346.675 341.573 346.675 341.032 346.675 340.711 cv346.837 338.04 li347.154 335.118 li347.154 334.852 347.015 334.7 346.777 334.7 cv346.113 335.198 li345.726 335.626 345.156 335.741 344.214 335.819 cv344.212 335.819 337.828 335.899 337.828 335.899 cv337.699 335.899 337.648 335.868 337.648 335.557 cv337.648 325.448 li337.648 325.149 337.744 325.149 337.828 325.149 cv343.492 325.303 li345.5 325.547 345.832 326.028 346.087 326.684 cv346.32 328.084 li346.32 328.264 346.32 328.745 346.777 328.745 cv347.168 328.745 347.25 328.354 347.277 328.221 cv347.277 328.219 347.421 326.391 347.421 326.391 cv347.48 325.581 li347.48 325.577 347.74 323.368 347.74 323.368 cv347.796 322.969 li347.796 322.856 347.796 322.51 347.458 322.51 cv347.027 322.606 li1 /0 get_csdsepcs1 sepf69.3663 272.79 mo69.3389 272.874 68.7627 275.612 68.7627 275.612 cv68.7627 275.928 68.9405 276.038 69.0928 276.038 cv69.3545 276.038 69.4678 275.834 69.5342 275.651 cv69.5342 275.661 69.9561 274.887 69.9561 274.887 cv70.3194 274.344 70.8741 274.178 72.4346 274.149 cv72.4346 274.149 75.5225 274.108 76.0577 274.1 cv76.0577 274.483 76.0577 284.852 76.0577 284.852 cv75.9346 290.44 li75.8272 291.213 75.7042 291.62 75.337 291.694 cv75.3311 291.698 74.5987 291.793 74.5987 291.793 cv74.3233 291.793 74.2002 291.971 74.2002 292.147 cv74.2002 292.549 74.6592 292.549 74.8096 292.549 cv77.3467 292.469 li77.6475 292.481 li80.5303 292.549 li81.0811 292.549 81.1397 292.268 81.1397 292.147 cv81.1397 291.975 81.0147 291.793 80.7393 291.793 cv79.6045 291.694 li78.9874 291.608 78.837 291.206 78.7627 290.444 cv78.7627 290.438 78.6299 284.852 78.6299 284.852 cv78.6299 284.852 78.6299 274.487 78.6299 274.1 cv78.9834 274.108 81.6905 274.149 81.6905 274.149 cv84.1846 274.2 84.6006 274.811 84.6807 275.403 cv84.6807 275.405 84.7061 275.682 84.7061 275.682 cv84.7256 275.924 84.7569 276.295 85.1104 276.295 cv85.1729 276.295 85.4913 276.272 85.4913 275.768 cv85.5694 272.92 li85.5694 272.768 85.5694 272.409 85.2413 272.409 cv84.9327 272.458 li82.6749 272.67 li72.9717 272.67 li70.9483 272.543 li70.9444 272.543 70.1124 272.327 70.1124 272.327 cv69.7881 272.229 li69.5577 272.229 69.46 272.514 69.3663 272.79 cv1 /0 get_csdsepcs1 sepf104.212 272.655 mo103.792 272.67 li100.871 272.592 li100.72 272.592 100.257 272.592 100.257 272.999 cv100.257 273.2 100.429 273.35 100.664 273.35 cv101.5 273.416 li102.207 273.569 102.41 273.848 102.46 274.713 cv102.511 280.295 li102.511 280.84 li91.5792 280.792 li91.6202 280.295 li91.6729 274.717 li91.7217 273.838 91.919 273.526 92.4717 273.418 cv93.0811 273.35 li93.3174 273.35 93.4874 273.2 93.4874 272.999 cv93.4874 272.729 93.2803 272.592 92.878 272.592 cv90.3389 272.67 li89.9991 272.659 li87.4092 272.592 li87.2608 272.592 86.7999 272.592 86.7999 272.999 cv86.7999 273.196 86.9756 273.35 87.2042 273.35 cv88.0401 273.416 li88.7491 273.569 88.9542 273.848 88.9991 274.713 cv88.9991 274.717 89.0557 280.295 89.0557 280.295 cv89.0557 284.852 li88.9268 290.44 li88.8213 291.213 88.6963 291.62 88.3311 291.694 cv88.3272 291.698 87.5967 291.793 87.5967 291.793 cv87.3155 291.793 87.1944 291.971 87.1944 292.147 cv87.1944 292.549 87.6514 292.549 87.8057 292.549 cv90.3389 292.469 li90.6416 292.481 li93.5225 292.549 li94.0733 292.549 94.1319 292.268 94.1319 292.147 cv94.1319 291.971 94.0049 291.793 93.7295 291.793 cv92.5889 291.694 li91.9815 291.608 91.8311 291.206 91.7491 290.44 cv91.7491 290.438 91.6202 284.852 91.6202 284.852 cv91.6202 282.127 li102.558 282.174 li102.511 284.852 li102.378 290.438 li102.279 291.194 102.156 291.62 101.787 291.694 cv101.785 291.698 101.05 291.793 101.05 291.793 cv100.773 291.793 100.644 291.975 100.644 292.147 cv100.644 292.549 101.105 292.549 101.257 292.549 cv103.792 292.469 li104.093 292.481 li106.976 292.549 li107.531 292.549 107.589 292.268 107.589 292.147 cv107.589 291.975 107.466 291.793 107.189 291.793 cv106.052 291.694 li105.437 291.608 105.285 291.206 105.207 290.44 cv105.082 284.852 li105.082 280.295 li105.13 274.717 li105.185 273.827 105.373 273.526 105.929 273.418 cv105.925 273.42 106.535 273.35 106.535 273.35 cv106.771 273.35 106.943 273.2 106.943 272.999 cv106.943 272.592 106.484 272.592 106.332 272.592 cv104.212 272.655 li1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (administrator) (UHJ Di Marca)%%Title: (UOM-Pos_S_PMS.eps)%%CreationDate: 9/10/06 4:51 PM%AI9_DataStream%Gb!R&q-*X;dP,ubJ9q82"W>NHJ-3+k.LHYF1PmND%"%I9rpa:kWTm5L#RLXPn(m.hlWO4oe*4$<Y.:SoIXe@VmabUuAubTtQrd.t%&W,\a,,9H/*2@cVrfbo-@qb*@'c!#+jJ!Wpb0XFNasp1nM(0Lc_g@eXD;8iI7tj74eeenG]ln<JN-Y?C;t2HkC,^1H6)QL/b#&At%pc$X[G$&H:@UAUeD*I@<g>dLSd&tk:p!XC5*o[:tNVm+!N(*fu0]lq@;l7UQ;6Qb>kRA5hQ_gb+XHuihD`S1&dMM"d;]g8;bJ9:R%%/e#J%PO4$JT&p8!`(b7Ans@E<(<urpE`@]/i>]gG%K/Gki,Q%.XE<@a21('5IA.T$dt(>r$e0$'c#"5@<q_!^gc>2XiA+chMY".%eK+=;T+k^f<fNh13>`K8rr]bE<RIiQ*,WA,[i9tSDJMWpPWVt1CDX[1UCEkjhT`GYLdd'ra(kXkJ$_SB12&R85R5!r(tT'N^hAc]%a.7V>T>n[6i2Y\uQ?m`Xg5*hl?:dC]8Wr(5JSI0$+AVJ7S2M6X-=l@cpboje%k7\X$aA)]K3#>/NH%4,$Hl9Z3$,Hl"pJs<PSYUm%b;/3e=h:X`SL'/Q3hW_>dAYHh[$0n.e%H6c)X,A:JkbXLNjj@0qJ>^aGlj1iq\3B-pY06iHGdGs,b@["7!U;ia7/;;cl;^T],s13%+Be/5)r:Wk3p9mmiKm>YC+p]XH:tqX46W7'TKT$Ei5<CPgjAH/d+<PjA"]+,:060:<c_+%J$s*8_qR;GbiA?`g^.DY"q>&No&o)k%\Si7!"I4.,:-Y0UDY(mG)?/l"HgTCg@gm0g0n*It&[5."7^kRO$q(%O!6_kNV)Q[A/CX@o_.q\-d[KS&X3pA.9k^'(<4[5@I:^cL%)A]%DBQ`WkQ/];2C)@oGlh"%+G`/2Z4uUaZU`9HkA*/hCA3T$)rIRY6TE#u1dg#KLGM_`c]1`.m`]Sf"5Y5PB*k_]iH^C!m_]/=9%'jDfR)gW=?Hf`X$hDb@Uj3cuH\]9ed&-'EeBCO(\2#Z/ZGV?^*09!@MXUd?3'JBu>cX*:H^j4r]miG.1rt5<?70[uEf3"uY6)ZXH%&;@.)8_"qS6dJGAU#qcDcCjtt*bu_-<(K_+dfEPTm<O5uN9cmcP7FY[0?_^4PacWZs$pjZJLlcjK57^Vau!$7<BU8i4oK:A!W8uu%6PNQ*s3SM&0(P@%-HR?\c+;IBLo<:b_40;sIlcsLFGSk9/eD%p.*MX&s865hp/pXRHM:0CcDejZJ,7mJ^#WQtZ%J^u(ffi$q!S5k%<s.AfPsMHKD55?5r,2SpIiX:DRokIcI;5CVG(%a$C4.XDC[)2*Cs]2B7gNdq4:9E;,rVit-q'Br^V$hSQS].+^,(`HCE]@%mI'HQ%[V?Y'k\>^;qnK`P`YrGJKKO:a\/K?qr`b^Jop7HpY"/`#Ys>IY"<i\B<G`?*Q2U/=P^+"MUsSP[^)Qaalg+8U:0@9u>al6%?W+]Q%bjsXB$!\ZgHL8V2J,c]d^gXiTqu;BH,7>so`e.HIKXh"3f/*s-579b6ic9B)NCs)_L=ZC0eTVCfUPBfg],'u[]>].U>0YC4L8huY%;-oO,s0<s8d*Jl\hlZb=e&AW.hdh!*^MI$kn?]0qp-rFSjVo9d)I-OW5Zh0hfDG#>g$Ae>99_$lVZ2_Cg@Znb2$%V&5[Xtpi@]Du%ZJJ.mK>aV"q+A+VXu%*S6E`WA>=b*n:`)$DNPW@JhGWAu,B($I)HEf>G&*mFBLrn`EAE+1XUI\L?=ct-f'r%AbBaE)@CNIRF3r:c%]<H3r65^spE/J^<c2_6\:D3^9qc7?oph[ERd`(CE6)?[0=(#BNs1i`Y\p)g'T>kE2FL8+*I\kp=^r+I-9nIMp$dUN<^r/uLj&(:g%o%m?#UW/u"5GY(+3-ioe';s]tBFI*A]YR;/^J7GY(A+Vc)R/c:nWDsWrpGA0hZMf*(`h2[rTU%RDiHiU$"$ArDb$DQYm[4VOQ"8r%np`2ATp#jl?:2B,A%pf<74lkeg9%'FWDa[`CM9#UN:e]D__"HOHB[AdDh>[UI:F/``rojRICn$HG_`%[n%3#!c(X_7Qu&&rbrtqb%5PG*,)"]P)3Lp+9Xki7E4_!L75JR\%^mY0+@hK75<sE2hOaf6',9Z\pV-W?:*7-l$HAddV8S&$oR.&QTD;;39H#>",-[c#I`o&[`%mV.,T_Y>"oW]u*KWV$Jg7XZ$pn(qVo[*3$4r:UOb\i6PuL/AjEZ!-]Sh(%5uce(!F2D^nGe.)pC+F'OG3:>?5F9)OP#cYGq.J(a_%ksl35CH":rkk49%"W`>U7]?!WjeARRP2lHM]e3.TLpG:\\[7qTSe2uhJn1L>EBN:.F("AaMtS0h\AEFPqfL`YmlGOl\Mi9i,j)47%5:cEHTJ:r/2N-?s)9qOO\/UQ4d+gf*PVtn8B!CUQD)=PBr2\ehXjF'$66=VlkQ#kf?]DMc9HW(fF?$E5k:@%ReD'r<8'`_%*P-C/%I+$4J>BDechpG21n3-,dHpjt4m(3)0E0"8r*qfB4qmO=oT-1qC1WY>@h$UQJmO"l<oU\>8U@/fGZ[7a]M9/`!%-A-\p)BCE0Geiu%K4Wg&Ie4E#4><nU^'e)"egJUsNXN!K5#@<0r()0C9KI[rWh\.D4VKE9"d#[WO&gTK^LG5,St7Ru1Sm>&HIW5mkQjk0h8HY[+RCnc%e[k@>OnS%KC]BdGNENpADO#AiqCe3653J"Jp?E*UqH.h9B]I_OGjNlI%9rF\%"#g>pHO"Ws-_cF2e[bB]7=L/m6Pi'eQ(@hg@tNZ%\u+ig7WXq$HQ&X(T#uQr(DmD0UY6W/.Xe@LFQuS$;&RfK>]fAXVsd3lWYTuQf<O0L[[Q#@kjJ0M;<!__UD<.f#pO3<QmWbC[su$U%Ar`G,)9`X8JY_43dpYaFoTN3j"VYum@0YeW3l'7]\XcI;JE>s<SS3UD*=Xm!#`dB'nUh^:%c'eaZB]RZV+rg?k'(!Fk7:("X]N8E%GF"*<9q-.NcZqe>Jm@!;4"cobMfdhn9LTc\:/CcQ/qPOOa_h;Z]^5oCOppe?5)K8HMGd@@lo"^F"cei]BB!Hed/lKRJ0?lh2K6$S%o7F71n@R3U8_O&K,i-f]!*4$lY4&Gn`<8*JlAVAGFNPAVhCFMn4V`k%qW-%Va8AKPP9]%l\\T-MXlD^DNllpc7DgoV0$*)o)M6VR%UCMUmm#"IAA-hC&CnYAY>F=hW1^>OC];76JOOdkI2s+4oS)=d:0INU4RKHsRSe9oM[^m`7JbjVsIkqdOjNgQ`DW0)%V[F*05P+5M%]=A*E3*AqISgn1R`iWbAT0IEG7CEiHi58%Hr2fUS$XRnr`)#YU+<4\#+3O=?;i`kHr\""&IL6j:mQEekan\8!N28+JFB@:.\FrHe%hNW&W7'-E_8rlm5dGs,F]]XTO0UOLW9GY[XJRl7D*,=p^rcF=dpY!g-i3:WmDVokB;stOSa^hp)^;Q)b4!h49+(mCoPNN`;<9WhE%mh^`Veog3?F2S_W4FS*>/-3gX2&YghSgD\4iLt:tIilr.*ec\:5<F+=A294VE[c3o4K-rLF4_#kpL/Z;8=J9oGgAduM;+j(r)T-+%IC>6l^4'a2o@9#YR?)fY9pX'oA#%</Vlf+m_%DWI2U4^o55,9a+k'm[Bqq<1gF7$fmOV;8jFX/o8iHTf\X/JrgkI`4HS7)j`.oXh%2gicPOft.'XEa"Wh=12p8oAak^%T1LV<c-=8G&a2=2OrZX;!_*OZj"'b]#ehk>a-VGjO0#L>;8"TXe!qHUHms:k%D2n7OGre@3Vh%kt.KP0,MsdA5])*l"T*^q,NBE^.)reIGMKY4&.95cB%pIPC!.Z_7hQV(pa-lh-,S+JUJ:l\Cdt?Ur/bm7DrV4nM="p.;-bu*rjGf%L#@#cT5.cf::cR7'fL"-mC_8N9J1IZYaa/&LM<U0XmR<V@#n]hr6"(a/rTFe*rGZ?fsA/NmA.cM>_u.3]K_<^md[OR:*sOrPL]$l%Y20\\a+nr11d8OLJMR8TAqMdO,]$-]ZVXQB1F[1CKq07-UnZLelT7i;2L,&aQ5h5G<$XK5`HqHJBf/dLHG=HgoONjj`1QEEh=nSk%2a86?Q:XBZctT]4_8DnI:>Tm::qRf1FI6&*gc]sW>hMn&Pfl`qAM/PRm+/b1CW]j?*U_'f;C;//P&m!ig@Tl=0@H.X@2=:F$?I29%^U'R)Qq?^&!cls0]q`jAOZ$o6'!S&'kYaBbp/#(,Zd7O>WO4qX1O2!tihZH-PFaUWdS2%)_5'cC]$gN*A&U2PR71>\r*@X^3_c&O%/p:T$qajS5@Yq;)jc/Z'`V9oR>\UrRC%Ju7j;E_ET-?u!/\#4Rl1mp2o'%kG0IHJf:".tdFIS;S(-f"[X%nj"1O&$\IJZV-]\hba%bpE&oCtF!b5ML.Io^;*kA)oK2'm"kHShVRG[@!i)36]+M?GF/*:AT#(IHifV=';Wf*%$(<C!"!rgCa=j?@MQ/=/s-l:AT,PkrMR#%n/"GU@oCfcAmW/^ZE;E?mA.m9AAaaYM.C$m5&+YtnXKHR9j6Y2(8gWsK9,iN/t&$[3=MEOY;OY=n&CMMl(MZd)#!8c(])ROFja]:%q`pWmF;0=TR9lr_\agH1PGZLhl*MiI%u.QK5+FGa/!E^QqF^KbbG9ZnprS7YV`eM8,8O,nmL,@\e*pSHo_J-T>D#5<g;QW^es-`.%NLinY.A/Dr.Moj/R\i*&>t6IPhWQiR92qfI.W<`l811n$YJ$=Z;kfDnPO^Tc\T<)oP<!p_NuajEkfmp*4G=g.%]0,mZt((^%GC;W%;V3oKmbtWaIG4YTG]8$[(J\Jd`m^@3=1I(UGK71XccYR6j3o9_rE-CQWnB*%;"oceHok]KqM73s^"TDb:E5rU-eg$G[mM0G+$2]e%jmCf!9/fX2fSu9kC%\R[FaSM%$%3>CV_]1%pK.*:Nc3f>B4;++:Z),Sns8*1%:`b?6N>!omI*+hFm\t2o:7sjFa=Cn\rM[^N6OON%j+P;Ta/?=_[?u/a]'\69IGT+dfQK/u;/J;,IE!:EYYIuX5&MkfF2XGj_IO1#oi9$6E=5Qt9%Us*m:eVmDg>N45Mf,'T*jNr'I_S_%R7g%ndpQC?qQDR:k%Ep1eSZWC%b6apUoaHDjt.\*@Ld;5n0)fGEEc,&9)a/]U6;@2\ra$&T)>9]Dg6!'JR;Ot4RNb@(Ln3;,nXb'%h=EVl$YOAFIGqfiU+cFF0DPZF_(kpi!##3)q]b3AiiH'\DC2R_U&n/h6f=O/^83DarBO/+Qh0Hjjbo:K)a.78nNORI3=B\]qU2f6%a^4*EaE1A:i-#S;LRH/"ekc&Nh3fW2Mt[*3ZmU0(lMR6LhdJ)7<*n2fgp$(pc*u*Hj*0k#lehI0(60e[\m5^=@e*7_`PmX;>sA8M%U7_IcF]!.`(24GIHHjEb4/^VB;t%3Kae_5IPeE!]L(&S"DC4Jc2G\b^+=P9kI7bm2OD?4:a_m,!'89^a2AlDnDcu-0`@GeiKo>;-%mH7u_F\iN>O&GsFo:+k/_*e=%PJ*UC+A/$S/I;WAT%`eP6XT]/%<*8s9%4h\E!26DSaR@Gi7[OQE1)!\"-,oF"2+2o/+AS.,WELZ%?Z/,sCjmc$P`mP*EPu/YAj10!@ruK>cgTY>Qd+CL-Fh5EMrF+V(uW!<f@l1;V^;]:>A5X#!eoGB?S`e#%$)M=\?pZoV/5pmN>Rih%`dF4p0e(cQe'erqGf<6AZ/-mePP,;d(iGl=9RdCfg:i*:H.^GRCP@qILD?<=CouK;TP_7[5L5kN&&;)cNSALOqPo(N7;h\g#(H_&%r*);fW5IN'oMM\\[b^"I$q#f*fc>UO\;N%1af5mKJbi1NeP$2bkt7HEG4KhJ!3H<7,?\j[#.^gUZ_n7Y=o/LG(:JQD$S!rH'O[!0%(UrZIC,Q0)WP-VI`_V'a*SeP?"\J<o@(saKOC_rVaH2lt7`H-B+Ns8DIc/GTpRadrUfs\3qcO7c_Nf2YX7@W]i7S+>lNeK570@Jl%#!>5GKIXAAcP3;=NfET$h03*Xr4&HDV6Lu/jaqQ=T>+XW1:sftYp-/\13mIjNXHjQi[-G/-C$X?))5XiPXG-=[K)oJ[\*KUG)hqg%"QXY[e?pq)$5.H0b.t`AK669sIpEUmO53NYjVV#5^CkqR&M:N[^a+)#@d:1uI_YkLf[Uh%KFF_Q+Cael@264"*c[*'O#q5@IfB-P%!Y&pM6Qt1*O2#9<"+a_B;*Dh,jV/&g6D0<+]<RQ5'<WmAqc57(rR^[V&hT$g*#faB1pT8>NmG1Sjr<(2cTY]q/:/]:pXFe+YD@Gt%p`0P9e;/<4(F*ZZ.M!Cbd#$fN^Lm;Dpj%='Y;UT@pSq)HDJT,YK<_3(ou252Q3k+Wa_d(c&+*rGCDI!UpD3_=4@gMX!Yohce,k`I%B._khA>:XkiJC\?;D3-"Qk2Y":jtEo"("%b1`'ZVL+-To?4sp#_=[M>ppW6',,oT=.Xs2IP'sUshjg6GA[Co]D=p:de.1',`q/ui%Le!$_\LUQ5.@CRo?:MePWF2<:*O0$(Hl#WG9tr,VRjb#:EP]o?,4`nk9c-NY[n"K&V>#tSQ.#BO`Gt/<X3RrKk@Q&eEuR#tqoR&9%eEt&58Xcfhdn0/UfVoH)L@]PXa$3"KMs[TaA[K,+k4-b<EP*>cE2(=c<M-<(&$!5G+4sFBG!<q0rg?b5>;Wr2pL7lE4u_*,0C%-"%pI05dh(5lcb(/d*74&I)T`h?`flcX(C$Wfoe`u\N27qWL.;c\Xms:"`"#>-:2S>MV136=WnLnLl!F+723Va+6/N+"[e"$ZS$nA;F%e7&ffm%k`o>DjDiq"k1UUI/,.V)pL,`%Y[;d$S7qgDV#9lJ^3,FP7nU@raWsGCO_qb+"pERMLi&\Ip"PSECR'H2]D8arB+$_:[_n%S`lJd;mR6#[:+S*Nf2_i4@_o'QM-I.h$+"]gg:C6HGXG.PUj<(!i3;V/)HolYapa<k)#'p4XWEOnZ[rAl(b-qIG"K`;L\:-\X-_^%Q2["DqO-sHT9Oe,6RMamAa2@B/4#$2n(n?ufg7UXr%dUk&-*cd%8KY<E:S._jBh)dH)t_O3d@D'B$!qscf=1p7Xir7@-;-+Q94DC%]87ssm`$Z^itaV8S)(k"K\L&_5\BIs8gYV`1*\j]Yr_E'Eg*i]Ab;^LPWt]\68Mh<DTR2"&/qf]*?7I8+:4e@#(]1X:#a9`ol9He%KHII31[^4F&=RI3pWO7<>;>ukDoDc^A?S7Y/InMci,0AdC=USKGVctHOLmSebD4Fa0K'q>>8^r9%l;B^X2M&"B.cMa*k+E)^BpTJ%V`YYAV]a^AGS2SNJJN;mo2DoW.>eA>_*r=o1XC0i;GOAgLPSI*_T:sQnJpdUlS>3E3.;AP\@L*IR4*?LG5CBf(mb>/\8muD=2KbH%j4(UY7`->>[0hD*)[fdA$>`B4:jR)M8-()s"kSG_)a1h@@3=>%q:QG<<<N;PoWe#Zi!@c\8`E(0XPDqR,`BEu5g?63a(VQf4[$3&%5._IY8'8,uH/#k*83WM_MhQ&iZ%o%ul`P9tG$O78fpC[&`TCOd0II<K$Wd/G?B2SH\ObA"Y-!Ur5M]@A,)cbENn+tb0;=Fj\gq'r%g\jQS$O.A:i8*lCToGIRT%ip47n@$Ao9n5_$f`Q<%EIkf1_uTA(q61EO'D!E7W`uLB-#;d@l@sAY<R*RY)\EG[u/JkGG4;@pIi7]%DOU@A;_TgK1AqSK-B8?/ZLFr7d>0\H%CA'HL99M+:KonpO9dS-CuHRdjPcCa.7>N_Q8aQU$O#7<P22^gJ,i^.i5)f\QokZ7JeLJ;%dchPCAKAJlJeXZ5Deb3K$G.TP$Kg&qQXAVqU1b^/fuW5HqW4kMgm'bE=D1adR,\5n'6<s-GbNn\Zn4E%R6!8"\9D3iMiJ%_W0Wr4%N:QsG-QZuHE&q*9f::jB!;F)'Q\W2\Ae>#rQGA,Y(4eQmaZ_pn"/q5noD%L24)FXpS/Ba/5TR1N`"gm:T>75R="YZnmd-['/(<-C%\Tda^R8e.cL^p<l^H$'p&JcR*g#KQbA-V"UGDQtlC74/TXs87KE3nsXN-hu1r3MVkp+2"f+H41@eM<CDpM3[M!)ga1/N]J*b\+Z4%`l2uOF,ghF=Pp^>o(*AaR!$=Z$*kQ$Z=1X%X-W/D\X_/)C1KKJc^e6g)pD1&Z%.18ksd6,E)2C^ou?3=cdka03`pfTYfZ7(S#pAn%FtrD5PMZR[fD?*Eeba9;-1noM]P;c)V6tX/QoF*G[l9<0'^NY2?5s6=d#OTG+$JLgbkl95?1"A8>jA#Q,Z-deJ+dFPTtK6\+6G!i%EBa\[>r%ZZ9aIf`YrN\APtGd<Mq#Z=`r)CW:.AKD'`h.?6"Nts&MW?d1lO,KX9\c`%2i@^7<uZ7?6d'*h<N?r?I-m'T9l:*\D(5$%?>Gc]M=`F_rRAa>_B?a4@QM?b[,0EaQ=3^f@]e8O6a@PXkTt/Yeala.l!;QlBl\uposQDhf^qVDf5D]p<_m@VOX0tlMk$bLX`4,1%/c3DW?R>U^`O6bP>,Os*2;TI\T.GG85-hTnUDg9]M\VZA9Vm!$cNOP$(gc%Pa^r12)d#N\BU08_YV)H1$JEdfh_m<nFRW9nbuQ'G%fj`^ZUDm^Hk4C1j0iN4uc98@@"W.+Aj7d6*Y+Na!gG?j\R<^%OC-1Ek^\XP6[;=p<>gD-f?*+8`a:_d<GT9RTrL>?K#K'YWBY&u;%\WBm;prlP%-ZCQrh;8Jt(@pIQKkX34W!i)]qshtV6K"Zabo^ZtCn/."f,6f`X3p>d-m7,Z#%M\e;TT)eg\Jj%I;oj@_ZCg&YI=,k%Qe)a#E5uKBT8m2nXN*P*q!SXJou`!9]*E[0)KT2FNRc\OV'bm1:$]jsL/s^A#SuX">%f)ZOGN#r'b(@nQ6^VM`Pd4@oRLH/Aja3'%B_%$D\qd`aL;h*"Eu^A_%i5$=L-+=0_:ptEL$an!)Fh`Nl5!n?n%('FS>g.kpAIZ4M<4n=kGlptE/GUmS@kZ7p'd6'(TKFrLD"3r%@-]`Xr#$H/.q>]_?c(nSm's4AEEC%>CD/<j.aocXL$bJD*,uO9mRid49B9<g+[3B#.FSKpF4IbEJbB-JP'kGu<SsqlOr#8QB@0O8%EuOf]#-fG>c)Iq:K0VMT<Xs>E,[-Mj#jT9*FXPSZ@9^R\Hj'F+]6o-`<cU3k\&4#;8M&>75Pn\li9.\/;3iH8WHbIOD##k)qb2?!%89#U%=]bt>/A-^9;$>#&ah&Lb(1g&s7tmHfk'R4bh]K;e?Fp"ps&Q\%'E@3D_n@rg,ZW,iHFW9NPUaH,3_.RdkuNh_p$B1`]+<I>%;Re^+>fjOYM"fOQI:39if\6^f$D.+!;8G''B#K,Bl,'/'D(+d._,[2)/$m[TDR7UR4*GmRO6]\=f='ct+#qjfgD2J<a^d?u`RMWG%C7el%bMl0FQJE@$-L4S,ipJ.dAZD#ta&X$#q9A"p=KT6GP0($M)nIk4Xf.cF2K-Vmmd:3uJP+1A6"DT1I9[PQ7SVA0R`)$Co?lNX%SJj?M?EK*(FiSlOBN9[[1c@)UmHL9hZBWNe\Pm'OpJ5$$\1k<ChRV6^8(Q0EB&c(Ylo^>hXD32qN0-g$[:%4LkV;EY-Xmo:=3g*q%3M*!%85&j$N^1i1#eC)Z'N(A#j[u\c!6O``k4ASZL[B%GM2+b\.5U\f0oLh#kaJ"?L\!A^0>jYEM8A4Zm"E\6Jp+\!*g^HD5?=t/%.Gua)mpE!a;b`T95@HZ2F55U[\#=b6HPm!WDcgt=.F"j>?:MFUb-f6`j]*Ki2Vnn.af"_6`:D*Z=<Y,^"52nW3@2j$oU0?X`TJ@_%!K0#`d+3e3[B%SX&qNuiLW?SuB<l/;-R\iYf-.Ncb'Nc/`r0#AY1LYk@nUf#N4:j#k&Fb!\J8VV<ue;@r<*sA:m0qS'&%cj`M0YJ%f2W[ZD`G[-k]IS_H2IrtmrM;_O;pT#9AF]"hS6Delr==4Enr(q[Ys^`*h3`QYp@h1/WZt-rV;>mbiXii]nhtsPF^e2.YOR$H"Z9B%S#,Nd[8c9L?A5Ug/^O6MH-CFKo.LNe\u^RV>_QQHiE`]NgC:?3gm)OP15/m&pCSf48Y@\75gSgnXHq)+ZV=[WF;ulS]F2=Ak,K?W%*TLU'C"-m>X`R29_S+I(Q)VdGYtVP"lb)5F9&[25#)m4gN8<q$,.+mD]CNH]?iFn*&[fVMZ*EVAMAK<>cT'T.e(@PW,Bst?qVm>!%bC"073Ls`id.aRQE;VHm;r9cX;o`N!\r#9f]Rf"AZ1,WkKuZp;lC5T1\Z[qN7Wb_=L[k(ChqR0NU0[`o^s:N!ghquqW\Z@\419*n%5([OtF@<3'R+:J\h-T1/qIB`0?1[(k%3C9siRtQ''oRG7p"\7hMO.u8S+`9DDT\:^?NK8u5#(Seji\$)'jOgd8(U7@%L:%?@q3t:%cf.'8XSQ7&LM<5MJ6HbtM$_fbLPH?Ea.ttC;9Zk_`/2NS\\I.,=l[WgV7q`CWr?MkLKeC,6/"&;B.AhT($ChYZOt0AmY+:eohgBr%`QNHg[iXG$or[Ot-sGju'0TTg`YO%A_7_3``a`*H?ID0J4:9?F$Q?+`FfK"l'\ut0o;Us1Kj('IEOo,mQ&R_h3HJf?4KhY-4_bk]%-EcMa2,_(L7kIq_Sm57/]V8T$M3*hijYa%!b/VDhDOr,p>,7J3hd<PW'@=1p>':o`/Bl<#,)*+>e?[-]7Cc=>DhI0;54-rW>mn;M%[\@'`kDW)hSlI^V/TS&h@f^#?H64:-hK#[k?/5:92;_'VICepdhZiM4GTH'5[9+NMmrr"3l+6;(kMVA+bkk%D\kY]mW^BG/Dp#E%%;V!]prOC?EID#'pi?_DoZ1-N,\cU@&M"?<(%V/EW\d^1$^4!/smb?p)6e>a82qJe?U[f&1n#g2Hl2**'2gO*B$=*'a;#bI;/(!oP%<Ek2o30^TAj@q:)8[[[Oc@1Sk]\9U/j?qJ(T;2tPCrod6?,VWb]Z9K!.$6IC%or(aP1#40Wj[;Pg>i3s%olgt;b\P;qEIqrl0%U:%abQlJT;eEsQBa[6mC8IiI]1ukR;0BkiX\4PD>0mqom`po!h@=2-Qf>u9n0#Yf('V!WjVmt@^,1u:poC@eU$W;RQjbgq+NYXWVsYg%W\'Fof<PA66e)HpkqgkRW5<jF<'@@3bRsVmI].SGbi&_:PR\e8[Q-o9=Z4%m:pgsU<\MS^LT9/GO:U0tn?2JYC<Lk.GBGN[\_MS2%HDqfhG9<hk9Ib-9Y!5nQ\n$*_1Y'eHQ>VQ*p-[Ago.>IhTkYML3e$=?alN!f#fJg:>[<Z[Q9fh?hq537Y]Gf>RF''M>65SM^%9CQ%f6ka$:nI%uDE%/Ukr%=iB,#!jrAqijbgQ=+fuq<A*Qk]i_:X(:bdA-ts5m9[/'hNher>UYC_n4VIJI/o[Ys-]-]G/EZuRS?f"WWH%cH?r7MmFG<A@,$U[d+pP?^599Lo<>*o!g@!G#=cHE957(fe0(jj'(6)B=n.Xq6.rID)TdFSF(.1/2?/$g-n(T[UaZlM/&T=Zfg\5%g[a\Wp>m+PfsY"Q5&49D^+?X?Qb9BJXuuUU?XS(VT'aDI0YY]:Ed>*Oib\4#_J^s\SVsgU]@D;/4PL#hSaqu2.*m'6SA"Qok\POQ%Mc+&s]Y5]8ZX"8X0=VhD9mO1*ip>p2S!D.&=2rmU'pK)aZPW.iMm?h/>2&!LW$SJt/KdcnD-&C:Sd!4_DuA5Kfe+f@Ip&AV\2`65%CQ3+H=;(pFYLN"&S]S@ImI'0rIm)P7Xno\KB=n#3\EgG?-c'>mZ#U6/P2FPkP\In(DeC"-g&C<j/+:L-\$KAtV"^p.BA6RnoBN8[%R5?_CFo4/oVn7jl()EX..Vdu3Y7T;imb?F'GBLJdTK>N\rOiQ11R2s_Y:fota;!f%s1=/.LRVK!>VYXj$FbbIn_%*n^Shun`n3=&%`n,1ITo4eJ[l5<+Y%$1VF7j_lj)2SEnGA)_c[phFoi-mrAe=o0`V?7GcF2AM>nuBhV6K<Ld8m4`?hG@]b>jMIa4RsQ`\B]'p"Ck(%($!lOf>":%\#l`=Hc<Ml]*Nja0g8m.p/`!ho5[@Q=#%G=h1I4ZN&uJ?CTS?3l`!N\<&)*T?.(AU`b0>Ms.j+O%5d4A@bg!Mqu3=!%I#>rCXC?RFDq;*u1%+PUqDD?5P8ceJ\#6:-<fDD'ZemlPJ&V2OC9/1MN126KI;.E`(#q.%k@F.bX(%T&(]:kkk"qMTI,4*<($#"m%Mfi*[YE-\8ca%3P*aH!-D97ZTcVgphWYORF41kKh@bgdVeob#P:TC%1>i3<)6H/_<m^dCF1%'&O_<]tt)u<XZ?'M_oU12pB]0,D]%(nXT6ZPDNDeospG%V5IaL\4Z+j#=L8ntjrB0i#KGqYT'Mq%_pj$1g(jj.=5PLc&.j:F$@\iV'=J.o_J2GW4-8(#s?Z,\sIu#A\]b%1]Aa:j$YI\IfX)N($!:M5aM1GnBr'3/l"me:bckJ-2g-K38&`#EoM4AN16i=h$0r^W#/n/L;RRQ`g?87=0<CL\Kg)E.`P'!d+pat%NAMCCdji@#IeuprYI@s\ehX3Bs1=/.gQRc-=,\(G,HeqA.o_Ik]KXA3gombfI)>dFW;LiSisRX0f2OK=eGWl-=,]5r5;p8cHkoM!%.`S_O*5B>g=4Q8!D)h%aT2gXcr=EIg<?5uLoD&?g3dgp1el<`.o^hkXXub>d[[mBFp\Lo-NS8?HC1."ji<F7"?X[8^Fh#'+qVP>/%>:St=W&f<7Ac5f4_i6EgYke=#3o$YCfCd<o</56=U"p[j`r<&#gb9-o0Bl94_jti+f3985Z!mX13ntWPqO?d>omJ9-??Q#MojTFN%LX5pFl.W/TNS<k:EdD"mLE"FErG'?@Wl&[/])SEagbtpSmFC181%p2[MdKJ>gNcA+Wt*a$B3/a9#M%c;1->s/C%^c\R2XpHW=F-=%5PEjsE,uf2hc5HX<^$IOFniTh`V!5d008&t:Na0E)nmHLp/ff':)I2RFgt9fmO!""e`q+/m(kP\LE!g2X602@l>QjQQ?s@t=rhK+%,C03:<up_=QF0bK)n"X*)I$is\?cXNcK]@1/[kZDn2^BO`p.N<2LN48iq2L'?gPrKTC/<2nbp$[gt6E^Rt#;*iPoKiRJ:,hLG,[e%>YfM;PV;`Ce`!\!<FA#]_Xh#3Rc4P*_Th8bV?@3d?VcgJ1n6egRsK<brWAgkNkF73=]ZcMb?Hh4D/X4K_>:lOI0',6Hc='+X73nW%+JmT*O7cQ?V+Na\0XbL@V\@)*hKQ4AA$\,o/obOUeC#=Bpn^5"-])cEdZG;p0ATK-3Tp&qib?LYdOFY8!n7Rd\2bROOY<rNXnQpG%oA`GUEd)K!;`;CMVs\Bc*sFD%-VOKhihuhQ/'Q\71,K6Xn#kAgV4aUD:#H$.N)TYDTHfEY?fK6[$\OJ;N^:_]H*GT+Z*P.n/F\ft%=1aW9?=gfE9%`Sr!BsA:*re9=:AC>NDkBLl_fp@g+E1*8[NbhoD&=g1?^)Pm)M'jU(9]C^-T'W3BLnVOd:%)km2Ng:p>&\+\;S1H%cKo_(Kri(r[=@l<CqX14!%BY?fW19$)u8@*`Rr$<rjdqk@eKA^^6*_21;8712blWD8bKO(WRV0D(<2c>;talVO&LoO(9dc/o;Il:%kZ"f+IoI=t*26+)o+eUEm:3Bud;?sN"3`7L'YDpl72P(8\Q/+'CM,P0iPt-RjV,9I0m4+5$c[R?^"=tOWR"iqOh(AK-N`t1ghtRY%hmm$/@mrL_:6"D.nglQeZ#ner3hU-]!fd2LKEWod[:.jUDk+gg+kK.H*rht'@WskW^;c`?54ZgBbSkA%rLsQK?.ZX=FMbZ<QZalt%DD$2'\1GUBV0F"Ph"V44euc.9[Kp'E50^sFhPrlAf#-gKZ":>HSaJB5(G]IM22s2M4C7BK9Ql4:@\CbA)>@T/BC()PlZaGuo#KAg%iN==Z(YY1P&Y7',aG=o@ea`E?N+cFb\sjBES;L]lD'L=,T7qlcFJ7PRDKl9AcFG)^a2%XiSHT9![s-0.W_M;D(2!"V>cE,;XuF*R%F_^XeQ=B<ckWW//ab2_+;k&[+f6X[n\,$9/eecr8\tu\,9S.pTLbpae_;UmV2KI7b#]W]i2`V^&10MAi"7WhdQn6BlT@7\J6G&V;%m98qD\ghK57Bt$Sf=F.'"8@#AGMF@#bMDpNr-dY<V=)Nq?\kgcfDbW0#,`.]>E<^mQd/Zh51k:u''n+M\hqS?=a'Nfg4`('ILHl[%F?9E*UTl,JN2UP4+$$=^HUBA<OHqNLo(11T[Ch0AWGF],M/(bDAVYV'@/&LJSK"t1l<^N,Lq+Y^*7aWHmP"K_[qeXo?p._^I(qSI%N9/ZaQIg)6-EUIDX-T*HZ&=;P4?0;$H/G]1T3@hC.,qLIfMO4&N43\01Q,F[?H^5q[HtJFeaSaY"q(m@R;\ZMY$^ACXnU]WCY&Bf%JD1GXr)4u"F3<g\^V"<$g(Ss<+qUK.k_M;n(rSkno3sS6p$7N]hb=9d:"8XV2_XGt21:-c^*i>$lM$F$0(9H-%c_Ni_Ru&ocUAX&%9P<:0>hj$ircM=_jrQt'S>9MF(!F&]Q7LiV9M3pmCLhX]45Y*r?L,!]%Vj0F[:k7%(T)JmlmC#mN&PH!/^1]J$W1QEoeL>9\/n=J%`k:b,9REtPYs$/'>b%0Cc8W:27uK>N*qQ4EFg'@fG&*4H;J_CI/38;TQ"i6'-F*T!opjdm^=%^./\.GJkQff%q>FfPZHqGT)3sq7%(KnAb?Q.a[cEpVF_b'hWeQ.'6qXXWsOk\2G7q$i?JR%]59.#*cY5t^uU$f^lor+1o&IXG?l$A<]d3hQ)[lr$nVs\u^bZ2a6@[28J%p7<iE#2CosgMIG'pEKUh2Lg3"-:K@?r&ig$N@Q(Mc:LB#GE8?(*]JJEUS'9.]@kpe^Ikc5ir*K/s4o9hG8d+PLfDUu]ZK((Ho(<k%Iee9G.&uRoo?#<aOmScj'L/d*mG$[7Mt,WXEA6nUQ4=)5b2V#QV\"`8Gl7Ne@q%:a(BZaO!PdaNkV[[5IV.n%*dl2`mQt[P,&m=`%e]GkApR?d\ZbO70(`^L%^>5.9$Qk_HC5:e++i36,UI-A0]$E+OS%VJWq!.Ek0PDIq#34#sOI!eTn7=K"kLE\?\CoX\-02;EkA3Q3%Dgs5,;>NE*QENZOGT0[e.KKs;HH>6c"e.UZ\s"2Mm?J'q<a56Ng;5^BcPrZ!j!m.BM>bMP5RZ:i;Em,63,Z&hnagqiB9;=LQQEp1%rpi1Y!(GrBkgo11s.QZn`7l_jTm1sno3OOB&Cg(T$!*>^,tiU8,:np0Kb!f#pB[:ZLqgU21M;9S&c"J2q3oF^a_uf?o5'WLY+IY:%nk5^>3UIeL,\$_=I7kh-AE:^*2QR=^C>nNj2;qjTSV(5sU^a3jpiX#i\M2Mp_mN#3ktgQD%!sjZ9u:5l:Q=u,[i=(ZpYD1kfGFPb%HGKD1mU!66nAY?Y0+b+!i%5aXp`o3b,l*$FZFBdigN;Y;FK_<bTitDaFGS&.ddp5Bb/@jH[X?CWF`R'Wq(:HJ/UW0B]aqoY2YZ`"%i004g9Ofa^-Tf$>&6<rRK5L9d3p#*eHu14bkuMAVAXMHRG,BTYG*u=HrE^n!pM^2)+#[N@co\!%P^>KkLDff.e">o1]dUF5Ea23.%LMTujiod"7$YO7_c.tecll4UVr-Uo&-AEJ#2A:_fqB-MMg6W5['5T"R[@M=.H<7XMp3P+K)QI">q7M'GLg?jlZL<q<.'\7IpbSoI%>n,C0Hi1GK\#Xt`P^2>?gqsAb&#P<;HDiAt/,o@9fU$sfA;fBAXg9*CjGU!\G:.uph;V1eWUHIH5BWOPP#B.FoTTaUhV$+CjQVOm%rc\C!W]n:>b*e<WHTBVO[!<XRS-Sl<T22k7llsA4+W['di.8NbB=[BJSW`SuDfWCti7#4nlG"*BYE$I"LbE^0HL"X@<=]/RjKihS%&^U@D?JXG^bk_'k$u^&RVoB&0kaRbRi518[F<g@@'#\[LOFY'C&,u36jKsBA)>21m4sTO2T5FYu*B',gqo?7_am!O+1,XO'S=V(9%NOF(q.t=HlDS&,T5&OVc^`r(`7Mk;dqKbcjHo)(rO1h[)Ci/e@LeItf!<@_^m*B`([i5a2Us7OZ0j>%S8#@&IahadP/dWO90W)Q;%DYASjSd0KV6(5m'bX^r)a^rC\%LB&(cXjX0fJ"XoE1:e'#sPck7K6nfEY"g;DjhG`rcm3S!Ip4.3?c!=>Olm,(lWMt5Rca9LA,O5%RHW16L28'd@iq9:<q=sGDSe0iZcq,"E#\H*_$e/7)srlS\Gm`KQ!o%$2Me5c;=]U('Xc2bpTM^<C0a`f7cNjrp)XA%:-Nf+5%Y'U%#`X8J%c2;b\`]0(,C,PLPr%U$^:Td<:$.CRpH]o7I[A4QgI1J;YuT)>[R6CLO5AfV$8+MKgeK^KYOCHmj$FXjpDJ2tR?LfU7"e8q%*<aC;qsf,":s$BU@i7CH]@()7gAT<O>)snB1O\pS"-QV*_7gn+_8rN[jHhs6QKOTeQh0QMVAT\>PDUVUF.%%t$ttis(iC$`WWdnD%+b#`Wh<0fQa+`=G>r`52<(T?@8gTCXXc)hj5rYo;MctRs]"Yni:"?i8=)D</DY':B<j*Ul(-IXM8(,:p3dW*11_Mc$\'t$In9sHZ%HME4]pbnIM#@!U8jTelV(s2,Ep:"PVm`mE",mH,aiK9elc6oR/#QibDkOPD'>PKh*B'cqYD6SpmEVXr(cFAK'=)^5WkSK`!Q_$4(%rfka:#VAY*OOL`QC-Ye14ht8&PIK<:GL?fd'"Q&,c;JM/WK_9YLH^7c6:(+*Ce]9fb'37NZ,&*ah=X\QIWR'MrSsec,0WS^m'7LI%`EKIf#<ZC&/K-tX!1?<WpN5adIf@Jj93KXZ$m]$A<dL_:n&TYsE>C?iLEJhWo0)ck*Va_&EjC=!^XQ3LkY2>qTU-dpZ0XBq]TCAA%)FlI&hWNFlk(+B\l<d??8ju\iePiV@0mdn\pRN-@GJJY5^0YHH2`6UXS[S@C.&UE[/^;Vi)q```!ukH&AdXHKOP0]^HFoGupH%Ec%eYk6^2e)b=otX=X]oUrqI_90$#oINCgDUTP3om:Z0HB2FfQN;h^bGbu9C.X]1Efa4p>NLZZc(_)Ifp97c8+EPi<gVG*9G\PRsOqm%D"E;s=Roa.j!+5HYq9`Wa*nZ6UhMa#!g's4[e=r2PiE3dZ2F^oB++Il'PmfA-a='?p_%!q3F7&g=ScSr]@)IVn5VWr<[3H"Rbb4`%s#A[^-*N^8"VTN<<TW6N?\LZC.?U*/aK8\i"Wl+1TERLq![(<hC;ecWO1aY%`pI&hg=uKq(.\=Co)(5@^flit9W^80n)nM0HhZpg%i0h?Xk4$nsYa2j=mfZISSRaoj2ni'GDiUS8je)#3@\B>ui9VroB^%8*:uc=XJ\\chGgGD_@ET0i0U2_@f\?Ti^2jMUqm-`d9KA3I%C%lhX[I51P/>-MVVeQeY"j@O,"S&,:+B1\1(HMiYLKXg4A@]Vd`6TYs[;9(@pbdp40A2=i2A;<,4fuO-[aYWa8B`HK7N7u!81_)9%"m+eM3/%e`$uiP8]Y830!UgE@EG_-In@en!QT<fKg4CIdI?W2_97bY`oW,j`e'3@:1%UpYKVac%IidG4hrb'q0<K&uGWsE-nkiR>%SFU=<;t#,%\\?T>]8pe[#_;[UN8Q4Yg<S6?j,Mf$.olK"(hh?,CL`_>(0[uiTmV'IIfE11AfC-ua5#G5Z^lp6r0>BV%?DT!b0(rn%+cfOm)=4VLP;NI!O!NmDm4_OnaOhqUF?Vb,]s[T^M-)ZB8?24OLq^L[*nVOYEA#q$L%X2]RTIs8lXeiUo/1cTXi)pgY`Uq1H[JVq%\"-sQ[p+e.&+Ic*B-0k#F&>\(@J0^l4A1+/Q!,O/I*p/m5$oCo"5c\g.Gai`p:t:O+3OccUm9(ep)\`#A'^gh5IWmI?4)PAjgU\i%.eHqQd_rTEYCZ/aj4?hYMQdU<eaE&SP][E;qm"^[#(qOkm'6q`bJuV9.,Gf"3\9#pcaY$s$sN(2,8VmI7R1Hbl,Y#&0QH-:kdX.0%6X^D5BBL4eN+gd.TH.qO5+B:):NA7RfFQU"jO,[o/(jc^`YT]2adAThY@+qmb6]Qgm]6!2;:]``YkrOEO5-/Z>&@m.>e&5=Y%=FT%%V)tKnEp1RXj#Rc?FsJlpm(dA;oe5Ze=5&*gp4JG@s/K.9#\=*?421i$9A`*7%Y':TKfBH>I5FA5!4lbIK$EdXo-J@g1PaQE!m1F%N&[^(ir]&3H`SUU!icsY7RFf&iFD8__D1,j7l>:9mGG-rp[nV=\Nl7HbHY)/o1<IEWr)i(cZ&e,4EsQOn*VhcO7t=I7`S4,=5k($%=Cnor+!9,4`/b@>U=%G/S2pH86'o8d6T9AilIB23.eiepUIlqXagBs$nI9sYrr-UP`[Q]h)M7]8JdpRdH;.`-:EIoj^WsN68WhHR%I_9a>E$n`Ibje5AUr5sfc?K[5Mq>*a5SFlYTS_/*8E/?b_F)OtnN1NtmEZ1RkYGiQSd(j#-QmubDZqUH/33hIMRRLWQNmh@^TcO6%!/fVXH0L-_l.ZOu_2!?k9Z2[J*cCmI2K[V&JR`a-*ac5".5l83g.`LG5**d*>e5'>$JA1#e)=X+?u]eG3=G4lVM':KKruee/.T9\%+KE-FeG9e?d:0pHBU,n/1@<Se_.OG=R2s)o2+;74RAnl6S0IX5nj"N*^X>5]N4%R-dG^/@SXu76CL3K*7SIL70,s'`[*Gi#&ZIHu%idS@'5QWhO^QPK3+4HkB?)>j]W9`:7ZQ4>EJHWF.pOs8OY66-C/=_5W9NZg#T&Lc\05a&WIPH@6.ZH(D"19=D*rf,')'InKB@*b?%ZJkb-!bk)C6t1T+r_h6a@6';j8%E9e8Wb$U`a6rZe>/YhLp@+M^/X7b3A?s4QXcVM2Cr1UWZL0ff5)d^0Qu?1jOuMdk6Pu/3WgtB%53?os4g=e<'%KK5)Hfq]_!_5V6338G*#g0bTZ-%)eH';ICuO'8;Y@HA):hAS(Z'Vr1'#[gHY=?ca'kB@9"K%re`.`hjI2%FYW^n/%ljBslfG/>NG$rs6g%E&CaKE%=j-.tT[9W,\$sS("*#9+XAWd*C@:k8EY%>V7O?@22L%Ignaep#DUSABTd#)4o17M\C+5LKl8hW9j%O2L!0i1[q8%K)O;7X)pm-[>9&8Gmm^%.Q\:gr:an@5k?QX$jnpoOmB-;\+tR[e#JHr;>NkjEaUW:@u&%Fs@TG#ddJAA^Jrd0T+;i%Hoj?i5GtXH00E;GJcRHHdiSge"a#**\9gG&cJ4UPdcek"8fho8g@pf@&+qZ-/()OrT5U!1'5JSiVlcLpk3M%j>MJfciD4nA]NhG'%NVF^,qOd[[/o],21T+SE=hX4m`ba;&2t>;cK76DTIr;a$2(9rN0&H&cVLogOf\H\&k&r7rg4"9&r/'YORtkPKAG9^<Hn+f[ru08Z%R-"h4pWuF5f7V2n*B48$V`1.5W=+P$V*A8rEj%.4-dt&pjqp9diTT<"-NWV]K@lKViM9R/rW(C(\+H6RKBOe.JLp4!N$Fj/Fh?\S%/s/_0n2PE4D2Q6tLUW;Y#TZT6:qB3>bXm>VC#k/*C51F<jRoJn(%CHI'mK]+E*(:s.49<>D<[pUGtP=J/WNb-;@:h#&3S1PN4\E=%82a_Q*T1Ya.,B,3HNRm4$CW0P6N$MpperV)Vs[L@6%3kJp^dG.1tI'3R@Ml7UtSVP5)EJf3IoGN?/gA6pdenZfq2n+IfB,5"q&&t%+D"Zn%C(.r8n\'DRQ9bW2U)a)X)pmUQZVcmAMAR@*9l^J*c0V5@mQ!4aVfpNEKYOHo_<(qJc)is7,YZ'cV:3$U6n-Z8RA[G'ff:A%W]4W%DCTjp2)-tDptq8fRFF/3%G;i:e@11JL@o@pn)7G.5QXPITTjnm)lC>*4.lAKl1ZtoHJ(Lh*+b1p0/*'6rh+A3Tad*f^GB]=%imGqblMDd4-#M`"Y&h3@Kd@mM,%6YJr]uYd_W[+gm0Mkm+PY]/`:YKUc!'un<U0er%!RpdA?1'<IEOp.oI/63Z]Fdc0KjB*/d%QM%^pT+"Cfh.\-K<5iq::)']*S\h@>s,>$Ojp"moM\:)CSk2g*sl1r="uShoW-Xh96qTh:ue8H$bc,NjlIh)IAM>hhcSt;ufMGlAMFS%<o`u:;/'L;(-ko.#e-Wpa#EaL=T:6LA'Fe#apgA40ccV?!D]ZnXN$&M,A43eou6@_"fEH?oDMcK=\@S#UtWtg1?$1]jL]d`hDn9q%a!eK=W\+'CofkP,,^-29>EIg>]knVL[%,h(#g-s@Ii;k-877[p3Zjri0(-[[8GQb\-Cu(cnr^u5`-uJqY?E3=ANi%CX\<7!Ag>97%m/fTB,TFm$a_hfa_0EZl`"6Wk>1;X(3:S-EX]F9f>scl?P*'iL=kK`[d)/>T`X6YmqPDX>!gQX>e?p."Pn[OHo0uMr"b,GY1#CMG%7R?o7P-CFW?*d>],!23RjA#_UhAoIL.*'&*'jX9&?LUo<USUikq`PQWf2_"WcfDlM7p#/V6\oZ,R\3e,LHg%AYYWP&4FVUf_-IkP%\]!g_?uc5[#F06M8IU6BaK[tM\&_r;her(KiU:8=>"T6=1Dm#>=/eqIeaCpG^ed&FRcqnfa%m4D:/;t?1*:kBG-Vt1pAe"':T^'Q%qN15,k/2:)E@)_po^`BW>#]6FHiF2hkI!>#chMscT(`)Ir^r0hWC%8<+GqP>qCsC=ml!3KcTiVpk8=m44;mrn'D?.(*0S1)FT6bl%dh7\ngI=e[AB)_hZF?m8^R[Wu;V<%d"L6W=:8_'2:T\4I?YA9#g^4LAWm\0CREk!]5H-u<I8"]d[nirb9*HP#_l'?Vh,^[7BDXgr%(b*"XqReB1;Q[9`$adrPoDtHTs((H#_[\@BH^!-`AE>8M?FCNDBX32B<ZtVmbq&CR`q\d!O7jNlP>^n6T#584+ji$lT9D&DHMI;c%%R%+l$=6l$)=QG,\D8!,%9h"Wf,OG%4aY:LQG)\:HauG;;/6#APj-`<SORhaNHt8]`AAufOAWDl]`Hsf;s,71%jNmW85jPU7V[:K%r?ue06$2.!BK8jdI#&Z.!SI//E9:-mYgP[PhgJL'mhaTtA@Tgs`/iP4-*p_rB/Ae9k8/PRqpl)rO5C*h9)s!/9nrP3B8L\PGc7/!%ha_b$8)_bRcOQNgRET0D>fn'4%r-:Wkf:rdMUNd@948FOh>EIKTt6T5E[M06aIN%8/R9]!V"[M`-dCi3,Eh,=`G>6qZJF?P=Nh^I%6,%cl<M[P3e"t/-^c'Figf?m*>n]4XOdGT_N#_X3?4Rum2@g+RW<(?TXo6K>q>O.%Yp1!&^*g9Uo&(F._O0pmck9]!3l-^_ng;`!%'K-Z9gF^YbBii*Gc^Z[g#-gkaKcIY]0hqMDO\;V%?$][?pkX0'_L(?tIea+*?9@#p;st.`a_6U'Z[7$tNX?[JV>X+f&E+E[pNDq*%3+nUQqa^P(mDEtQg,f=Jj0<e_X_U!3ha>phWRZnKFP1EVD.9[^Yqhe/G)otNA+]QX3=nhBMM58m%l8WI<jZq"4T<u%jnac?(h9K4%0D_RLph=@Cc`)tSb\`od:+f@iN_Y741m]XRm[6hLd1HJSHJ1BpA@?Y!N<47Fb)(&5g5Qf9kZmea[:?D$$e=<BJK(gfo=)uQC&S-,%6KXcubouY!prOJ[VdL:8K_EG<\;8%A@aM+YFmtQHb\?Kb6iV3l8fW$GJndOLj8RVF6j%n$m<Fn_Y"8g<.Yu.ZVMN]^P>)GqP%'ku%A9-G@l]cX<4jr-d;cF?)c47[$fY.=,"\p.W-C](MV1qGPVo50Xh8cjDh7G(8-g6BM:5eS#.%8g?0_4/[,eFfe]XLHb44Cm)kNGl#%gC'Wj'E:U9c,W=lk:gjamW,L[A=B4`$I)mE'78a=lt:*h0:T3Bn:LliE-&0(q^p#FN2F;k2dO9RGdMHBh06/%Bmc[6App'0Q\4JE%oKb*4CXt29m*akrOi0(jP@a1V/rJQY0^(]j'#pnd;aMDWq`,f<*D%N?WLTO8-K7PUOl7jDq0mX.GRm_Rs&UW!N])*FL"]$<i@:!d%G8Y;?b9:&ALn\&qh&>^fUon+:I+31r8kQGUHf%nbP@B>XC>*#j.NR@QQUte=4IgPkfY,PgIcr[RTUk/1H@WZ'-'D\Wg#ODZ9::,i%c^J",,k)8[O''eKU5:R?C\38uE91<=rWUKt&<4I0naJ(9Bc73hhZN4JD3KMnQ/5[;`V<@jP;Zcf:Xb[T!B(?K3l2ShFD$c*#6)<C%3tkN?+.Q'>NRcL?=omCFWUtgXX,M%`+alCo@E%dD-="9<BDA*lUACAL7d9jUP\m7,/`e*mWil)U!Y>,N`3V0F]'^(5gh>FYgqOPN%OhI;I9KCGo[PH#),QmuN+.W/D5Q**[E.eP^F^Oq'iP`5&ZT3Pa\Tf:F'MQZG)(nF<Kf)HWP;oQVrR8l"nW3B`1RDc%Sk]2"S#Uq_%oE-H@;bbd#&c'`*P\2o,-RfMYgM4ouh<Afa"%_dB24Yb(JUf1ab'c^d1g\lh*:3a@OIWIqXVeD,H)2J?$MkVL'#Wg/&*82I)QbrS%>=HlT5ueFQB52C0XQ=Q%;EjS/%MO/3>$tQ-S2f:V``f(RE\E;p3n,1Oq_?e=B-]A7jP]]kR<8`<J*+82W$],H^)diSZq7;$q>Gi*%'^NfKM4]i@=2,TGoe;9OlKhP2(.-oYQRps2m:P7PIZ<uA-rlVB!2LSa)<hM<Vh&GR9n(I[=T)LiWLg6glW(!-#!?JhlA]2eD!QM)%Nt:YCdKtZ_r;ObA?RnjtZ__+(Yqat`[H<6/YqLQ7fGPC=$c$fp7q<q=3i$SYL`+VF((&#/@[2="p%a(,S8'@Bhm:l!o#.EPo@33c%&&G7#kiPEF)E;ZO)J5'GBG,ZH4HfI-V)QWKDdcu@FZ*M$fJ>gJhou9"rR%p_87j`[-JoL6-g<#h(>#ip[G?gn^RXMb>HQ<Z?"pN"%:g@?E7QrCZ!B4n`$^M$n8t_[.cdc1!5u2n2F0X@hVW$irOb[\.]@(C>QW:1-Zog6*H.9bqO-1$GdNV\F]?PoQ^JVpDY*4JF>$,YL%Qo;-T-g><RG%kK#?!t7m>A<_m%1W.#M$TTC3L*^63E=flqdT0'`:/tVf5iaGmTa9tkm:b3;.)@JF,Du+%S-2ehKc)Cj(dPnZ;T'H%MmL>A=1YYVG]Z&lV70BqL7F_Z`anhIZ3s^efF[cs=/t^Q>t/St@Sn'&anCS%R-NlpP_hl+7iKo*qM\G_BFjNf[Nbr,]"Xrc3ud+J%AA2_hfHg3,Qf!ffZ.%rN?REPQ9T6uN]J@[B*^>&lN8$#TQX\^[jE5)p3HqL.a0/2AFO'1Pc+MMAnFgrp9j9;9Dt'F3JJE58EiNjg%s'U`<HS5-4qETP+?9qY]$GiWU8XrRh\`U<Sdog]LCIp@?7TMR@ICY_p@#Y*a0/G^qJ:oh>q8i>O`P_4+8)r\bkfU<rYuN]B:G"RK%VGraJWC5m03h+p=o_^g0;qfGNH#2l;j\l8;Y+1h#J_rE]FV6"%AUR]SG\-No%O@+m<H?nKF'd)BqO)nl'h0_:qos_G_<p,-inX4h%Mkg*\59l7j'LrqqIsH6(rD'a"lBp<p$Aus4X(6G-n[VqC([1hTAp:f,m6Ze+ZFaRsn=O5F'@rZ>rc1D,F\ZanOY46uKecA#%@Wln%,#Q$5,rSmTeSZt^k8V1^9lF:(`p<tJD-jqUIEs[I2'r.AC"SL(?l!;D]O]5$fem3[n$T<p1I&Pm`UT#6YXrs,Z49d*r(P`%4=p=^%moi!?f&'+9++9mupO;X$F>L&E\4lA)P+_VmS]6S-'7cBb0`NbU?f(td(gDA(^oqYXcr*U#hZ`N8RfLOWq4bJ$6GL2?J/#+=\dRHJ%2Z[<SbegslIXMk08=7A?!W;d@!2-U9G6.X<-30+a`E`JY^'Oca<t"Hu#lXHD!'D'%GSe0!DZ[`&`J&L:KRS7]!:9^E])[;.'*,+F%d9Qb1!&(:k?[)kWqYSHA5d9%>[/PPQ:-O",^`)P=[1[;f)Z\Gks)2-e1NNX`BRTRRGYs`L"+ZAG2,u^"/N<(@VHAHL!,<J6Fp#Pr%^lZ8h'$?"np8DA(k[h>]5+Xd:*SaAcT$`cX-!:Y+D]&kb1t]66(+unRFaoU.P$tQ*R\BntVpHr6IO8h*A?WC<fUem5]M4"?6t(7t%@g40ib@jO@r,XA;f"%Xn(V"qN,UXMOQ1Rc1R`Xsb%*$;l#:b=L:^#[l<%#%YVLtE]oe?ui(W1@`'.srD$CT4<lHQYOBUIUNIm3J_%,]br2$#t7g7P5T/fif/7U^-)oO0s&iK>J'XKJB)k*+gFZ;[Mh)(L24C6h:&EmcU5/MuH!q>#g!]rEZ!7Kqp)?fl$+G+i(VOEf_QZ%=VCLW@b@$*c]f92#3LjMOtVD9[N%<"_#(g:16(Y<%NrSYLVE6<hX`lO*4LpR<9lY$eA?c_I69"CHeeQTZlMZQ:l.#MJIgiWbN5dL%-LU?kRM\cF:YTO#lM2#I;C'M(*P?$Zj5C)RT@-hk^k@oJlun:tJ7^ug:AA)P4DC/o]89X5%jYhgH:2Vn$ZasoT4H_Y';ZYER*,Wu%f@p5h#9[3i31`)J(%o9?F6JG_)4e)">II`pkE:,gIV:/g7cQ[U&DpBFAuhE)r6lL-=>0W6JcG5;XEn#EnT(?0J+2rW^?Q$[?<qf6%UIspc;>94"c!I2b;%.dB?'##&00'k\>.%5.f<#J\n]%fti?EbuRdnD1pu7e:ig]IIg`$5IR5]@*q?8U[m0u=1o.]#Hr;Z8)cZo"&%j1PL2RAd&,Lf'3*"q&Jqda_p[bGg(P*JESTGSk9$nFAg5`u4gG"\o$j$Jl0ZdgP3<j1%#h?@a8!<UiQ:jf$8AMRN\ICfCr`%NDsW%,Um&+iM)j\aOgPm1SRL1,bDt6'd]kPK&TLOYYjL-dO7Us()ldT3(X,&8>@B8/2kXk<9+4C^<Xn/N$sT]R8ZOk6i`+2\HsBPP\"D9%kE+@F,Km.mMZU-DBqrc8!32d[jWuOZ#RjiS&$&N8#)S2:4C*[Q"^hY\d)`Pf5l6Bn_g?Z+Lp@@8+XCMr:__bjp5haH:p`\p&YU9[%'jsnk`'bmTBE\/<C6TH%*ZG,qMT?rgJeF=PSth8P/&9?T"CmVVnc44d5SN'GjKp7:@V(3gJ9`#$6QaVTc?NZH?)%jfJr&F^.*I`*%'!.ZPlf);*<.ZJdLk>+CE+#G7E=@hc!e[`Z9LY$EPNn'6'\FI`V=;V_0*$-oYSr3PZ*94l@rqg[Pq"o_7+t#_=OtuXaAG>sTJI-W%.=4T1a7<E/$ik5ZbTI31g1?CJZ(Js(H(L$D7fc76n03D$M3:>>4@$[_1)6)&(^mk4&JAd;1jT5gOX+$n#8e49MEC%BLe*FD%ugW8%:pOI?I2jm@!0Y><WXLQ<5sGtVNE%iJ&K0p?>K<sO5=U7ljEMMD:anEHXFbf8nN^UTKZ""RbfW?8$0qm!TNGuo)3HgL8F[\G7:?C*%XU9%<]L83!=b-$e#$.UYA@^&X=W&.n6'_g*]IJil"G8*2M[5#+JPeG0;$(du38@>t!GOi1<3e_.G!e"hjoFC=ONfa-+'>g6)c_`_%1b)$H5f?NScl'kQaI:Jo1&<XBi)&?)BTaf]S!j>`]F$K%o9^JJ)iuXZ^OT8i_u`:d$CbRd`EiW(!dFi&J;pY/k`&+LS-34dK*Y."%!(Z(dTLgEe@\\moblP@(.#`E?*`S9`83_W]6'6b.L^3E?5=XXP=gAa,(fiCNTa6`gp6s%W#acA"IKUfZm<FC=Bd#U^""+_mVCsDa%hVO((Z@G31;p\AO>7].Y-#CG;-m]"@-A`-s)`BHBfVDA06Bk?e!?"-9d#ogI[##=sBp';IW#WlaL59;T<+-G[!te3-WC\4Q8jra\%e-+b@RR@oL7"Ff,"^V@h#u.Y_.SGR<)C6-O$)!8uaMonT8.U963SICCGue^F6sb527F=IA'uKHl#b-Bc(7S9[=)!j"@e>[O-s!(u%5iMbt4:?6WY[eci]aRTN,8i8"6Eq^ZjjZC@AS!&t"<QeBF<8SJKiJ]r+ARKAbs:8b,o*ZiS3UbCl3\:d!ujOkLdZX[&g0J;<4ZcH%WCSbD,U4V8;H-Kr`S:T:O]>d&!#/?V&.1r@Xe2OL#r3mW-;(Pi7+@n'lD0Oc)@r9)!XPen<<;)/PCB7-Z<AJ#+t,]\JrKXn8$WPg%pnX%ID%&O]DN%%$]ElHkMoZXC=G\9k!jQ\qOT=#>3f,]!<9@[($[[VEX9)A21/ei7Ip@W:KfnN86nZP?.Y^J-X3.dUG*FAD?o3HH%6@h[s#Tf[R!eAZdKL*jmC?/4,j4;*t6)uG6<!`s<KETNDMi'b')MdsN-3ai&adVFW7:LA37DRie=[Xj"2@T)RWjON3X9p@U7N4\6%<AM@c178.C-euKn'%!+)eKPRbVrjCb"7?^l2[/E*2A$%L1s#l;cm05I9%o(@_)@mP)mC`Y<s]SFRiE8-</?ZZJgO;2JX@C^U=0LK%&QK$!+Tt8O2.18e!(fkc5=,Po&30SSY`"Jr0o)uqjYSJ"fSh_nXN4P5:l8q)C2KVR_+(4I-fJ[eKSkX[:lq\s$.pME^`#(>>uGpH%)?l*hi8kYZ2tIl>A&cegHTpf@FiM%;g)X%Sgfs)eqRpmXmN$aWq@.A@=)XJmoD+,#$\gVGg]Ta;RE6'L_QF!#il(NkJcqR'86cq8%Ti12HiFOJs_3g=`kp-g=*6=-@+eVApPpiB.@OKa1,&.l:'!n7#KS6F8Dg>Y&2\TS,38dT#YT;qPb%&'a!!pO(:_XB5@+EDoAkYgc%-'%,kWbU*7(l:5@33dp@-UAU`X&DF.XO9#d:Pbb5-NFTPq?.B=Q2sXJ<0V`DC3*0a70NdLf[;f/.LKdEYTc?VWgm[0aZN[%7.)ad%[cK']05(D+N?ne+h@&^]+A@f(WOG6B)]4Xd70)&J.a&Dic_.eAp*hCBi'Ue*.>gY8=Yp+tE6Tea-35]:1fSU47Sead()sKH`"3FZ%<@]p,,saIn<>6_ld?C4D-+`+d:X(LgX71kp_B\@Z'3Jj'^PE_%BEJX2=b+L:Me2u._4487J5tYN:;EEri$%85B\=jrQ:5ONBGNHu%km(f8Gqp9T"!X.6;(1g_Bb#0Af>q1Sd))5_"6@3OEE$)s;+73ZW5ShEZ]nUC+JUKK7[sJ$Kc$Po&L)2qM&Cpk5`?0sMa9O(4"O+9%8!XjGp(LF_M1L'=hV`&U-_jOl@ZVc,J5#W-RQ(W_EI\1r.N)*HLq0Ng+_WiVkS'Y,:0"*AA>3a\3"Nlbg5TKF;7iFO>R]VX.[!ID%Jat'q_b/GVV/7^*ZddPpj.,rn/?!VhAM!KSZ("(E&XqrtY97qMVMmbMC7q5*95F`#VQMM2-;_iN/5k4:J-0!9W?./:"t%V*UIcM+%;..>Ie<m,;Z*7Dcf[i04iN.np/bGg3!AqoSWIt2#9ItE(bUNZIVqZ=3-afZYSdHr7]cRf(+uL9p3CLLuNp!>IU)UB,!p*l*2S=cP%0]j'a_Fm/X$Hm4ERY-/<Per5e@8n;#e-0"eYmDO#7)>WOW_tbc)C:f=PDimY'3poTe3P4COdAJe6t'fhm=HL`g"8^&,F?iDTnSI3%0[VRn&6T*k-^[ILYm@^X<S2(2mYQ!2!0N-_co3(O_`/,ZTNt.nRnE#W"GGeP,!<]4(9-m*(o*g2Ai8[#J7aq#g;\(=qAPf(UJf88%HrJ:Me7a[DY=#WZ,XV`c&#IYV87gdBA##u,\j4k0&dn%5.h_FXob**Mi2af^5g,^P!K"Jp)_)Mb'1K<djp-2o!i758+m'FhRn!dA%eencAV2=Fea<L.i3JmfGZ4X9kcmt$#6CR\%+F[Fa@N?A4Se*)Afp.rI&g;_"(6l=Q"Iff+G47UaV%1'B$46%V65d'j&mC'J`oq^c%$P>j&;'8sF=u@j.IgU\#7OJ%"oaBbb5q.B#JT43HHk=@#3ZMg1aI4oa8O%#)codul$Dej0>tWZ*a+7*FbFb'1.%,;"b=3AsoVHOQ%6nRqq4/>_00qj^5GEeQ;e/X2i#,<U!"H29H-I'cDmme*>*DN2$Q<=fIesi?5adgqO\?Ht_8k%/Id4-85S3@(K_1#A(I^>eDc\__m%`#0qr#UE4l]FJdXH+f>;-m;f`b1+hsZrn(].g:slod1Ta[%!HT,DHuu-P:Mle?N2@U,(Gue%cP6\FnX'<,WoCICRm<cPaN7F'<:!%U)r-cL)GehY].EtP6E-^"P!/k#`<U`NAX+a3gA8Fkt[Hkck$9G8PNH+<&n*i1eKU-J5%.Z<Q[_fcEU;B+BE2M&c`RZ%.W>H!%&-Y%.[l'Mmt)bll5\k6:SN[?0&^(G<O56gJ8%!mDoa\eT;WXP$-6sO'T-RfE;6T/7B._.6dn[?LsCc&%S"jcUFu\$"##hb?q2K&Vt^o^%"9<ZrNHq5>:1KV9Yfq-p,EG#42Q81VO!r`/1fRmhX@-7u.oE+(/Jh5R@mEXsZiD`h,ng)eG&JbF+Z%CB3#ogAW\tuWd>e=I[S*qm%_$m?NQ\h4GKo&**^E(mRU\LU%'"7=^2R=E@bRi0<)c(1m6De<dVBl'sBsaT(Z4f1LndY#=@bq9XNO^;41_k^hQPk4"QG(W!D,q_O%(&?Tm+709;SSf2sa&T[:#&#BBAi=Zt]W"bnD1k4.8Jp*CL)g`V&t9nAg61oC38Jc(/4+Yd1o%dLM4jpbP+seb9+^fCr#8$>)O0Fd%BjlDuKVH/?a)a(hNCsm0<=9N,-B"Uf/GQA;SBr[:Vat,pkcoc=&q:ud?##7kGm%#C,f9rB!>W#1<9!qF)EGB$S/,?PSf4"@:2=aq%F;U%Yd=W6_PEVt-%5nkic>i>ZQH,1oGs\qP.T'HQV!:ol)@fQ<=Q5u=57,S0C][C)1/3<o,.1PCE"W%kHr\Rb(0iI)"=Hd0R5Me\%7Y)h"s'f(J]i[<G%ITul,$mA9"^o5>?k%<I^mGul%Erg/dmX-S'\BC$0S+rhYY!9q!`1#G+?_'=_E^<]EG7L<aZG@UM8OigC59h&%i7J*K^Vh"#d+8GA>"Oe[2R`=j"llu;Z@`i/oRmB+OLd[M1bqEl1Q;a8_\mbPHYb)l:E&J+&(&).:haXi4>UeC3D+?B:lZt+"k%"0%B(n#u[lG,L:*,7dA`)joYaruR/DC?\0%CFZ%`hQ`<\STP4m&X\-'l"R$Y;i5@&499$F6Qe>H5',hd81GA\T!QHr)Nhgf7C2+K%,b%,*D($`Z*%Ai$:_lS+'r.e[@`*%Qd8mb%S:\U*l2,*m2H'-/s.,.2E+fM8j1-Xbe+OP4Lsp5":906.$lk<2V0s@>@P11p7q_A6GW:%'g/1XC/AU=O,h2:,bB[?<=[=\dC#i\*<Y0:ee[qr*g3bDaBCi.gLfY=@qc"J+2l<*!#Ga5oWZn',mU3nnNif=PYj-=6FVq"D"&:4%6LlJ^-)1e:8G#*#9ki;fp6/''!Bj'f8J%1Wh8qqf=TSFNOE_T`%U^XeK[JeQ\5a._r_EOrNARR;!/iDu@:eiU#$3:R!cO/*7>Q[E%H'1iEk]@%l0+\@Te?O`Z#.W7>Q76!Ye/&sLV/1\%!a8i"Q<%,YU^]FAKsk^S,ffR]0U!k4Pr'-#U+t:[K7#^,:BQ'U8RM[8(7WPY%>=jCWH<QO;#RbK.g1DKdC@5f6FdT/GC$V01kh/Fkp!3,$RIU_UWE3lBiO(GG_F4o#`!!8WF3Ll[/DjAIf>K'L%iTV'G2%a$nogL>%\/)Mp?os1hACEe8cHt<!Eu#k(R%oWtO_E2,\.M1L-elbBZ:4ibKE.tAYpU8JR^/\O>9^I"B3W5#/0[i1Lb1:5F58[&Wd<\V,MNjI%,$tLY2D+"6UOgdcc3651R5@h-6ru=!DMEsng_d8nU9(-@&M(0@<Y>LcWar?Q,th&4FP&^QKGc;A7S'h<&J>CK<tl=BLb0aS3n1[d%1`9&NVj9Z73H7)kPm.RiFuc!\`(;X*L4tgb*9u)\jOAOV+&,hQdE"Vc%Jh%h2)$c0ZR"L>L,et\->4!&_DG:q0^T:<aAE(3L7hsY%Ct'(aA;)"4E[3G0d=>.A&t0rV"K`?b\i:P70l_U+WRrhQ(,@E<GHb!!b%g4%j%4dO@4)ojcpDZXfuC<R<S5ZZ*MqH<U^c]Pd(!XK%Bd9Ac"$ot%re!A:q$HAeoM!PB\FTYTF3Pgin'!`>]:HFcCKp=lR2%G#cZ.\/SOWC+B"\N[XrNMpd*X"l?e@bE-d^,sAZZWf@\M0\%Oi&G<!HWL->iBZFI92En[QXCV,jPHb3/+2!c<AAXd3RpYC!\,7L1&_gHB@s\!V!\P7h^IX(/mc'cXe@*Z8>9p\rEJbeHfpJ]..F9%(dSTdYse0fUe,%Q"@,(9-)XK>jr`O?&in8O(g&QUJ`0gZ6IGhVgpcY&Q>BWN62j5oOMF37/)ClbZ4\'H><i94.9jkc5ThOn"EoXu%He*Gc=DMP]fg_J9]"7ICdsL7aO,+\F0ufUR37#VILr2CbI"pn@pmGH1'(gC@b;gH+U[^jq%XM.C).Gb9Fj00"4l-$U6r*CI`VslA%iq&f?pk.K'EfgmhhI(mSpG0)?Hs[tKT)>L!l3pU^>i9b-C;uV7p?`7eIORAs^KX)uP`:8#j4@l=p.+HEo>9+?$6'IbGH1Pb/,4a@%p%>.NH/d#f5Q9U0IX;*FE2ETE/IG^mg&@Qj\W,s;I!mSbs*$QsgElC7iq[bcICgW:>IjbegZt&9rQ"n1Rns([n))W_'Qj]9^sXJ9%`@9N5=8`c.OgIb+A(b5e6"0<YY-?P`A(lVS<+F[(2>3N.mC0LZDem/G</LkH\_!a?-sGuS1X"8#hfO/?F1LSd`COV8T.?/F74aeE%^F>a=Qd/bjn8-?i0<o3n9gAKQg@sEsR4`&u/a^7NE>A(d:B?H1r7lOA/i;kLIT)C,0=UrP5D2WOA>QY@q4N1f<r:V'e1*T,YP_qs%S,.3?@:D`BC'"JE]eOTtKBCT3!:$q-q@^SHkIpZ:Kl,s.DYTJfgqo=G;A5`RLVXJ=knV(*Z+9Os"2uf6Q)c,4>ZrIPq0])dp-^R:%6stk^1$;9%QcDa7b>+,J'`s,?^Ed9W?p:s/M83XC8]2_7)"3,^$K2L?E6i4Bl0KPgK[AWJXXIV5M16V7qX.UW1nb*R2X4)T=e2\u%@,t4/ML96C6m7^F)fJDW$,F!4Ku;GI!&sQb"\LuW(VZ;sW?NOp!EWP:j8ECq4A6*t./jpiaZH1n6<V1Hg^ZTAV0)1I7N(;%]ftAL%OgLZd:$:P:V\%6!@.suS"(pEj>D(g&G)Qts!8/C(hGg7'IsP^9BSC9MI@[PI!2UA;$Np^;%X^'N5i&+mO+9tX-Qs9gNtn>)>e)io%.[!_XnQ[2_\E?;dp'V:T4p6(%W\ibF.rhZk".aX2I_jF+R'q#)VodnG634X?,VW[)I=8H#lBSrn&8l`5@1e6GD=ot.*(TEde5p$o%EH+&$"9^b%c#58FkJ[=XLI7RW9SQIm5R.$4O#Tc4O2F9]cEHdi'OVLhN.6peaM5RC#OjPjqYBG&8Edmd.d#7/?b8JEA*PMZPSm)T%08J<1=67.kgUV9XIT&3_OB/B"5^5g&b*2HDfNR:p4cRDPlADs/YYC!]T,d?7)<^<.7drP8Am[=!Hd1)..NqIjaV;6S'kIl*bI"Vd%,ZRdOQMCn5hUQ%8()Me2RP;.cb<8<oXM?mtWJpmlAtu"9OHP1q:!hF3$S`R9DruQh*D(I9J"0ZoYc4Cl!Rd#OI>:rTmmLB<,)FRi%Q$F"F+Z(<mnL.@en>VTeHQJ8d\CNc`f!TYLX]E$<.5FOYVo^IY5]I:IOjg*c$'17@6!s#YHS_:\RJAl3(a*E.;uhH=p#`kGW'Vg)%,@8VUs.Fh89ETG5'@/#FY56\la9!&,QNn+"1Be3nM_!%JQ[A-]*7;OD87F4'-#.g\e>k!O0U$c(9L?U*h1H^A:6t)6QJkhobULsG%g`tb@Vo^sqBpu`Sf*'mK@TW'+!ZB0%XBWG58PtVaH5V&Sqs<g?:>\!P*@kd779ko[WSRrZD1>?*KLd)qS_s5tK=(bH9%0[8E$tSW%JfqkabL=('\,eqm'k3b@;#F2[2H9;K"IeZb5"K].BHnsHZ-gJTSK`tImRVpD:=2%@o,AO;>j%ePpla)o/d'e\3a]4-U&(e"NUYs2%D(j8HVHl:*P@P8]0SCYnH$`M'%6,gEU#HJ0%Kk&Qk*t$K0LUg+;9!n8qi"t'H(+*T8/El2VAc<XN6,e83[Ad"f*cCeekWQ"aR?c"%V.)-A(:aL"P7`&43!Q[A)RVTk&a=RGG9@aSZO&qCDd3f^1#e$DU-So0C,91UC)J-R(l*AXN`FC77e'KpXl`iABch0S7SGWBD757/%Ts#df>`4VE"Ht*6o;"lu!K2:)3;jUg>r#)IbtS7_e"gW01PtN/dAjW;:*;fWp!j'4A&Y)+*2K8W7c1KC'/2EPJSQZS8>jk*4e,Xt%3eDt5EY&K*UB2iH-hpO`A0eEb+jB3.RH>\HM*oJ9q5Y@QK;%7'=&*7h)!7c#.^_N(='\L[Gjb2?JA&TOiEW/QpumLVnCJ2,e;ZjJ%`JIJ-nKVVX:*)RBSn"2Kpu7HPOjG=L4VSKY^*DJQNSk'B&sgJOR3M"(NF(pI==nhIHX??<YVd-Md<KD,5DXV(;"hPIP,,a75r4V6%^hI?Z#)sO:&=b'nN$Jt4l7AUn:2;-1gt[8bAX\fUIU3aTI\fT5'MEsoE\J']km477U?\A?;;_H$2eI(K;s`FM4J^j7:GbLR8MeFk%+r3>2$M,8TFXGO6U_-:kAKi>//&.MH:0&!0b<.o'hA:>EM[M9-n)VMGLE`BtODj$#(q.'^lab:fUE;nj;\&jRA$VWu0)q2+-en+p%oP!EWaDoW>>(jn!R0oA\p0;W.>RcPu]8#2"9D?^aWNHs7^5>.9"_)BV[>Q=:7@X`WKQ4)pTl)@8/@a-slB3WX5E/>MM5_2j-(Bo!%k*`Qce&8`n.PRdu7J9B.a^GIhROm5jbdB#`Mr*!=<DtWi&#.k9^jKb\!;Zl_JM8*./;dQg^0mLs):+d6.s\tIeB9#:X:!Q5&^$rR%*_Hh3q-Y/0p7'$KRMrZ(?h'O:Z?`LkS(-iLkYYuA9MIfLMQ(BAAD$(%\Oc0BpQm`?JANgZU*R:&-(m[6"r*W+<eL"!dn$br\$o-4%*&ZPUUJV(5"E-jeV#2s18(=!hGu>+anR;!6;Hs]XB3Wt>o9.=@6Un7lG+&Vr7'rn8=!YT&bAqOjAAe+Rh$CZ4m5/d1&4Bj\D/?_b%_\lng$5uQ;/p;#T6[ke?Hc'Wad#GR&4lm_2:*&[Vs03=u?NM4&)M=FL0V5n(aiI#Bqp.4Y!`^>\9O<L8^T5Zih^9C/%7!*p6$HM-%_-Y@C&FRPX)*Z)U+C6NJ9tZ7]2`"$_KdF1lG4"A4ZVnnP&48.?[/^nSqj!j?lCB=*'mM.0_;i,8=QQHEf1?L;1,E%BI?ct*Hs)40%Y?$o\W%@]RQKrgH;6N#kl79i>0p<1$.!"5'UpLCnP0tq@i2>U6c$g319_4lDqBQ3foIhU\J4V'4En`B+Jk"N`&7h=66/=u&Z$C\6%6No<@j5f,pRhDA'a[c(md`D]s+qIjNV34n7euk\46sk\T./@RTPla-!WNHA_7Qn?=i-CQoVlug13W2s6g<d-ATI,B,kX;H[J]6kO%PA"Yt`C%/l@&e@[T6GTuB.7(lEn]]6Lu!5^otkDNd9iPK1AjRrZ[:N;@W<CT&*+T^.:`c!^02_1Jrrdo<hg3o*LNVNj>[LYj%s]R%W+g/f/UUMK`>gDILGd-WMCV!(<Ac9/X=nlJ>nZBSc#m<Z7"d]t_A_?n3U[+&85q92$U";j&1c`3:jY8GnbG<.I8\RV1?D0m[c&k7%FCu-tnM/Og?jaqf2'.-dA"E)kPn+"/-lujI"6'ck5[NAI?*QM&99T6.=!]ECW(tfHraX5/8l>@$;/1sN_*]"Z'/*<]k```l`1@O$%GkjkSZRmXiMQsm&4\t$^oAcXFl8K`2QO#HGX&]X_29D^Q\6VEVSgO1.oQ4TXF<_hU,1FdO5.$#U..NOq\#6EQ0*\4j6]5B0$s&Z7%52$bREl.VPI\e>mmE1dLE*U(>S.re@>iQG@JhQFNAe6nXa@ThhZ$YZ_f2q:sW`Rr.adU0-doTi=!*1UaOWSlp4<L+m3#Ft!)BiAq%p1UkP#Ob<nFI7IIB=_j6,T]CXgbGsed-.%N%rls/ZhU;YP!Q`WA"1%bJW,6C"`3?A*tp?d]Vcm`K-iNUh!!7)e]VsC>)!^^bg'ct%C6!8T\Ipq<-GhX4A'daXkMe=t.YT7Q@de$r%[g+f4'r]9(j\_B-%bV3<J0U<XcXa@ij8#/<_/^".4O!RIqWF#,(qXM(Bm1,n;u!(%IY.B6$R%8\Vb<4d;.l?L(4LVu(Y0j"_<iP@"<sRBB/=]W9[4%)>#_f1gXiTa,nUNh%1>lmQ%Nt8$/HpaPu+9m6:X\k10d7rR>_pF%[7K@#H8R!t0/0bE;ll+_s(u9sU.c8qQ#dI#h./3Omt$4G)?fp7lidd"%+(_E7GpqjX$E2:]<ErTZ5BVRm+a38rt0;PpSX?CI>0&e%Xet8eX9T$[($8X\LTP==JbMG7d^JfV%#H0S:UIFUG8:;gFE,MJ-UL##:.;ZRKWh.?n"r&r]N7IDBL:OJAgaF]Jq1H!`t>/aJN?\^%;@oj9%p2I**s:sR2&S%ar\=,m1(iWu_%.ul@p'h7i=!MJR+.[;R,`%@5-02)oSS2\T7_/P?Dqm@FeI%7FhCU>ToBg2.$c;i@`g(W%;OJ396kpCg"s'VGWN67$35E\9a.U<[rf`3hpeCW6RoH2hWWlB8?>_[O*YsE55?,g@eK:")g<>:*f;N$"^d,b:G$"(6^OLR"Ke*TM%RUb"/.K#\t[c417$4!T_1)N_+%E^"I5XIe&j;O9tl\`GHC,`/9&i[B!#??A=*LU(X+CL#oNj'Q6*g[c35DE,`.DdLm3@/@%C7FbF%cM(U4!216gmWH',4"oQs7FeHr?RST^H;.:)=G!$$S)?l`jb>fYA3#+4Z3O_-YI(h+$FgJsgG!W$6hm^(4V&o9d&op>=3p)>!isBV%o<c$j#Z)^+??]?%%@N\?$P<hHi1[44jnQKR('V]`V,QQ#fS</=5tRb\.C&2B%6\5=Vi0X4Wc?*KoGu#%W]Dok2l0(Pd(CQ9]M_a"%:d\i8b-EXXR".->W&Q<R?Oe^\idG,8OKeA?<H)<]7@60-$BTsJ]*6b^4(S;*!^4j$%h`:6Y5Z_mBmZMD7k-agmAbc?.BU.mC$g._%)hIt1MtQcY>(qJInuLsVacqhLXKt4%!kq*O$8rFJZE2.\WRNQ\>HZ'q+2/X+TeKZ'BXktdPFHQJE3h*Z8[p7f'Pi8+VL#D=aM]`0%dGkLDSOuV2?JSd$BGs?P$Ri;n`YQ)>JV#R;Z][g>DeeP\Z)u3H.uY0!664sX1asmNAW)Vg3$QtQO+g@"#`'D9'O'^G@$87XPDORP%HHTahg=>)Q6`,^u#US#G\4-7kC>=TA@T/Tt]ac8Y;ce-sd]8MAWCP%1U8n4L;"B97SU(>7*$S:&Duu$NV0@_*r4K]\@6gDX!9h6c%\ekhj,)bpf@[@oXlEuj:6!#[;C(l)KZ>(e"o&.Pi.BNi?T(A>q<8U9/pHA./adhk(ToAncU<_-_bM>-(>K!.A,ISr"OeM!,L[K6f%/gNAW-m<IWm:#35dDnT-P(4ZS"1@7\c'`hW0X(*f>j<RjcV?io_+0/p0s;<N0LL2INXRg6jfHTrH%qkb^]dR/nlqMc*r*_5,9=NI%Cf.`Del"cXj'LG5k?"!m"]8bTB-'O"KJH;^a%ZOjUKPS<GV)$%"_b39&f)Te<%.B^mk[-Le<l'4kK;>35Sh+a^eI=V5;SJ?k+HH;%N]Wd;0Vun4P@n8:Y'$^0r$t50KGk!_;aQr?YZ+pTSqQBSOKRW'!d0+3hYW4aK`kJJ.X^:F'an%Ci.F9+2H1Pl(D9\o*+C%,lp2>C%pI9]GSs!jrQ`%kL>s!:OSleVJFF%&XNj"#*4[m8DJTQr/N4N?1dcd>B_%#L&Yp,Fr:?-Y'(D*Ko3iCLPEV,!IMOI?q.B[3G[1G5M%]iS$f!0+!F8@4Wn:P6iXD?qhG+SHANVf&au`5K0Ko4(gl!r<c0"&/6Y*_@1!VPO#q4B&Q(jm)&Y\:tGk&2mDMDV\Y73H[=Y]lX]l%C>+1g*YL42$Y,p$/!S:,g:]$KqFAeHJ17G477XUhNr-&r"%0:)"ZJ^OJC(.>d;J=p6t13Mh[K0r6sPm)b+#`iLE-b+0)@'E\O+fm%FX\(OaRos^dB3g^AuT,MYb4)A#_+X[oJ@Tjka_H^Q)OMUJg+tF$>W)$#2*k8p=h2l20W*",-4nY9f7Z]l;4>fV'%'[3)b4&O:ad3%8GR$Y6\&dFY]/=[j%on7&C<\p,'!iEql&%6Bb8e8EO^_,#%Zkm_$6YAbV7J1^`BD):W4%eVSFBU5[GIgTuja%o>5dMq"&TDe9r->%Y;tT\dKq,A`C1(@GJeN6#)b-hc_ss$-je-`XJ@.8Q4U;X#mWfG9LSZXpj6\t&T)a+e'leCEsH-2O:kW&NO$6KHA&>pOI!`>brKNr%kelA0B%p878@\>=khs.TZH\En-g-T26C[GZ3sE2@q+aTRkuf29XX<A*^+5tu&W`.6[pOF+QJp^9&i-qHVNLBT06/k6!*DB'jaY[C%<;p+Foi9Ue;)Oci.:]jXE6V0+&:0Vl+-W4#%dF&of^M@^EjnqG'GJe5ML,?a0'\<&MI^hlS=R?i!5d+]$IB:tSY&TY:u@7f"Cq3?%K(su?8d$a<*!K:j92><5Q_O'/\P@*l.&<mg![!>XbO7)8\%D)OA]8"f>AhY5!^&&3[%=9-5+@ET\o5##;ArOp[D>IZaG*M_ALSU8%.#kt3X!Zi"*(6(H_W_1UGT3uZ4H_r=_ibukq%uEN#^po?>&#m0#gS/KVN)`<M+NId%QLp+RfK1tdWfnD-sTQ3]&ICt,.mmF_?3Ml%GMF'aE4u**h4=o\>UL*[3nina+$88_iSXNt`h_Z.d^taCK?$f&]I:5e+X(:g#-+>f,_VuWRBhSXVg?E1@,(p]QOr3Lh9jG]ll_m6%!MUnRUeVkEQYcHUrJhYTN_#NSWkbF1$:Za`Hp_>[8$.ok9*Gb73?nq`@!I`]N%1HFWqn)"^/<QsqfAOJA=UJ4c1q:gY,[Atk,l[i%%K6M?7AV/D?bgf']_*jL=bZ,-2%Z8H,(,p1LE$?7?oSPM9=6mfHa)temSp"aNZ)'qY>k<S#_W6XP(\4U'YB!ZO`+EZ`p67B:g!3S%<I&R.nkkA^Xam?Hl<L&_LgQR3J3`+>(.2(-kS]u,erm;JU^/4;$HQ6=S/2I@X5j6dO(%9,erB"S*e6h/qsZi]ri4?"Q&ek$kX.L1%aQ#%qL$3at9k4UC-5DRdh(V?lM,Y9PJ2(TMp$6i"'G+M%im];-#'[)/-6rWZe'0+dr8>^qfo9MOOhVSnLc2OAVKjjd\$uicC2$6o%)_57!pG`hJU1s?(OiQ8b`ESn'?osV(4B]ZBD]h/]gEa;'_h89G$5nR4,O!%ITan;(;c?YP@YfIs/?4Q4KYesAP8^j_=X?mW.#d3j%W0@](G=1*_G<eSK".OHfO7QYiM\6L)?r9n(.@OrRCpl5/PCNB?J;t1m&V"Tm7.YD[9C)hP]T_Xq80]-q3-o^JG7RimY,AFOhED'h%2pSq#@_osQS<+_2nbBFMcgZDn8]P'Jak?8qatf(L1T\edr*deN&.^E]4qE4-@m'[R)'DnP=!>C=OF;9Q'UIdm+IQ:'_E8MTI1(\+%S]%?n+WamKH0]^JCNV9Sj(VWiQq>--2B$<]*2J^9RPFG0SgEs-E,k":a"F5!C-u.0[dNRYA2f_cV0,_;AkRhSC_7@X2_'^ELV-Q5%;aIY*<fh+<TL(q?:'ROGEDThhe<6ZC?Q".pUc1rIkWr_6W^"TbgSj'^R7#Q-/7;]s/\F\$?%$E@=?(GT:q'jG!07WtBZn#?T7@@D%Q*m*T`Ht#K&BaHfo75VjPh.P.ckL*,Z>(L[)%jN'fkoV2Wih<@g+MP1E-FHeI'<?7j?c#nN-/sY>@O_/VkeT<"FS[r@QTc'2c[H;%*"L:8K7N[Hb[ou]l3!r_I.<S.Kf;R]Ijp'MOM^R#Mj-2q^%$)\=Ea28:*2dL5flTY`DOcdHJF/#6JZ`*G,:Qbk26_`^.^aLS9eF1%IbWp=1C;]`cpBqOM8iiF`6.sS<6=i]&co@Y9(C7u@uXF2eo[#_6a$nHmW-d[UdgfrLlsYbPpb6*XCl<Xba7LIa%:f0o.eF_^^"^#%B6.aCPg4?Garo'T,_h<uL`j^I_1t;uL>s%:%bBJ;7o`$5S$@GdP=P34CNu3b?Pp"*k9;Z:kU=U/^0Y]Y$%jqIeO/QjTuf.6gCJL.%.G2>XTMZV$fLmp=_E#"S=tiuZX!sOL!qI5[N=hmM&%hZHJ:TrI3D>7sncff#=+D-l])B]JJ@3>IG(6HHcY8\Z/U%FUEj3JYgRm77%fUY#=hh)'ZD\$B'!Xr,b0TF2+O^tocXMr&P1DtOM(.'a9CA@XIq9X]'P_..gJADKH;aC&YXbn@OSPSSu`1r8Wbp=nJ;0>bus%5@Y%5,-;NRX!5UYoGL^N$HqR#>j;lf6)AO$%:V]S=VYH'lH'JpG3tM#:aY\Jduh&./rYnA[d't:ga[b"9DX"SC8-JrTMj8QcS#/e@p3>%0Gf*?Fd.]?iQSh1/AHJCI-Qe_:r%'qk1KLZ6"_mHYa>EqFu(65@&3AG?pWs:+'hr`DtUng@':7/_T=nl:(JlsNaG@t)amimX2+fV%)V[VsT1QT2oaS2`Nqej:fH=K@[Y_U(2lNM]C_bI8^f0$!c0geefG-'Dk8;:8HY*KFnBSkVp<E=pl@qf;?MDF!24Ep#8<3`4n\4Uo%O/U?u(C<dsa,B(Dfd:!JZ=SVp6Ri[$70Nf0nE9:H`4<JsDQ;T\m&^%+rGs3?E8^L:->,"RMC5B^SJk1u#'\OPaY1u[bW7Qd5Po.E%C&`LWZ.[Zr+VQb"p'jl.bg,JTLHJ\L$4?Co3!IM=@;CIbj!^V3>)7]+^VVOL"G)P.Kd]E1PF#F]^e5'UK6C)^I*LK&:H3b;T<o&X%8hkXm*J%Gr2d)--SM2@b6fc7>&siGRd"i;!/6PMq;bHC+Q]Ti,-[[JL>Dm/'V+u@ET.s[pB:Qq9^TjO&-@H^Q:[BWOh7R</RO%,T%_&&(K0'In*[[0Cfd(]8R>ZQ/W4#8$ORjp\!pNhM/Tm5igf:t73Gh6Wm@Zt>$d5],QH$M<#Xlu_1juPso9r)1lR$USA9F9jTbqFY`%\^qXO#I[VFTJt28Zc8&#Bg@t4\IAa>HI;U;oB*7RA,Kib*e_YAUu29\_lg1p%o^LjRUTIDEUc&Q6bal%.")I$0^hqS0T#-f_9WIc%9mht`SB_7"DPB2MX>N^)ZtABRN=nOdP%jToG7sHbB"3f^>If1):FU)1>nLV5\$'6TNa.=Lf1W'2FJbtCp1+[X-Z3^n\YG"F7r]f#%-r.jE/QRbTab*q.AH/pCH&jqco!/KZ&2-I6m.0ej]eB5-("?`1l)W++P-a1Yl_tmZ+RKHr*:`AQp1FoGUe`@gEO?oBmX=b>kN]:C%Z&L`%GNl=QTm-kh74!*[#EmC/jV7VJ+jpa\J8Y:<g]ljU7d(N+_YM$?0RkmHrQ'oK.2b4261?cQ.L$l.7qVa'H4'8:%fuKD-<1#@%Wl'=Hn1A`-noro^,Mr.f",E9nqWcA--r<6]Ukfntl-lu7cRe`i(um^Thup4A'Nq3^JBa\I^,X5a\AH("os;#<ZAbo)%"Xte4+^AA%BKf%2&,r4=5s@oI-Zh5$6DOtH6\0jeX"+?"<W;;)E:&bSi=/9=dg+8(_0U#`>gM:]O;]#ag]3_LE7(8@c_VM4WuPLIgkI.+TMrms%2O^frnf>?JeGCj40@?ZL)%On&S]_#_l0\?s]s88f&8O$0Oqgbo%in2i]hrX;mW!Ca&-*X5j5n"_P=sK9cfOZ,G>kk6RA5M<JEeXU%KIfW$_Q%(J0G.os^rbau]P6e:$epC+/<s]o/&^rjB?@dmReYg.f6#E^neH>F-!@HY9)N;2oR0YR]7(i/?QKf'"RtbAVCf:Q+agq.%VsAQb86J"eBV&\u,*?d;/Q"GZ&QtU%13iS9*-i3#inR$u&95Z>A\4[lO^iVRZ/mt]>mqP6]??LL@._FE!Dsr,mPd(ZfGnjNDpPD:%Xm)?&p$m4!T?4'k_eW:&OW?k"-%@-D"+@jrWaBLnJf#GJ"NE@1)\%>+_6H"4OJ>NZrb2l+GRJ[#I__tA(f.8=LIG!$j:UlA[W*,r%I(@^F'N'WjXSpdKW+ebUM^lZ-]Bo#-bfg*Np&ag'Ph27BNVuUeSit`5%3Yo5T!<$KAa([X_](gQ8[iMR-F%/d\(M<c2@)`bac=qZ%L!29>f*D;-=bfWT-sS!I+C1d=Rts=AoWODXL7gVK7'D(ZFcZVKiMDm".R\>VEG1_Gh$0GCe*#5.8,7]nS9jq-c!O\ekFk!P+7f"O%!?.D(eBXN\qT?9YbQ\h"E@??^G`*<eg[G8iW3K[$$1`Z5<&+S$gF#7KRA9,c,#-3Pd8[&*Xc]Mtb-k,1m1T"=Js:=KQTH'f.]oo3%/@Yp@`"BO[FE]p=QmJs9U"$!tDO.[P_C4E#W%a&e+(HRS#9"5.mnO6N*CM1Jm5<EuPXSW^BOYB/\YN5XB&?(kOV(!KCme6$%DNcV%6$8+')C=4WRc0<.bVJ74b?NGG&/)ZVS02lsT(^Z(Bq&NoJ.B`C@)(p8qd[t:5W_SLPd*e.aeSJ>&\64n<TM\mit_cBI+8I\)5g3q%%u+Dj5)2]qR*.[`1#*MF\H[b)/<J6CQ:.F(ld/_hb:6PfiGn)I3;t0DWSJ6#IrcMh.k8/?9@kGIR3(]Ym_<mXOqEli5.9S5&3`bi%Y(-Wd![Var5uJBleRaYV\,e)cD"aps##ZfY5+rHsLcBoY_esYs0fe'Xm(b1Q0LeqDd4bq*?"-Il/rRU-1S2OEm*@+C_K9+V/&MAi%"VOcal)M&&Z:A`qAo%[kg6BI@W>X1n>&b"D=tG,X_qSt-8;)gB=CJl33Qd%aj6fA^PmC?$n_-=i<*79.*h#`8FlUth]+VJ-Jc8!:%5u$a@jTY#VJ?T/G/)Cd&1^To2h)7HlKQ+AdO``^4eH/d`^&6D.l,4RrpEa6@5%om*/6)'kN&T1r*H===Z$:YCEd\7_-+jSN,/bUX%9*=Ij1KU84W8OdkcpHe]P?_b2ho42_@o1c]<9iC%E9r!,Q5[eP%qF#8Zic>_!m_Ai#",oB7YFjpk;Ek*)MgA,\tn;)!:4>@rMY05%hZrV:/Bo6O#qe_DR_I9p@,s`44p+C`mju`M$iDcZMl:;;Y%5YZ_;p8'%kF-8W4lh9mHL+C,%F$FBQGnpT)/b(Pi!b-D`J;K',Z>o%_^i)p:6dGYICA>U?F,3.RZcR^"'(mTj6)o`V9jSn:+QnbZi4?Ykuq3UGs"m/??;'Wl'mJ>B9Cm@_rhH+6KEif/sC6#Y2<[%GMd75%5bD)@>5&UGK$X^!*$,*ajN8ZGBQNrq^Vr>gJ<!YdcZXb'rQ_6iqmmE&Ma6otHpdT9Bs!SL^]h-,PB1emQ.a<DWQ&$&I<I8^FrY^k%P#s1$"TcM"Nu3NdT0jN!1dZ+`!FU6K+=N?ngC96eeKAP0%_>HT_j]5n`VZSr[^PqA&uDQMPf;Au$^m8[Qm,)lb'TCYh"H`VPJu^B%KI,Ud>`?:lEBK>rVGn?FK%7"*eaV4<Wei4iait<91P\35e+>Wg1#qm,@#p#*!Mk$cS=n74VAI'6qN@FgW&8C*YT+3O][c(W*"d19%mt39p-5EtF(/bN+$U-=!6-HOoIP%?0E]8QgU&'<Bn?1ObHdJTM7Yo8P^=em4Bh>Z[+X^g%!<M)5?PeXW<7n>H-59fsAA/(54J:Sc%OjpYOJ4!tG)0ncXfG_<mF#'FAN]\LGMOl(\5)H560HH:*QE0ES8>QlRJ8Yc=>6A&1U=fgW"^sau?r_!(peg',9-?u,ZL*BgEo\eN%&P>>lZ/7(b#I/*NkqW7h$=6b,Z]nojL^Y:/'6(g?]r.nLJ\Wgp*+%Df-"k16>QY]]:O0;+9"O#b+<gXAO@K#\6*,8Iq-(8+:f:t^%3%=T(q<C+Ad3NVg9J1DE8$$6C#Vo$3:"`WI#/>#e>K3^XLLPU03]d@5\,r\sGe!/7H"8D.N']imWga1_FfiAd$)aon(SU6:MpS$F%ab2Br.>[',0,C*#V\`B.6.CnZB(t"6<H2Y*@'?VbkY2:Z+`l_kC,Hhl!rX0Q2$c-s_gf>SMIG##>"V-*1r\#WGlb]"0agUh5R8>d%)5=]"MLr7+&5:&B7Fs,AO*?nFP.1b22t`Te<l_2eh$6oqH6#ZS]s<aX37uhTBJdffN8OsV;pV5I:tT:r-3pf+EB"(hFiL,$_(l,^%G7%<2)IV/&5%YRV&*<,p==K,FYgAC3Y.Po8^P&kBihm(b</G#%`#%0-G[g;Xc&'/]GW:@u^=O9?h/_Q+.j8P>@[PBSTr'\N1h705%@008>@?Mm9Tj'YdJ*fe_[4(p(oC&Z'KXacI?jJE"$V2dVW"]>sJQ(5>Ff=,=UM)q^@*BYW+CL"Q.TSqc3s[^.2ti$p:WX`ufS2g<%RWo6rMrLC0l)%K$N-7b+V](^_6A"o--&M5Wi6WA$50hLEWfB&Nkq*3r[-A9MVPm1<h=$:b6.bh`$P5!2pf.5D>6p$g(S'q-qIMZ$%)R:\Siur\e+CuL\+"*t'>QG%NaXFkb2mSZ92@W@`aP%859@]u"iEXs)>#nRnC$W=*4er("5J;lQ^_9$:Q3+i'6(.)!l2ub`!6ZTq%#ZSG"[STkt8C=MYPgpC:SqIJ<%#*Ma4sWFTOi/d4g2I-n:d'4#Ah8u8/s4b#1)\r$&L+<WX&'9A^.KG;PGu.tYiH44+A!$F*)7I/%/>9<dFr$"?WCXZSes5!4pg_11JTj)[J'n`n<&LTV1cIT$m5&@2\?J[q3SY1b='I(A8Y9b#gHq'<dp1:RM?WbNh'us&F_jpZRR@P`%@#$bPD:,WEM%Uj0'o:Gp)BcM%Z6tR]OEk+h,dssu=MeFW.LQ"c;!X"Mh6=hF1[$g!":q,Xeb.t*hi0S43G=bj37qDtJ53po+SVpl%HF/SGoY4X:CEG$#;tbm.4Y/'N]]:RfIrQC,O_(bq<s)4hU56iFANRgkQ@eEP"r4t_b&D?$EF7X]I#"<Eq'qeM&K.Y8=*N+i]M4Rs%qc-sh)VQP4TbClED8Y[!ZutTC]DW0M%#PgHmOgG<k'E5GK7bSB?csd_:Tl"&-l:#'L[i3qG6J7e-pab8fcA@G8rHq@n^rdDI%;J9%#Qc/.R@#o].##%?95DA/e6NnUJ:<&+ZV)FSnUQ=."jeP^#+C472%cR#@IY-)m.!'7gU_.lJ#O4JB3-\O96hAO8#sVk]:37k22+B#%<9eY3WV4D/l_[Y,GYC8NZuu<r5UQOjZ,$R_.bf$?dA6JXX"3g9;4NPVruU$WlmH1n:<(0f_c6O9GrN"e!IQ2Bf:4LgqJ3JO0AG]N%)YuldabKZN@?r7ILIA\Xc.EO/*b^6IcZ#W^cH5ob<A0V6+pUJ$<9FsKi\RKHY+gA$c65(GJ?H.]:F7(_,\*umTgIg%IrcXL10k.7%>kp+<F"LE]&Cl5kKY8k\G"@.*aQarm.VFm;)u_N*`89%G[bIm`#ROuXRW"FF^"V8G.$+VPE1^,t.$#,NJFK(\.=Q:-$;<nl5HMtL%"X]CHfVW#$]\<0K'g2;6<VI++AZFM1&Ud9qoU8Z1K1NVq+Cq'dSSKZD=XF:bf7uJT;;X2H!g*^V&b.jjX_t:8i]+;_cdZ^Y2slj&%a9/Lu20:+OP<Bq2L/nFV(.*KBnm'?<$1;CPV\nXZo5(q48$rS!r\'p-NQD-LjVFab>GW:bjt[$V-CF97E(Z9Q[(-c%Y[7Un#Z`6r%:f)h-H56".`Ej-+)=F%.U"1g0_MS@s.\g0T"*M'0?Nc@)QHl/(i%"E,_C<Wf5VnW,!Q92.:JG1MDGkk(cJ>HkV@$UC!_&naEpP-b%kQg`8CPA'KNlKBPTc$NH&R#q+2J<QK8hafsEPhI;m+[6[,r\+R!*WhfBm.B+b9#b6d0IEhoSeFFY5L`+%2nmFX"["_P$M!4W*ssN%dR00kY5(d3<pEbG38@qPKpSO?,mK*]J\8j`:FG:k"XF_Rb[+ZEOqlHJB$das/7EWV18V05^jZ[>6=oX+5cN=RhR[%:n!j![A9BMr%>(@<'O:,#<&0Tf=BW/m3&$iqQ8N,i71L^kEN\(PWLfFtUP<-1B.Ftg>;p?#?i[>Kja<lM7KZ\!'@q9Cmq&u+RHn$mWU5BL7=.(GJ%<_Q"k!fm5gQQ+\="8#]6R8G6n;p(4JO6PfS9Z`kle`-;M'4?)/)=6'D%ju3Z%?ru?GnG%m`D4GCOmb\sm_Q%j<#tNt\"G6[mj_4%%%1M#P83Z*Zs%OEC6ieAAVM[.N#4IFaa?0OmkCt2lD:W:<f!F[/]Domg/0`XW^#0f^$J#36@P7c,L0B8L(BD+M>8flLq\9nU5@@/U%F@8=#1>as^aSL-SR/s8sW`Ajq'm93B*#+*R7C>oWk7OPIONR>A"ZKFTHZB;k8\V<iK!kGBac]8)h'2e[0skT92<6$:8i?fQ3"H*o%N0gn@!$F`HieD:q#s`M>KGIXG.4QWai]bitf$"@jXpk9kqhrn%@So<Q>XkcObqYTj(r5JHToVDEY!ihXDp"i_38?h:a"bJ.LP=`V%r`GQ[>20_#4pT_@orb+%p=c$.>E#[bK[j_Z4@:F;$A'NGrnthe^2tI'e8uZ"g)9#OGe#CNH3YL33?Zt-4J%&`a,;:d=lr1b5b)ib%TkG!IU].-p9;+]H.&ktaL@Ga90s*9WY]]H\?0&RV6q`T<.^"\Y4\4tY)%L!mQf.b!kc'a")4"k8gtP$BlJc:*/h_uW6\WP0L_8E:%!%M"%mhUW,5`K`87k"&[ciY0%8&iIf.9""kB":#e[?7qK;VIKRBHFE+!-!oI%cfMDDhV:k;c&%KDW,m]^B@bn<2O">0jh/pE!IBb%1Ea+5)i[6pltRRGFgEiZlFGco4G"G@`/$Md6:mL7cj!=*Lk]C-pKe=%=p;UOIE]]d#f!)7i&'T<K/0.#]c:*VfS!+I!;/G6O+@7-%Te25)?]+0,M3tCAQgJ5o,cH\t_%K!%V4!)5A(I"S$+$[Z"6HW7Rl.i`HQbOsrc6Vp6IiOqjDao2j%36s@CJfC7IgnE0s#r\_Q7`(%:gZSH=&'N"\(OS>5^a3:$6[^tr^2DUgZ+&n>.\528O7U&b/SdbEX-?de:$fY-8j,t'hl>(]Hai#CS5cHO<pC!__J_D/!TGQ978[X%e_t5`TErX(\-#e;o#3K)qpP6-HgY\&HuJXXUG5cP;7\Qd#"T<HUr)HYh'1<%gb2a70do@7TGf3b$T2RF0krq:h3qV+'`9#57Aq9K%-)XQ&i3K8<mj3KNIR%6"AuDlbYF7SWYQttXWEk/>2dN31an>=IFVco["Ou9G/W_e>H<:UE*^j(CY.TKq(t7C`MP=X9hD,RWQ]0Bo%?H5]?rtAco<n9Q6h\+$Dp;IbMWd4$K^3H;PdJW37BW?%de*k&^$f0UC(W)7^L&`PTra<6:",=-DYEPQKP7HADSjAbi8k;e!')7XE%n:9U49]/E792u3d!YK%)DlUt;,<@<O!OI]fWdN%#Gl@%G*k\h[Cj:b(W&oo<gYqBYI0\?=Mb9`D&kB.A5U@hu6)-MR`",tpI@K5b%UC&[$NMi:GCQ\*UF=:1N]D^l<q19.o.g<b`KHL/cd/^HhNf[D?RP>%5K>'h)c0t^o''T6BpPjVQ"i.r@?@-u-bHNp6VkS4UX/8S$%Q"qC(Ne;&>@muZUD_="?"ssJZ[T2O/@D$1lBILb><`_HAOlIEJrOj5VcA^Po?XnAl+1KfC8b0?5%#M5WVMK?iLLnK+`Y*+%#1^g\%IK"Q')is)]+2@Y<;bnPW&,3nOTgPV+;8'fPMM4L,/-7?Ve<M?Ai0kl)ShN2TDRmG!!B0>E;d.;IWrVO!%:JsQZ!'pB[0T2Wj:WQ'%emf0d'Vfr^XE[;k_//kFJS&j.K,p[t99E<jY-<uHG`:$_k!%dF.1M2"2E,f886aBH1E<7f_0s#Nf-f7I^XEn&%E$ABAo^ehN2^.5%,e3A=\gMoH+SfH0.<nr8cG)@($VD0d1nXSDnQC/H'F#IPQqJ:NMSWiT#`KB]H4#@U\QUScW<))H#Z'?qN"J1f?`b15TK3H'I7-uL%070SN<"2m?,J]0]#$L:1P<#XrD2V^%WP/GIGsMfu2\kg^\NN?e$qJ$:XmR?&2&LtSB+p1O7<+L;cYOAZOcD.iD/0.0EkAgFZ%'60%AcS\SeS.FHejmnfcYV3oo#8s&BR`:?Ki:H'e?6i?PYHMjJt7:1'=tXk_*U',:Q*H!5@>.oS;)U=fJB*,io;->STYFkk/="3Au"WT%5Wj5!LW<0j7r,'+Va]mOEHt0<+7c+S`$*D:DP9M[VA0!C\V'BaNj[9%^sSsC(CdJt\CX*KgYL0qCTm3HAlU9^o9EAK+aT,2j[MJt%)'8A>,/dMBp^:M?=rPErf`;mH)L8U"l*F[NVsB\5Rt58rH="'L):2sa+AWam<N8Xk`%aF4bWD+8-LKhOPlf#:lj=#GGT,)j#(2?6%itjNaYV,CKC$m='O&^Z\l/_haZ$J:l(A(\eYW2AM\K)e5E_gu,N@Jh[[W:i>LM+f>q,5Z8TP?amBdlZpM)m,q&B*QC]1%e^Y=?3q%=!s/P3BV'KlNKNMC<iGnC6F2<PO"O>6(5`?%T@OgU=nCB#"FPoN=uk+2Lm;8-52(7'EO#C14TMhEG&>\(pXV]X\G/C]CIaNN^(9b%YDB&-d(D<o&k\%9Os\F0\Wb^%`k.<L+,or_QC84nO0oMjf1fkMW\;/>Oo@O8YG8U:Bl-sQGZ!]hNX4)_B(&c7R%!NLlAI\uO"4XG%e3r_:B[C`.['"Dmh1)it>[f@-hZ=,aSC/o](^;"M89=-KjOE06)u]ViS&l,]0^40p_*Fhf[/KSBW]"jcr0/g4%E?bs1!FqV;Ccj%%6AS@0,#ka&,T,$;D*htg>4'R([B#`"i8g3Nf<N]CetM"YCt/_UM[r@8.6&K28/2WbmEd-o/Y71lWsNJa)c.hqrW'sZ<IH["X611S%mT\t.P$=M8Su)D)qQ,SNaV3_<$#iY#66BJnE9E*uP0n!QbDdmP?X4h[TJ-Q%N;gbPju7(gk/4)7qgh%sG1U\/q1<<=h7["q.;t5d%4<lC0%>!DOcVT;1&BYs5#-**S"PeI!92/OH%n#]I:OPr6&)-gb;s9g3&E]`b*FBXDO9[*_I12*FckFOkeYW&5&hM0(6+i:p,!3u0%92Eh]kV0^-p"&Q'o)YIGo^:CC3Q,PTrSd?Te)92_?]CaX\&EIdS?$GI\j:-==E7e?lTk3Ea^=+'-[jHd5LLc:h7d^1Jf,bkm#e:\%PUnG:6hM^^T6"Z@V4r6!`\/JnPsUl=O9kOmp.qtYJkEeS:i>`D[rXeRQP82'8ke'fI9mrs)5&q+f^r7/eYuGJHn[)]R_A@\_"I5V%V9?,SO&N];-GaN14Ugfa,\_8i.fo%O4eZ6oEeiuBjV?m2RtJnH$a1H4m,f,dJ)eoO!gEf8Z9jl0U*Ojp$ENjoO.BBN85t[iJ4WXt%SE;XCWcU8SaapnrEm1P&Hi3H<fY__O-Q=Z35nnon6Xf$iloFdpC5`%2mZYbY89$-2kM3:kUesg9kE_:S\$9V<E5alP@L8:$F(D4g%Iq-gt7cK/7bT#4eG(@@[ErmhEo?<S$0`OL]h,5X_YMbXJFWh:U5fTCs#ir_9*!:W)m^m*P!k!&a"Lo(cA*:c\HK@[WVrBsTdt`o5%<\BtV2)[E:GlI10WaujLk7rO7j&SDTrn"dsH;gKiBf(\2d+6*96e3Ub@Ir-gXHoO[==/<F4WPL9'_&[TVJa?.)_"H54[O(GCp.!:%PHY9ObtU;m2>AT<p$MkK)C(*T,D$DHX:o(3\`pt!!%?Y@S(inQP\0]mR!+gj:/+VcBVZ?QXKg0ZGa\d);6>.tQdOQ+DF_O^X;Z*j%ReJ',`.tnB>!f9@I0><q4TGbh:<p?S<XDpo[*1tDc[lLLLm8ZMPX@BNX4jcYUN1Q,G;5c$o`btG)#/n&g")uC9C*gs)OjrPkK+uU%hq5j!@;;:O)*1iSBj6#;8:bWN([i;]HH'!5q8uGq8c!DGK=o8Y+2(]=oX<k^NYu\C9^,EZ"QCq"5-f\g;t6/@g6!]7h5m7X\Y4+u%N41"=&q_Zj7U@.LXr]g^gG(:nl3sG_Y+0Fe]e3aAT\./bJ6Gnj1djVG$^Vq"^2[Pac:ruXW8>7nX5pb4"GW/q)I)lRQCU%'NoGsk%@F(u_oFbCIlL]*4h[GdFk&H*[Z$'Sq"#ts'kMsZtW!0(*RS%o0L?crRJ7AXal>RCo[)uM$rLhb^rf)V:kS#lu+4(\F@A@%r+bo8b%GaOA`oG/g<.(3unE&A/Q?<^R?`ZtR?E>9`>ju$YRD\U3r%tkurs"FW(iV=6QQToI.!c--dfc)ElIul]>!H_`.a;TVC#a]<i9Q_\`%S'R;9U=?=WS45lX*7<Y<m8)`jq8,,,X:=j-BDa$L4J(ls$T8I7S(;IeH$[eJK/C%5a27H-2pncubDYhg-?I@e!qh)K*5eT&T]'Q7%W[slg%_+9B#&[&%d\o749n<=IWV0a".5n,[?+f;;a&#'&M94`?1;q*j[+VfoQJ!XH(KLCC1]_DY=<XFGL'YONd3D(eI!P:<R^tU`%i_om^(`[u(Hco*/TG44H`G-CUOWA%=@&-:IL]L:?F8q,[5d9=G5(5WbXO[i025jc+%nO%99B.]gU:*>!c8#66(bE3T;_Xe;"!bU*%:GNKV9bdr"#B)EXaN)gJ]bUtKdF"`ran+8F@_1DY/obTmOb.HJ2+`+EY,9Tb(1;A7E__`MN06!=iKH:*%8APTJ;Qi:K1I%".M9#.%K$=(cblNSlAPSpnKU:g`8KpB^a(03s+>ja0kgOL@AAHoRom^sqM5-6>M.kP;6lZP@-X'?C^+SrUdhjKn^EgkiL2-BhnQ/@t<hk9R%#^e=!\L*(aZ"dB=0SHGV<.5C;)T0Imb8h^kLc,TF2<Ruc4`DEJ/OJ_D_l3YIdY-6bjm-g7#?"B7C;E*GO\>a5ieZLR(L)2ZW^X<_%Vf2$N](+K#IH!;W#Si))@2)jKoBE;W@h]X\V#WbZOrq$=<$"kC5lsr6QXH\#bGHa/"fuI:Z8-RoYDN;.\I+9rj*3TT.29/Ln***l%_fcXfo:/8R98sGbq504HY1I,.*.\g*l3Ras6k%V@Gh*[\21)^T<W*k=YXRmbf)UO13=-QnkCm&W@\+23W'"Z;'tu[t7@n7=%+7#R%'L0CMo",7".O^9%<[>Y^[1G'[(Wmk=;@<*`\>@!+-7)su!K+3\6iSu:VElUo\3@C\8pq&$,C/Wd8>4#`$)+DGG(-b1&*.(:`k"cR%04'YLA-E95g@3*-ME6_s``&eAg)CeLMVX,F=Q]dZeAA3PN[L\>&(,0^U'tGuZN\QGe.==n<[11N.-k9I`6>peCm(<N7ljhQQVq%&%%8<)rR,]V16PsFKAb[E?2@bWU@&cZK/'N$`Rdd'aM)!$W`+g'<TWXG'B*>-Ti+B.t4:b$JShGYCD,t>8L6!R*)6CNOA&P380Q[Y$%,lS]*KfNZkW73"L!6Ue&Rcp#.1no;P_bC614e!m@>b#^aC$/78+E^J'(t@Qo@N4VOc.8WZK'\ubb_sn2Z__Tf"]qN%Gp]giBed+0%0P_(;.hO%%2p$'rD[dB0/M1F$M1T9ice^[-kR9LlC:$8AJBtK1K[1HT%]#+2U<O-69$.3hB=Ce,"9_)Jn.Dt!bArJB.4YV9;ULkI%42mH6,EC%h!E\"iNZ;WX8d85gaBMA+/KQ/6ol@g,Q*FJ7/;8c,LP[)&*G?5Emg<XT1)M9p1kTt/?4f;EW*([:e)BPD!-V0Ul;gQu%0`&1-a2Xqt6HHM2X28!/S9!1cN=T8;@`t:^KBJQ)X;l=&ht4:8,8,sp+_7c'-lI%lQ!A]Q$)eBs3&=TS0LmPdFQo?t4U265C?FY<%=@KB)kdLgthhBqNA[3(S6i>!aj/*[\[\N,[,8Am[8rmpW+\]h,CJ14;0W_32JUC$%3b3*YLo(m*j\&il96!eNg^8!\KUG>\#Oj`'%m2oR0_Lpt,-%p.%^_.oVa+Xl1#2m-cJ%7s=Pf6)u<eP-1chDA/jPGR1*O^a_KR/W/?ug[a*CG$kVahIB.*2(,1C6e5N^-)Ql4:_H%Be1.Nm'i<#K/53(HpQoM:C5G.ai?BW-1+*om[^+_`TjL:r3(B5,t)OQ8$1.I,S[0__8e[h[Ed^Vp]'qL2XN/9s5W]W:VQniLO!W*%6iQ>bs,2C(+9(*2rRY-Y^V'QPe,6sfd^g&TO6ua&NU^n#XPa?$-EoQfj\]]LVAV0mpqjtX&KYP<h@``EKG$,`NYOEpWOF8)7?k5Y%9Ile^ON=>4G(cGJ%S7M(Q+:>a1J'*m%e(:6=G9CF^-V[Q$5SR)3@#YB#%WH+:Qm_7/9.+='SGH(.9`M3*$r^pci=?1%LX7%",R?r%%Zh=d,,'HI'>.q^7$pAEY>c=^jiN`5rVZY82\p?+,8>8MJ2OpJd*o%tKo@79)@6r7UbEpNCtHLZe,R7r:i!4#r._9j<!"p>SX:&j%2USd17b@?r%AP!Fd!Za5H2bJsK'9UTj%$B_k7upmADEin]mM.6FAQH>2"p2h;@gTefc$j*e`$(P[T96;<l<0(;B@&/*:YIM6Ah0]%<>PZ-S=tL9;/[nDKi;5o&P\YkIl8;:9kcjZCPluX8k=r;q>l"BH4M65YG4J$(pnn[HYs/NbJWhA]'6ts[DD(,<^W2!c]t.:e&W:h%[<m1HT<H#(@J@bZ)M/c++RH`')6pJMJZgFX@MWa><[r'&-4amLUZf+K6ZAW3SZFlbHbhGPak-=_<jmZ1LQgb_a5S@.m>P!=360P/%<.mB=Jf'%QO+R8Fcgf5ENPi4lWu!*H\b!PN*@;3(>+b*X$-<-"m6`N!8q)mdF=7X"([&2n%K?3U6:C_Qb8TOcX'6qdhdt"7@l1&5%idG?7Lq;q[:ji?UJtI''[FG%5IflN"T%N[X-2Z"7:'mdlX0jY)NA:*h'UrqU+dQ-W)>1EQKdMY"U!Z<k4:=jtd_S1!rA>:6=F8bB%I2.A*Q6_'EI8Li\/G,TU]W4hQ)=W/`NR6#,YABY2dXroIWIEh=DengHo.DSN/0H1g"DP*Ja.Gsr>u`rY6`4p=:m8+nGWF!.h\_dm%n'+5=+RTk^QRN5b"IE-)3C[:G(om$\Vn'rnBQaCtUn\UFX-BV>Pn5/bjs/oE&lI9m_[9d%QoshRLT!]e,OnmbSTNX%gEEKd7rq#9%2qE5)j+ORt39HHb6'2BBa^1E/F)as!87PGA$Q[qG=_La:<_GWil#Wm!:.'2G,kJMPM;7%\3aR@Q>(X(sjfQ+lef]3Mhk;gZ3lA:B%%Y'1<Ip^]ecDVna[@`S:m!ZP)6:B2#\/B;p+eD<i'qV6s+>do"J[$TGX3LOPEJc[bC7$EQLZ^#F?k.m:50?Xi=QU+OEaX1nQjQH_%8`%WE8"=n)qc-Ln%?K_pa<cEF3YT'HU""&(R?M1F>3W[r`CgdRj'WHCj2o5kmJG)5;8`g/(fm45\-]>e8*_!CGtY/V7#iK.kr5IV%m"C`r8iUKcZ:e=f>oDN>mK;M"1raF=0mKDZI(Wfn+JnQ'ns0J^\S5Xj#3bmE$l<)D$709nh\KdMN&^N^,jcKQN5cLbB"/;a=!Z%j%:NOl>:>dpd(InN#+'N)/(f;u%jtjTu4s2Pm%g@t@P<8?]7Lea<l0*T"R[o>I0=M]g"mUm$BK`Z="-p-aq5HoP'V$6$4NfK208Bi;%1Yeg>ETV[W0#a+-dtM2)L<"*D;[%8XY#iuh?MjRs"9ZKUjOH@U']nqX#W]X=MnfOR;Drn7aeMO;MH[rU+X.du+2r;'Q)r]6r1mGa%?"Dm9i,Mdsnp14B,F2HO#fo!LTXsO0!<Y7oH5)g?rbPR5q/#=JgQZQ\CcdRcdZ@Tu*'.SeJ:_N,-'1:,<fEc'*eaiZU#cC!VI<qp%A8Bk":1(q`M*HqNa,,TiObU>[Z=Xf6d@r9t,9me4ea*TF(ea';/H>7[#QW_JGj3@:[WVRiIre8*oP`S?hYpI)#9'U!]=Aq6"pStF%F!OFk@Y0;>l;eRRY\R2AO?)Y<e1K=6H6LH5FNBDL6G9O"&6i.*(*r]<3(s@Fl_-sN3G\b-kF3nl+n#<jfpF2ihZHcZYQhI?'LA"S%!@"jLq8LWg+.n]F'NP>i=nr44/0fn7:Goi.L)QgtVr/Fs"'>5)GUb"@`X;?MJ=5f%lAXB#pZ^h--Zd*P";<"ACa)pR]K*!rD0HZk%6p]knB$??KS!bG(At.C;25/eaC3Y!Hpes^uq9>oEML$+4*ArMF&Y#irbEGE6+dB8W9U5f2Z\dci/htYTX6I0RGkrH/V=Y`>=/#[>%*gjspe_D15"1ttrZQ*/_'PgV`*q>\\DV`4^(n+/*bT^1gFp3]bTn1N%-H$=+T\O[];E<We;3HW^=[qUi:Y-?84,@7g'ZZ"r`LJ'K%EZd/K6WCid!m77lBKL]20IcQM)!q\1=F91=;'LLb*XjkdArd,>n5dGIBD3[2MNSII^B;$Eh:auU9mMr"/MX0d6D$!CY&_gD:GR(H%OQde6.YgkW?XRD?ikb"c'T$=5(Rq_O5)"K"0&En@Wt%,I4ikFr?W=GpM;MR=AUTal$'gXWiqg$/lH'!meY!^OHjYI<eS8a<,hLBe%IOAmSE@a_g,U8:^;rXn/4?jA[>tI;h<]l0Lc,@T+JG3GrDT#!`ng6B;\.2Ig**)Am&(kJ,ZcU./+9!a&P%Wot8uK9i#D"@%A.Oim%l+_ag$B3?%YerlZ5pk4m(-,l!f=OPkcoAB6CrBa,*&Z<(,Qp+KY/VqL8jD^[Is$GRa.=3jFUL5s)F3P:ot9ecTnBIBcj#HWF@YFi%.7RH0n:'3]$:+qQJeR:7$RA@'e1lW[.\PfR0kPg[-tWpJ,TBV(MXDhpLu3Fi$cNXO.('3CQZW*:R`JEZ.C+L=i$LQSAm5c`rU-u6%0//4a5SKPA.>ET(1g()nn1WPt[O"eUW'>7O[j$ukEs1TG/TA0!6HG(nZB8^F^($&%%6\B82\NPq_<5>ue`;T+/\#/mbuHIqA70NM%rpn0%6s^4t[E:ZX9["*;`>Z+@]O<e^N*e/6Ua6\Q&>@;-e.jTI="Tk>n-o@T]J8Me*OrXmRh5si"'c/N.UJuFSopu^r6FA$c1tNF%cCJEd<3<$[IT^eqOoOK,rqTq!cbKE[s6]c's4cH/oj@[DhgbG<Vs4!<ci;6ss6VK>oIp2<3duASRudU>2h1SRs65mMoj@aaJ,JJ:%55s\/rTA\(b<J3Uoe4Yk$<`A\;-OIe0`:j(nnFHjVAT1eW<u!k/q,d_iPJ^'*hp>-<>0rF+K/7hXf6TDP&%/h`WA6)6rH\Q-7*<]%\D>$hG3-"`.7f!co[(L\K)t)[OA"O/Plst`Zn!p8i_CG3`a7tKo"h+G`n*`O1S4;Ir]gF:X4op9P^!'?RcK<X^2r-M&QNG]n/*./%oKlepbBlX'V8fahT$YY]eHagfe(KDt>7eQ$ISaXPm`!KS=Y!V0-gjtE5g:(&a&/G-,*G<b&gee.Pn2t*:XY2!72;im`'_)-&ui[_%]=;(S3#.^nBD;mU?4jsb-BERM?851BA!l,PYGt0LgCe0;H&Bq4@;6E&JIO9nTjAQ#Esb+H?0>P-Ou9lU:b'5oQhR,[=YW7"'P'5f%WE7q#kCYiC9q(Ei)8t:O_'#BW,B%Q\0kureR,h0;kEXk3qPe?d7J-cSZ4BRO_&+\4=lKMK9]]Lj>hPFf49+6/V89qP.o_d6S?iSd%),?C=2R.SSLZffsU9A7@#\HILCQKNI^bZ1q2N!5Q']<Pb<pIq$Y_P<To-ZjM&bdC`=:RASm^9X9$DY6ggKq-UKkkKGV")^1q&+,L%k;a!_$q.(Tp?,HfK&T9<p?_(h+l=*3QDW,m>X,6O#s^&,N+]s*&8hs9<=@DP<Y,5?MLq)H'm6A&h+;@YLJa;6q/[g4_B_]=DEq2D%So%1ZBJ54FhWPnC,qOfe%mhqhO4>2>,\)8JHDi^"2CO:DF=3S*lZ:m0=,(B:S3L\/JN77jAW6UleJ+&LIqH4*<p<1d]08ccb!XLo%2e/E,9Ypbk:f%gW9D&5Z<<O(^Uk][Tn45F%'`&9nb;64i[S6W<^/hd$Ft$=B1NXBDp<]AH6p`eVjf6#2Zm>3tGGYMDH&OHF^Sh5:%':ZRElaA\r[RH"^)tcq;gZBZgHLUVWa:eE^=7kqeO5Y1k4^E$[-%VIEg1`sIO23d?!]Bi&b%UhWnQD%XBudWR,?SPint=Cq[chcc%eX=fa?bTuM?=iGtqhHK@6\uN]N)cOc2h!C4WDk*`@%sYJ9u+C@d-'bXWbQqX&_CGFOpt[s)bGCR0n).2ltVV0>)UZ>9qm.!=/uGa%C*$7Z]Ka,U-l)nQSV%"o>IRU]_(cm&UfWeB!27MUa>dJ1Ca1\C3")XhQ''3.+7l/Z+"q0mB5c!r(eM@0$Ji%"1LO"t;2CYo-s8(-%`Z*pZaNSsTiGmiY<m*<YMu/)r&p8P5S7]hG^2]`/_o"hFV`V5kLtDs]H&".kaa5^d"<']jr.dJ6Je5?+!ITKkd".S77=HJ<8;L7]%0;Quo9nT0sV]Q0WNc+EZD@^rcVdDgNR^4JC7`l-bhY8hI\%p!\g%Y`Us,j3XWU\7(61UJ"a+loQ94SLmo2lt.gf89UU(9q4?WO41%6>5Rtk"^%<0k4ml)-B%OBPmNs7IVmrL4;)c*1!kY)%A3FjYu"MX"iA>"CdiB;i@!^C7?V^!,FTpBo7ArG]i_JH]eV;dqZX=.3-O'%o34=!m-nJ%N]`S7h@-(eIP[t#O+s\X4!El"P7qIZ!IK?2`7?hYNmMG?!MO*09e1uj&*U(aZfuij^O>sK>QC!pG%f!]$u`j^Q\+<N%jpj*4;ajC(B9T\KT8eHpf2/B!$fF]*rot(LVQFuA!Z)"b1Kg/mYmI(r:SpFlag9A8oWhbg)c4,N[8/dTD@mQ,3!P3SH_YIQGkXQN%m0AX=o!Up-nO&aK.RCCa3OFPdJ3QGVqSpALN-&+S7,]`M\GE]A(=>!9=q2ljDq.bJcR+BAmk<!V/'M65JS\0fjGCp_T8B7(L`#\T%pYZ:R[.aVsnK7UtM[<UTkfJK9lYiCZ-RD*\7@3G"obuR.dNC('f%%RV"N76V7RBeh*%oe^`Df;4U8i8l\XFkQS8&CfTcu)6aoO>>%D\01rgP@sQ[j\5phg4>'9L"F*-O#']^h3(Ml9^Mji=P5dGM`IH^fK]h*f5gMb=Zn6<S(Xi%UsfD2'Yf_7Wq*ICUA,,r%99;f-BSn%SHB/gLqLtoCK0M;5CeL[C4GGG/lofE$I1kPil8[$g9M3_E9t5]`\SUh-B-9.iUJ`SF,4HS3@$JY/>MRP>@eEV]^=nqLCF9pGV<6(%'J&j>c;lNi;;,)30"6)bS:3^A)DFe2.9V.g5TR?d]tOIODLoG7=K@N.eE<Y-M[#3nD_drS.)L.,D2)Z\5`A@<<pS@9lIl0Y+Xn3:%&qmhn/VIK=Bocn7Bea[jVD6,.-.)n][,=!F+WG(4664KYIF'C=7@"d2eRirF!HeH)BmA7#rUEnOmg4i&g&\b#mFY0I8>>)1jmEV5%(j\SOWQgG?-OJ3(ID$>_UJNm'brC2/_\g[@*;:5!H0Y9s0&#N!#A>H.i?uVT1F`u+n<$JsZXUs6HIp6hZP0[K%fG]AS-si0;84\Z%,j<3OBj%tuj)gu%O7:ncq-#4`_LTMCC.-tHMdfGV1gl)'Q.2OZN.E&qEL]I4cA$D5ogYL*I]_e7q:tH:<N"luBUCnJEjPui;iSH@%pU0+=%pLG&#s1;:`<Vr15SH"pSp#s7#=:7b6=*i:,RDP%fs0q-H>s`8->,cDm4!;lGZ8,XO]hF-g(do)5qdrK'u;r;Vl^EMP;Z1=%>u.TudK%SibX:IiVI*/U"WPu*6JY^L</DRt9=rM*e;Ns.A%R<H=lX?@gBHWqUjVY=T<F3ND=@\^eh\p;r$Z=P>k\''W$m+67RF`&%\C5_H$_ASKYga`F7OX9ig\An32pq6bD_E,BDa\r!*s'n;P_G(6T<tnK0WtO7ojhJ?kl'Vr<o\PGE,YhYW#[EGD0T9Yc>Q1]gRa?s%4ls>)dLfkHWe+45@)=#Z?#2qJ*V\9h$qNYNZH,RQZ)Ph.N>gLi29&Q$ZF2"7Q_mr9FV@!AWC>dq5jp=LBk_DDAs>Yg?4,c<dq%D*%9q6=DJ0c+LkSB6QpR%2.h2ECC9mo^+-u]?Q\noc"LVp?X*MBr,gT/MnB^QhYC%SV&A:SQU7=!UEI0J)i;U^Si:rUWI)AaM?N79de%2[@)Ym&64<O6D--S]D/>rY8:XH0YEZp!#fK`4^KT4"&EcS1dL&9c4Jj/eiZ,dr_O`4_#NhEMP]l31=sA_ucJnkF*ZUfWr:1a^G5)%1t5*h]4M<4-t8"AFqVn\*$]u2W]o$p4+<uD!eL:1T"@`21C,C2WH+!5-@l;uS[^6bJlNN<d:iZ"+"H&FP>XV!%ghI6;uFc<'"5Xg%%$&R55mmf4(^X%Cjr(Q6rMVd0+A,KmAUoZV7>9S@40Q/!ok2++X(q3djn&bqBK1=^RoOWk:Jq#pFDCXDm"4.G[9p#DOBq1"d+Ad,%X4#.Qd8fmV`.s:8mA\Hu,gYK!&)Ak)FQN`0:P-#<BJe`Q.*WZ[0Z[]`GT/F3D/?dJG@G"/MPA8En1V*do:XKr1]0!fk'2K/*L3d%%TVHQBr%\(:Fk<-Hl'/E[G_O"_J?L,gJeag+A/NQ)`%0$Z3"\[)OP"Mi>^f'pC%pNI7c#hfiobIpN#i+g`%9k[o=@EZQMk]f%d+(V%9l$;7fhGiA$LI7BrW6KUc.gDa7Ml5b)(-tW_j$kt(?h29N2i9IiiO@t?[To?LmU1PFLr*a#CL3BC^ufMl10lg7LNs9-qa7]>#[P:%`?T;0'G^pCWHbKmNH*C8#K4WFDd.T1l5V+aW]YcbJdlmr'"bOj$T[ZNqqBka*+KM(]n2k/h&#5]$PEu\'ib,'RZ)X;T&m#^0"DKD%GfA5.S=Q(1[<d%p>F7/qg43meeUna_p<mXW]D'*SXVq"k)PI8a-#mEK):TI-5\SEED-Esk^ps31KF$#%4pi&h)EjN\*R'P]SLr(`%;K-*-n2Cg]/2P"5o[-#q[C3AdjH@u4)a$XC34E8O/&+SQ/-I,'q+],/,D]U9<';oEfi,XCVTa!6;MV,=DRqcp4W09W)?_:#.stiS%HnrjXE%UrhJqnTG7*X[RY_3:.Hnn;)iKI!FZ)mH24\\,_D?$[h"?b9V-_03hE\KZ_0`PYjXhq\I5g6.@7d7*8NR62Oaal[/aR-^Q%BG<cCf9Ef,=rC"o6C'=WqHRFKBBYB<c)-u18:BN5ITjr)%[n4HJBUBY:_K>8VQ$8q\KNtpMlP9_Mj]b_Kqe-+PalSiV/5jRW)f$t%[0huJ5(@Bu;j+W9-D1Ft5Q-0>&$s4ba]lJ3BU(UM.JQ=F!A%6.[Hk^=kHb`E*72_8%(H_b&L^d#@DSPK?;(4$eX"hEVe>i#$*Qo%%",Ec\is9&rpE<fFh6q/28JP)J=iUVV'[S\\=_%^(LSP$:0SPVr%:4rs)M.a=\UOBWXFq@(%!)Y$SegukKn3`Tkh,cYBGdB$?][">%HJiRb+B'QrDDW<E$2KB&L.-%2?:@Q0F6%Mh-.Iuncc%e,QP$-M>V2b><j3H%K(L56-#^2Y9+$m.52tT4M+ot<cRBPs.;Q(e#S*`#%j6mjn"Hq*jPQm"/=K'OQ$NB.8`&<U"^(f?6)gV"_Y1]+B#sOim+PT8Xh&Kq(o/]qlQf>#4`1SK9hsS`%;93=T1="q57aN_=h@VR)%g.Tq)36n6]l\X*,NttM:f(TOF24i5%#>EYoaBAn"6<Cd8l9T6,%>\]smEAECH&u\]]735$q>SNkqVO'JY7(Hum[)q8p<AWq)*SqL%,=)J`0fPR_<F3=,D[!.7_'8KFI%sZ)l#O6JrQ-H_$&iWS^fZno`nKdb,Qs6g_2^Z;cD4Xs\hW$bDVeAPQo)^;9!.X8KU(PaB+>ef%BSeP*+gE+4J[+EXcW$\uq[GkJAD\6jK#LqWg:Th!4K)qT=G`P%?)fE[7'^be;ML<_W['h>NFG]"b=e;%DWrS3aC]=-=_rgS)D+*1%e$R0FK.Y`,l,PO=H3=oc`<d3i^sL/b_\5IGNdgkqa$+;c&q!:sE"7aaY@qZ[+@fM3dKBU:`L6*>W2m2C29s&F?oA#R+f"=;Uida4%K`LFOEtd=#9">((]%La%Q=5FuPTkJ7VDF&W=CBj>On"hm04SN+0dR^s1CgL`:jFgU]1MTDmR@\rcN0(oXHa'#iLQp3#(IgZTStt@%4K>dP>enOG'p(bDF)Bt?*<$7&\l+2t$Arq]mj(P#F3QdiS$?*?%h#pJR.bh\/qa<TQ;:M?k/M>>]7GL2:tM`QpQA+=-$n8tDAXZe%=Y/HD;&>e_I#b#n,op*3/momaK7?Z!KR'r@1Va\>R3^3#)05##`2DJ&kTe8B8gZRj<aF-i\2%??g'iWnCZ6g5d\j%uX>gqIZ&.H`%l$Ou@cL?51QbCP!oIR`HXZrQl5SZ/Ik*1[-Ls;k@mKSlQK2XR&."btSakM`,":kl>=G*sc+W[Np:f$jk^K(:^h?fC]I]tZc%;jDR%Qdf.tG^&pm9bl&O7Kh9b`L-anS`,JUB?]"7p)Im)9TI_Zg%0l4W/bR+Z*@Nc*gE<C)lem"pQcHYfnIOoeDbC9&Z[W:jFip:^7+AA%6EJI%fK[q,ikApGTeEhp\/.Gr3-!!N]1AIgS^/N1%oC`PCgbI4@!4o"iH-[5l;;AFq7Seu-B.t5?+mcZ%dfss`Hf6#9o9)DqCV-_%<!.[M?L1rJHb[6b<rVTJ9F!'*+S?#&9e#0$%7.:0*efS0,&A0s5_%iCcrU*;N"k=/6D!eYY>>i6W7_HZX8RbS@L2;S).rR07?05q%MQS4?oQ7%KA?/pe7csIk$fq%W'h;tsBhNO+V&f(sTSIT39EK+M&_^l`3(Kp[:18G"gln##dk3/9'_C:o=Br)VYrqmfH)-Ocli@a:%/s_AI*se,a[>Uks"/Dp";Db3UpPc9s>%F71a%m!c=hsKDr#D-$8^:H1_XHK*4_3mh"%`!jbn^5,8NfR`ZAZR#d@8#_KH>b1-r_Kj%!fS+)Ndo.9E<mf:%hc7,*0OgsW#k2G>GY;/Z"L<rZ/_e$_3LG%4UfQ/lEp:Z`,77tHHWYdDO?ktIQ'Q=.pr+0;qoVF8W2c!,JB'V%^bJ3tBa?Vt_(ij"UOY5b?6$4t30mEsJE(u!etiF+iiFW$a.T+oeZp_tMZq+6)<U>UI?YMB$1nU'JRlS]o1HIf&=SRk_*U2OFotY7%4$"Y/]G/ojm!>[3b?-]sjTmT*.=ZV%0c5=gq.+=3<L"*;p+W2e:D::2]JuZVo%&N1`EAoG`k3_gC?Q^\]<m$Jh.o_>R81cHq;.%V%H783>d'R.J;eMNa;@$*ZX+P*O[4["i002=34MhrY:a]=!s26#.=T`0)\rs+Pb\@t?="g,G#hS!uUD#2X=Em]PY,e"CDu,inH<$.F%63XNJJ7Sg6mMknLr+sgfGNr][dH%0cdcVlG8KKuDcnlcOYTit()u<]K98[aNZ*6:3#EA]1$VJB"3]V$.gjpGCXmCe=Rrn%R,@]k]%j]guPjAS.!6F^SddU@e>PC'^=pWF#C*E]N2B>*b2/t`VYNY-3R&Q`5YVu-=),t(!/C&gf7[QeTPG9c8t.*<tkT=qpOI!W16+IEJ4%:qA.!.lDE2j_uZ3USbb*\/B*<bYZ^/!KA@;ML`"5_?,e86Q30`oiTC<Z\1&`)%eNg?.UBZKq2:ocEO%==tEATo&+iYTq4s%3o=:.%)%k<EPf%uq6Gs'!aHDP2<uoJGM[.d7/:Bm.ZRR"9pK9lTYn\iV>Z6QOa5./Y9;E,g-mZ7E()So'Ld60H81n!].P\\oh.`B"7pfNt%#WtsV$kq8(rJbRC/iqu2&5VI_:=mdW-Q>;VqhXU*]Ua7qeX1Ktr:IWU$""&Ra(t6nn/i$T.Y.A=XcL8#N\jN4JmeQPNU&Gse>61n%eVX$d@I"Gr4*H)ckZf)8m-\F0,F6k2bHXFa84fc*(tBGiEV9C-NlbBuK&IM`OkHO>V\-'e9A840%dNMVE6(dl2[$%d*e2D>1beLf%_\N(85\b7kJ%hF-o`5Gka"ToFB8feS6O[r#$8^d0Rt8h##s\@0AYE"5+F/Y>Cq&Wgh843Yqob2J8*05b31AbcT)X*O1k5q^>?7(0%Q8>Ob$G!7)%c\.YL(_4O+I`tj8[K5$Hkn(QSc'3`U2hBfU,!#81h7TqS5q>b$N]:8+tFp0iSp6"?j/#s!B!C2Ce@=oYV@KEISq>@%gs`&FgHr'%6r@jg[W/MeY5c>a`V!4G/20]YK'>-W;UQY"!#O0UjJMT;5UD7:Y;mA8Z+;,aJ=FaD.[HFG'Shg9$4;Y,J!Dm\2c%Pp%_'P0R/2>ZZ3)FV;Gbg.r=&VeeWAjOgZ1d?3b6qbr'r%X+Qu/Qam+4VjV^+f@NL1+)'u#&lmW362Z5dE2`=A=r;J?g;H>%UibK2V*%ZJlGE_K9T%ec3+aD2hYZjHX0?.iF:a]XE(";uKFXWg0n9F^:r[OU]NnJ//2+!S3M%;VbVBJi/C:V_Nn2e"dKX)+oo.LT[s"dc?9s%TpV'p7,p)'1P+)Sg`IY:dXOq9JFYOuW=337?TB:OTbZck^f!9/!j$W38IKOLOV=C77NIi6EL`TKZOLSIn8JE,X3d:B1*#Eglp#Wp%3lS-Ie*E;VmY1KcL[Q\18uCMS0R4=5@q/m=<O9?9\DWmC^019_AVJMU44Gp7;lH$06JptYNO7A%Q/_,`r@(`?ZE]j`QUnL_i5d[1%p(OS=+sK`#L9C%XTZcP0"\U"Q!-PnQPHrud6UiXC(cb-=M`1ISZ;ds\G%_j.-8:-'`>#P=%nEI(I*,/!l?U=kP6>i`&d=JZD&</&%L4iG3",`3E+piZ2itY%8A"j`344H/@Fa&24_3m'I5$c(ZepZ7];S#iNm\Zl?6D'2Nk_;[:p!Z;K0MR#9.iPadN2VI"l;Xm<4@ZVL%M.nh&+r\>9OapK')P@)RIce\lHCB%&$'ogk4pUSPPWS#CNQZ:LhI=okN*Y>R<7f6]G^K6sAB<Oa1pa%:jNqQII.ADVFqNi"Jd[qs%?-CPE(a+U`-8nZ91UR3_Ooj5S8+F--66[Qk,WEuV*9m_^Q:m?jUN`Ei@[4>P2'RIoq\6+cVAg5g$CLqE?M'p+_?5Qm[p)PmPS(qB%eD&]Som2t3]?FM'3JY&N.HkT&JZ(5<*%?qFG&J2=]**9f`Z`J'TW5ojU]e?TW>H==ZQQU4^?+?!JiOI1QSoR.,V-VjR@iHM@_-$n%Tu')i"8T.Y_K[m<04@N'&GN6+)R8j%C#GGg.`t5$_AI[rO;Xq$7SqdF6U9;S\cfXiHAWj=l5ZVtGa9`5H?$m#nKt\8#^NPUhqcs]%WsSF2WL?Pc[gsB/?4NMBQM4gfTghJIFUV>J?k7j]j8hnLELOlgIF.2`HLq(0dW[^3r$i19>#FP'Y%jJZ;D9I`kXpYa;"PLhVWpmp%n-^!R+RMe>gBOQbLEd"W-.q6?dP5W+gS.u+di^>Y5MgRE(rd;7ccrB24Y5ATm9,7mgLota(Q?Xg&R6O*J]T2`b/uP$[n%gL'&Yt]%G_@k$acW]Wa_&(#YgTT'AD]f2Wmt_AjsK5VXWs9-KME6/TW*6K&IM[^98jT&MQGaHf_6Hb9=q;15K7FLGa'^H""C41fc=8sKOQ3'%e3--2ZFUmi.E3,X;4A-`^TE]/iNPZFdu5C,m&.QDWBuUZVX*<1*dHCSe35+]HH>:dfR7jn&p;-UAqR(ld-n<P&cPtg::D1Gd<C>#%?j93eRm+;_LoO!RCMa`QNc2K`X&h.:P.oV75DS5I4l_WHK'W<lFj?'f@d*`_/`MKP'8*/l.m<,4qfZ@E!e;u,"2(eq'f*bgB=dX4%o%@.<eOq]R&'R7H@oG?S'4ZGm381J&8kegf%DAYV6%XPdMArn"Dls-!R=m5.]3L?sR4=l;BZjk.\'OK@G`T/LnZ(4MOHV?Vr':<o%%1M:i";rC$*0J4m/TZRc7W#s)EsNL1C.m`lbg8d$q>(_R>#?;lg4#%e-OWII5GFNq;.0$,NfD;"*nTJ9.89#h?iZ"7djBgUk(L+b%nDiVoM+8M$-BZ3eR;RFB2E_3DVo;GHX;Eo@bu:(,A096C33726faokWNq0@-NXY!tP>Js]bL?8)Vsr$/aVD*liW*T9naUWA`flp.%Jt/TV.mE-.lb#;T<j*ne/HuC)<eMkWh__pG_nsfY28$9lY;@7W9It22(6XlM*VAtmem+e@*g:\%Ad_aoFZ,`LH;Zq@M?JstHsKoh%Nu].W<(J?/4/p]R++#upiA:[JYdQEdRH`!2^?=-F\sYZ?P"*Iei0MWLF(#CANLr!_SKT3j)#V6OYY$MWbi;`*YY=nu3WE%CXSSHp%j$W:"VA:[b3S-B:5VpO"HbBgR,PT_U+$4#@`:f6.)->n?XFB-/=5$>m`Nq#"KlXL[$-26=/M>,u+\2H@o"^q2X>,CRm"FAdf=(XK%!),32DY%s]L.nUZ*+UT9c^=%CA'@;m^]ouY7c;E?B;02]#=$,R2lc@;l(a.lIoGZG3Cjkd]PCT'MQ:Gn&R3Fn[J8Ahm'Aj&/LDqt%q>H#UA_"RJc!ZG*5`[(1*%!3n?O[]!51ed>VrZAIa!QJr5^0"^=q$q=8^8gO\ApFbORt"H$f+F31o`NlE39'_6a[.h^l#t/.n!nm%q#RnQ?Ybfeil?)0m-GP'n]s9ZCrU[+EqMOi^%=5g*P)X4R3a>jp`)eeJ-sqI&ZHK-j2<S0Antpm$3<1P2Ae;T!e1[TnMdTc6!<=]%MWVW!0b,:4N1fHF+SKF?BL3nZ(Hc$XX1^aBZ)PX5Z^]%%RK90J`_]e6!2";:+s<\br+^1F7u1qcb`D9Aq'Q)ma'&qOOn97e$:+Xh%baqj2`ElB]qh<^ko#gg!UTmN&JB>T"@pj"+Q>Z-$VgUd>;@&`*H8PnBlM^tM7PUqu?dX$j_NaD<4*aeb)gZD)[m7&:B,jUe'YYH[%MeUt#F#!%OeJ:Su$<?:;U;&QCm325/]=-?Xif3VN'E#sQs$)L:q:!m<P;+=<H:U8BcT.kZ.S`,b)4G^s$0YZ%2DSVodbS`[0!(Mu%p!$#n1G6tT*<;\Q[9R,qV761N@pk%9mX$2^>1jP4f_@n&/;c]&i!26F,EH?D7dF*TJ8lfB,c<L^PQhqUB;A=[U#cS_0LVhcQi"l]%,VXO#_Dr'RDY,OW6;_,q7#i]9Tt*Eu#eV:sOi=G.Oi!\@SooOldED+t;[b9X(PN[6]DkiJ7ri%_N[gml2bkj--n-M[o(k:K[VWH%%N%m!87[c0<J0o*UYJ0>#d0^JWHa@8YV[kCsA*m]@?J;*i;T)[g.@NqACPoslq0Xf1jt"7u*WZ=@+FodZ])5Y=V_PT\Dj;ft3ega^%hoJm7aIj4T;mFPDNi@cjgt0ln!rhO>cg4p:q(p.2s2.3D0kJ7,'_01oC^i:Z0#4jX:V]1kO)]'7%upQ8JT$q8@;,@V.34U^B/m^]%SiM.N2DA9%o178fADg,;86RMVa6=e^N)g8k@j97&riq;[UA("ddA[CFhD>Mh&DuFO%XPFb]^eRZUu3A.:rLI?@QVnP@DLoZIe:jQ%eNoCP4s4+gZ/-UiWCAs$UAhYAQ\"9SqBX"s5jBMfW_j3616NJ?3+KW,-41W(.^0>tC4qF"4(VZVGH9R,9]TToko"R2D^1k]_]G2L%0:jb;R-u\PA'u&WQio$f15VC/9t7]8(QAN6W=fBoOmb-odCDaq?,5Y:0p\TmpY3bl2?V.r18X#[@tc/=31+YL:<H(77LK)@B%dXA%FL-sB(?2c!lB?^(Q-V.to?,i8gReQk:*Bc>(a+tukmYCH>"+";l)@sDkK7i]gJ_Dec]u,fnNM2g9jaAjqr[b5+UdiQ'iCPrqFfT8%c3LMlbjBIu,RAjMZ?=3RFMl(LhPdW89<tQQB>)(Ti,)1q`Y<gOB;9"NNY%5%pdJWDc<HKCmSZn'(;&$1;U6KMB\)Xp6)'MsgW6Z_%LYR`(MIH2`MlG#lKtC_4.VZdC;2Y$SA<G;q0^3_jaFAX+DNZL8c'7s!'R3Q[L_MTKGl&D>"!)s@b84Z^":f&jc"U,H:Y=(:nu>uj%1_,!EO=Y5pB:]Z*TJG*'Fjm4%^RPq>Zk1@eV.g!1M6Fekq'F>!-1S,K:88W9)CLU4l!_dm.7g@."01k9Pe#&5hAb@+;!:I9.#s*F%o+`(\"MW])j0,)7N54p,eVTe3:Y-MpN04hY&QLmeZVf;/O'QmC>Meh(kOkNn?.F6M4EQL2&.Oh)+2ltWP?oXWReR?%d=[M_H3kZH%b\\Dn9LDlrr9nq'R>"(:W!4@o)AiSIpgfV*'M3t"<fRH!;)2QQ>jaamG^Q+5a=%2NdSh(s#;c)9#E=I4`;0Fp&A)\Wr++DYKGMXc%lhoAiLO'I<?nrSmH]ueU].nY!<7s'Lj0\!F$.Y*>!$DqG>k<":!!oA:YpQ=ZSs4(9$UO(9,sS%%e.IaY([(g0KS+m:Gr@QR(mJ;3%=i69$CorRP7=E[e%HVWR;hVL(dn@tli]%n&[nWG&dI3\OH+qEF/TIe`n^X]YP700*a)N;`"YB&2\'F[3hJkJQQ<S]a\J]<]"G@sV%1ZI*@k^Y/'^n)Tq;ab)`^,uH;2EeECfB9e+N%eBl4'oA8;<tI!(.Gss=GMo\e$[,cN*;*l'^*dhj0Z\qb,J.=MVn+27EoEIbMi_8%#*4uDgV10%o3=MDJti(SBj^LDgc)_8m]K'A6:gCM0>J:4T!S.pW=\rT0JWhu0Lo*EeOWm6ol_(]JE*<8q7[?IEVXEq2@`B&A+H8E%/X-?gZ47.MC)<tZFldWtlPUNp;a^PN,LD\Q0*c*jHo&HW,XoXAqf<nm"d=fe-01@'0mQ;J-jr+cAB7h1;ef=5n_Hl1bgP+0S+5nu%<_-WRp.!_X'0KilS1$)F]ti=RKH@m@B#Z`jR(j<gG`aZt'n+gU5i53,@5!S.Jr-t'ccpP`ZR;N6,C\Xp"iD%Dq:Zcp&!B.:E<,O`%Mj0:a6Uh5Mn<cSKqNl&u[nF8ZXsc=p$8,b16FPo1.ZH>9A]k?,%t#^J_(CN'!.kj?<[2#RFChZt8^t)c8^uS[oSC8td`[hGhXR1*%Ysc@dF%LFPC*5NSR8j]X#!_<j*U#d1OS_hr-kth:e"$:+I"=6*FX'[OhCiLYI!R4,Q?%6@1M#(eZ/@tb;%H-6+hf%5Ok,N>_=g>a%$5T<:eduHcPrEKe_!J5`En$Y['ht^K5P,%m91.Zs__B^uW"H.E8T$ih=Fikb'aa;C]WrSA6N%BbIC9Mte2$Kdjh=HPrfuf!qOA6K%ps++bD%fi4V"FZOAHYC*[I"6@WlDfRi-iR.6[u;pp+74FWh/Bso)eA5WRn`oU:tUu?*8a'R!Ps4^pIQt]./37`$!:99hk\<Isa!4%QCcn6*i?:ekn]<X*n58ESYJ?F)VpEN#heW23K?r:[8^&\^C1BNNUk[[VRVVT0tTR%63h<k&a8i;3,@Ogm9A0V:O%S.[bIbe07j#3%$(+XWPKP5jGX!G`SZUAe`[WujpXkRuCN8?],Pu'^iR)com^aTKj2ejPC9eL9_PZ2"UCL9Nn,StQU)Vg]kf,Zn8!Rb`7MtSh3XOd:%NSj^jr`p$5Jl"k0J7_pkQ,`\O?dY"K]j:\"o$c@\=&/Om.8I(90i#8C4a60pmp!$_rcZnB!a3a'#HRN!ih7cI*79kel$_2pda0Rm%@+XH&cgee^]N&.TVD+]ifN&islri=V]Rl%bl11hqihArXPn2bp,EW27HH=-0<e!=.n6#ApaN+$h`1d_CFu/Ta3&#6i3*>Y`e;\`/%#sNc%q=Y`:*HIOJ9b4-h:>:4Se(sJJgh=uRY?uip9`IC->2Ds)2*Vt$D]#;,SrPXpPi1=m\T+2*a-N,4`>&ls%#T@liW*7a\Y7l?%6/#0QIXh0(j9UH:U52kDTVZM;YFi,$nlIp[U\*Vj4?66_8a@EnSp0/M1?6J$DQW+!7X3;Bpj@"IZ"<%kY.C%(h=kI0/d5A93DbAX%ins'`q!'RF40$9,6Kr]k/IDF,q"W_@SU[B^ptGY.>M3KepRC0LZ&`'akFBF0WdI"B/^uKYS_WrH5u/5S^Gj,qHSS2d*k=^RpXar1%ht![DBl2r4]N9H@[AaQ+>>QcH)P:BEJsX*GpQ4b5'F_(HQ/YP%Uhhqbg41TK*qUot'o0Z'CTTs'(?rn@NL%RM-&q=*,]60<0$S1J%'rWu#oEBkn>kma8OF?_:ia7miojuVQ%@Hhr/e[m%gI:9:<i'iE=2;6A0DNS:m[)E[?B-l"n"p@BSrA!KEtdg+VT@#bjU[0/oMf]_%dbKiRgL>iapf2i`O>OtZe/-;JN519T>HbXIq2HQc@[jY+QR!Asg`I3[im[)UgR,J.Fe><_l<ni?aMc-1SZ+*RNO<i[.Va[u?W5Z+%i#sAbm"WXQ"OJEEHetQ/+3Mf,4Ll73k1K,$p,O]dQ5DUYCei"T49:HfZ0N:UCMO*mNJcFVjt+,MD*3Z(5[2e?f;^![E8DV!(s/"s%'.a4EX;4]\=P\W7XK@#2[2j:g+fNS?'3fC7I4AKA4qaofT&/0>_:76*prO4#i5mCLla<uMQQI1Dii[G%eZ"#dJLNl6h9t-//hC*p%ED-Bkod0hC]"6TPp/ou\F?pRLId1^t\98[W]J0ZrMYqVi[:-^*`BDgpD(>>:`G]IZlT*0#nc.IQ?2S8m6ZfG7Wo/*.DOrq_N%!m^%,58+pQ!;SgofGd<cDVVcIKrg,g90=]2H!g7"hQ5#%B2DBG_N3rOWM21+#jsDja5n0DI-[a[qM&dW_T42\11uf*u(o]X-RbEX"3-*%=1!]p7?Z==dlj*Cp:D1eCrB+gZTX_0A%op_f5eF]eT+&sF_c22W@;Sn[C`uj\c0#L;J(3pcJ)=mZZE`_`d)^=@B^lkeaC-j7qaX5%9l+A3Dn3Nl)r<9[b^TS^<=P6aj@MQ/;o>*6,rL3dG]W1#V..=]O(7RIApDj#[G?#TRQ@FYod<\QQ'C(mL/d9^T).8BKGD<WqV<ho%R;)E-Bb\2JC3\W#H!Ame0jOk+G9\'`\7g6WX5cq5?Ic4*nL"!i4j^-!M+iZLVUN:2Ymro4MhFRCRjKk.YEnphYt/5C#/W#sfp(J2%E9q=b9=-XU:S56m@aa.-]B.9RlST8K6n/B+Tj02<B-UX;r,148X.RrPWDUj.9;T0PhA(^[():J+]_R3imW$::ntJTVm#F#a,'Sa'%02\HlDM#XZ?gQ;G^O7f)i6iuJNc`q(n>e7SaW5;+YtH>0Gk8r1\1Q]Hphoi:cVpF=XF4i$59&;2L<8'RpT<oI?o5@gcp`SsI4B-b%h<k+(>;[cZ'G\7WpuhZ9q6`]%l.371V3BPl=.f?B80qnr[=nYVHi36uCT0u*2%]Nq0`2gHEY8J4Z#sk4*m7_pV++cAN>_!b:'Y%j%*8O=VUBr&ZEuC<,5"rtKYJ[ZgQNeR;J7]TpU2:%MKd2Wd-O'^l7Jm.aj6$:h1ZIuVK\rDs)P=ZTZD^FMg0)T4%ppd?\T[/W6W]k=%baiFq,pU@*Z4[)m#(9=$77)>jK>U7V`g91(nG>@n,Q0%X0h)aW8I7?8gmtT=pi>C#'O"@;f"J@0>#Egm4I$(X$Ll'E-APWGA$D:t%]lcsc8+?g^Inj1?"a],5,.)rDC^]<^67W?+mddqU.n]<6B@$X<cUGTc\t(_RCJ%cK0bcK9pM!/B8d]RE.u6gBikkF4$H=)@8]`A\%BhI8l.+h"<Je>jFnCinrSkY6=mRB]:psES!<842bEK?eko[+C@oao6qeAMWo@*rlIA\^6B(9Ng*)6iI&q";N9k:=q.q`h2ggPR<#%EW(LgLNtmf$Oh1"XNRBoaC&[44UC"l15FFH(c4bF=SVI]hWkf:Oh5t3jMtD%];mD31GU^p`<qI%'kk8""J2=QVj>kC:scmhIgQ9e%Z%Op"@6ht:1+//l5X=WnK`Sa0ABYnqoJ`7)b^m'a7iZIP=XiH$D^2R2b!Tc"l#63CU^$&d5_+B:X0PA/7FtPD92O"T+2VC:Z%j6n%c?si7b'N`rM6nZd2<@VHo3(tr-3a,h$jf/l(0MIs/1>e1*nLuF\:g(>E(S*J:9hGma7fHlf_e5.TMfFuZ).Ib6cL[VQuqI6:NcAF%P(6/s$S`t7V,!(2i[@&b[4k'_3(`>Y;!0BWIMQ!_[`f`=9C[kjQ_N;]D`Y2=&Mtj;/W!S$%L.e#QOFM$W,Kl!J+oZI/Gp!<!FN!;%/.hA=GIQR9JB\T56B?sR3Knd2Uf#?$HYO,1).gb9EoB^GE%L9c3a'4H[\^W243t,0p'Otl*a#""&,GME7))ISC&N#7m\tGo^?R&q%b<-4&+t6c"@YSl#3Kbs?fl"EDJBU&EN.cU-$?Tm\MZR3I3C-HB0HML]H$fQ^kZsoacE6/MLM?ORAum$V?1/8to53G+JCi<Z8BBu3%6Og(AEAp/U31(i]`1T5h9S]<c$f$S^QIf\$2uGNrE-&;pd3UXpRk`']!O:[7l6u:iQNa;FQ:Z?P+P.j]9EF6593FkNE,Jm<'gb*9%Dq+^oDZ1PmEB;gDEQ'Y09)N[I9,rHAZF8nZ6jk1qG<W4cH/tlt7e?u[39;T^C?5p6Ls/F`C-XChI=J4=V"mccPVq^&hp,=s_JT`:%1&GSCBcZ$Jlut6'n37_/QqoR@_qTrrG=Y996=!U3q"t599*Y=%aH1<0qUo%.+KYon<?0WX;2UA4Jh43EfnL+EX%h?c'.>TETKb9X%?q]67o\+_*CaiPDUdq=>>YEAM+aohtVEh[ETG@T@'quc%.t;:c4q_.&l&2r3=s?/K&,U<WLUdi7$K2$MAKqjtC<N*^/b3gX<+nob%Ke_3ZQ/BXFquEcl%,$o,[e'Ihn1GE*P+`lON?HYkA.[E!"DFYqdt[r.76NPg(<jEeOZ3XUbhV0jV<3"D"K8$Fk2IQ+3sFj7"i-]l%OBi2qMe,kT;S!?pN:"F^mg_]]AF,nGLC.//!^6G5NoD44dKn+i5G06(DEJ8V\7IHPNWN0@BJlC(dA0la4UYY&ndb5(:tEBNh2Rrb%#n$F*JDirU(?\),gW<!E_Og8GEXJ%UC>Uf-Qhc+Z&%+=O6_Ma^E>/!0:B+.>It>Ta:EXL<r`5Tno_q"@m+%ju9mdFW\G[g*?fF\g%rLfg[k9maRV`n^4qe)".J)=b%'t8[CFTUqB.ieA7JpCObrZE]GgNH<_[\X#Mr'(qVmVq,1.?.g92$.8_-385=A1f'RTZB.Xa?>Wi%*\4*f$dBd6-48gCh;SroZlhX?i"Wq9iJS69&UXBhq]6[V,$#IO\V?aa5Z>m.opqtIR,(oW`a<(bO@#@:15qZK+[OGuG,SEsZfVmi%Eh0$JY>FZlAPN"Z\EDNj?oERpLOupWH#fDfXm![PJPL7T,5%D1!ghFp&5][*j,r0;,4eQX/="EkH@5`W]Mrioi-IY"-6GATUDPtp%#p[s9FO=MMDjWK1$U:GFNqStqJem"LYAH19a8VS]!YeU=gOKS:;c1?71<9Ba/HYQ!>6LLP1\*];D@]EliG.2/gIntY[ke-ka'Ct+%,,58PojB7+Sp:BK\ae;"p%JIARA1\o%:lV`LVphlR;&n'2$K^uhlq#h:A\MXT"n>jI7gtrI48Q':0"7:Z7A>%F#KbIILZ;5XhM]7%isGk8DM*'!RE)`O!CaVBEk%dS-r'CQAB-Ml]92MG+1)TToASj63cDWZeiIMJ7qB\U?[f;$?'K,IX*k`(`FY3c3RZ4u+8G40Pg%SZ%q$gMj@+NhE":=E#g(J*RDcFlj#5-,Vf`Cd'jCJP*6uiUZUe9AI*YHUB8C9i;kGr\>^=$EF8c(:3PZB=W>]+1/JDmb^1sXuu44.Vb%b?>h)V%L.Sa3<f%mg/HKE5R.$A7P-uYPUZu)EVu(88)=0KWPsF?OF5qY0^I72jt%DH:`MjOB&X1F):iGb_*lA;m2Ysifqqgh8/((%Zf`Od4KG4mp(TpUY#Im+"%ZPWiS/">cUtH9+n6\iGlPB2]o7$f@L8kW\hJ`"EiU_A"QF9s>*Za)8p(pnUs#mMUtdf*MA1uDdZUtr%!)_1M5Y57L5qs=][2(@Zq^p.5?IB>lVUDJMp._8j9-goSm[QH37UqmWg$Kr$F(R($4<][.'BFp$@%:E99hjc2*3KP=`65OE;KB+T%(DWa7Or;-R?+`Z9koMbC8nM[6.l0<1*=Vj`WIC5e^,WGNrQHehjbT\Qps.t:>DRkS@h%A;U2!8W(T>HRH[VmOTmi_S!_"g'/g=">%5'iI'1SBSo[bRe55a>Qj'W-A0&\-DUda",#m^(M1o&VTO%G*XS/9Dd[&Gtq3@cq?[_"NH"ZOW#s);.tRYfC^*=0Yee!Bo*4rH'*l%Y3-EC6K^6Q64-\`\:X8gd.s7/CZXZ]N,9#b!URC\Cm)h(@U>X^(c$P*3aC$A30BR2Uh"CkelVk#@=^H?#2$6G8ca-oNYVnHJZBp6%<M22L'DTk.G!DB6`=iekK2&Z][%\F9XY#K9FKE=9:#bN6DB8IPJcLaggt>;m*1QBGq92it\&kXH-0$@$2NJ1*_?QesV.!fT?&'U#%\-[UKV;@Nf+iA8,8AA0ol3^lW:eaDi%]$#2m`EO(o`!9.2pK!Q)m$DA'ukhZOFH5L.u92P0fL!i2$WN)EScG!T]t%='Y8i50d>Mf%Y.W@03m&hRqYj'(];:r&GsM/d[g=U8m]#cA,Eb^TEF1VLDpr:ahg;r_OaXJa[&DY$7O19S,p.KJg0``=nX"4Dm`jS7]>!4SC->@<%"U&bio?/M"qYm"*Tj%[LZ\U:<=VFo/m&cmSag3P\;&`lN"1jWqTFN(E_u7Y*8oX.>!7c*>)9ZK);@>*+Tr&O.e`BKK'R3@s"DW$=%3<M(u\4$QAhI,Bt8df9%m/&5jaA2;/6>\me<WCR"1&(n<0@c?sg>'.[OlZgJo,52B?5HWlWL<u1Tga)=he/C/qMHYgDWc>YX@/5,%DlOF2nXeL6^bm].Q7-;Ik?X>0@]gI-=I&HHr<`"s<'bG9e1R8,C=PakRl8\L;oV:!\M.n(AKtagZoNOc:iVS:'-rXFesm[nKuP?5%+Q&+u25eMF[EPqpf)$lMa^+Krb$K9^n32-eAl$'^0I"i6OH5gii;Ee%54BK1GT=@H=Ou>tM>^H/\(($aXBqZo1n0u2g(+nnY\JSS%=@LEn3^//A\?a$H8*nPt(tP83%ttEfV^<`EB0RH1T<&T=:k6SuA[39V^!dgP\^0Rk7.K"=4a]YBOK\S]1He<UUrMG/I^D+r';eJ)%^YF^B&-%)2epZ/6*NAuM<ul2HM8G\u`%\a2&qLrilUWd.#GZi9[.h3]8Y^0E.0S/RaVJ5>=D&c[<'U5R5-o0MH:5Eb@#HdA[dg3b%@?cdD$"$USj=&[#S][.^bV:]4n*9`[7qM=)'g+=XgmnKIOiO3g/I':^'cM+*)o72i)WuPZ7$Ae:/]Ld\QJXI4:%;&PoTL$c"Nh4E%))0a=Rhrn(]HIq7T>4C7*NC5WX/joTm-<_3c61U3r:*\Z@D9\dr%+aYn%;kSE;ura"#"U^WI1V?6mHqe[D#An@u,=e2s1G-SG<ZY%T>,gJ2rC4^XW`;;Es<Y_BYXMji0N<=VQZq>@Oel4/^kdW*K[BTHJPN-B*L:OUKeCd7An/G?e_<[%RAQ2GIE-P*)T`Bmd^JQh;fYC%nuraQIp(G4@\58gf#n-5m/`<+MXgGoHM<[,j3$-Upn"$F63*;Fm0MB0*/?1t]M[]*&F`tP#`s1Ne(>Ki=o2e+$WN?LlE75`b6h#M%#Y7gDmm(\_oDVWR2#CEtS[O+O>p76)&Ddg9XO2&)J+#j1)K3(=dijMbs2KU+SMG[Id.-A5bn6BUKFf'$d!4a\,hWKc:X&XKQil&s%"+''a1lW)Yoo6g5pi+["#5C/:ilBI:%FC,ih??6P(S'8eq9t&gn+aP^l3LF*1%XkAm7[DE]?L7_^-ki%'sV]-4$t_jl=)8QrCSmj%Esu^Pnb5nfbMX,,jOU1<0L"6ci#4lQ;X55&lob=_i6`*'DXp2VG`k2lH42On!_%75f1DSPJ*^:N6>q8X%*@O&?q>5\k6sf.-ud4u%OH)m38*o:)rbK4TZ"TL2FVD\6a`2V8dUaI"<tijg7$M9&K-@U%TYl->qo]EEVcUqp@PXT<&Kn8c5^LP.>B@=rI^GY4*F,b'>0[[,%lMJa5*h95T5'*e4mc)?K-(n414bM0e(=IWAGUV1k*F7Uu>KM4m.+ZcKC=1g<Y\bn$*N$-&mN-1;%1/W$.@S<m"7*FRKlm3%JUP,(%JsbAdHU"Un]>>Y(GI+QgaZ]d)T$&gbf[hf$-OZZ(&\aDG=)9`Xi"D@/f3NCE?o-KZ?YeMO50l!#lQ+bl\Ecu[s$fgO*<`XEhZu7G%(>uX@Nm51$^E0\WWHApuj;`$;!1iJ6r7Lie,BO."2CWd#W4)KADL_h.c+b[gUh*QK'nCTP!-0tT5RQ:m(L*.BW6cjlk4b2[A2BL1%PW2jD$CMV@O@1P:2?nD.X*JDkK)r=`@uEd16PbBJQf]L7%M%DGrCJ[YTJ+b[G%u@4MEs/dkYE%[Yu0+V+G=3#9oHXK][\\3Cp/.E%.;0^dr=24Vk?RDUYXeAJ,0JP/XL:VQbR&D5+e^E_YZs=uWN0foNW;)0U()S^Koet/^"fU8X'r2.S+gk2h<(V>eb7>\amWZ"g7le@%ji3<P]*1\2J+8]m^j;9$Tia?Ti1edV5sT221I2AB_cV5b+=KcB%e1QA6-A--6M8eoD?Y?&%L^D>1WYlf($]T^KNm/)1@i_Gea]VF%eJ+eaN<ftL$#-ek\%@+`CO4to/ji:*4?qs@HiXY;'P_"VG;8!crmUb.V#T-n'euA[=%Z#pa@aO=l]tp4^rW7M*EB#uK_7]16P`YP%kNh!NhZO;0<Kg6@eX1-he-]<eKPne_8E7q8j(kef\6;]Ug/SIZG]teGW1?e-&>^LcX4,a>'ik76)aj;\<o'r41I`,?ol>MTPE9rb%NHi\n#5YjP.htT2%$hH&XIQlO($!K4e.9p6agWtr:8;]hQuQCucq0uPnH=!1Ip]TTBYHe"m:"GU8bci5VS`<D'kHN_P=_@lY5OgD%$Q03VBiK2=mV!7Nht?PS"nZ./PbM>S-DFY,$D5A)O"=67aRL:i(C#+foGAZORL9.^.Im0bFK-[@`<NMWih3EinMKE2ADt:7s0G%@%N.=$_jDqNqGeE;+IAEj"&Whp"Y\C?9!*5f'2H6^DOr+G6<H)0;L9i,qTH;;lI*>^FRi.s/C\]pjC$sW1Y1JM5_S=)"GE"Z*cLB6L%?WKj4.Jt?r(N7eE"t3Jk7XQI]0nClm#,G^+mcjLQqXK$lhYU)!\Q4Y@FD$C:C:JiSVaauWo9-hc59,9i]^'2.i@Q<n_u4kUjR"gr%Dj1/SRc'9(Qp-K$B.%$kJ.)2%XXVV9CF2kA%0"h+:WR5nT'Fj:"MT1>>P.D(?Ho(2+h\dDOTtQiGW#BX>Y=[("utsj_8<6%:j=iG%UlsfR]pa./gqDqtl&6RSf[CYe[Gnk>&1MMA(6,@fciKesB8=BV<']g7+-H&#"r?(<(4%2='V<fn@.k_2<!R"GM72BYTIu0!9%AJY%ds7SL2mKT[K\'[R(C(-R[&!;\hF]lhm")oBm20YSIcse&@Ge'#2`B]Sp'@.VP\nd\Q+l8]R>`kQdc)]PGAehpR[Q>>^%6gR^>ldq%<rnI3g/:YCUWpU)r)6P)ql+acJ6[g9cN].Nb-9T0\Up!PZ-dF`/;IbKpY7<<.pBB(SBXif4sNlRF-N$YOjW2,SrFnT+7NK?;,9n4%E1LG,E*uLBW3_7n7C7#?lOW:gld"(--!K53B3%WGhbkP?A-GlKr2AuKUc#f!"-b"4;O(rEUn[8g8K&;mF",lILqQ,%.'->J_hpa%%=70#@]"K.q6XBA[Q2R3f!:<FG9]8=GS&%4P+&o<rgThl?+V(USf5UVE2=@0$3M*L.YHtD)9aW`6GQKa)XLG_9"GKZH299GWXjBTn%aL%)Q?4AYOWGg<.K,/qhlXZ'mT9o.TB$1104YBjhirXotAmG0Rk#cg=9985&Ad`_cCIE^+:9B<,>IDIa@G]:U;Uh%P=[h%NoZp25%oa)?+\:A"9d0oESq@dt3fW5N;K(-f@gZ'??rPK]N>V3o9pUf-hAIJ^e2a0!3!Gf?[6/.^'mpW[kJsO2Rg2.*S.S.s^='U<"AUgQ)%BWu&l];X*DOA!R?N?+l+43&%EIC08.eWWkR8J,s@Gq*foi[_s-$\Sp%NjeC0'g+gRpeFUBf$:OdBMkl"&'OZ,gHmL2T$g5)Gs=Le%2h;Ie(rS#E(So<fe[t0]f&oYem0U2=5RP,L7IDQ2*`rLJjQ8n>:`(B;UklPXn?G3t_pZAJ#_"[i,i^t54IYRW;DpKH%>X[*r6ek1%d(3L14FfCFApjdnp4A]o7:FRFih0_^[fYt5ZGR+c:*M8TaO>[SIeFMJ58GMnc`qC4d\dUe#s0DafH5,r"SQ8q71.PNV-eL"pbLJ!%!pjm?l)/_Fm-,)NSm6_q]Mc=C/\_Q8X"-VOZT`=5(di[7>@9K6fU=OMFAb@`!PH>%QVYCU/gDHV:eA)J;PS@oQ%`%J.oW+Dk^`kO%pN.G2r:)L!SE59g)LCUTE]HEr84q]NpqOOZ[Fu?=FbotbEBXr3\<g*+'KO>PK>gmah^Z^\iKcm.j@Na[Um6e`Ge4>-5qDsj^jUl>%d);GSfi.MhH7KMfh+=Of'hS_l!l.bY6Jitt9h6ItB8c^qf8V`AbsD0d9qM`8Zp@6O;q)n$PZac"'uZE]r^-tQqs4H[RKQG32_.;U%DC5?"_`RNq[d,jAGX-,ersTHI17i<EfXN-G7qDi12-spHhC/`@.6<[EN>I->^m!6f(]Bk2`r\)B`BB7)Cl%m]iW;aUj6_$k4R_dY%&49l/Y*Rq#m>pQ/"9F3`A#H@ol#b1C)PscfIm59Yk=eIF$O-*-b/<I1EUe0V>B.5Nr9\<5G[5i)E,VpQRKhn@&$N$cQWhp8+=[Wd%,.r\3'[&^<TXI>o.F&:`*blc\)C#\>JUqL9_TW`fg\)3S:.U6g_].'I>KQu^>[Z'j<3:n3p5<c2a5!)$a!BK:.#^U-8U8HD_`>,K%lV>D?)5E>=?,i!1=?$C.ku,gG"gGW'.=-[-Lef<Pp=A%TW16ri"qr4FrW@J<%hfXUWIQ_b+<!%@Inn4iL!u+n%J4W[Fr=5.4bFn3%!^Mho8fQn+a1h!#EooMc1fCi0I?FYk-_<T:fp]$,.cb1QAb&2^lCK4cODp@(h3e**)&"Xc50,QUGimdg;]W,jm/gbbod>jAMG4^k%Sqd2C!'j^[OTCNKNGXaFPM6B^/)AYYZXo`9Cdb)HghXS5(4dsTJ1*40-(+L7G-l^rW=*mpTr.@Q5qla'2p2^X&dJ7+V-mdq^m-=c%-H+$j33E@(?"P).W=7aQn<j,*KQZS@LP3Z&"oA9g>1^gf)2bCm^mK/E=]K'-9R*]<W6jjCgVN'nFk"F1NM9=f'#j06;,e>BMSb_M%-TC9W6kNR-4mgP2abL9r\ah3P.^*)CO4G>>`sPs2WN;]*7WbOZ+,C#DXi0epS"k\JHMWp>PrPr\UOYq,/Ha5gHGt8<YE7)rJ@+QQ%pllNY$?3o+4Km&2RQX+8@5s\0S+L,PX4#0oS`1:s!`"i7$Jo\bKmZq)T[1ZkK*n>'jDsI(<i9KE&i:(SZS6MAY8eN7a=!o+9>O@>%0sADT(t94LD$s:9HaArY3PGTT2jloP+94G#)e4Eaf*LH+H@gHAY?R$n?R/8<pba`+=G*ekGIU'_+Q&D*Q4F&.S(&Iuk9#eLC)'pB%o-bGfGc\Lao$fus9:hadIRCF9!dWm8L>.$4.]X.^a^9W>-7tDC\18],_3pG8Os&?-JYAOhX96[On5I',@XSBDpIjeC#LmQ+T/4)/%Q8AP/6JR:;m'Y'9/]o#Bl0uf='i$:3RhOdDgs`7Jch!0qA!p`VnmOFf3Tm<eQs^T+$$J`BpbB[2K:lAd$p-g?1PqGJ%Lj'2U*p6&%A)pEH939LA6];;<l<U^6k8)OV+4A4LTrRO%b]*j+&f1+A=RaF/b3jBLV$V<U@^rC\#i@p4":kXsB`T@Mgt8fZ5_lD(O254=b0K%J%gMB,_n'Wp'Uff"26#&h$];R=BL2fVG^MIX,pSuPk<*Td!JB2R]7`?)e%L03iP#iOe$ES2!n-V&'cjpQ*)J"?TT"kLt@RBePFq5f>%7./$(b51e'5d%jJc5qoI>uV4lne28LO]1%g&ntE9g*1=u!B(5*;@YAnf?KGB%C%60:hX&RVeptSe'i>:LhJ%ZB4Y35JDOSP+$g`L%f/#^I^W&XYLMue\r?L^[/Y@X.S#%(]#^WQ;Ch1?!gQgTD@*3[o\$n?nJf;l_Ff"6?i?C:I%hDjH4r_\MQFa##g8iO]<r2*%MXNfE%2[5ZCAK<t?OY'<c`I_AeGeq+Nb'R-n>&g>(Y\9XQk";E_,uX5CfMm4o'V#DMc=H8KN>J!J]eG=4B9kCBHCNVH%,dEC"5(2`5JH_d%(414+[XCZ%&i'N=PYqVZBTlI7b*a(9+M:Q86'ST!F;^8!%Ou)odSG<o#iI/XJR.Xe-aG<Vg1=7QVA_\"7!gmrhG"%I:_YqJ[LV.W%:>7:];]Pq!TWE2DU1mpKXkL;4+lkaQ,b_pBQYnh*BEZiu#[S)R@9TD-Rgo#PqNQ,Hc7&U#r38EG^&g]ZCl>Z%=.o^MX1&4fi`ah/%YW<kl@Rf_2=3u[AJ*`P_$p_8gkl?cGP4/OTI8``"(u0*d@<$8k$%+LB9+UijEAD7dIl[WJpKj;2'gG"(CK*umMbE>#k)_-.L&u\a%F%#j`Y</IAjFBuu7e;Fm>!r3%-g@9^;$jM4;*^2<_8-Ae,!3lAcdMX</#(<KdUNg^3%7#_!1D-Le+po@pp<U##9'Id`#M=;P_FtS%eZ'N?gS-d8_GYK/Nh[(K-t@h3:G_.OO.gdOCs+l#l\<5_eb\d!4lGptJZLD-,ICrY28G>K2Q9kf,f'em#kM6bdIsUj1U!q+.TB@`%T!_,>-p0H=IZUQ13YFPGeH0gS")Lr=SoX4*=Tn2(_cS'PH5C@ue"_SXEk*4:E@(TAchRXqboGp02Ah50r7o)"or%EW)3Cas*2!=(%RqIDH=H>,%G9!7`Qj;i4q#F\DT:fAFrf2prYb9&5"Pq/,mI^n4ReJBVT:uMW$!nI5/8QB^5/<g4)oU\-j)!V,]N\F`].3g62CQlP%NF]EjID!>^iCJS/glDMG5.X!'Zf!7OG&hQKW_pKEM_hZnXSm7j^`Y/tHmUAj-#.>eWa-V1o@>,W_Qla)BS0EH%BUbpX.DUpBb_7j%>%O/FW!BMpO!Zen>h"-&,,q$-^<U47WOf`QYc;Ce*-a3=)WP<jn\M5+Bm.EV.7LMFanJOYe2n&;R_f)ni6uf[^fDH,UhXWIBP/<d%C4c;.K2l3\*31Ek_5j`38CQ\/'p0l0`+kU$RkAP]2-t`5ZnH+CNQg)+&8BZ3[rCMo=8`8>]>do-Z4'O-q[c%J<sQ"AJ3g:!jCQBD%,YS;\e$_QD`clP_k.!%;+BHgMM:DTq-JT_E"*E+7&?BH*`+mRFdG'7Bbrs(:nRP\0+XT@>eU67"9p8b?EOL!"C3:I9km+V"i-H-"%+qn`<>CS5.'FE?9@^bq<R;Q<G_7-S?WRRG:q_M\/1?mA,kh%9=)Qt6cJa(`:2'8:o%bt<\V\gaP\#-rkUUE[71TB<3j5CDdmZl*S%\CLM_VQlBO_UUi8/Kp?C"h.[AVdcr+51s>TXkOlhm<8Ai><RVNN6u,l[lXZOi`=74Ab>p2)3f]7><P?@go@B8R]eI%T:D`RC:old%bEm_Wj3-sadJ'gUC&./VPRd0?E>dIMJ,-_6rVBlMs4`&!%6+>p?N:!*s,RMD;dkKeLi3@(ODggF*34hMP<<tbBCJkDESmP=,8gc;%6AmF<;,t?ck3K0`:):F>=njONeEs?Vd&Dm0Ukh'o/-bIdeh&T<W2u"[8rpa2+CDM*p%1a_muoL.T[<hWMNnp`/o#rl&-p"RRg`S%%J1ZGs.*_n4eT)hY_RebZ]1aW%,B0X)W9]SFbb<=6,&Kg]"'c]fqN;14p"u&q)3FMgn@*NWXb`Co6^NMgo\#U#\h'qo+8qt2bHeG:%pXIr#T[UF2/u(G"F]g1n*k6e939+AhDE<7<4-o.CAmsBc*NF-\AjJG&-sTuEKgk1Z,l%ki1O^aY4Fs&aN'72)T-csX+c0Br1;SQi%5:.S3_VIL8,uI_HhVB%&P,Kn"8m><KiYsE&7k\2E/0f^r_@0n-S.Sr#&-f/2^[aF0XpS<26LJ5q\Pka@j,HJCQ/Jplf/7J#.>qB'%PXPbcp/FnR/F!Z7ar-p,ZCXG85@m[mb%iW8W%6lfmM(c2O)#>$*["sYTcdpLTtlbf-O?d5%M_>H(#V9Vn\<2'[8=1R8Gb@,5`i\Z%`&;8Eo&&.NAJWA$[jo`V21L-"AibYJqDD8S;ij,o"BdnF6F,qk.#QaeBGE.ckGL3d7CN8FBT(,EnSEno*No&Vihb5b!d'4q.V6+j%.)UA(;pHKCl<Y4)`]f"cs$<j3!o^`spBZ`W)Y%<&T)L2#%WGcBO.0,aJ@^)F=NZ'*Z30ESEX-i"+)j0F#'_fa2N?9'6AT,F#?8^W%JeT?G?OO-dr+rEdF@C_!4g3id`6<beBK#UmC)aQ.mX(NYcoIY$AcmAE+Z)RVbQSE_&BJ.Qk,_&1`;+J(RP3i$FEh<05Y*coHSf*N%ESRGu_rf_$)TfR-c_.*hUp!pCgBoo^g\>86Z`7X<9q+"drl?r^L[QbS9'$sVP,!7&g40/5oi!Ab34r6R"+6)>l@6USZ50EfK*dCZ%[XbVY5OP0k5SNcLK_="aaN7=""LJHl;]aa)![X&>I<H1s&bbKI!/`+Ii?/hJ4S&^HeKF"BNUQN==4ZXQrrCV3V<bu_^cFX1^%qt1%5gF9krr<FS&!9M6g%Ug\OT%N_N8bj'j><24OPS&J3\ln!.PhG3Dgf`,!X*1?AuP4J6=s:1c)>uO/p*X\`*/^.0R!?C78GBajpd=O%]sBSC\7H><?Y=ob@IGUPX3``5I=!Ob;jgKZ-!'*8bc!U>6_.(fSi$><KMn(31TE_#R3ti"L1]hd:K%UKhTtM%9&2HLXN*H"mM8+"%S5T+L]N3<+E5^T$H-E3Kk`=148?hMjUZLmqL&dfbr*aAf5W>0=O)9]Tc!i2`D2;RmE752m;Oj"lJOt`-Qt:Z)I1$d+DG13`MDl:"%B(1>:F.].,eE17NqWPu4rI6n&T8BYO?[hqqA2\OO$&1;tOI*efIsXJ)'N8aSDZeaUn_"amaPVH$Q/DT=o(J+t5Q(AMqnN*lk<H]Z%pqK&lndkcio"u!QqsdHHrVi-*s8C8.rUTNWs8;E%IerWqcThHkY<W$ZVuM#>c^-lpo$`*foe4)XoQ[p]r&9_X:ZCpeIe_0+s68YF%!28jnb5~>%AI9_PrivateDataEnd