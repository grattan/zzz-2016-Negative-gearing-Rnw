%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UOM-Rev_S_PMS.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Bedovian
%%CreationDate: 7/18/08
%%BoundingBox: 0 0 421 424
%%HiResBoundingBox: 0 0 420.2032 423.3975
%%CropBox: 0 0 420.2032 423.3975
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 294 C)
%%CMYKCustomColor: 1 0.5800 0 0.2100 (PANTONE 294 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2006-05-22T06:11:15Z</xap:CreateDate>
         <xap:ModifyDate>2008-07-18T16:16:55+10:00</xap:ModifyDate>
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A45nZvJuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ks2/JX/yafl3/mIP&#xA;/Jt8xdb/AHMvc5Wj/vYsJzKcV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVm35K/wDk0/Lv/MQf+Tb5i63+5l7nK0f97FhOZTiuxV2KuxV2KuxV&#xA;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&#xA;xf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
         <xap:MetadataDate>2008-07-18T16:16:55+10:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.902778</stDim:w>
            <stDim:h>297.038889</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 294 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 294 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>58.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>21.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:InstanceID>uuid:E86E330B7756DD1194969E87B6366BCF</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -423.397 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 423.397 li
420.203 423.397 li
420.203 0 li
cp
clp
[1 0 0 1 0 0 ]ct
420.203 423.397 mo
0 423.397 li
0 0 li
420.203 0 li
420.203 423.397 li
cp
false sop
/0 
<<
/Name (PANTONE 294 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.58 0 0.21 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
121.073 270.409 mo
120.827 270.495 li
120.72 270.54 li
120.704 270.544 119.63 270.669 119.63 270.669 cv
119.632 270.669 113.714 270.692 113.714 270.692 cv
113.364 270.681 li
110.788 270.616 li
110.638 270.616 110.177 270.616 110.177 271.021 cv
110.177 271.224 110.345 271.372 110.575 271.372 cv
111.413 271.44 li
112.118 271.593 112.325 271.872 112.376 272.741 cv
112.429 278.319 li
112.429 282.876 li
112.302 288.464 li
112.196 289.218 112.071 289.642 111.704 289.718 cv
111.696 289.722 110.966 289.815 110.966 289.815 cv
110.69 289.815 110.565 289.993 110.565 290.169 cv
110.565 290.573 111.021 290.573 111.173 290.573 cv
113.714 290.493 li
114.696 290.526 li
120.106 290.647 li
121.128 290.647 121.47 290.647 121.692 289.833 cv
121.694 289.827 122.036 287.269 122.036 287.269 cv
122.036 287.081 122.036 286.687 121.681 286.687 cv
121.353 286.687 121.294 287.046 121.261 287.235 cv
121.087 288.235 120.804 288.702 120.206 288.954 cv
119.571 289.226 118.462 289.226 117.804 289.226 cv
115.296 289.226 115.063 288.907 114.997 287.29 cv
114.993 284.011 li
114.997 282.876 li
114.997 280.601 li
114.997 280.61 118.659 280.741 118.659 280.741 cv
119.54 280.827 119.749 281.175 119.833 281.497 cv
119.835 281.507 119.927 282.304 119.927 282.304 cv
119.927 282.556 120.083 282.731 120.31 282.731 cv
120.692 282.731 120.692 282.269 120.692 282.046 cv
120.794 280.407 li
120.999 278.938 li
120.999 278.565 120.753 278.536 120.677 278.536 cv
120.165 278.905 li
119.958 279.136 119.655 279.185 119.052 279.235 cv
114.956 279.286 li
114.997 272.081 li
114.956 272.022 118.474 272.095 118.472 272.097 cv
119.89 272.249 120.026 272.56 120.157 272.858 cv
120.157 272.858 li
120.157 272.866 120.298 273.714 120.298 273.714 cv
120.298 274.192 120.579 274.243 120.7 274.243 cv
120.827 274.243 120.999 274.167 121.075 273.802 cv
121.081 273.792 121.177 272.511 121.177 272.511 cv
121.204 272.067 li
121.204 272.069 121.356 271.19 121.356 271.19 cv
121.415 270.841 li
121.415 270.44 121.185 270.409 121.114 270.409 cv
121.073 270.409 li
cp
0 0 0 0 cmyk
f
150.333 270.675 mo
149.896 270.692 li
149.53 270.679 li
147.147 270.616 li
146.997 270.616 146.538 270.616 146.538 271.021 cv
146.538 271.218 146.712 271.372 146.942 271.372 cv
147.778 271.44 li
148.532 271.604 148.685 271.923 148.737 272.741 cv
148.786 278.319 li
148.786 281.554 li
148.786 284.647 148.353 286.507 147.333 287.767 cv
146.409 288.872 144.911 289.56 143.423 289.56 cv
141.954 289.56 140.866 289.335 139.649 288.187 cv
138.72 287.302 137.772 285.866 137.772 281.938 cv
137.772 278.319 li
137.819 272.741 li
137.876 271.839 138.067 271.524 138.61 271.442 cv
138.614 271.442 139.228 271.372 139.228 271.372 cv
139.462 271.372 139.634 271.224 139.634 271.021 cv
139.634 270.616 139.177 270.616 139.026 270.616 cv
136.46 270.692 li
135.921 270.675 li
133.483 270.616 li
133.331 270.616 132.872 270.616 132.872 271.021 cv
132.872 271.224 133.042 271.372 133.278 271.372 cv
134.11 271.44 li
134.817 271.593 135.021 271.872 135.069 272.737 cv
135.122 278.319 li
135.122 282.095 li
135.122 286.28 136.36 288.011 137.437 289.05 cv
139.192 290.694 141.614 290.94 142.903 290.94 cv
144.298 290.94 146.378 290.737 148.366 288.972 cv
150.534 287.046 150.813 283.747 150.813 281.091 cv
150.813 278.319 li
150.864 272.741 li
150.915 271.851 151.099 271.548 151.661 271.442 cv
151.671 271.44 152.274 271.372 152.274 271.372 cv
152.505 271.372 152.677 271.224 152.677 271.021 cv
152.677 270.616 152.216 270.616 152.067 270.616 cv
150.333 270.675 li
cp
f
157.278 271.741 mo
157.251 286.575 li
157.251 288.892 157.12 289.528 156.616 289.673 cv
156.606 289.675 155.608 289.815 155.608 289.815 cv
155.333 289.815 155.208 289.993 155.208 290.169 cv
155.208 290.573 155.634 290.573 155.819 290.573 cv
157.882 290.513 li
158.302 290.493 li
158.679 290.509 li
161.04 290.573 li
161.222 290.573 161.708 290.573 161.708 290.169 cv
161.708 289.993 161.583 289.815 161.298 289.815 cv
160.06 289.671 li
159.534 289.511 159.253 289.034 159.194 286.854 cv
159.194 286.854 158.901 275.96 158.878 274.989 cv
159.521 275.694 165.276 282.024 165.276 282.024 cv
172.038 289.05 li
173.517 290.519 173.774 290.755 174.063 290.755 cv
174.462 290.755 174.489 290.444 174.489 288.716 cv
174.489 288.708 174.54 273.558 174.54 273.558 cv
174.54 271.944 174.675 271.585 175.345 271.44 cv
175.349 271.44 175.923 271.372 175.923 271.372 cv
176.257 271.372 176.409 271.175 176.409 270.991 cv
176.409 270.616 175.964 270.616 175.743 270.616 cv
174.009 270.673 li
173.548 270.692 li
172.993 270.675 li
170.854 270.616 li
170.603 270.616 170.14 270.616 170.14 270.991 cv
170.14 271.235 170.286 271.372 170.54 271.372 cv
171.769 271.495 li
172.388 271.657 172.601 272.007 172.622 273.763 cv
172.622 273.767 172.847 284.017 172.896 286.392 cv
172.396 285.849 167.036 280.017 167.036 280.017 cv
158.587 270.903 li
157.759 270.253 li
157.31 270.253 157.278 270.843 157.278 271.741 cv
cp
f
181.407 271.085 mo
181.407 271.085 li
181.407 271.085 li
cp
183.802 270.679 mo
183.38 270.692 li
180.767 270.616 li
180.616 270.616 180.157 270.616 180.157 271.021 cv
180.157 271.224 180.325 271.372 180.558 271.372 cv
181.31 271.466 li
181.712 271.56 181.987 271.812 182.046 272.741 cv
182.093 278.319 li
182.093 282.876 li
181.964 288.462 li
181.856 289.237 181.735 289.642 181.368 289.718 cv
181.366 289.722 180.634 289.815 180.634 289.815 cv
180.356 289.815 180.229 289.999 180.229 290.169 cv
180.229 290.573 180.688 290.573 180.839 290.573 cv
183.38 290.493 li
183.675 290.505 li
186.563 290.573 li
187.114 290.573 187.173 290.292 187.173 290.169 cv
187.173 289.999 187.048 289.815 186.774 289.815 cv
185.634 289.718 li
185.024 289.63 184.87 289.229 184.79 288.464 cv
184.79 288.462 184.659 282.876 184.659 282.876 cv
184.659 278.319 li
184.716 272.741 li
184.767 271.851 184.954 271.548 185.513 271.44 cv
186.118 271.372 li
186.358 271.372 186.528 271.224 186.528 271.021 cv
186.528 270.616 186.065 270.616 185.913 270.616 cv
183.802 270.679 li
cp
f
206.948 270.675 mo
206.563 270.692 li
205.964 270.669 li
204.032 270.616 li
203.763 270.616 203.263 270.616 203.263 271.021 cv
203.263 271.153 203.327 271.372 203.747 271.372 cv
204.663 271.462 li
204.839 271.554 204.868 271.757 204.868 271.87 cv
204.646 272.794 li
204.114 274.517 200.907 282.905 199.308 286.688 cv
198.981 285.821 194.509 273.899 194.509 273.899 cv
194.169 273.028 193.823 272.132 193.823 271.823 cv
193.823 271.683 193.858 271.569 194.046 271.481 cv
194.948 271.372 li
195.345 271.372 195.405 271.134 195.405 270.991 cv
195.405 270.616 194.843 270.616 194.505 270.616 cv
192.63 270.673 li
192.101 270.692 li
191.462 270.675 li
189.075 270.616 li
188.708 270.616 188.204 270.616 188.204 270.991 cv
188.204 271.228 188.362 271.372 188.61 271.372 cv
189.54 271.466 li
190.353 271.704 190.712 271.925 191.274 273.345 cv
197.606 289.208 li
198.153 290.583 198.3 290.94 198.728 290.94 cv
199.048 290.94 199.167 290.679 199.56 289.804 cv
199.989 288.854 li
202.981 281.849 li
204.618 277.905 li
206.233 273.989 li
206.913 272.284 207.282 271.856 207.587 271.647 cv
207.579 271.653 208.716 271.372 208.716 271.372 cv
209.153 271.372 209.222 271.134 209.222 270.991 cv
209.222 270.741 209.005 270.616 208.587 270.616 cv
206.948 270.675 li
cp
f
221.329 270.409 mo
221.081 270.495 li
220.976 270.54 li
220.958 270.544 219.88 270.669 219.88 270.669 cv
219.886 270.669 213.968 270.692 213.968 270.692 cv
213.628 270.681 li
211.048 270.616 li
210.892 270.616 210.431 270.616 210.431 271.021 cv
210.431 271.224 210.603 271.372 210.839 271.372 cv
211.673 271.44 li
212.376 271.593 212.583 271.872 212.63 272.737 cv
212.63 272.741 212.685 278.319 212.685 278.319 cv
212.685 282.876 li
212.556 288.462 li
212.45 289.218 212.327 289.642 211.962 289.718 cv
211.958 289.722 211.224 289.815 211.224 289.815 cv
210.944 289.815 210.817 289.999 210.817 290.169 cv
210.817 290.573 211.282 290.573 211.435 290.573 cv
213.968 290.493 li
214.954 290.526 li
220.36 290.647 li
221.386 290.647 221.731 290.647 221.948 289.833 cv
221.95 289.827 222.288 287.269 222.288 287.269 cv
222.288 287.081 222.288 286.687 221.937 286.687 cv
221.614 286.687 221.55 287.028 221.513 287.235 cv
221.341 288.235 221.058 288.702 220.466 288.954 cv
219.827 289.226 218.72 289.226 218.058 289.226 cv
215.548 289.226 215.317 288.907 215.255 287.29 cv
215.247 284.011 li
215.255 282.876 li
215.255 280.601 li
215.255 280.61 218.913 280.741 218.913 280.741 cv
219.903 280.839 220.026 281.272 220.095 281.503 cv
220.097 281.507 220.188 282.304 220.188 282.304 cv
220.188 282.562 220.337 282.731 220.567 282.731 cv
220.946 282.731 220.946 282.269 220.946 282.046 cv
221.052 280.407 li
221.255 278.938 li
221.255 278.565 221.005 278.536 220.929 278.536 cv
220.45 278.872 li
220.214 279.136 219.911 279.185 219.306 279.235 cv
219.302 279.235 215.212 279.286 215.212 279.286 cv
215.255 272.081 li
215.212 272.022 218.735 272.097 218.735 272.097 cv
220.138 272.249 220.278 272.56 220.415 272.858 cv
220.413 272.856 220.548 273.714 220.548 273.714 cv
220.548 274.192 220.835 274.243 220.958 274.243 cv
221.083 274.243 221.255 274.167 221.329 273.798 cv
221.431 272.571 li
221.462 272.069 li
221.669 270.841 li
221.669 270.452 221.458 270.409 221.372 270.409 cv
221.329 270.409 li
cp
f
230.104 270.669 mo
229.235 270.692 li
228.896 270.681 li
226.313 270.616 li
226.165 270.616 225.698 270.616 225.698 271.021 cv
225.698 271.224 225.872 271.372 226.108 271.372 cv
226.94 271.44 li
227.644 271.593 227.849 271.872 227.901 272.741 cv
227.954 278.319 li
227.954 282.876 li
227.825 288.462 li
227.72 289.235 227.597 289.642 227.228 289.718 cv
227.222 289.722 226.493 289.815 226.493 289.815 cv
226.214 289.815 226.087 289.999 226.087 290.169 cv
226.087 290.573 226.548 290.573 226.7 290.573 cv
229.026 290.497 li
229.13 290.493 229.442 290.505 229.442 290.505 cv
232.313 290.573 li
232.87 290.573 232.929 290.292 232.929 290.169 cv
232.929 289.999 232.802 289.815 232.524 289.815 cv
231.388 289.718 li
230.771 289.63 230.62 289.229 230.548 288.468 cv
230.548 288.462 230.415 282.876 230.415 282.876 cv
230.415 282.251 li
230.397 282.245 233.583 282.29 233.583 282.29 cv
233.587 282.29 233.786 282.394 233.786 282.394 cv
233.786 282.397 234.733 283.687 234.733 283.687 cv
236.585 286.202 li
236.942 286.675 li
238.231 288.37 239.083 289.493 240.142 290.058 cv
240.853 290.448 241.552 290.573 243.005 290.573 cv
244.841 290.573 li
245.165 290.573 245.661 290.573 245.661 290.169 cv
245.661 289.976 245.468 289.815 245.228 289.815 cv
244.249 289.741 li
243.575 289.636 242.528 289.331 241.208 287.94 cv
236.466 282.134 li
236.466 282.134 236.069 281.626 235.931 281.45 cv
238.003 279.487 239.011 277.581 239.011 275.472 cv
239.011 273.634 237.833 272.29 237.142 271.788 cv
235.704 270.757 233.884 270.616 232.296 270.616 cv
230.104 270.669 li
cp
232.161 271.833 mo
234.841 271.833 236.442 273.696 236.442 276.815 cv
236.442 278.573 235.884 280.001 234.946 280.632 cv
234.37 281.038 233.669 281.093 233.122 281.093 cv
231.897 281.093 230.808 280.896 230.503 280.712 cv
230.415 272.108 li
230.415 272.026 230.446 271.999 230.497 271.979 cv
230.501 271.985 232.161 271.833 232.161 271.833 cv
cp
f
246.817 275.108 mo
246.817 276.876 247.403 278.532 250.255 280.874 cv
251.421 281.831 li
253.7 283.712 254.325 284.683 254.325 286.343 cv
254.325 287.952 253.12 289.585 250.823 289.585 cv
249.88 289.585 247.636 289.343 247.185 287.103 cv
247.181 287.103 247.114 286.187 247.114 286.187 cv
247.114 286.042 247.114 285.704 246.733 285.704 cv
246.392 285.704 246.347 286.085 246.325 286.29 cv
246.325 286.3 246.306 286.56 246.306 286.56 cv
246.194 289.056 li
246.194 289.751 246.218 289.979 246.698 290.218 cv
246.698 290.218 li
247.696 290.706 248.86 290.94 250.255 290.94 cv
251.829 290.94 253.22 290.552 254.271 289.815 cv
255.956 288.614 256.556 286.724 256.556 285.353 cv
256.556 283.329 255.923 281.657 252.696 279.118 cv
251.981 278.55 li
249.501 276.522 248.896 275.698 248.896 274.358 cv
248.896 272.679 250.095 271.552 251.876 271.552 cv
254.013 271.552 254.731 272.44 254.942 272.823 cv
254.942 272.825 255.259 274.042 255.259 274.042 cv
255.282 274.237 255.323 274.554 255.657 274.554 cv
256.04 274.554 256.04 274.038 256.04 273.761 cv
256.126 271.214 li
256.138 270.644 255.798 270.644 255.687 270.644 cv
254.825 270.517 li
254.817 270.517 252.37 270.253 252.37 270.253 cv
249.052 270.253 246.817 272.204 246.817 275.108 cv
cp
f
261.786 271.085 mo
261.786 271.085 li
261.786 271.085 li
cp
264.183 270.679 mo
263.755 270.692 li
261.147 270.616 li
260.995 270.616 260.536 270.616 260.536 271.021 cv
260.536 271.218 260.708 271.372 260.937 271.372 cv
261.687 271.466 li
262.04 271.548 262.368 271.759 262.425 272.737 cv
262.472 278.319 li
262.472 282.876 li
262.349 288.464 li
262.237 289.237 262.118 289.642 261.755 289.718 cv
261.747 289.722 261.017 289.815 261.017 289.815 cv
260.737 289.815 260.61 289.999 260.61 290.169 cv
260.61 290.573 261.071 290.573 261.22 290.573 cv
263.755 290.493 li
264.06 290.505 li
266.942 290.573 li
267.493 290.573 267.552 290.292 267.552 290.169 cv
267.552 289.993 267.429 289.815 267.147 289.815 cv
266.017 289.718 li
265.399 289.63 265.249 289.229 265.173 288.468 cv
265.173 288.462 265.04 282.876 265.04 282.876 cv
265.04 278.319 li
265.097 272.741 li
265.144 271.862 265.337 271.548 265.894 271.44 cv
265.892 271.442 266.503 271.372 266.503 271.372 cv
266.737 271.372 266.911 271.224 266.911 271.021 cv
266.911 270.616 266.446 270.616 266.294 270.616 cv
264.183 270.679 li
cp
f
269.972 270.862 mo
269.962 270.897 269.384 273.634 269.384 273.634 cv
269.384 273.95 269.56 274.062 269.708 274.062 cv
269.974 274.062 270.087 273.856 270.153 273.677 cv
270.153 273.685 270.579 272.911 270.579 272.911 cv
270.938 272.366 271.493 272.202 273.054 272.173 cv
273.054 272.173 276.147 272.132 276.681 272.122 cv
276.681 272.507 276.681 282.876 276.681 282.876 cv
276.558 288.464 li
276.452 289.218 276.325 289.642 275.96 289.718 cv
275.958 289.722 275.224 289.815 275.224 289.815 cv
274.946 289.815 274.821 289.993 274.821 290.169 cv
274.821 290.573 275.28 290.573 275.433 290.573 cv
277.966 290.493 li
278.278 290.505 li
281.146 290.573 li
281.685 290.573 281.763 290.319 281.763 290.169 cv
281.763 289.999 281.638 289.815 281.36 289.815 cv
280.22 289.718 li
279.606 289.63 279.458 289.229 279.382 288.468 cv
279.382 288.464 279.253 282.876 279.253 282.876 cv
279.253 282.876 279.253 272.509 279.253 272.122 cv
279.604 272.132 282.31 272.173 282.31 272.173 cv
284.802 272.224 285.224 272.835 285.306 273.429 cv
285.306 273.433 285.329 273.702 285.329 273.702 cv
285.345 273.948 285.372 274.319 285.735 274.319 cv
285.802 274.319 286.114 274.296 286.114 273.792 cv
286.188 270.944 li
286.188 270.792 286.188 270.433 285.86 270.433 cv
285.558 270.479 li
283.302 270.692 li
273.595 270.692 li
271.567 270.567 li
271.563 270.567 270.731 270.351 270.731 270.351 cv
270.415 270.253 li
270.188 270.253 270.087 270.517 269.972 270.862 cv
cp
f
303.622 270.669 mo
302.938 270.692 li
302.524 270.669 li
301.231 270.616 li
300.698 270.616 300.618 270.833 300.618 270.966 cv
300.618 271.235 300.874 271.319 301.122 271.401 cv
301.231 271.433 301.425 271.483 301.425 271.946 cv
301.009 273.167 li
300.591 273.868 297.673 278.89 296.868 280.47 cv
296.536 279.897 292.29 272.604 292.29 272.604 cv
291.985 271.692 li
291.985 271.575 292.06 271.478 292.208 271.399 cv
292.513 271.282 292.708 271.208 292.708 270.991 cv
292.708 270.741 292.53 270.616 292.177 270.616 cv
290.351 270.677 li
289.999 270.692 li
287.442 270.616 li
286.929 270.616 286.903 270.927 286.903 270.991 cv
286.903 271.218 287.087 271.372 287.36 271.372 cv
288.364 271.753 li
288.876 272.095 289.513 272.79 290.067 273.612 cv
290.993 274.979 294.442 280.651 294.61 281.038 cv
294.954 281.806 295.19 282.335 295.19 283.677 cv
295.19 285.901 li
295.11 288.47 li
295.075 288.985 294.938 289.622 294.466 289.718 cv
294.464 289.718 293.731 289.815 293.731 289.815 cv
293.45 289.815 293.327 289.993 293.327 290.169 cv
293.327 290.573 293.784 290.573 293.937 290.573 cv
296.47 290.493 li
296.778 290.505 li
299.653 290.573 li
300.206 290.573 300.265 290.292 300.265 290.169 cv
300.265 289.999 300.138 289.815 299.86 289.815 cv
298.724 289.718 li
298.149 289.636 297.892 289.276 297.829 288.47 cv
297.755 285.901 li
297.755 283.677 li
297.755 282.843 297.755 282.054 298.126 281.167 cv
298.571 280.103 302.173 274.036 303.04 272.981 cv
304.366 271.708 li
304.368 271.706 305.45 271.372 305.45 271.372 cv
305.819 271.372 305.983 271.167 305.983 270.966 cv
305.983 270.751 305.774 270.616 305.45 270.616 cv
303.622 270.669 li
cp
f
314.696 280.565 mo
314.696 285.563 317.901 290.94 324.938 290.94 cv
331.036 290.94 335.462 286.403 335.462 280.151 cv
335.462 274.231 331.294 270.253 325.091 270.253 cv
317.517 270.253 314.696 276.579 314.696 280.565 cv
cp
317.556 279.843 mo
317.556 274.712 320.374 271.524 324.911 271.524 cv
328.606 271.524 332.583 274.452 332.583 280.882 cv
332.583 289.142 326.796 289.56 325.636 289.56 cv
320.878 289.56 317.556 285.563 317.556 279.843 cv
cp
f
349.144 270.409 mo
348.909 270.505 li
348.767 270.575 li
347.974 270.655 li
347.673 270.669 li
347.677 270.669 341.321 270.692 341.321 270.692 cv
340.976 270.681 li
338.392 270.616 li
338.243 270.616 337.782 270.616 337.782 271.021 cv
337.782 271.224 337.952 271.372 338.187 271.372 cv
339.021 271.44 li
339.728 271.593 339.933 271.872 339.981 272.737 cv
339.981 272.741 340.038 278.319 340.038 278.319 cv
340.038 282.876 li
339.907 288.462 li
339.798 289.237 339.677 289.642 339.312 289.718 cv
339.306 289.722 338.575 289.815 338.575 289.815 cv
338.298 289.815 338.173 289.993 338.173 290.169 cv
338.173 290.573 338.634 290.573 338.784 290.573 cv
341.321 290.493 li
341.626 290.505 li
344.503 290.573 li
345.054 290.573 345.114 290.292 345.114 290.169 cv
345.114 289.993 344.989 289.815 344.708 289.815 cv
343.577 289.718 li
342.958 289.63 342.81 289.229 342.735 288.468 cv
342.735 288.462 342.604 282.876 342.604 282.876 cv
342.604 280.671 li
342.587 280.636 346.472 280.71 346.472 280.71 cv
347.161 280.798 347.536 281.185 347.657 281.519 cv
347.657 281.519 li
347.657 281.521 347.784 282.257 347.784 282.257 cv
347.796 282.634 347.954 282.81 348.177 282.81 cv
348.556 282.81 348.556 282.362 348.556 282.122 cv
348.657 280.407 li
348.868 278.938 li
348.868 278.565 348.618 278.536 348.54 278.536 cv
348.356 278.536 348.243 278.683 348.146 278.813 cv
347.925 279.122 347.69 279.206 347.052 279.257 cv
345.897 279.286 li
342.587 279.312 li
342.604 272.132 li
342.638 272.044 346.618 272.12 346.618 272.12 cv
347.544 272.14 348.079 272.56 348.212 272.835 cv
348.212 272.839 348.417 273.737 348.417 273.737 cv
348.417 274.112 348.616 274.243 348.798 274.243 cv
348.915 274.243 349.12 274.187 349.2 273.798 cv
349.2 273.792 349.302 272.501 349.302 272.501 cv
349.331 272.069 li
349.331 272.073 349.483 271.187 349.483 271.187 cv
349.542 270.841 li
349.542 270.585 349.396 270.409 349.188 270.409 cv
349.144 270.409 li
cp
f
72.0439 304.759 mo
72.0439 306.333 li
348.087 306.333 li
348.087 304.759 li
72.0439 304.759 li
cp
f
99.8584 320.987 mo
99.8564 320.991 89.0127 343.755 88.9893 343.804 cv
88.9893 343.446 78.2549 321.271 78.2549 321.271 cv
77.7588 320.278 77.4854 319.976 77.0908 319.976 cv
76.8252 319.976 76.4736 320.169 76.3096 321.099 cv
72.3564 347.155 li
72.1377 348.626 71.7959 350.015 70.7939 350.228 cv
69.6162 350.347 li
69.4326 350.347 68.876 350.347 68.876 350.724 cv
68.876 351.263 69.4736 351.263 69.6963 351.263 cv
73.6494 351.146 li
74.9346 351.187 li
77.8486 351.263 li
78.3584 351.263 78.9033 351.22 78.9033 350.724 cv
78.9033 350.485 78.6514 350.347 78.2061 350.347 cv
76.5479 350.149 li
75.7939 349.974 75.4287 349.587 75.4287 348.966 cv
75.5479 347.099 li
75.5479 347.099 77.624 331.202 77.624 331.196 cv
77.624 331.282 79.6143 335.509 79.6143 335.509 cv
81.751 340.091 li
86.3506 349.171 li
86.4736 349.399 li
87.0791 350.536 87.4424 351.222 87.8369 351.222 cv
88.2705 351.222 88.4775 350.821 89.4033 348.931 cv
89.4033 348.931 98.1162 330.79 98.1162 330.786 cv
98.1162 330.786 98.1162 330.786 98.1162 330.79 cv
98.1162 330.954 100.485 348.341 100.485 348.341 cv
100.536 348.692 100.56 348.979 100.56 349.206 cv
100.56 349.694 100.462 349.917 100.354 349.952 cv
100.085 350.067 99.8467 350.21 99.8467 350.485 cv
99.8467 350.847 100.267 350.948 101.095 351.022 cv
109.214 351.263 li
109.95 351.263 110.353 351.071 110.353 350.724 cv
110.353 350.347 109.872 350.347 109.614 350.347 cv
107.165 349.952 li
105.991 349.599 105.62 348.394 105.278 345.995 cv
105.276 345.995 101.642 321.3 101.642 321.3 cv
101.515 320.409 101.245 319.976 100.825 319.976 cv
100.396 319.976 100.173 320.36 99.8584 320.987 cv
cp
f
131.128 320.63 mo
130.896 320.696 li
130.892 320.698 129.187 320.935 129.187 320.935 cv
129.192 320.935 119.208 320.976 119.208 320.976 cv
117.29 320.917 li
116.692 320.894 li
116.69 320.894 113.454 320.854 113.454 320.854 cv
112.958 320.854 112.474 320.89 112.474 321.315 cv
112.474 321.772 112.999 321.772 113.251 321.772 cv
114.788 321.89 li
116.093 322.167 116.356 322.815 116.431 324.077 cv
116.511 332.544 li
116.511 339.575 li
116.511 343.241 116.511 346.405 116.31 348.075 cv
116.134 349.37 115.917 350.052 115.231 350.188 cv
115.228 350.19 113.813 350.347 113.813 350.347 cv
113.632 350.347 113.073 350.347 113.073 350.765 cv
113.073 351.263 113.749 351.263 113.974 351.263 cv
116.728 351.183 li
116.731 351.183 119.009 351.146 119.009 351.146 cv
124.237 351.292 li
130.075 351.382 li
131.614 351.382 132.03 351.382 132.329 350.272 cv
132.534 349.448 132.853 346.737 132.853 345.808 cv
132.853 345.407 132.853 344.993 132.435 344.993 cv
132.052 344.993 131.97 345.274 131.897 345.669 cv
131.618 347.319 131.146 348.101 130.155 348.558 cv
129.136 349.026 127.448 349.026 126.44 349.026 cv
122.29 349.026 121.821 348.368 121.743 345.767 cv
121.739 341.222 li
121.743 339.575 li
121.743 336.421 li
121.743 336.116 121.813 336.116 121.884 336.116 cv
127.548 336.239 li
128.813 336.372 129.478 336.831 129.7 337.722 cv
129.7 337.724 129.829 338.78 129.829 338.78 cv
129.86 339.146 li
129.858 339.433 130.021 339.597 130.317 339.597 cv
130.774 339.597 130.774 339.056 130.774 338.735 cv
130.935 336.063 li
131.255 333.14 li
131.255 332.876 131.116 332.724 130.872 332.724 cv
130.212 333.222 li
129.825 333.649 129.251 333.763 128.31 333.843 cv
121.925 333.923 li
121.8 333.923 121.743 333.89 121.743 333.581 cv
121.743 323.472 li
121.743 323.173 121.837 323.173 121.925 323.173 cv
127.587 323.327 li
129.595 323.571 129.931 324.052 130.185 324.708 cv
130.187 324.708 130.415 326.108 130.415 326.108 cv
130.415 326.308 130.415 326.767 130.872 326.767 cv
131.269 326.767 131.345 326.39 131.372 326.245 cv
131.372 326.243 131.515 324.427 131.515 324.427 cv
131.571 323.603 li
131.571 323.601 131.837 321.392 131.837 321.392 cv
131.892 320.993 li
131.892 320.88 131.892 320.534 131.556 320.534 cv
131.128 320.63 li
cp
f
146.538 320.925 mo
144.421 320.976 li
142.392 320.929 li
138.946 320.854 li
138.452 320.854 137.97 320.89 137.97 321.315 cv
137.97 321.772 138.493 321.772 138.745 321.772 cv
140.04 321.89 li
141.347 322.167 141.614 322.815 141.687 324.077 cv
141.767 332.544 li
141.767 339.575 li
141.767 343.241 141.767 346.405 141.567 348.075 cv
141.419 349.142 141.239 350.038 140.485 350.188 cv
139.067 350.347 li
138.884 350.347 138.327 350.347 138.327 350.765 cv
138.327 351.263 139.003 351.263 139.228 351.263 cv
141.985 351.183 li
141.989 351.183 144.263 351.146 144.263 351.146 cv
150.429 351.294 li
155.892 351.382 li
157.989 351.382 158.245 351.179 158.503 350.231 cv
158.819 349.071 159.106 346.054 159.106 345.61 cv
159.106 345.228 159.106 344.831 158.688 344.831 cv
158.263 344.831 158.187 345.188 158.151 345.521 cv
158.069 346.271 157.599 347.36 157.138 347.86 cv
156.2 348.874 154.774 348.944 152.536 348.944 cv
149.337 348.944 148.39 348.646 147.763 348.093 cv
146.958 347.401 146.958 344.62 146.958 339.575 cv
146.958 332.544 li
147.036 324.077 li
147.122 322.622 147.474 322.071 148.437 321.89 cv
149.978 321.772 li
150.403 321.772 150.794 321.718 150.794 321.315 cv
150.794 320.89 150.312 320.854 149.856 320.854 cv
146.538 320.925 li
cp
f
172.272 348.915 mo
171.048 348.421 170.937 347.808 170.937 345.171 cv
170.937 335.7 li
170.937 335.532 170.989 335.519 171.077 335.519 cv
172.788 335.56 li
174.298 335.638 175.214 335.901 176.056 336.499 cv
176.056 336.499 li
179.515 338.913 179.89 342.808 179.89 344.372 cv
179.89 349.144 175.942 349.386 175.153 349.386 cv
174.243 349.386 173.341 349.349 172.272 348.915 cv
cp
171.224 322.765 mo
171.251 322.765 172.513 322.692 172.513 322.692 cv
176.081 322.692 177.411 326.431 177.411 328.788 cv
177.411 330.661 176.856 332.099 175.81 332.946 cv
175.114 333.558 174.183 333.685 172.993 333.685 cv
171.136 333.567 li
171.019 333.536 170.937 333.495 170.937 333.222 cv
170.937 323.351 li
170.937 322.923 171.009 322.827 171.224 322.765 cv
171.224 322.765 li
cp
171.194 320.907 mo
168.317 320.976 li
166.778 320.935 li
162.884 320.854 li
162.388 320.854 161.903 320.89 161.903 321.315 cv
161.903 321.772 162.431 321.772 162.685 321.772 cv
164.216 321.89 li
165.522 322.167 165.786 322.815 165.862 324.077 cv
165.942 332.544 li
165.942 339.575 li
165.942 343.241 165.942 346.405 165.743 348.075 cv
165.591 349.183 165.411 350.04 164.665 350.188 cv
163.239 350.347 li
163.06 350.347 162.505 350.347 162.505 350.765 cv
162.505 351.263 163.181 351.263 163.401 351.263 cv
166.161 351.183 li
166.165 351.183 168.438 351.146 168.438 351.146 cv
171.429 351.261 li
171.431 351.263 172.958 351.333 172.958 351.333 cv
174.229 351.382 li
181.669 351.382 184.999 346.958 184.999 342.573 cv
184.999 337.985 181.208 335.058 177.661 333.849 cv
180.161 332.046 181.806 330.087 181.806 326.948 cv
181.806 325.519 181.185 320.854 173.192 320.854 cv
171.194 320.907 li
cp
f
194.751 334.821 mo
194.751 324.022 200.849 322.411 204.485 322.411 cv
211.319 322.411 216.091 328.335 216.091 336.815 cv
216.091 348.38 209.679 349.628 206.923 349.628 cv
199.755 349.628 194.751 343.54 194.751 334.821 cv
cp
189.04 336.058 mo
189.04 343.651 194.11 351.823 205.243 351.823 cv
215.04 351.823 221.884 345.042 221.884 335.339 cv
221.884 326.062 215.661 320.296 205.642 320.296 cv
194.235 320.296 189.04 328.468 189.04 336.058 cv
cp
f
252.548 320.94 mo
251.396 320.976 li
251.286 320.972 246.798 320.854 246.798 320.854 cv
246.347 320.854 245.864 320.89 245.864 321.315 cv
245.864 321.772 246.388 321.772 246.64 321.772 cv
248.056 321.89 li
249.36 322.167 249.626 322.815 249.698 324.077 cv
249.778 332.544 li
249.778 337.536 li
249.778 341.813 249.61 345.257 247.493 347.376 cv
245.567 349.3 243.042 349.507 242.046 349.507 cv
240.663 349.507 238.858 349.323 237.112 347.89 cv
235.513 346.583 234.032 344.501 234.032 338.138 cv
234.032 332.544 li
234.11 324.077 li
234.194 322.618 234.552 322.067 235.509 321.89 cv
236.649 321.772 li
236.854 321.772 237.388 321.772 237.388 321.315 cv
237.388 320.89 236.903 320.854 236.409 320.854 cv
231.493 320.976 li
229.36 320.929 li
225.661 320.854 li
225.165 320.854 224.681 320.89 224.681 321.315 cv
224.681 321.772 225.206 321.772 225.462 321.772 cv
226.993 321.89 li
228.302 322.167 228.567 322.815 228.642 324.077 cv
228.72 332.544 li
228.72 338.378 li
228.72 343.442 229.858 346.829 232.308 349.038 cv
235.388 351.823 239.491 351.823 241.247 351.823 cv
243.571 351.823 246.63 351.493 249.622 348.921 cv
252.989 346.032 253.45 341.397 253.45 336.815 cv
253.45 332.544 li
253.532 324.077 li
253.614 322.622 253.966 322.071 254.931 321.89 cv
256.071 321.772 li
256.495 321.772 256.892 321.718 256.892 321.315 cv
256.892 320.89 256.403 320.854 255.95 320.854 cv
252.548 320.94 li
cp
f
269.688 336.327 mo
269.47 336.229 269.397 336.126 269.397 335.7 cv
269.397 323.552 li
269.397 323.255 269.462 323.151 269.685 323.087 cv
269.685 323.085 271.776 322.931 271.776 322.931 cv
274.013 322.931 277.788 324.45 277.788 330.146 cv
277.788 333.813 276.337 335.425 275.474 336.058 cv
274.788 336.554 274.29 336.718 272.692 336.718 cv
271.554 336.718 270.429 336.569 269.688 336.327 cv
cp
269.833 320.913 mo
266.901 320.976 li
265.298 320.935 li
261.427 320.854 li
260.931 320.854 260.446 320.89 260.446 321.315 cv
260.446 321.772 260.972 321.772 261.228 321.772 cv
262.763 321.89 li
264.065 322.167 264.329 322.815 264.403 324.077 cv
264.481 332.544 li
264.481 339.575 li
264.481 343.241 264.481 346.405 264.286 348.075 cv
264.13 349.181 263.954 350.04 263.204 350.188 cv
261.786 350.347 li
261.603 350.347 261.048 350.347 261.048 350.765 cv
261.048 351.263 261.724 351.263 261.944 351.263 cv
265.196 351.187 li
266.819 351.146 li
268.11 351.175 li
272.692 351.263 li
272.915 351.263 273.593 351.263 273.593 350.765 cv
273.593 350.638 273.534 350.347 273.013 350.347 cv
271.071 350.187 li
270.001 350.046 269.726 349.335 269.595 348.077 cv
269.397 346.405 269.397 343.222 269.397 339.534 cv
269.397 338.976 li
269.397 338.81 269.45 338.755 269.618 338.755 cv
273.091 338.835 li
273.364 338.835 273.567 338.872 273.735 339.077 cv
273.739 339.077 275.632 341.696 275.632 341.696 cv
277.688 344.589 li
280.024 347.796 281.515 349.591 283.196 350.491 cv
284.286 351.075 285.335 351.263 287.521 351.263 cv
291.317 351.263 li
291.593 351.263 292.177 351.263 292.177 350.765 cv
292.177 350.638 292.12 350.347 291.595 350.347 cv
290.497 350.228 li
289.847 350.101 288.239 349.78 286.073 347.54 cv
284.011 345.37 281.667 342.409 278.696 338.661 cv
277.407 337.036 li
281.116 334.151 282.704 331.454 282.704 328.147 cv
282.704 325.235 280.896 323.237 279.944 322.589 cv
277.712 321.063 274.946 320.854 272.536 320.854 cv
269.833 320.913 li
cp
f
296.962 321.634 mo
296.603 345.288 li
296.562 348.733 296.396 349.854 295.435 350.151 cv
295.431 350.151 293.665 350.347 293.665 350.347 cv
293.462 350.347 292.927 350.347 292.927 350.765 cv
292.927 351.263 293.491 351.263 293.903 351.263 cv
297.546 351.169 li
298.22 351.146 li
299.329 351.177 li
303.177 351.263 li
303.505 351.263 304.196 351.263 304.196 350.765 cv
304.196 350.347 303.651 350.347 303.417 350.347 cv
301.372 350.073 li
300.505 349.771 300.106 348.468 300.036 345.726 cv
300.036 345.726 299.599 328.976 299.599 328.952 cv
299.603 329.071 300.407 329.952 300.407 329.952 cv
309.06 339.087 li
314.368 344.397 li
320.853 350.835 li
321.31 351.294 321.798 351.743 322.274 351.743 cv
322.823 351.743 322.896 351.067 322.896 350.407 cv
323.333 325.192 li
323.374 322.958 323.702 322.185 324.743 321.89 cv
324.747 321.89 325.911 321.772 325.911 321.772 cv
326.456 321.772 326.731 321.618 326.731 321.315 cv
326.731 320.854 326.118 320.854 325.716 320.854 cv
322.53 320.946 li
321.798 320.976 li
320.386 320.935 li
316.962 320.854 li
316.483 320.854 315.827 320.854 315.827 321.315 cv
315.827 321.722 316.22 321.772 316.563 321.772 cv
317.122 321.772 318.063 321.772 318.646 322.005 cv
319.489 322.358 319.899 322.972 319.94 325.511 cv
320.341 343.454 li
320.304 343.382 317.456 340.423 317.456 340.423 cv
299.134 321.446 li
298.763 321.044 li
298.29 320.521 297.979 320.175 297.581 320.175 cv
297.028 320.175 296.962 321.007 296.962 321.634 cv
cp
f
347.11 320.63 mo
346.882 320.696 li
346.876 320.698 345.173 320.935 345.173 320.935 cv
345.177 320.935 335.192 320.976 335.192 320.976 cv
333.265 320.917 li
332.679 320.894 li
332.677 320.894 329.438 320.854 329.438 320.854 cv
328.942 320.854 328.46 320.89 328.46 321.315 cv
328.46 321.772 328.985 321.772 329.239 321.772 cv
330.774 321.89 li
332.081 322.167 332.341 322.815 332.415 324.077 cv
332.497 332.544 li
332.497 339.575 li
332.497 343.241 332.497 346.405 332.298 348.075 cv
332.146 349.181 331.97 350.04 331.22 350.188 cv
331.216 350.19 329.796 350.347 329.796 350.347 cv
329.614 350.347 329.06 350.347 329.06 350.765 cv
329.06 351.263 329.737 351.263 329.958 351.263 cv
332.714 351.183 li
332.716 351.183 334.993 351.146 334.993 351.146 cv
340.224 351.292 li
346.062 351.382 li
347.603 351.382 348.017 351.382 348.313 350.272 cv
348.521 349.454 348.839 346.743 348.839 345.808 cv
348.839 345.407 348.839 344.993 348.419 344.993 cv
348.036 344.993 347.954 345.274 347.884 345.669 cv
347.603 347.319 347.128 348.101 346.142 348.558 cv
345.118 349.026 343.435 349.026 342.427 349.026 cv
338.274 349.026 337.802 348.368 337.729 345.767 cv
337.724 341.222 li
337.729 339.575 li
337.729 336.421 li
337.729 336.116 337.802 336.116 337.87 336.116 cv
343.532 336.239 li
344.798 336.372 345.464 336.831 345.687 337.722 cv
345.687 337.724 345.815 338.767 345.815 338.767 cv
345.845 339.146 li
345.845 339.433 346.005 339.597 346.302 339.597 cv
346.759 339.597 346.759 339.056 346.759 338.735 cv
346.919 336.063 li
347.235 333.14 li
347.235 332.876 347.099 332.724 346.858 332.724 cv
346.196 333.222 li
345.81 333.649 345.239 333.763 344.298 333.843 cv
344.294 333.843 337.911 333.923 337.911 333.923 cv
337.782 333.923 337.729 333.89 337.729 333.581 cv
337.729 323.472 li
337.729 323.173 337.825 323.173 337.911 323.173 cv
343.575 323.327 li
345.581 323.571 345.915 324.052 346.169 324.708 cv
346.401 326.108 li
346.401 326.286 346.401 326.767 346.858 326.767 cv
347.251 326.767 347.333 326.378 347.36 326.245 cv
347.36 326.243 347.503 324.415 347.503 324.415 cv
347.562 323.603 li
347.562 323.601 347.821 321.392 347.821 321.392 cv
347.878 320.993 li
347.878 320.88 347.878 320.534 347.54 320.534 cv
347.11 320.63 li
cp
f
69.4502 270.813 mo
69.4229 270.897 68.8447 273.634 68.8447 273.634 cv
68.8447 273.95 69.0244 274.062 69.1748 274.062 cv
69.4385 274.062 69.5498 273.856 69.6182 273.675 cv
69.6162 273.685 70.04 272.911 70.04 272.911 cv
70.4014 272.366 70.958 272.202 72.5186 272.173 cv
72.5186 272.173 75.6045 272.132 76.1416 272.122 cv
76.1416 272.507 76.1416 282.876 76.1416 282.876 cv
76.0166 288.464 li
75.9111 289.237 75.7881 289.642 75.4189 289.718 cv
75.415 289.722 74.6807 289.815 74.6807 289.815 cv
74.4072 289.815 74.2822 289.993 74.2822 290.169 cv
74.2822 290.573 74.7412 290.573 74.8916 290.573 cv
77.4307 290.493 li
77.7295 290.505 li
80.6143 290.573 li
81.1631 290.573 81.2236 290.292 81.2236 290.169 cv
81.2236 289.999 81.0986 289.815 80.8213 289.815 cv
79.6865 289.718 li
79.0713 289.63 78.9189 289.229 78.8467 288.468 cv
78.8467 288.462 78.7119 282.876 78.7119 282.876 cv
78.7119 282.876 78.7119 272.509 78.7119 272.122 cv
79.0674 272.132 81.7744 272.173 81.7744 272.173 cv
84.2666 272.224 84.6846 272.835 84.7646 273.427 cv
84.7646 273.429 84.79 273.704 84.79 273.704 cv
84.8096 273.948 84.8389 274.319 85.1924 274.319 cv
85.2568 274.319 85.5752 274.296 85.5752 273.792 cv
85.6514 270.944 li
85.6514 270.792 85.6514 270.433 85.3232 270.433 cv
85.0146 270.479 li
82.7588 270.692 li
73.0557 270.692 li
71.0322 270.567 li
71.0264 270.567 70.1963 270.351 70.1963 270.351 cv
69.8721 270.253 li
69.6396 270.253 69.5439 270.538 69.4502 270.813 cv
cp
f
104.294 270.679 mo
103.876 270.692 li
100.952 270.616 li
100.802 270.616 100.341 270.616 100.341 271.021 cv
100.341 271.224 100.511 271.372 100.745 271.372 cv
101.583 271.44 li
102.288 271.593 102.493 271.872 102.544 272.737 cv
102.593 278.319 li
102.593 278.864 li
91.6611 278.815 li
91.7041 278.319 li
91.7549 272.741 li
91.8057 271.862 92.001 271.548 92.5557 271.44 cv
93.165 271.372 li
93.4014 271.372 93.5693 271.224 93.5693 271.021 cv
93.5693 270.751 93.3643 270.616 92.96 270.616 cv
90.4229 270.692 li
90.083 270.681 li
87.4932 270.616 li
87.3447 270.616 86.8838 270.616 86.8838 271.021 cv
86.8838 271.218 87.0596 271.372 87.2861 271.372 cv
88.1221 271.44 li
88.833 271.593 89.0361 271.872 89.0811 272.737 cv
89.0811 272.741 89.1377 278.319 89.1377 278.319 cv
89.1377 282.876 li
89.0088 288.464 li
88.9033 289.237 88.7783 289.642 88.415 289.718 cv
88.4111 289.722 87.6787 289.815 87.6787 289.815 cv
87.3994 289.815 87.2764 289.993 87.2764 290.169 cv
87.2764 290.573 87.7354 290.573 87.8877 290.573 cv
90.4229 290.493 li
90.7236 290.505 li
93.6045 290.573 li
94.1553 290.573 94.2139 290.292 94.2139 290.169 cv
94.2139 289.993 94.0869 289.815 93.8135 289.815 cv
92.6729 289.718 li
92.0654 289.63 91.915 289.229 91.833 288.464 cv
91.833 288.462 91.7041 282.876 91.7041 282.876 cv
91.7041 280.151 li
102.64 280.196 li
102.593 282.876 li
102.462 288.462 li
102.36 289.218 102.239 289.642 101.868 289.718 cv
101.866 289.722 101.134 289.815 101.134 289.815 cv
100.856 289.815 100.728 289.999 100.728 290.169 cv
100.728 290.573 101.187 290.573 101.339 290.573 cv
103.876 290.493 li
104.175 290.505 li
107.06 290.573 li
107.614 290.573 107.673 290.292 107.673 290.169 cv
107.673 289.999 107.548 289.815 107.271 289.815 cv
106.134 289.718 li
105.521 289.63 105.368 289.229 105.288 288.464 cv
105.165 282.876 li
105.165 278.319 li
105.214 272.741 li
105.267 271.851 105.454 271.548 106.013 271.44 cv
106.009 271.442 106.618 271.372 106.618 271.372 cv
106.854 271.372 107.024 271.224 107.024 271.021 cv
107.024 270.616 106.565 270.616 106.413 270.616 cv
104.294 270.679 li
cp
f
144.901 91.8247 mo
145.308 92.9414 li
145.271 92.9902 139.335 100.739 136.849 103.984 cv
143.617 109.857 144.514 118.43 144.514 124.542 cv
144.514 127.27 144.332 130.005 144.172 132.084 cv
144.162 132.211 li
144.162 132.211 141.386 148.699 141.383 148.715 cv
141.315 149.251 141.082 151 140.224 157.425 cv
139.765 161.618 139.529 165.79 139.529 169.757 cv
139.589 173.135 li
140.257 199.331 155.931 220.191 181.518 228.971 cv
181.617 229.007 185.051 230.292 185.051 230.292 cv
187.273 231.14 li
187.066 231.049 li
187.707 231.318 li
195.427 234.62 203.368 238.062 210.145 244.259 cv
218.588 236.938 228.229 233.055 239.035 229.121 cv
257.544 222.608 264.299 214.383 269.23 208.377 cv
269.223 208.385 269.375 208.197 269.375 208.197 cv
276.917 199.395 281.573 185.266 281.573 171.267 cv
281.561 170.261 li
281.563 170.298 281.21 161.64 281.194 161.259 cv
281.154 160.872 280.193 151.752 280.176 151.591 cv
280.156 151.476 278.677 142.621 278.677 142.621 cv
278.674 142.6 277.27 133.788 277.27 133.788 cv
276.957 131.196 276.807 128.829 276.807 126.64 cv
276.832 125.07 li
276.828 125.084 276.826 124.881 276.826 124.881 cv
276.826 115.813 279.396 109.125 284.604 104.459 cv
284.809 103.187 li
270.607 84.3564 li
269.642 84.6318 li
263.388 76.4102 li
263.388 76.4102 263.435 76.4639 263.471 76.5049 cv
263.296 76.2905 262.894 75.7788 261.816 74.4033 cv
261.493 74.7656 261.202 75.0889 261.202 75.0889 cv
256.672 79.4023 250.122 79.1763 244.342 78.6211 cv
244.245 78.6123 li
234.034 76.915 li
234.187 76.9355 li
225.859 75.6992 li
219.796 74.8115 210.805 73.9448 202.438 74.8647 cv
202.438 74.8647 193.056 75.9536 192.789 75.9844 cv
192.608 76.0122 181.269 77.7627 181.269 77.7627 cv
176.456 78.6182 165.673 80.5088 159.732 74.1343 cv
157.854 76.5576 152.846 83.0239 151.213 85.1309 cv
150.367 84.8535 li
144.901 91.8247 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
173.843 77.8203 mo
177.4 77.4395 li
192.603 75.0488 li
202.823 73.8804 li
212.715 72.7549 222.569 74.3018 231.947 75.6123 cv
245.455 77.8203 li
251.182 78.2373 257.318 78.1011 261.215 73.8296 cv
261.961 72.9912 li
270.607 84.3564 li
269.203 84.8652 267.384 85.5107 265.785 86.168 cv
265.602 86.125 li
261.215 80.3501 li
256.664 82.9307 250.986 83.3027 245.502 82.9307 cv
237.617 81.7075 li
227.868 80.1162 li
217.459 78.895 li
211.222 78.3818 204.843 78.6162 198.789 79.3184 cv
190.164 80.5371 li
175.813 82.6963 li
170.277 83.1611 164.931 82.5049 160.473 80.02 cv
155.614 86.3398 li
153.655 85.9868 152.104 85.4155 150.367 84.8535 cv
159.818 72.5674 li
163.1 77.2979 168.494 77.6309 173.843 77.8203 cv
cp
0 0 0 0 cmyk
f
232.393 227.117 mo
224.652 230.129 217.103 233.642 210.207 238.664 cv
203.314 233.592 195.856 230.026 188.163 226.938 cv
158.641 218.072 142.591 191.076 143.657 169.999 cv
143.989 161.368 li
145.062 151.992 li
147.786 135.526 li
148.533 129.761 li
148.816 120.473 148.49 110.576 142.298 103.59 cv
147.406 96.7515 li
147.406 96.7515 145.959 95.0352 144.901 91.8247 cv
141.902 95.7217 138.543 100.165 135.639 104.013 cv
138.263 106.355 140.424 109.078 141.594 112.078 cv
143.989 118.642 143.937 126.613 142.951 133.791 cv
140.751 146.5 li
139.433 155.882 li
138.688 162.072 138.454 168.688 138.73 174.874 cv
139.308 193.269 150.408 220.003 182.066 230.026 cv
192.009 233.833 201.855 237.906 210.207 245.365 cv
216.211 239.928 223.104 236.55 230.139 233.45 cv
238.483 230.22 li
272.972 218.909 283.08 190.766 282.484 169.761 cv
282.146 160.664 li
281.311 152.882 li
278.445 135.105 li
277.408 129.479 277.6 123.054 278.492 117.331 cv
278.82 115.355 280.479 108.847 285.868 104.549 cv
283.911 101.396 285.592 103.981 278.399 109.301 cv
278.399 109.301 277.775 113.045 273.613 115.96 cv
272.528 121.823 272.305 129.195 273.379 135.246 cv
275.162 146.125 li
276.473 154.852 li
277.132 160.992 277.698 167.325 277.314 173.752 cv
276.896 191.15 266.559 217.497 232.393 227.117 cv
cp
f
162.456 138.877 mo
166.341 137.74 li
164.451 141.156 li
167.763 143.709 li
163.784 144.044 li
163.784 145.369 163.978 146.691 163.978 148.07 cv
161.087 145.464 li
160.045 146.223 159.003 147.171 157.956 148.07 cv
158.243 144.229 li
157.057 143.76 155.686 143.709 154.457 143.381 cv
157.816 141.009 li
155.969 137.553 li
159.522 138.829 li
160.344 137.481 160.595 136.084 160.993 135.18 cv
161.561 136.316 161.888 137.649 162.456 138.877 cv
cp
f
160.606 136.264 mo
160.993 135.18 li
161.762 137.097 li
162.456 138.877 li
166.341 137.74 li
164.451 141.156 li
167.763 143.709 li
167.757 143.709 163.784 144.044 163.784 144.044 cv
163.784 144.046 163.978 148.07 163.978 148.07 cv
161.087 145.464 li
158.658 147.46 li
157.956 148.07 li
158.243 144.229 li
155.98 143.687 li
154.457 143.381 li
157.816 141.009 li
155.969 137.553 li
159.522 138.829 li
160.606 136.264 li
cp
160.606 136.264 mo
159.522 138.829 li
155.969 137.553 li
157.816 141.009 li
154.457 143.381 li
155.98 143.687 li
158.243 144.229 li
157.956 148.07 li
158.658 147.46 li
161.087 145.464 li
163.978 148.07 li
163.978 148.064 163.784 144.044 163.784 144.044 cv
163.786 144.044 167.763 143.709 167.763 143.709 cv
164.451 141.156 li
166.341 137.74 li
166.341 137.74 162.46 138.877 162.456 138.877 cv
161.762 137.097 li
160.993 135.18 li
160.606 136.264 li
cp
f
185.241 144.702 mo
186.522 144.558 187.798 143.991 189.126 143.664 cv
187.283 147.124 li
188.42 147.877 189.46 148.778 190.548 149.631 cv
186.563 149.968 li
186.563 151.243 186.803 152.616 186.803 153.993 cv
183.819 151.38 li
182.827 152.238 181.736 153.042 180.744 153.993 cv
180.788 152.804 180.882 151.38 181.126 150.104 cv
179.887 149.679 178.465 149.631 177.236 149.256 cv
180.599 146.929 li
178.754 143.521 li
182.308 144.702 li
182.971 143.613 183.258 142.291 183.819 141.109 cv
185.241 144.702 li
cp
f
183.217 142.626 mo
183.819 141.109 li
185.241 144.702 li
187.646 144.101 li
189.126 143.664 li
187.283 147.124 li
189.647 148.911 li
190.548 149.631 li
190.543 149.631 186.563 149.968 186.563 149.968 cv
186.563 149.97 186.803 153.993 186.803 153.993 cv
183.819 151.38 li
182.696 152.313 li
180.744 153.993 li
181.126 150.104 li
179.056 149.642 li
177.236 149.256 li
180.599 146.929 li
178.754 143.521 li
182.308 144.702 li
183.217 142.626 li
cp
183.213 142.626 mo
182.308 144.702 li
178.754 143.521 li
180.599 146.929 li
177.236 149.256 li
179.056 149.642 li
181.126 150.104 li
180.744 153.993 li
182.696 152.313 li
183.819 151.38 li
186.803 153.993 li
186.803 153.99 186.563 149.968 186.563 149.968 cv
190.548 149.631 li
189.647 148.911 li
187.283 147.124 li
189.126 143.664 li
187.646 144.101 li
185.241 144.702 li
183.819 141.109 li
183.213 142.626 li
cp
f
158.19 167.959 mo
159.472 167.729 160.755 167.251 162.081 166.871 cv
160.227 170.239 li
161.228 171.183 162.409 171.895 163.503 172.792 cv
159.522 173.128 li
159.522 174.454 159.714 175.823 159.714 177.201 cv
158.764 176.301 157.769 175.492 156.823 174.546 cv
155.78 175.398 154.736 176.249 153.696 177.201 cv
154.024 173.315 li
152.844 172.841 151.42 172.841 150.238 172.461 cv
151.327 171.704 152.462 170.998 153.556 170.144 cv
151.754 166.781 li
152.844 167.065 154.12 167.534 155.302 167.959 cv
155.826 166.824 156.253 165.544 156.776 164.313 cv
158.19 167.959 li
cp
f
156.13 165.937 mo
156.776 164.313 li
158.19 167.959 li
160.837 167.251 li
162.081 166.871 li
160.227 170.239 li
162.132 171.753 li
163.503 172.792 li
163.498 172.792 159.522 173.128 159.522 173.128 cv
159.522 173.13 159.714 177.201 159.714 177.201 cv
158.504 176.096 li
156.823 174.546 li
156.636 174.698 li
153.696 177.201 li
154.024 173.315 li
151.935 172.821 li
150.238 172.461 li
151.28 171.755 li
153.556 170.144 li
151.754 166.781 li
155.032 167.863 li
155.302 167.959 li
156.13 165.937 li
cp
156.13 165.937 mo
155.302 167.959 li
155.032 167.861 li
151.754 166.781 li
153.556 170.144 li
151.275 171.755 li
150.238 172.461 li
151.935 172.821 li
154.024 173.315 li
153.696 177.201 li
156.636 174.698 li
156.823 174.546 li
158.5 176.101 li
159.714 177.201 li
159.714 177.192 159.522 173.128 159.522 173.128 cv
159.524 173.128 163.503 172.792 163.503 172.792 cv
162.132 171.753 li
160.227 170.239 li
162.081 166.871 li
160.837 167.249 li
158.19 167.959 li
156.776 164.313 li
156.13 165.937 li
cp
f
184.866 169.383 mo
188.366 169.383 li
185.528 171.563 li
186.616 175.023 li
183.724 172.938 li
180.841 175.023 li
181.875 171.563 li
180.976 170.85 180.034 170.144 179.039 169.432 cv
182.45 169.383 li
183.111 168.437 183.258 167.155 183.724 166.018 cv
184.06 167.155 184.391 168.296 184.866 169.383 cv
cp
f
183.293 167.315 mo
182.45 169.383 li
182.444 169.383 179.039 169.432 179.039 169.432 cv
181.875 171.563 li
180.841 175.023 li
183.724 172.938 li
186.616 175.023 li
185.528 171.563 li
188.366 169.383 li
184.866 169.383 li
184.866 169.383 184.668 168.806 184.527 168.38 cv
184.708 168.924 184.866 169.383 184.866 169.383 cv
188.366 169.383 li
185.528 171.563 li
186.616 175.023 li
183.724 172.938 li
180.841 175.023 li
181.875 171.563 li
179.039 169.432 li
182.45 169.383 li
183.303 167.292 li
183.293 167.315 li
cp
183.303 167.292 mo
183.318 167.243 183.724 166.02 183.751 166.117 cv
183.751 166.117 184.196 167.419 184.527 168.38 cv
184.194 167.409 183.743 166.083 183.724 166.018 cv
183.724 166.018 183.318 167.243 183.303 167.292 cv
cp
f
185.101 193.257 mo
186.376 193.019 187.611 192.453 188.939 192.166 cv
187.09 195.531 li
190.359 198.086 li
189.076 198.324 187.656 198.324 186.333 198.563 cv
186.616 202.541 li
183.679 199.837 li
180.599 202.496 li
180.599 201.264 180.788 199.986 180.882 198.608 cv
179.606 198.324 178.331 198.043 177.045 197.755 cv
178.188 196.951 179.319 196.288 180.408 195.436 cv
178.605 192.027 li
182.164 193.257 li
183.679 189.563 li
185.101 193.257 li
cp
f
183.679 189.563 mo
185.101 193.257 li
187.102 192.697 li
188.939 192.166 li
187.09 195.531 li
190.359 198.086 li
190.355 198.086 186.333 198.563 186.333 198.563 cv
186.333 198.565 186.616 202.541 186.616 202.541 cv
183.679 199.837 li
180.599 202.496 li
180.755 200.073 li
180.882 198.608 li
177.045 197.755 li
178.366 196.865 li
180.408 195.436 li
178.605 192.027 li
182.164 193.257 li
183.679 189.563 li
cp
182.164 193.257 mo
178.605 192.027 li
180.408 195.436 li
178.366 196.865 li
177.045 197.755 li
180.882 198.608 li
180.755 200.073 li
180.599 202.496 li
183.679 199.837 li
186.616 202.541 li
186.616 202.537 186.333 198.563 186.333 198.563 cv
190.359 198.086 li
187.09 195.531 li
188.939 192.166 li
187.102 192.697 li
185.101 193.257 li
183.679 189.563 li
182.164 193.257 li
cp
f
183.819 141.109 mo
183.256 142.287 182.965 143.613 182.304 144.704 cv
178.754 143.521 li
180.595 146.929 li
177.232 149.256 li
178.461 149.631 179.887 149.679 181.126 150.104 cv
180.882 151.38 180.788 152.804 180.742 153.993 cv
181.734 153.042 182.825 152.238 183.819 151.38 cv
186.802 153.993 li
186.802 152.616 186.563 151.243 186.563 149.964 cv
190.546 149.631 li
189.458 148.778 188.418 147.875 187.283 147.124 cv
189.126 143.664 li
187.798 143.991 186.521 144.558 185.241 144.704 cv
183.819 141.109 li
cp
f
292.059 83.5449 mo
291.102 83.9976 li
291.988 82.7998 292.837 81.2607 293.734 79.2012 cv
294.951 76.4004 li
291.965 77.0303 li
286.815 78.1226 281.805 80.0439 276.902 81.9297 cv
275.534 82.4585 274.165 82.9907 272.782 83.4883 cv
270.976 84.1396 269.174 84.8066 267.368 85.4585 cv
265.799 86.0278 264.229 86.6445 262.637 87.1357 cv
258.376 88.4482 254.029 89.4434 249.59 89.8662 cv
248.355 89.9873 247.107 90.0498 245.869 90.1665 cv
243.936 90.3428 241.996 90.4863 240.064 90.7012 cv
237.725 90.9585 235.402 91.3877 233.141 92.041 cv
231.061 92.6436 229.08 93.5566 227.438 94.9902 cv
226.506 95.7998 225.568 96.8877 225.048 98.019 cv
224.146 99.9678 223.729 101.986 223.416 103.796 cv
222.889 106.812 220.729 110.748 218.957 110.155 cv
217.187 109.566 216.791 108.322 216.857 106.812 cv
216.92 105.307 218.366 103.73 218.366 103.73 cv
218.366 103.73 219.549 104.583 220.988 103.208 cv
221.654 102.572 221.959 101.542 222.203 100.68 cv
222.351 100.163 222.469 99.6343 222.577 99.1035 cv
222.662 98.6826 222.889 98.1714 222.814 97.7383 cv
222.766 97.4834 222.496 97.3291 222.311 97.165 cv
222.033 96.4863 221.446 96.0552 220.739 95.9087 cv
220.606 95.5303 220.373 95.1934 220.041 94.9434 cv
219.729 94.7109 219.363 94.5825 218.986 94.5415 cv
218.553 93.7598 217.482 92.2832 215.229 91.5767 cv
213.919 91.1729 212.63 91.1514 211.471 91.2939 cv
210.796 91.0811 li
208.577 90.3735 205.2 90.6953 203.825 92.8506 cv
203.439 93.4551 203.012 94.6606 203.135 95.3823 cv
203.162 95.5479 203.209 95.7041 203.27 95.8521 cv
203.146 96.1021 203.082 96.3809 203.082 96.666 cv
203.082 96.8062 203.1 96.9541 203.131 97.0986 cv
203.162 97.2275 li
203.193 97.375 202.73 97.9609 202.646 98.1304 cv
202.507 98.4287 202.375 98.7334 202.265 99.043 cv
202.123 99.4512 201.994 99.876 201.994 100.309 cv
201.994 100.83 202.226 101.05 202.468 101.466 cv
202.397 101.718 202.146 102.595 202.146 102.595 cv
202.146 102.595 201.621 104.549 201.613 104.569 cv
201.321 105.661 201.701 106.262 202.846 106.291 cv
202.737 106.285 203.462 107.885 203.562 108.014 cv
203.907 108.462 203.89 108.895 204.157 109.359 cv
204.324 109.651 204.58 109.898 204.867 110.077 cv
205.569 110.514 206.478 110.412 207.239 110.226 cv
207.172 110.682 207.056 111.444 207.052 111.458 cv
207.032 111.435 206.604 111.55 206.604 111.55 cv
206.302 111.62 205.914 111.713 205.519 111.891 cv
205.519 111.891 204.484 111.115 204.484 111.111 cv
202.238 109.42 200.132 107.409 199.981 104.415 cv
199.957 103.89 200.016 103.334 199.834 102.829 cv
199.653 102.33 199.133 102.045 198.962 101.569 cv
198.785 101.07 198.813 100.445 198.699 99.917 cv
198.553 99.2461 198.39 98.5732 198.181 97.9141 cv
197.755 96.5664 197.079 95.2339 196.189 94.126 cv
194.27 91.7544 190.414 91.4736 187.611 91.1475 cv
186.567 91.0249 185.519 90.9346 184.473 90.8608 cv
183.544 90.7925 182.616 90.7402 181.684 90.6855 cv
177.841 90.459 174.217 90.2427 170.771 89.25 cv
170.578 89.1934 165.809 87.7871 162.444 87.0693 cv
160.823 86.7261 159.183 86.4375 157.559 86.1099 cv
156.46 85.8916 155.353 85.708 154.26 85.4424 cv
152.345 84.9824 150.445 84.4463 148.535 83.9585 cv
146.692 83.4883 144.849 83.0166 143.01 82.5483 cv
142.93 82.5283 141.812 82.2905 141.812 82.2402 cv
141.812 82.2402 142.167 84.2158 142.597 85.7354 cv
143.029 87.2568 144.979 91.0908 144.979 91.0908 cv
146.218 93.8687 148.547 99.0488 153.392 102.763 cv
154.369 103.334 li
154.596 103.945 154.82 104.557 155.048 105.169 cv
155.66 106.827 156.843 108.205 158.202 109.313 cv
159.171 110.103 160.215 110.813 161.338 111.364 cv
162.163 111.77 163.755 112.655 164.709 112.449 cv
164.438 112.507 164.184 112.573 163.981 112.648 cv
163.524 112.812 163.07 112.974 162.614 113.137 cv
162.12 113.319 162.824 113.789 162.354 114.044 cv
161.676 114.417 159.944 114.656 159.384 115.179 cv
158.799 115.737 159.063 115.917 158.543 116.541 cv
158.202 116.954 157.002 117.738 156.722 118.203 cv
156.585 118.431 156.456 118.671 156.339 118.911 cv
156.272 119.049 156.137 119.604 156.023 119.672 cv
155.138 120.173 154.186 120.904 153.708 121.819 cv
153.397 122.41 153.472 123.097 153.696 123.705 cv
153.835 124.07 154.024 124.411 154.246 124.732 cv
154.568 125.193 154.832 125.041 155.253 124.76 cv
155.446 124.627 155.639 124.499 155.838 124.378 cv
156.13 124.196 156.351 124.095 156.552 124.023 cv
156.39 124.081 156.423 125.184 156.435 125.345 cv
156.46 125.712 156.554 126.074 156.694 126.414 cv
156.95 127.024 157.385 127.533 157.853 127.992 cv
158.138 128.271 158.39 128.579 158.699 128.829 cv
158.881 128.975 159.132 129.207 159.343 128.989 cv
159.519 128.808 159.534 128.423 159.601 128.189 cv
159.667 127.943 160.217 125.87 160.552 125.93 cv
160.716 125.958 162.046 127.429 162.335 127.619 cv
162.468 127.711 162.561 127.842 162.736 127.779 cv
162.912 127.711 163.018 127.432 163.096 127.282 cv
163.318 126.845 163.509 126.398 163.679 125.942 cv
163.899 125.349 163.843 124.345 163.954 124.271 cv
164.065 124.196 164.809 124.382 164.861 124.382 cv
165.37 124.366 165.622 124.534 165.775 124.05 cv
165.879 123.715 165.961 122.829 166.311 122.638 cv
166.712 122.416 166.909 122.997 167.342 122.778 cv
167.854 122.517 168.58 121.272 169.057 121.074 cv
169.565 120.855 170.066 121.134 170.445 121.21 cv
170.827 121.288 171.089 121.167 171.215 121.308 cv
171.506 121.628 171.081 122.037 170.69 122.739 cv
170.572 122.96 171.725 123.247 171.572 123.48 cv
171.391 123.77 170.273 124.353 170 124.599 cv
169.636 124.928 169.349 125.367 169.099 125.788 cv
168.904 126.122 169.775 126.213 169.653 126.512 cv
169.212 127.577 167.535 128.493 166.4 128.767 cv
166.041 128.848 165.656 128.881 165.312 129.004 cv
164.785 129.188 165.155 130.099 165.202 130.494 cv
165.272 131.05 165.607 131.544 166.113 131.836 cv
166.282 131.938 166.478 132.008 166.687 132.07 cv
166.673 132.066 166.201 132.624 166.143 132.675 cv
165.939 132.866 165.725 133.038 165.507 133.209 cv
165.276 133.389 164.2 133.926 164.287 134.317 cv
164.336 134.524 164.983 134.684 165.153 134.777 cv
165.491 134.977 165.764 135.219 166.143 135.347 cv
166.872 135.593 167.582 135.511 168.307 135.301 cv
168.67 135.195 169.029 135.064 169.384 134.93 cv
169.682 134.819 170.078 134.558 170.395 134.544 cv
170.886 134.52 171.436 134.846 171.912 134.777 cv
172.947 134.624 174.305 133.108 175.188 132.591 cv
176.074 132.07 176.749 132.382 177.5 131.661 cv
178.354 130.85 178.067 130.25 178.723 129.279 cv
179.343 128.364 180.63 127.081 180.868 125.993 cv
181.013 125.313 181.165 124.631 181.315 123.949 cv
182.343 124.534 183.385 125.092 184.418 125.63 cv
184.901 125.886 185.343 126.459 185.773 126.8 cv
186.567 127.429 187.471 128.158 188.499 128.333 cv
188.98 128.413 189.411 128.318 189.857 128.15 cv
190.008 128.096 190.736 127.699 190.89 127.826 cv
191.249 128.115 191.705 128.25 192.233 128.318 cv
192.134 128.306 191.941 129.176 191.93 129.262 cv
191.912 129.414 192.044 131.595 192.187 131.595 cv
192.187 131.595 194.225 131.36 194.432 131.339 cv
194.312 131.79 194.141 132.223 194.179 132.696 cv
194.225 133.325 194.533 133.947 194.768 134.522 cv
194.878 134.793 197.336 134.033 197.307 133.941 cv
197.587 134.819 197.954 135.634 198.313 136.202 cv
198.846 137.037 199.324 137.996 199.948 138.759 cv
199.969 138.677 199.887 139.121 199.887 139.121 cv
199.887 139.121 196.53 150.904 197.03 153.561 cv
197.342 155.227 li
196.961 156.158 196.972 157.335 197.406 158.909 cv
196.89 159.363 196.691 159.952 196.691 160.578 cv
196.691 161.871 197.244 163.099 197.646 164.313 cv
198.377 166.539 197.892 170.274 197.956 171.376 cv
198.009 172.244 198.063 173.112 198.118 173.982 cv
198.274 176.523 198.185 179.055 199.125 181.476 cv
199.464 182.355 199.923 183.114 200.496 183.861 cv
200.428 184.335 200.327 185.064 200.327 185.064 cv
200.17 186.138 200.098 187.269 200.098 188.428 cv
200.098 192.35 200.892 196.257 202.39 199.88 cv
203.342 202.176 205.237 203.943 207.671 204.528 cv
208.292 204.681 208.939 204.808 209.578 204.867 cv
211.586 205.061 213.574 204.774 215.533 204.351 cv
216.698 204.097 217.74 203.777 218.6 202.907 cv
219.41 202.095 219.969 200.828 220.447 199.791 cv
220.396 200.106 220.344 200.421 220.344 200.723 cv
220.344 201.336 220.449 201.921 220.658 202.471 cv
221.607 204.986 224.258 205.665 224.559 205.735 cv
226.898 206.173 228.408 205.767 229.529 205.088 cv
229.56 205.232 229.56 205.365 229.635 205.516 cv
230.168 206.67 231.233 207.062 235.35 206.007 cv
235.223 206.352 235.104 206.693 235.104 207.021 cv
235.104 207.636 235.33 208.205 235.77 208.653 cv
237.439 210.343 241.468 209.29 242.404 208.853 cv
243.916 208.076 244.906 207.362 245.615 206.699 cv
245.39 206.908 247.371 207.875 247.506 207.912 cv
248.852 208.285 250.303 208.201 251.655 207.934 cv
253.48 207.573 255.446 206.977 256.951 205.843 cv
258.099 204.975 258.929 203.797 259.566 202.521 cv
259.94 201.769 260.241 200.994 260.561 200.222 cv
261.421 198.16 li
261.622 197.624 261.793 197.188 263.966 197.429 cv
268.468 197.93 li
265.25 194.743 li
263.603 193.116 261.666 190.538 259.804 188.045 cv
257.711 185.254 255.547 182.369 253.516 180.415 cv
246.95 172.55 li
247.226 172.408 247.494 172.193 247.74 171.883 cv
247.74 171.883 249.109 171.761 249.123 171.759 cv
250.808 171.63 252.863 170.058 253.258 168.392 cv
253.509 167.337 252.912 166.438 252.513 165.501 cv
252.349 165.125 252.255 164.678 251.988 164.354 cv
251.602 163.884 250.986 163.637 250.49 163.313 cv
249.87 162.915 249.26 162.494 248.639 162.096 cv
247.336 161.261 246.021 160.448 244.711 159.627 cv
242.073 157.977 239.418 156.362 236.727 154.801 cv
235.338 153.995 233.287 153.771 232.281 152.428 cv
231.596 151.515 231.17 150.411 230.569 149.441 cv
229.918 148.39 229.221 147.372 228.589 146.309 cv
228.09 145.472 227.608 144.624 227.167 143.76 cv
226.465 142.4 225.967 140.958 225.375 139.553 cv
225.383 139.578 226.291 138.874 226.377 138.792 cv
226.514 138.651 227.836 136.812 227.646 136.678 cv
227.951 136.888 228.271 137.093 228.583 137.282 cv
228.583 137.282 231.011 138.946 231.023 138.952 cv
231.268 139.127 232.064 138.211 232.199 138.051 cv
232.416 137.791 233.547 136.11 233.188 135.769 cv
233.43 135.997 233.636 136.234 233.919 136.439 cv
235.051 137.247 li
235.997 136.223 li
236.875 135.265 237.158 134.166 237.158 133.083 cv
237.158 132.616 237.072 132.168 236.991 131.723 cv
237.518 131.863 238.039 132.02 238.284 132.205 cv
240.186 133.646 li
240.763 131.333 li
240.85 130.994 240.884 130.648 240.884 130.296 cv
240.884 129.901 240.725 129.508 240.643 129.113 cv
240.753 129.152 242.989 130.026 242.989 130.026 cv
243.256 128.057 li
243.281 127.873 243.293 127.693 243.293 127.515 cv
243.293 126.441 242.854 125.462 242.48 124.635 cv
242.627 124.458 242.783 124.296 242.912 124.097 cv
244.522 125.139 246.535 125.973 248.92 125.357 cv
250.806 124.869 li
250.806 124.869 250.746 124.745 250.733 124.717 cv
252.947 125.535 255.248 125.979 258.477 124.38 cv
259.816 123.719 li
259.816 123.719 259.601 123.215 259.424 122.808 cv
261.877 123.25 264.574 123.531 266.518 122.26 cv
267.799 121.417 li
266.992 120.114 li
266.927 120.019 266.85 119.954 266.78 119.868 cv
268.439 119.704 270.148 119.182 271.059 117.543 cv
271.35 117.013 271.287 116.619 271.059 116.065 cv
271.74 116.028 272.428 115.901 273.111 115.653 cv
275.547 114.762 277.322 112.601 278.384 109.234 cv
278.535 108.743 li
280.596 107.507 282.452 105.716 284.205 103.277 cv
285.826 99.5718 li
286.635 98.6182 287.387 97.4966 287.729 96.5918 cv
287.979 96.1138 288.608 94.8535 287.811 93.8296 cv
287.774 93.7871 287.73 93.7358 287.68 93.6836 cv
290.172 91.8809 292.982 87.7598 294.039 85.7354 cv
296.195 81.6045 li
292.059 83.5449 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
215.92 126.473 mo
215.244 127.335 214.467 127.748 211.959 127.748 cv
209.039 127.748 207.576 125.899 207.576 125.899 cv
207.693 126.701 208.249 127.957 209.787 128.358 cv
211.027 128.698 211.467 128.774 213.439 128.604 cv
215.429 128.438 215.92 126.473 215.92 126.473 cv
cp
219.511 113.28 mo
215.629 116.968 221.11 127.194 216.002 129.475 cv
207.324 128.298 205.762 129.759 204.492 129.43 cv
204.404 129.246 204.855 128.95 204.949 128.677 cv
203.533 128.452 202.38 128.32 201.609 126.999 cv
199.882 124.592 202.511 122.726 203.422 120.814 cv
203.422 120.814 204.165 119.295 204.574 118.021 cv
204.708 117.52 205.089 119.583 206.708 119.496 cv
208.326 119.41 209.297 119.252 211.754 118.267 cv
209.664 120.362 209.027 120.445 206.336 121.224 cv
207.43 121.448 209.508 121.229 211.637 120.114 cv
214.221 118.758 217.482 114.392 217.482 114.392 cv
218.255 113.703 219.784 113.056 219.511 113.28 cv
cp
234.779 191.029 mo
234.779 191.029 220.666 171.868 216.968 169.167 cv
228.934 187.149 li
230.527 189.243 233.277 192.231 234.459 194.329 cv
234.826 193.715 235.326 192.896 234.779 191.029 cv
cp
264.125 196.175 mo
262.246 195.964 260.637 196.065 259.96 197.844 cv
257.875 202.635 257.875 204.616 252.974 206.389 cv
250.263 207.013 247.137 207.224 246.715 205.761 cv
247.342 202.786 251.424 202.398 253.105 201.493 cv
255.884 200.032 256.62 197.11 256.725 194.195 cv
256.586 193.604 255.021 192.43 254.434 192.105 cv
249.877 188.976 li
243.234 184.107 li
243.188 184.058 243.144 184.015 243.094 184.058 cv
243.049 184.107 li
243.049 184.107 250.924 191.829 254.322 194.076 cv
254.75 199.099 251.393 199.332 247.342 201.379 cv
244.791 202.79 246.406 205.346 241.713 207.74 cv
240.357 208.369 235.71 208.997 236.819 206.699 cv
238.406 204.315 236.713 204.304 236.713 204.304 cv
234.938 204.826 227.751 206.804 232.75 203.466 cv
233.422 203.048 234.023 201.813 234.023 201.813 cv
234.756 199.832 232.532 199.457 231.76 200.294 cv
230.023 202.217 229.881 205.447 224.879 204.515 cv
224.879 204.515 218.992 203.159 223.74 196.535 cv
225.926 195.025 220.209 192.313 219.226 190.017 cv
216.293 185.287 li
209.051 174.007 li
203.551 165.638 li
202.321 163.867 200.841 162.027 199.612 160.14 cv
198.038 155.972 199.208 155.258 200.707 155.063 cv
202.636 156.14 202.791 155.606 203.714 155.297 cv
204.732 154.957 204.615 156.359 203.714 157.103 cv
203.221 158.088 203.234 158.484 203.919 159.396 cv
205.19 159.892 205.19 158.827 206.341 159.155 cv
207.494 159.484 208.83 162.987 210.883 163.578 cv
211.291 163.535 211.744 163.627 211.928 163.309 cv
211.83 162.266 211.069 160.608 210.981 159.611 cv
212.082 160.832 216.086 164.581 215.533 162.438 cv
214.979 160.292 215.043 158.991 215.043 158.991 cv
215.45 158.444 215.429 157.485 216.116 157.485 cv
216.519 157.485 216.885 157.53 217.166 157.758 cv
218.067 159.396 217.521 161.577 219.068 162.854 cv
219.433 162.946 219.937 163.37 220.209 163.054 cv
223.715 169.52 229.284 174.95 235.068 179.592 cv
235.477 179.869 236.18 180.329 236.681 180.329 cv
236.832 179.428 234.236 177.435 233.264 175.774 cv
225.996 168.72 li
224.907 167.397 220.953 163.477 221.688 161.706 cv
222.018 160.292 223.639 159.215 224.368 159.116 cv
224.235 159.615 223.164 160.222 223.532 161.454 cv
224.029 162.438 224.457 162.771 225.505 163.181 cv
222.809 165.872 227.178 168.074 231.865 168.673 cv
236.738 167.631 239.543 171.224 244.101 171.917 cv
244.101 171.917 244.469 173.396 245.463 173.549 cv
252.337 181.786 li
256.113 185.385 260.531 192.623 264.125 196.175 cv
cp
193.055 102.937 mo
192.503 100.506 191.455 97.9199 189.146 97.0908 cv
183.749 95.1641 176.647 94.8906 170.812 93.9038 cv
174.861 95.2886 li
182.637 96.9033 188.541 96.9268 193.055 102.937 cv
cp
203.497 112.646 mo
200.876 112.599 198.661 113.709 196.902 116.699 cv
194.233 117.224 192.409 118.332 189.963 120.977 cv
188.187 120.526 185.007 118.698 185.007 118.698 cv
185.007 118.698 186.616 116.876 186.934 116.736 cv
186.478 116.102 185.37 116.275 185.693 114.661 cv
186.021 113.036 188.436 114.237 190.074 113.461 cv
189.392 112.823 188.214 112.168 188.652 110.881 cv
189.086 109.594 191.472 110.268 192.427 110.226 cv
192.38 109.316 191.321 107.887 192.263 107.267 cv
193.207 106.652 195.493 106.867 195.493 106.867 cv
195.54 105.771 196.131 104.816 196.671 103.906 cv
196.538 103.727 194.41 105.008 194.092 105.733 cv
191.151 105.487 190.702 106.757 190.582 108.542 cv
189.892 109.66 187.87 108.786 187.438 109.958 cv
183.843 107.818 181.953 107.514 176.195 105.954 cv
174.365 105.174 172.672 103.157 172.544 100.486 cv
174.884 100.744 176.094 101.171 177.687 101.331 cv
188.664 104.315 li
188.711 104.315 188.711 104.271 188.758 104.226 cv
183.978 100.04 177.654 100.372 171.779 98.8247 cv
168.588 98.2119 166.579 97.8008 165.584 97.4736 cv
161.771 96.7397 146.544 92.2676 144.147 84.7407 cv
147.722 85.5635 150.671 86.3887 153.896 87.2549 cv
156.4 87.8418 158.459 88.1089 162.054 88.8735 cv
165.401 89.5874 170.279 91.0288 170.279 91.0288 cv
177.88 93.2173 186.389 91.8052 193.849 94.3486 cv
196.446 96.4902 197.038 99.7178 197.535 102.817 cv
198.337 103.615 li
198.337 107.924 200.042 110.052 203.497 112.646 cv
cp
217.471 111.419 mo
214.561 110.274 215.563 106.911 215.15 104.59 cv
214.971 104.136 214.51 103.952 214.06 104.044 cv
213.106 104.271 212.236 105.365 211.239 104.68 cv
211.83 104.59 212.374 104.497 212.83 104.136 cv
213.106 103.77 213.472 103.404 213.333 102.817 cv
213.146 102.585 212.83 102.585 212.559 102.585 cv
212.285 102.677 212.146 102.954 212.146 103.223 cv
210.917 103.313 210.285 102.041 209.01 102.541 cv
208.418 102.541 208.003 101.952 207.598 101.495 cv
207.234 99.9463 205.692 99.1309 204.551 98.1753 cv
204.005 98.9927 203.591 99.8564 203.591 100.855 cv
203.685 101.542 204.96 101.249 205.411 101.335 cv
206.464 101.708 204.492 102.412 204.551 102.954 cv
204.457 102.771 204.41 102.45 204.592 102.268 cv
204.913 101.811 204.231 101.86 204.047 101.636 cv
204.005 102.86 203.229 103.862 203.135 104.996 cv
204.231 105.186 li
204.504 105.454 204.322 105.954 204.364 106.32 cv
204.381 106.332 204.387 106.344 204.404 106.359 cv
204.625 106.426 204.867 106.447 204.972 106.447 cv
205.078 106.447 205.159 106.539 205.159 106.641 cv
205.159 106.746 205.078 106.827 204.972 106.827 cv
204.96 106.827 204.82 106.823 204.64 106.798 cv
204.708 107.118 204.699 107.463 205.142 107.639 cv
205.504 108.044 205.048 108.915 205.729 109.092 cv
207.918 109.186 209.329 107.456 211.099 106.32 cv
210.83 107.362 209.46 107.822 209.01 108.776 cv
208.779 109.917 208.869 111.146 208.513 112.234 cv
208.003 113.783 206.092 112.966 205.504 114.196 cv
205.692 115.558 205.048 117.516 206.458 118.288 cv
208.418 118.558 210.145 117.969 211.689 117.06 cv
214.424 116.102 216.426 113.461 218.789 111.782 cv
218.337 111.644 217.881 111.597 217.471 111.419 cv
cp
161.387 120.407 mo
161.239 122.622 161.228 124.327 162.146 125.416 cv
162.801 123.637 162.854 122.825 162.401 121.726 cv
162.241 121.241 161.836 120.395 161.387 120.407 cv
cp
163.279 120.609 mo
163.369 122.234 163.833 122.466 164.832 123.165 cv
163.833 121.162 166.031 119.496 164.363 118.185 cv
163.632 118.63 163.252 119.845 163.279 120.609 cv
cp
159.806 117.52 mo
158.254 118.027 158.157 118.534 157.736 119.683 cv
159.417 118.195 161.586 119.888 162.433 117.943 cv
161.813 117.353 160.545 117.3 159.806 117.52 cv
cp
170.979 131.751 mo
169.834 131.782 li
168.144 131.975 168.128 133.664 166.911 134.194 cv
167.664 134.36 169.589 134.13 170.309 133.315 cv
170.7 132.909 170.946 132.367 170.979 131.751 cv
cp
166.212 118.082 mo
165.854 119.107 166.595 120.896 167.108 121.479 cv
166.973 120.155 168.442 119.32 167.792 117.746 cv
167.25 116.736 li
166.733 117.063 166.382 117.545 166.212 118.082 cv
cp
164.254 115.44 mo
163.236 115.049 161.43 115.737 160.833 116.223 cv
162.157 116.131 162.947 117.625 164.539 117.024 cv
165.564 116.521 li
165.253 115.991 164.789 115.63 164.254 115.44 cv
cp
170.004 120.034 mo
169.946 118.749 170.472 117.994 170.326 117.177 cv
170.066 116.244 169.694 116.006 169.302 115.948 cv
168.264 116.697 169.146 118.986 170.004 120.034 cv
cp
164.457 114.405 mo
165.682 114.785 166.218 115.534 167.036 115.675 cv
167.997 115.743 168.349 115.468 168.542 115.121 cv
168.19 113.893 165.727 113.951 164.457 114.405 cv
cp
159.382 120.473 mo
158.871 120.22 157.393 120.922 157.006 121.181 cv
156.09 121.569 154.65 122.919 154.954 123.313 cv
157.439 121.792 157.525 123.617 159.382 120.473 cv
cp
171.05 125.548 mo
171.198 126.018 173.125 125.614 173.972 125.084 cv
174.4 124.912 175.824 124.104 175.908 123.535 cv
172.267 123.264 173.714 124.378 171.05 125.548 cv
cp
166.708 130.579 mo
166.771 131.072 168.74 131.01 169.659 130.637 cv
170.117 130.549 171.67 130.003 171.848 129.455 cv
168.311 128.544 169.542 129.899 166.708 130.579 cv
cp
158.126 124.224 mo
157.685 125.788 158.044 126.153 158.766 127.144 cv
158.465 124.918 161.093 124.068 159.956 122.275 cv
159.113 122.468 158.356 123.484 158.126 124.224 cv
cp
174.065 129.273 mo
171.986 129.722 173.223 132.184 171.436 133.533 cv
172.643 133.35 173.164 133.35 173.96 131.934 cv
174.322 131.251 174.516 129.995 174.065 129.273 cv
cp
172.479 126.701 mo
171.848 126.927 170.293 127.887 169.519 127.756 cv
169.887 128.251 171.572 128.201 172.169 128.292 cv
173.215 128.384 173.96 127.218 174.51 126.398 cv
172.479 126.701 li
cp
175.977 126.578 mo
175.38 127.561 li
174.393 128.977 176.096 130.161 176.051 131.072 cv
176.593 130.525 177.221 129.039 176.926 127.994 cv
176.796 127.446 176.476 126.947 175.977 126.578 cv
cp
176.967 124.181 mo
176.831 124.588 176.452 125.104 176.542 125.558 cv
176.681 126.383 177.966 126.73 178.331 127.965 cv
179.068 126.856 178.196 124.542 176.967 124.181 cv
cp
177.687 121.417 mo
177.369 122.878 178.331 124.345 179.468 125.068 cv
179.711 123.96 li
179.577 122.913 178.504 121.92 177.687 121.417 cv
cp
176.26 120.756 mo
175.124 120.713 173.293 122.26 172.696 122.853 cv
175.036 122.117 175.896 122.577 176.446 121.897 cv
176.487 121.53 176.581 120.984 176.26 120.756 cv
cp
234.779 155.858 mo
236.916 158.569 238.717 160.949 238.717 160.949 cv
237.989 160.444 235.599 159.555 231.408 154.955 cv
230.344 153.563 228.529 151.597 228.215 151.92 cv
228.074 152.464 229.297 153.525 229.529 153.889 cv
229.529 153.889 234.662 160.711 233.901 160.746 cv
233.141 160.783 230.223 158.033 228.5 155.328 cv
226.609 152.354 223.182 147.058 222.658 143.5 cv
222.658 143.5 228.381 150.768 229.849 151.591 cv
229.849 151.591 225.687 145.205 224.98 143.227 cv
224.273 141.245 222.023 135.663 220.25 134.11 cv
220.25 134.11 220.525 134.513 218.559 135.535 cv
216.885 136.404 216.388 135.423 214.586 136.079 cv
212.777 136.74 213.111 137.062 212.129 137.883 cv
210.83 138.967 207.859 141.245 206.376 138.456 cv
206.376 138.456 203.919 139.938 201.949 138.952 cv
201.949 138.952 198.337 150.932 198.834 153.563 cv
198.834 153.563 200.314 152.394 201.465 153.054 cv
202.612 153.707 203.751 151.716 205.229 152.367 cv
206.78 153.058 204.738 156.498 205.353 157.048 cv
206.092 157.711 206.546 155.94 207.944 156.682 cv
209.302 157.401 208.226 159.391 209.542 159.391 cv
210.853 159.391 209.49 153.397 210.977 153.397 cv
210.977 153.397 211.077 157.255 212.695 158.406 cv
212.695 158.406 210.727 149.379 213.603 141.907 cv
213.603 141.907 213.111 152.457 214.094 157.003 cv
214.094 157.003 215.898 153.069 218.031 154.548 cv
220.168 156.021 218.031 159.143 219.349 159.473 cv
220.666 159.8 222.546 157.664 223.334 156.927 cv
224.106 156.186 225.418 155.901 225.832 156.847 cv
226.944 159.404 224.445 158.649 225.095 160.128 cv
225.662 161.407 226.786 160.719 227.882 161.359 cv
229.916 162.529 224.75 163.404 226.9 164.809 cv
228.783 166.034 232.377 166.383 235.336 166.217 cv
235.33 166.266 241.367 168.373 243.316 169.897 cv
242.737 168.825 242.006 168.25 241.912 166.933 cv
242.006 166.933 li
244.259 168.006 245.241 169.625 245.736 171.573 cv
246.102 171.573 246.6 171.45 246.844 170.386 cv
247.391 168.79 246.139 167.665 247.691 166.482 cv
248.641 165.755 249.87 165.663 251.055 165.931 cv
247.869 163.658 236.365 156.541 234.779 155.858 cv
cp
249.404 166.957 mo
248.115 167.579 248.195 169.203 248.155 170.454 cv
248.57 170.415 li
249.613 169.913 251.361 169.539 251.361 167.996 cv
250.986 167.331 250.234 166.876 249.404 166.957 cv
cp
199.097 161.569 mo
199.01 161.569 li
198.224 162.008 199.043 163.613 199.242 164.175 cv
199.752 165.644 199.675 167.272 199.752 168.806 cv
199.887 171.642 199.84 174.501 200.063 177.329 cv
200.194 178.991 200.424 181.187 201.502 182.545 cv
204.182 185.911 206.685 189.324 208.596 193.054 cv
208.513 193.101 li
206.708 192.052 203.919 188.606 202.136 185.593 cv
201.41 190.689 202.608 197.151 204.919 201.18 cv
207.997 205.136 216.594 202.48 216.594 202.48 cv
219.408 200.761 218.052 197.517 221.025 195.328 cv
220.111 193.871 219.226 193.527 217.43 191.263 cv
215.637 188.354 213.897 186.2 212.673 183.742 cv
210.262 179.787 207.623 175.962 205.526 171.86 cv
201.83 165.989 li
199.097 161.569 li
cp
215.813 130.768 mo
214.854 130.179 212.199 130.042 211.018 130.089 cv
208.697 130.404 206.096 130.022 204.095 130.978 cv
204.095 130.978 203.798 131.134 203.632 131.316 cv
203.082 131.957 203.135 131.852 202.729 132.619 cv
202.639 132.843 201.058 134.979 201.165 135.236 cv
200.798 135.937 200.59 136.617 200.678 137.126 cv
201.086 138.043 201.906 137.586 202.636 137.902 cv
202 137.446 202 137.04 201.953 136.626 cv
201.738 135.552 203.38 133.309 204.024 132.332 cv
204.415 131.979 204.777 131.729 205.048 131.711 cv
205.188 131.711 li
204.182 132.948 203.509 134.189 203.012 135.69 cv
202.79 136.234 202.92 136.826 203.287 137.282 cv
203.653 137.645 205.347 137.846 205.85 137.846 cv
205.727 136.244 206.593 135.624 206.139 134.08 cv
206.37 133.985 206.731 133.985 206.864 134.263 cv
207.461 135.854 206.466 137.185 207.693 138.456 cv
209.419 138.911 210.094 137.846 211.262 136.979 cv
211.695 135.074 211.391 133.101 210.917 131.349 cv
212.188 131.711 212.426 134.516 213.111 135.386 cv
213.656 135.563 214.111 135.242 214.521 134.875 cv
215.746 133.65 214.34 131.815 213.512 130.666 cv
213.652 130.576 214.709 130.701 215.571 132.426 cv
216.43 134.152 215.602 133.936 216.189 134.891 cv
216.552 134.755 218.039 134.793 218.402 134.52 cv
220.18 133.154 219.651 132.804 220.478 132.757 cv
219.203 131.852 217.283 131.263 215.813 130.768 cv
cp
200.279 122.577 mo
197.787 123.535 194.042 125.359 191.807 126.864 cv
191.943 127.183 194.627 127.019 194.771 127.522 cv
194.175 128.384 193.27 129.057 193.451 130.147 cv
194.088 130.011 196.41 129.817 196.41 129.817 cv
196.452 130.596 195.481 132.418 195.75 133.101 cv
196.526 133.013 197.834 132.127 198.377 131.622 cv
198.377 132.858 198.962 134.637 199.601 135.644 cv
199.917 134.867 201.227 131.934 203.646 130.089 cv
202.877 129.726 202.104 129.316 201.42 128.72 cv
200.058 127.631 199.281 125.907 199.875 124.171 cv
200.1 123.625 200.783 123.217 200.74 122.577 cv
200.279 122.577 li
cp
227.715 121.109 mo
225.62 121.019 222.933 120.338 221.842 122.517 cv
221.525 124.885 221.068 127.389 218.703 128.612 cv
218.703 128.612 216.683 129.594 218.345 130.147 cv
219.788 131.224 221.297 131.396 222.157 132.486 cv
222.344 133.261 221.641 133.264 221.238 133.721 cv
222.871 134.627 223.984 136.72 225.025 138.174 cv
226.072 137.536 226.909 134.095 227.227 134.192 cv
227.137 135.283 230.259 136.49 230.982 137.405 cv
232.129 135.897 231.76 133.35 231.533 131.711 cv
232.713 132.849 233.402 134.442 234.807 135.445 cv
236.309 133.807 235.171 131.304 234.717 129.572 cv
235.674 130.3 238.073 130.374 239.215 131.235 cv
239.574 129.782 238.582 127.779 237.9 126.64 cv
237.9 126.64 240.719 127.756 241.672 128.113 cv
241.852 126.843 240.846 125.431 240.525 124.341 cv
241.387 124.658 242.322 122.384 241.367 121.883 cv
239.543 122.064 238.045 122.888 236.084 122.657 cv
233.311 122.152 230.535 121.474 227.715 121.109 cv
cp
265.254 114.692 mo
264.742 114.698 264.227 114.226 263.48 115.287 cv
261.891 117.53 257.383 118.788 253.697 118.154 cv
249.554 118.881 245.915 120.879 241.912 121.698 cv
243.775 123.199 245.867 124.791 248.506 124.112 cv
247.824 122.747 246.682 123.334 246.271 121.881 cv
246.996 122.102 246.915 121.926 247.691 122.152 cv
251.557 123.52 253.621 125.3 257.764 123.25 cv
257.17 121.883 254.151 121.881 255.137 121.054 cv
256.116 120.237 262.726 123.133 265.64 121.224 cv
264.594 119.541 261.699 119.746 262.354 118.922 cv
263.013 118.104 268.258 119.607 269.666 117.06 cv
269.299 115.558 265.254 114.692 265.254 114.692 cv
cp
171.011 116.751 mo
172.257 116.833 173.972 117.134 174.845 117.977 cv
173.644 118.265 173.38 119.252 172.645 119.746 cv
172.478 120.173 li
172.936 120.582 173.71 120.254 174.211 120.024 cv
175.393 119.659 176.376 119.201 177.697 119.065 cv
178.015 119.428 177.334 119.25 177.334 119.563 cv
179.655 121.749 182.429 123.112 185.118 124.524 cv
187.424 126.084 188.529 128.068 190.759 126.295 cv
199.495 121.155 li
202.861 119.653 li
203.092 117.879 204.504 116.514 204.364 114.604 cv
203.864 114.056 li
201.134 113.652 198.904 115.601 197.226 117.563 cv
194.627 118.651 192.216 120.29 189.894 122.064 cv
190.074 122.291 190.578 122.564 190.438 122.888 cv
186.687 121.713 183.802 119.17 180.115 117.943 cv
178.297 116.664 176.823 116.51 174.527 116.069 cv
173.113 115.632 171.766 116.018 171.355 116.381 cv
171.011 116.751 li
cp
176.905 112.213 mo
176.905 112.213 175.282 112.858 172.865 112.925 cv
171.104 112.925 169.87 112.729 166.166 112.521 cv
167.804 113.51 172.033 115.051 174.202 115.312 cv
177.841 115.262 180.229 116.436 183.234 117.943 cv
184.142 118.577 184.281 116.822 184.873 116.459 cv
184.873 116.459 184.393 116.174 184.215 115.642 cv
184.043 115.109 183.931 114.604 184.887 114.329 cv
182.066 113.416 179.911 112.667 176.905 112.213 cv
cp
269.379 111.126 mo
269.379 111.126 269.229 112.782 266.669 113.588 cv
269.038 115.09 274.526 116.488 276.87 109.033 cv
274.574 110.18 272.978 111.325 269.379 111.126 cv
cp
259.152 111.419 mo
258.291 111.914 257.605 112.737 256.512 112.694 cv
254.838 112.872 254.557 115.326 252.645 114.965 cv
241.949 116.375 li
240.357 116.559 238.857 117.06 237.313 117.243 cv
233.767 115.87 229.805 115.646 226.525 113.652 cv
224.801 113.1 223.023 112.189 221.068 112.694 cv
217.605 115.191 219.334 120.2 219.842 123.57 cv
219.933 123.793 220.019 124.155 220.337 124.155 cv
221.244 123.112 221.338 121.614 221.566 120.2 cv
221.11 119.884 220.428 120.106 219.971 120.2 cv
220.244 119.607 220.889 119.428 221.43 119.197 cv
225.803 118.924 229.898 120.021 234.037 120.793 cv
236.675 121.659 239.863 121.109 242.449 120.426 cv
249.916 118.24 li
251.373 117.924 252.829 117.474 254.375 117.516 cv
257.151 117.969 259.701 116.833 261.977 115.601 cv
262.613 115.287 263.363 114.204 263.205 113.512 cv
263.045 112.813 259.472 113.557 258.34 113.918 cv
257.877 114.508 257.151 114.92 256.472 114.965 cv
257.244 114.417 li
257.791 113.28 259.43 112.966 259.561 111.558 cv
259.561 111.325 259.295 111.419 259.152 111.419 cv
cp
264.207 108.913 mo
261.1 105.663 262.375 104.783 253.967 107.514 cv
240.076 110.881 li
241.186 112.728 239.215 113.588 239.215 113.588 cv
240.67 114.773 243.896 114.803 245.674 114.713 cv
253.547 113.621 li
254.686 111.848 256.641 111.713 258.274 110.982 cv
258.775 110.889 259.098 110.303 259.641 110.303 cv
259.827 110.303 260.006 110.525 260.101 110.663 cv
260.416 111.21 260.145 112.197 259.781 112.7 cv
260.602 112.517 261.012 112.342 262.171 112.373 cv
263.553 112.406 264.057 112.999 264.012 113.404 cv
265.387 113.038 266.971 112.849 267.695 111.392 cv
264.207 108.913 li
cp
178.079 107.65 mo
177.102 107.259 175.809 107.136 174.17 107.126 cv
176.681 111.382 181.807 112.546 186.3 112.8 cv
187.985 113.253 186.849 112.109 187.176 111.372 cv
183.942 109.476 181.664 108.755 178.079 107.65 cv
cp
166.809 107.325 mo
165.409 107.267 161.403 107.003 156.647 105.63 cv
158.12 107.479 163.143 111.181 166.218 111.427 cv
176.681 111.382 li
175.212 109.917 li
172.725 106.983 170.066 107.453 166.809 107.325 cv
cp
218.016 100.36 mo
217.518 100.723 218.016 101.269 218.016 101.725 cv
218.196 102.084 218.471 102.501 218.973 102.45 cv
219.475 102 220.789 101.952 220.478 100.906 cv
220.203 100.855 220.019 100.994 219.788 101.039 cv
219.063 101.269 218.43 100.949 218.016 100.36 cv
cp
263.545 104.069 mo
261.067 104.846 263.153 106.671 267.646 109.379 cv
270.09 110.646 271.83 109.7 273.873 109.215 cv
277.463 108.399 280.273 106.316 282.916 102.63 cv
279.348 103.988 271.229 106.02 263.545 104.069 cv
cp
146.356 90.7168 mo
148.326 95.1445 152.597 104.315 164.008 105.63 cv
173.519 106.219 li
172.087 102.63 171.889 100.807 166.329 99.1855 cv
163.462 98.6826 154.174 96.3809 146.356 90.7168 cv
cp
219.912 97.7188 mo
219.004 98.127 217.594 98.7178 217.594 99.9033 cv
217.594 99.9033 218.267 100.089 218.543 100.266 cv
219.047 100.672 219.816 100.492 220.318 100.219 cv
220.859 99.9033 221.317 99.3569 221.317 98.6748 cv
220.998 98.3096 220.777 98.3975 220.859 98.0332 cv
220.729 97.6289 220.232 97.6289 219.912 97.7188 cv
cp
205.308 96.7002 mo
205.042 96.5664 204.535 96.6147 204.628 97.0225 cv
205.175 97.481 206.769 98.9434 207.359 99.3086 cv
213.921 99.5371 li
214.744 99.6304 215.65 99.7178 216.152 100.492 cv
216.285 100.855 216.199 101.313 215.832 101.495 cv
215.195 101.673 214.469 101.542 214.104 100.949 cv
214.194 100.855 214.373 100.949 214.51 100.906 cv
214.65 100.855 214.872 100.855 214.872 100.631 cv
213.875 100.27 212.763 100.266 211.713 100.128 cv
211.121 100.266 208.308 99.6636 207.944 100.21 cv
208.103 101.932 211.607 101.975 213.934 101.932 cv
214.158 102.529 214.691 103.087 215.195 103.404 cv
215.512 103.818 215.65 104.315 215.563 104.857 cv
215.744 104.364 216.285 103.818 216.787 103.635 cv
217.336 102.997 217.699 102.178 217.518 101.313 cv
216.968 100.219 214.826 98.0742 213.638 97.707 cv
211.188 97.3955 207.54 97.481 205.308 96.7002 cv
cp
254.65 100.093 mo
236.669 105.856 li
238.396 106.843 238.139 108.302 237.261 109.864 cv
241.567 109.246 245.301 108.313 248.078 107.678 cv
258.296 104.727 li
261.789 104.026 262.148 103.252 265.432 101.401 cv
265.891 100.854 268.514 100.172 268.759 99.0625 cv
265.399 97.0615 260.416 98.4326 254.65 100.093 cv
cp
218.531 96.3828 mo
217.941 96.7451 217.576 97.4248 217.664 98.0679 cv
218.402 98.2607 218.596 97.8574 218.963 97.5859 cv
219.145 97.3096 219.256 97.2002 219.256 96.8369 cv
219.256 96.4766 218.848 96.2871 218.531 96.3828 cv
cp
214.724 93.3496 mo
212.749 92.7373 210.711 93.1992 209.259 93.6543 cv
208.032 94.0674 206.266 95.1582 205.655 96.0337 cv
207.928 96.6265 210.76 96.2168 213.133 96.5835 cv
214.404 96.9507 215.348 98.5537 216.898 97.832 cv
217.852 96.8745 217.817 96.2305 217.699 95.7998 cv
217.447 95.2451 216.65 93.9482 214.724 93.3496 cv
cp
255.29 94.832 mo
244.392 94.2979 239.705 97.2588 229.849 102.751 cv
230.496 102.657 232.352 103.161 232.81 103.615 cv
233.125 103.933 234.05 105.267 233.917 105.591 cv
248.319 99.8018 252.91 98.9092 261.375 97.0908 cv
262.416 96.7744 260.935 95.9912 258.332 95.3408 cv
257.514 95.0176 256.242 94.832 255.29 94.832 cv
cp
285.994 95 mo
279.594 97.4692 275.238 97.9414 271.261 98.4326 cv
270.197 99.0488 270.484 100.678 265.399 102.728 cv
265.99 104.103 272.707 103.535 276.318 103.04 cv
281.075 102.223 281.801 101.45 283.521 99.9639 cv
284.656 98.9888 285.994 97.1553 286.307 96.1699 cv
286.799 95.2451 286.732 94.8125 285.994 95 cv
cp
205.499 93.5391 mo
205.078 94.0225 204.124 95.3643 204.988 95.8623 cv
206.396 93.1201 208.513 93.2935 210.277 92.8467 cv
208.889 92.394 206.907 92.4995 205.499 93.5391 cv
cp
285.746 88.228 mo
277.102 90.5488 270.488 92.4409 262.523 96.3535 cv
264.574 96.6309 li
267.93 97.2197 268.576 97.5938 272.082 97.0908 cv
276.997 96.2759 282.252 95.2734 286.248 93.0264 cv
288.46 91.7935 291.549 87.3657 292.644 85.2715 cv
290.958 85.9438 290.385 86.6206 285.746 88.228 cv
cp
282.691 81.7388 mo
271.225 86.0156 li
263.303 88.8442 li
258.203 90.21 li
252.283 92.0742 245.457 91.7583 239.18 92.6221 cv
234.357 93.4902 228.939 94.2588 226.347 99.1309 cv
223.796 103.044 225.346 109.507 219.971 111.419 cv
220.701 111.419 221.703 111.407 222.385 111.54 cv
223.298 111.278 224.93 111.722 225.838 112.035 cv
229.542 113.089 230.712 114.458 234.518 115.238 cv
236.391 115.69 238.371 116.628 240.189 115.632 cv
239.233 114.627 237.318 114.076 236.091 114.165 cv
237.369 113.439 239.215 112.683 238.389 111.212 cv
236.932 110.206 235.395 111.476 234.123 111.704 cv
234.715 110.701 237.241 108.583 235.599 107.267 cv
233.732 106.496 232.247 107.327 230.835 108.419 cv
231.298 107.327 233.141 105.794 231.822 104.643 cv
230.512 103.49 228.709 104.504 228.215 104.643 cv
228.026 103.781 227.391 102.041 226.525 101.45 cv
226.616 101.403 li
227.258 101.45 227.918 101.766 228.486 102.326 cv
232.309 99.5991 236.137 97.0908 240.936 95.4917 cv
244.193 94.2471 251.912 91.3975 262.273 95.1094 cv
264.984 94.124 267.34 92.4526 269.791 91.5947 cv
284.451 87.001 li
288.092 85.7275 289.922 84.2646 292.291 78.8311 cv
289.062 79.5132 285.784 80.7827 282.691 81.7388 cv
cp
0 0 0 0 cmyk
f
105.226 197.084 mo
104.369 197.085 li
104.582 197.916 li
106.603 205.821 104.465 213.505 98.8672 218.466 cv
97.0996 220.035 li
99.4248 219.627 li
101.209 219.315 103.573 218.982 106.05 219.175 cv
111.884 219.541 115.996 220.739 119.358 222.995 cv
119.177 223.883 115.846 240.368 115.846 240.368 cv
115.785 240.63 115.758 240.887 115.758 241.133 cv
115.758 242.242 116.306 243.209 116.874 244.027 cv
116.905 244.07 li
116.94 244.107 li
119.499 246.801 122.756 247.693 125.904 248.564 cv
126.17 248.637 li
139.924 251.845 154.443 248.988 167.063 240.598 cv
173.858 236.163 li
176.847 234.318 li
180.443 232.11 li
187.372 228.002 193.074 225.767 199.513 224.644 cv
212.828 222.303 227.094 225.138 237.682 232.229 cv
237.721 232.253 239.066 233.036 239.066 233.036 cv
239.033 233.019 247.996 238.889 247.996 238.889 cv
248 238.899 253.553 242.41 253.553 242.41 cv
265.856 250.141 281.794 252.435 295.146 248.396 cv
297.404 247.644 302.07 246.089 302.732 241.995 cv
302.749 241.876 li
302.749 241.876 299.382 224.366 299.238 223.618 cv
299.246 223.614 299.727 223.265 299.727 223.265 cv
299.574 223.383 li
305.195 220.24 312.561 219.143 319.27 220.454 cv
321.699 220.93 li
319.839 219.296 li
314.233 214.369 312.134 206.672 314.223 198.706 cv
314.439 197.875 li
313.586 197.867 li
305.063 197.773 297.119 198.952 289.975 201.374 cv
286.424 202.74 281.096 204.788 279.523 209.605 cv
279.492 209.703 li
279.305 223.668 li
279.305 223.675 279.277 227.579 279.268 229.172 cv
270.968 228.999 264.101 224.839 258.307 220.907 cv
258.309 220.911 256.283 219.506 256.283 219.506 cv
256.27 219.494 247.988 214.082 247.988 214.082 cv
238.166 207.994 228.433 204.374 218.235 203.001 cv
200.779 200.719 183.337 204.979 167.792 215.324 cv
167.786 215.326 159.982 220.634 159.982 220.634 cv
153.851 224.664 147.18 228.587 139.081 228.68 cv
139.089 227.638 139.175 210.19 139.175 210.19 cv
139.128 207.409 136.995 204.834 132.82 202.527 cv
125.161 198.808 116.145 197.029 105.226 197.084 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
130.837 217.189 mo
133.063 216.547 135.345 215.843 137.199 214.104 cv
137.195 215.047 137.158 228.201 137.158 228.672 cv
132.315 228.536 126.864 227.877 122.77 224.197 cv
122.768 224.188 122.596 223.965 122.596 223.965 cv
122.144 223.379 121.76 222.889 121.76 222.28 cv
121.76 222.062 121.808 221.827 121.923 221.574 cv
123.111 219.37 125.464 218.726 127.734 218.104 cv
129.583 217.558 li
129.577 217.56 130.837 217.189 130.837 217.189 cv
cp
0 0 0 0 cmyk
f
281.271 214.872 mo
283.494 216.819 286.23 217.633 288.898 218.385 cv
291.245 219.042 293.672 219.724 295.676 221.209 cv
296.289 221.758 296.577 222.231 296.577 222.729 cv
296.577 222.949 296.523 223.169 296.414 223.405 cv
295.123 225.859 292.114 227.079 289.967 227.781 cv
287.113 228.582 284.259 228.987 281.271 229.044 cv
281.271 228.568 281.271 215.752 281.271 214.872 cv
cp
f
107.172 203.65 mo
107.172 202.1 106.996 200.523 106.698 198.94 cv
114.996 199.271 124.545 200.231 132.834 204.71 cv
134.903 206.032 137.248 207.85 137.248 210.263 cv
137.248 210.327 137.248 210.392 137.244 210.451 cv
136.856 213.539 133.735 214.481 130.981 215.313 cv
127.395 216.415 li
124.465 217.228 121.469 218.113 120.119 221.146 cv
115.399 218.313 109.47 217.007 102.471 217.273 cv
105.51 213.656 107.172 208.825 107.172 203.65 cv
cp
f
293.109 217.649 mo
292.816 217.538 li
289.338 216.485 li
286.502 215.734 283.826 215.022 281.82 212.793 cv
281.453 212.264 281.294 211.583 281.294 210.906 cv
281.294 210.298 281.422 209.699 281.633 209.222 cv
284.24 205.209 288.699 203.809 293.008 202.457 cv
294.143 202.097 li
299.438 200.656 305.316 199.888 312.064 199.729 cv
311.766 201.437 311.59 203.11 311.59 204.718 cv
311.59 209.936 313.168 214.524 316.141 218.063 cv
309.287 217.794 303.334 219.065 298.43 221.835 cv
297.627 219.416 295.148 218.426 293.109 217.649 cv
cp
f
179.83 221.628 mo
179.571 221.668 178.228 222.359 177.931 222.513 cv
177.888 222.284 177.303 219.128 177.242 218.809 cv
177.326 218.89 li
177.757 219.453 179.819 221.506 179.905 221.589 cv
179.83 221.628 li
cp
183.966 222.808 mo
183.966 222.806 178.157 217.349 178.157 217.349 cv
178.036 217.229 177.641 216.823 177.641 216.823 cv
177.596 216.736 177.568 216.635 177.792 216.5 cv
177.83 216.371 177.72 216.144 177.72 216.144 cv
177.584 216.1 174.902 217.517 174.902 217.517 cv
174.857 217.646 174.978 217.872 174.978 217.872 cv
175.391 217.8 175.419 217.856 175.429 217.875 cv
175.431 217.881 175.56 218.432 175.56 218.432 cv
175.567 218.466 176.843 226.565 176.843 226.565 cv
176.868 226.762 176.879 226.945 176.753 227.023 cv
176.718 227.152 176.835 227.383 176.835 227.383 cv
176.971 227.426 179.089 226.308 179.089 226.308 cv
179.175 226.263 li
179.01 225.95 li
178.695 225.991 178.567 225.966 178.495 225.835 cv
178.495 225.829 178.422 225.55 178.422 225.55 cv
178.422 225.54 178.161 223.98 178.157 223.977 cv
178.192 224.031 180.966 222.575 180.997 222.561 cv
180.999 222.643 182.181 223.744 182.181 223.744 cv
182.183 223.746 182.362 223.952 182.362 223.952 cv
182.366 223.965 182.374 223.977 182.374 223.984 cv
182.374 224.015 182.343 224.059 182.202 224.156 cv
182.198 224.172 182.194 224.188 182.194 224.203 cv
182.194 224.329 182.288 224.509 182.288 224.509 cv
182.425 224.551 184.604 223.401 184.604 223.401 cv
184.645 223.267 184.521 223.04 184.521 223.04 cv
184.266 223.04 184.211 223.042 183.966 222.808 cv
cp
295.268 240.646 mo
295.146 240.575 294.899 240.644 294.899 240.644 cv
294.842 240.926 294.808 241.006 294.387 241.114 cv
294.387 241.114 290.373 242.146 290.363 242.151 cv
290.371 242.151 290.373 242.139 290.373 242.119 cv
290.373 241.839 289.91 240.055 289.842 239.795 cv
290.017 239.747 291.994 239.239 291.994 239.239 cv
292.41 239.134 292.477 239.174 292.548 239.315 cv
292.657 239.365 292.906 239.3 292.906 239.3 cv
292.977 239.183 292.443 237.111 292.443 237.111 cv
292.318 237.04 292.072 237.109 292.072 237.109 cv
292.012 237.392 291.979 237.467 291.564 237.571 cv
291.564 237.571 289.338 238.146 289.32 238.149 cv
289.326 238.147 289.33 238.138 289.33 238.113 cv
289.33 237.821 288.85 235.962 288.85 235.951 cv
288.875 236.041 292.567 235.083 292.567 235.083 cv
292.982 234.981 293.047 235.024 293.121 235.165 cv
293.234 235.213 293.48 235.145 293.48 235.145 cv
293.551 235.026 293.008 232.956 293.008 232.956 cv
292.889 232.887 292.644 232.954 292.644 232.954 cv
292.586 233.233 292.548 233.317 292.139 233.422 cv
285.996 235.015 li
285.927 235.133 285.986 235.379 285.986 235.379 cv
286.603 235.375 286.646 235.459 286.701 235.674 cv
288.729 243.502 li
288.783 243.73 288.781 243.815 288.347 243.984 cv
288.289 244.099 288.349 244.347 288.349 244.347 cv
288.468 244.42 294.818 242.771 294.818 242.771 cv
295.232 242.67 295.297 242.714 295.379 242.881 cv
295.489 242.934 295.739 242.869 295.739 242.869 cv
295.809 242.75 295.268 240.646 295.268 240.646 cv
cp
283.74 239.942 mo
283.729 242.318 282.964 243.077 280.572 243.065 cv
280.572 243.065 279.534 243.063 279.525 243.063 cv
279.525 243.062 li
279.619 243.036 279.648 237.307 279.652 236.78 cv
279.815 236.782 280.6 236.793 280.6 236.793 cv
282.975 236.802 283.74 237.56 283.74 239.902 cv
283.74 239.942 li
cp
281.292 235.075 mo
277.318 235.059 li
277.221 235.154 277.215 235.41 277.215 235.41 cv
277.605 235.555 277.65 235.633 277.643 235.882 cv
277.643 235.886 277.615 243.953 277.615 243.953 cv
277.615 244.199 277.569 244.27 277.252 244.327 cv
277.17 244.671 li
277.269 244.769 280.893 244.784 280.893 244.784 cv
282.474 244.792 283.691 244.387 284.508 243.576 cv
285.326 242.764 285.746 241.544 285.752 239.953 cv
285.76 236.912 284.092 235.087 281.292 235.075 cv
cp
274.024 234.664 mo
274.374 234.903 274.396 234.991 274.338 235.223 cv
273.051 240.431 li
272.759 241.62 271.904 242.135 270.719 241.843 cv
270.127 241.699 269.704 241.418 269.459 241.012 cv
269.215 240.609 269.166 240.087 269.308 239.502 cv
270.594 234.299 li
270.652 234.064 270.713 233.996 271.026 234.023 cv
271.128 233.949 271.191 233.699 271.191 233.699 cv
271.12 233.581 268.439 232.924 268.439 232.924 cv
268.343 232.9 li
268.319 232.999 li
268.265 233.248 li
268.694 233.503 268.701 233.594 268.643 233.818 cv
267.364 238.987 li
266.782 241.367 267.75 242.881 270.23 243.487 cv
271.494 243.802 272.536 243.719 273.32 243.244 cv
274.065 242.796 274.586 241.988 274.867 240.843 cv
276.144 235.674 li
276.203 235.44 276.254 235.368 276.611 235.404 cv
276.716 235.33 276.774 235.085 276.774 235.085 cv
276.704 234.965 274.21 234.347 274.21 234.347 cv
274.092 234.42 274.024 234.664 274.024 234.664 cv
cp
263.884 233.325 mo
263.69 234.041 263.303 236.898 263.292 237.012 cv
263.217 236.978 li
263.022 236.791 261.654 236.134 261.36 235.995 cv
261.514 235.823 263.623 233.517 263.899 233.218 cv
263.884 233.325 li
cp
263.288 230.848 mo
263.592 231.131 263.563 231.186 263.553 231.213 cv
263.189 231.65 li
263.167 231.677 257.475 237.56 257.475 237.56 cv
257.338 237.694 257.195 237.825 257.053 237.771 cv
256.928 237.821 256.821 238.048 256.821 238.048 cv
256.869 238.18 259.031 239.196 259.031 239.196 cv
259.125 239.237 li
259.268 238.917 li
259.105 238.753 259.033 238.648 259.033 238.547 cv
259.033 238.512 259.043 238.477 259.059 238.441 cv
259.059 238.438 259.238 238.207 259.238 238.207 cv
259.244 238.201 260.326 237.071 260.335 237.062 cv
260.335 237.133 263.155 238.453 263.17 238.459 cv
263.107 238.465 262.932 240.122 262.932 240.122 cv
262.932 240.133 262.883 240.398 262.883 240.398 cv
262.869 240.431 262.858 240.455 262.615 240.386 cv
262.504 240.439 262.393 240.662 262.393 240.662 cv
262.438 240.795 264.675 241.847 264.675 241.847 cv
264.805 241.8 264.909 241.569 264.909 241.569 cv
264.756 241.363 264.719 241.317 264.758 240.989 cv
264.762 240.987 265.611 233.065 265.611 233.065 cv
265.73 232.329 li
265.756 232.271 265.811 232.158 266.077 232.265 cv
266.201 232.217 266.311 231.978 266.311 231.978 cv
266.264 231.845 263.525 230.569 263.525 230.569 cv
263.396 230.616 263.288 230.848 263.288 230.848 cv
cp
256.766 235.398 mo
256.438 235.649 256.352 235.651 256.015 235.426 cv
256.015 235.426 252.692 233.25 252.685 233.246 cv
252.797 233.241 256.698 227.302 256.698 227.302 cv
256.831 227.102 256.898 227.045 257.342 227.276 cv
257.471 227.244 257.607 227.031 257.607 227.031 cv
257.582 226.895 255.104 225.271 255.104 225.271 cv
254.967 225.3 254.822 225.508 254.822 225.508 cv
255.181 225.922 255.15 226.005 255.021 226.205 cv
250.595 232.95 li
250.473 233.146 250.396 233.2 250.047 233.026 cv
249.922 233.063 249.777 233.272 249.777 233.272 cv
249.809 233.413 255.074 236.861 255.074 236.861 cv
255.428 237.091 255.438 237.18 255.371 237.349 cv
255.408 237.469 255.618 237.61 255.618 237.61 cv
255.757 237.579 257.006 235.674 257.006 235.674 cv
256.976 235.538 256.766 235.398 256.766 235.398 cv
cp
245.425 229.563 mo
245.43 229.563 249.824 222.525 249.824 222.525 cv
249.904 222.393 250.001 222.339 250.221 222.461 cv
250.352 222.428 250.49 222.211 250.49 222.211 cv
250.457 222.077 247.769 220.396 247.769 220.396 cv
247.633 220.428 247.496 220.643 247.496 220.643 cv
247.588 220.808 247.617 220.891 247.617 220.947 cv
247.617 220.984 247.605 221.008 247.586 221.04 cv
247.506 221.158 246.547 221.831 245.531 222.541 cv
245.531 222.541 243.34 224.099 243.001 224.338 cv
243.011 224.298 243.018 224.25 243.025 224.203 cv
243.213 223.664 243.494 222.077 243.494 222.077 cv
243.711 220.776 244.006 218.994 244.095 218.839 cv
244.122 218.797 244.164 218.759 244.363 218.794 cv
244.465 218.749 244.598 218.538 244.598 218.538 cv
244.566 218.406 241.854 216.699 241.854 216.699 cv
241.715 216.73 241.584 216.945 241.584 216.945 cv
241.789 217.215 241.781 217.313 241.7 217.449 cv
237.303 224.484 li
237.207 224.634 237.104 224.657 236.936 224.563 cv
236.803 224.597 236.669 224.816 236.669 224.816 cv
236.702 224.951 238.793 226.251 238.793 226.251 cv
238.879 226.306 li
239.059 226.015 li
238.883 225.817 238.828 225.709 238.828 225.623 cv
238.828 225.567 238.852 225.521 238.883 225.474 cv
238.883 225.474 241.9 220.643 242.31 219.985 cv
242.292 220.045 242.286 220.104 242.273 220.164 cv
241.961 221.217 241.234 224.796 241.234 224.796 cv
240.771 227.422 li
240.814 227.522 241.046 227.664 241.046 227.664 cv
241.16 227.66 243.548 225.947 243.548 225.947 cv
243.548 225.947 246.816 223.519 247.379 223.099 cv
247.228 223.345 li
246.38 224.522 243.844 228.576 243.844 228.576 cv
243.771 228.695 243.692 228.768 243.42 228.619 cv
243.291 228.654 243.152 228.86 243.152 228.86 cv
243.186 228.997 245.335 230.344 245.335 230.344 cv
245.471 230.312 245.607 230.096 245.607 230.096 cv
245.318 229.777 245.358 229.668 245.425 229.563 cv
cp
235.359 216.415 mo
235.195 217.131 234.916 220.005 234.908 220.123 cv
234.83 220.091 li
234.619 219.908 233.24 219.312 232.945 219.183 cv
233.098 219.007 235.107 216.623 235.369 216.312 cv
235.359 216.415 li
cp
236.527 224.036 mo
237.101 215.864 li
237.162 215.364 li
237.189 215.301 237.241 215.179 237.51 215.278 cv
237.635 215.225 237.732 214.989 237.732 214.989 cv
237.678 214.862 234.896 213.68 234.896 213.68 cv
234.768 213.732 234.674 213.971 234.674 213.971 cv
234.922 214.186 234.961 214.267 234.961 214.305 cv
234.961 214.313 234.959 214.321 234.959 214.325 cv
234.955 214.325 234.588 214.786 234.588 214.786 cv
234.576 214.796 229.115 220.897 229.115 220.897 cv
228.98 221.042 228.85 221.168 228.701 221.121 cv
228.581 221.18 228.486 221.41 228.486 221.41 cv
228.541 221.536 230.738 222.469 230.738 222.469 cv
230.826 222.506 li
230.963 222.186 li
230.758 222.015 230.71 221.89 230.71 221.81 cv
230.71 221.766 230.723 221.733 230.73 221.718 cv
230.902 221.48 li
230.912 221.475 231.951 220.294 231.955 220.286 cv
231.958 220.354 234.826 221.574 234.842 221.579 cv
234.783 221.585 234.674 223.247 234.674 223.247 cv
234.67 223.255 234.627 223.528 234.627 223.528 cv
234.611 223.557 234.6 223.587 234.365 223.524 cv
234.252 223.581 234.15 223.813 234.15 223.813 cv
234.202 223.941 236.471 224.902 236.471 224.902 cv
236.6 224.851 236.702 224.616 236.702 224.616 cv
236.538 224.414 236.5 224.375 236.527 224.036 cv
cp
228.912 220.622 mo
229.061 220.664 229.24 220.548 229.24 220.548 cv
229.278 220.428 228.331 218.124 228.331 218.124 cv
228.232 218.062 228.009 218.072 228.009 218.072 cv
227.916 218.184 227.89 218.525 227.89 218.525 cv
227.89 218.532 227.465 219.004 227.465 219.004 cv
227.017 219.257 226.393 219.319 225.832 219.158 cv
224.344 218.753 223.653 217.215 224.141 215.424 cv
224.467 214.229 224.973 213.424 225.64 213.048 cv
226.174 212.743 226.838 212.697 227.61 212.912 cv
228.144 213.059 228.619 213.401 228.854 213.814 cv
228.975 214.493 li
228.936 214.731 li
229.076 214.839 li
229.209 214.833 230.925 213.054 230.925 213.054 cv
231.125 212.851 li
230.77 212.781 li
230.402 212.829 li
230.396 212.829 230.11 212.565 230.11 212.565 cv
229.752 212.203 li
229.278 211.747 228.718 211.435 228.034 211.25 cv
226.811 210.908 225.564 211.044 224.535 211.632 cv
223.42 212.266 222.613 213.397 222.205 214.897 cv
221.45 217.665 222.684 220.079 225.202 220.77 cv
226.818 221.209 227.739 220.797 228.287 220.558 cv
228.729 220.423 li
228.799 220.444 228.866 220.515 228.912 220.622 cv
cp
219.861 212.5 mo
219.992 212.477 221.617 210.436 221.617 210.436 cv
221.54 210.376 li
221.54 210.373 li
221.531 210.366 li
221.337 210.211 li
221.223 210.313 221.129 210.366 220.976 210.345 cv
220.561 210.128 li
220.092 209.848 li
219.488 209.504 218.77 209.278 217.963 209.169 cv
215.391 208.825 214.272 210.222 214.094 211.521 cv
213.83 213.503 215.695 214.186 217.195 214.739 cv
218.337 215.161 219.324 215.522 219.22 216.3 cv
218.811 217.076 li
218.445 217.354 217.813 217.437 216.938 217.321 cv
216.18 217.219 215.146 216.816 214.787 216.347 cv
214.666 215.985 li
214.689 215.75 li
214.451 215.609 li
214.317 215.638 212.941 217.718 212.941 217.718 cv
212.892 217.794 li
213.137 217.98 li
213.289 217.951 213.523 217.788 213.527 217.788 cv
213.527 217.79 214.023 218.032 214.023 218.032 cv
214.521 218.321 li
214.525 218.321 216.625 219.013 216.625 219.013 cv
218.453 219.257 219.549 218.769 220.145 218.313 cv
220.739 217.856 221.125 217.211 221.219 216.5 cv
221.516 214.267 219.577 213.562 218.021 212.99 cv
216.948 212.594 216.023 212.254 216.118 211.541 cv
216.461 210.906 li
216.723 210.709 217.101 210.641 217.588 210.709 cv
218.869 210.885 219.373 211.427 219.5 211.591 cv
219.641 211.961 li
219.604 212.145 219.581 212.264 219.581 212.264 cv
219.631 212.359 219.861 212.5 219.861 212.5 cv
cp
211.578 216.668 mo
207.412 216.668 li
207.412 216.668 207.5 214.44 207.506 214.256 cv
207.679 214.256 209.73 214.256 209.73 214.256 cv
210.16 214.256 210.219 214.321 210.246 214.466 cv
210.598 214.544 li
210.699 212.309 li
210.344 212.211 li
210.215 212.471 210.162 212.539 209.73 212.539 cv
207.412 212.539 li
207.508 210.276 li
211.326 210.376 li
211.752 210.376 211.806 210.436 211.838 210.591 cv
212.193 210.669 li
212.289 208.428 li
211.938 208.329 li
211.806 208.591 211.754 208.655 211.326 208.655 cv
204.978 208.655 li
204.879 209.011 li
205.499 209.163 205.499 209.262 205.499 209.48 cv
205.499 217.563 li
205.499 217.8 205.476 217.883 205 217.941 cv
204.913 218.29 li
211.578 218.391 li
212.012 218.391 212.061 218.455 212.096 218.633 cv
212.446 218.715 li
212.547 216.443 li
212.193 216.347 li
212.061 216.606 212.012 216.668 211.578 216.668 cv
cp
200.813 212.818 mo
200.611 213.093 200.229 213.267 199.678 213.342 cv
199.678 213.342 197.642 213.632 197.629 213.636 cv
197.638 213.632 197.642 213.6 197.642 213.539 cv
197.642 213.12 197.428 211.565 197.393 211.306 cv
197.568 211.283 199.351 211.029 199.351 211.029 cv
200.341 210.893 200.873 211.205 200.981 211.983 cv
200.813 212.818 li
cp
203.259 217.296 mo
203.064 217.005 li
203.064 217.003 201.317 214.519 201.29 214.474 cv
201.329 214.456 201.36 214.432 201.398 214.411 cv
202.579 214.031 203.15 212.988 202.951 211.558 cv
202.718 209.887 201.321 209.017 199.312 209.295 cv
194.83 209.934 li
194.748 210.043 194.783 210.298 194.783 210.298 cv
195.188 210.386 195.243 210.451 195.276 210.701 cv
196.41 218.697 li
196.437 218.958 196.398 219.028 196.145 219.112 cv
196.082 219.218 196.113 219.469 196.113 219.469 cv
196.227 219.553 198.844 219.185 198.844 219.185 cv
198.939 219.17 li
198.895 218.827 li
198.481 218.729 198.424 218.659 198.399 218.422 cv
198.399 218.422 197.95 215.266 197.946 215.235 cv
197.966 215.328 199.487 215.109 199.491 215.109 cv
199.491 215.109 li
199.491 215.195 201.293 217.724 201.293 217.724 cv
201.567 218.204 li
201.567 218.223 li
201.567 218.262 201.539 218.332 201.317 218.383 cv
201.277 218.441 201.268 218.536 201.268 218.615 cv
201.268 218.687 201.277 218.738 201.277 218.738 cv
201.387 218.823 204.04 218.453 204.04 218.453 cv
204.124 218.342 204.091 218.09 204.091 218.09 cv
203.739 218 203.623 217.845 203.259 217.296 cv
cp
193.438 216.9 mo
193.328 216.898 193.135 217.026 193.135 217.026 cv
193.109 217.17 193.275 217.479 193.275 217.479 cv
193.277 217.482 193.18 218.092 193.18 218.092 cv
192.941 218.545 192.427 218.946 191.869 219.12 cv
191.225 219.312 190.578 219.253 190 218.944 cv
189.287 218.562 188.734 217.82 188.444 216.854 cv
188.081 215.67 188.077 214.724 188.44 214.045 cv
188.732 213.493 189.255 213.108 190.043 212.87 cv
190.897 212.605 191.835 212.886 192.009 213.451 cv
192.028 213.515 li
192.13 213.703 li
192.304 213.717 li
192.411 213.644 192.925 211.213 192.925 211.213 cv
192.981 210.934 li
192.633 211.069 li
192.349 211.306 li
192.345 211.31 191.941 211.233 191.941 211.233 cv
191.468 211.119 li
190.816 210.988 190.174 211.025 189.501 211.231 cv
187.281 211.911 185.499 214.092 186.521 217.44 cv
187.359 220.188 189.696 221.574 192.201 220.81 cv
193.801 220.325 194.362 219.484 194.701 218.983 cv
195.005 218.633 li
195.071 218.612 195.161 218.641 195.271 218.703 cv
195.415 218.659 195.499 218.457 195.499 218.457 cv
195.465 218.34 193.438 216.9 193.438 216.9 cv
cp
170.479 224.94 mo
170.477 224.94 168.748 226.061 168.732 226.074 cv
168.734 226.069 168.736 226.069 168.736 226.065 cv
168.736 225.92 167.691 224.285 167.542 224.059 cv
167.693 223.959 169.205 222.974 169.205 222.974 cv
170.043 222.44 170.655 222.498 171.081 223.158 cv
171.085 223.158 171.284 223.984 171.284 223.984 cv
171.213 224.317 170.944 224.636 170.479 224.94 cv
cp
175.395 227.025 mo
175.087 226.837 li
172.415 225.297 li
172.442 225.266 172.456 225.232 172.481 225.201 cv
173.392 224.36 173.476 223.162 172.692 221.944 cv
171.771 220.525 170.145 220.327 168.444 221.43 cv
164.648 223.887 li
164.615 224.022 164.746 224.233 164.746 224.233 cv
165.159 224.144 165.237 224.184 165.37 224.391 cv
169.763 231.176 li
169.903 231.396 169.891 231.478 169.694 231.658 cv
169.68 231.784 169.821 231.998 169.821 231.998 cv
169.954 232.03 172.169 230.597 172.169 230.597 cv
172.255 230.542 li
172.06 230.243 li
171.658 230.333 171.584 230.297 171.447 230.081 cv
171.447 230.081 169.708 227.412 169.694 227.383 cv
169.753 227.452 171.038 226.625 171.042 226.621 cv
171.042 226.68 173.78 228.237 173.78 228.237 cv
174.235 228.56 li
174.24 228.566 174.248 228.582 174.248 228.603 cv
174.248 228.646 174.221 228.716 174.077 228.827 cv
174.077 228.858 li
174.077 228.987 174.194 229.172 174.194 229.172 cv
174.33 229.199 176.585 227.739 176.585 227.739 cv
176.612 227.601 176.472 227.393 176.472 227.393 cv
176.121 227.46 175.953 227.362 175.395 227.025 cv
cp
167.246 231.363 mo
167.25 231.421 167.254 231.475 167.254 231.517 cv
167.254 231.692 167.189 231.782 166.902 231.966 cv
166.902 231.966 163.427 234.215 163.411 234.225 cv
163.411 234.225 163.416 234.225 163.416 234.217 cv
163.416 234.072 162.331 232.388 162.183 232.156 cv
162.333 232.06 164.042 230.948 164.042 230.948 cv
164.402 230.717 164.484 230.737 164.598 230.846 cv
164.719 230.856 164.931 230.717 164.931 230.717 cv
164.96 230.579 163.798 228.786 163.798 228.786 cv
163.658 228.76 163.451 228.899 163.451 228.899 cv
163.458 228.963 163.462 229.011 163.462 229.056 cv
163.462 229.237 163.388 229.327 163.111 229.503 cv
163.111 229.503 161.177 230.749 161.165 230.758 cv
161.173 230.755 161.173 230.755 161.173 230.749 cv
161.173 230.593 160.027 228.831 160.022 228.821 cv
160.076 228.899 163.275 226.833 163.275 226.833 cv
163.638 226.595 163.716 226.613 163.829 226.723 cv
163.948 226.738 164.168 226.599 164.168 226.599 cv
164.196 226.462 163.033 224.669 163.033 224.669 cv
162.895 224.636 162.682 224.776 162.682 224.776 cv
162.713 225.069 162.708 225.156 162.351 225.387 cv
157.022 228.827 li
156.991 228.967 157.127 229.176 157.127 229.176 cv
157.728 228.971 157.783 229.056 157.907 229.235 cv
162.288 236.017 li
162.417 236.217 162.444 236.298 162.076 236.601 cv
162.059 236.73 162.194 236.938 162.194 236.938 cv
162.331 236.968 167.839 233.408 167.839 233.408 cv
168.202 233.176 168.276 233.2 168.397 233.334 cv
168.523 233.353 168.744 233.214 168.744 233.214 cv
168.771 233.077 167.589 231.252 167.589 231.252 cv
167.457 231.224 167.246 231.363 167.246 231.363 cv
cp
157.24 238.827 mo
157.24 238.827 154.236 232.251 154.223 232.217 cv
154.268 232.294 156.152 231.439 156.152 231.439 cv
156.519 231.271 156.604 231.282 156.761 231.525 cv
156.881 231.56 157.113 231.455 157.113 231.455 cv
157.162 231.325 156.225 229.267 156.225 229.267 cv
156.094 229.217 155.861 229.321 155.861 229.321 cv
155.85 229.629 155.809 229.705 155.438 229.877 cv
149.838 232.422 li
149.444 232.604 149.368 232.566 149.261 232.414 cv
149.142 232.384 148.914 232.488 148.914 232.488 cv
148.865 232.617 149.799 234.681 149.799 234.681 cv
149.928 234.731 150.164 234.624 150.164 234.624 cv
150.16 234.567 150.156 234.518 150.156 234.474 cv
150.156 234.205 150.238 234.128 150.548 233.986 cv
150.55 233.986 152.516 233.089 152.524 233.087 cv
152.524 233.087 152.524 233.087 152.524 233.093 cv
152.524 233.315 155.407 239.66 155.407 239.66 cv
155.452 239.753 155.476 239.823 155.476 239.883 cv
155.476 239.977 155.419 240.034 155.312 240.114 cv
155.31 240.128 155.306 240.148 155.306 240.166 cv
155.306 240.292 155.383 240.47 155.383 240.47 cv
155.517 240.521 157.886 239.438 157.886 239.438 cv
157.978 239.394 li
157.826 239.072 li
157.412 239.104 157.342 239.054 157.24 238.827 cv
cp
145.912 237.259 mo
144.761 237.249 143.772 237.239 143.622 236.534 cv
143.49 235.889 143.88 235.428 144.73 235.245 cv
146.16 234.943 147.016 235.404 147.088 235.74 cv
147.088 235.742 147.121 235.958 147.121 235.958 cv
147.211 236.124 147.484 236.175 147.484 236.175 cv
147.598 236.111 148.444 233.638 148.444 233.638 cv
148.559 233.3 li
148.103 233.515 li
147.804 233.767 li
147.342 233.701 li
146.806 233.596 li
146.125 233.474 145.368 233.499 144.559 233.669 cv
142.015 234.215 141.434 235.91 141.707 237.197 cv
142.12 239.146 144.11 239.17 145.709 239.187 cv
146.933 239.202 147.985 239.213 148.149 239.979 cv
148.149 239.984 148.026 240.849 148.026 240.849 cv
147.776 241.234 147.211 241.523 146.343 241.711 cv
145.588 241.866 144.473 241.833 143.978 241.508 cv
143.747 241.215 li
143.688 240.979 li
143.419 240.924 li
143.302 240.995 142.701 243.419 142.701 243.419 cv
142.701 243.419 142.764 243.43 142.799 243.437 cv
142.799 243.442 li
142.996 243.517 li
143.01 243.493 143.02 243.495 143.033 243.474 cv
143.064 243.478 143.127 243.487 143.127 243.487 cv
143.185 243.376 143.223 243.313 143.268 243.307 cv
143.27 243.302 143.841 243.357 143.841 243.357 cv
144.398 243.461 li
144.402 243.461 146.604 243.411 146.604 243.411 cv
149.45 242.806 150.414 240.957 150.104 239.494 cv
149.636 237.288 147.568 237.273 145.912 237.259 cv
cp
137.391 242.062 mo
136.973 242.455 136.425 242.643 135.766 242.621 cv
134.2 242.571 133.375 241.387 133.439 239.294 cv
133.476 238.105 133.798 237.203 134.363 236.678 cv
134.775 236.29 135.321 236.103 135.976 236.128 cv
136.636 236.149 137.17 236.37 137.56 236.786 cv
138.087 237.351 138.344 238.273 138.305 239.451 cv
138.271 240.632 137.954 241.534 137.391 242.062 cv
cp
136.035 234.408 mo
134.822 234.37 133.757 234.747 132.947 235.503 cv
132.022 236.372 131.482 237.694 131.434 239.228 cv
131.334 242.197 133.055 244.247 135.709 244.337 cv
136.921 244.377 137.985 244 138.793 243.244 cv
139.722 242.376 140.26 241.053 140.311 239.52 cv
140.361 237.984 139.908 236.628 139.039 235.698 cv
138.284 234.896 137.244 234.451 136.035 234.408 cv
cp
126.903 237.392 mo
126.903 237.392 125.222 237.145 125.204 237.143 cv
125.294 237.133 125.598 235.111 125.639 234.839 cv
125.813 234.865 127.244 235.079 127.244 235.079 cv
127.964 235.182 128.395 235.366 128.607 235.647 cv
128.752 236.486 li
128.625 237.329 128.124 237.575 126.903 237.392 cv
cp
127.812 233.428 mo
123.528 232.797 li
123.419 232.879 123.382 233.124 123.382 233.124 cv
123.794 233.334 123.815 233.428 123.784 233.664 cv
122.6 241.661 li
122.565 241.896 122.522 241.977 122.167 241.967 cv
122.065 242.054 122.028 242.31 122.028 242.31 cv
122.11 242.422 124.837 242.822 124.837 242.822 cv
124.933 242.839 li
124.987 242.486 li
124.656 242.32 124.58 242.232 124.58 242.081 cv
124.58 242.042 124.582 242.001 124.59 241.954 cv
124.59 241.954 125.058 238.796 125.06 238.771 cv
125.069 238.862 126.973 239.143 126.973 239.143 cv
129.435 239.51 130.531 238.162 130.741 236.778 cv
130.94 235.395 130.279 233.787 127.812 233.428 cv
cp
158.832 223.703 mo
170.894 215.938 li
185.505 206.646 201.219 202.972 217.6 205.02 cv
227.05 206.241 236.061 209.449 245.143 214.827 cv
252.902 219.684 li
260.846 224.854 li
268.464 230.031 277.732 232.099 286.946 230.673 cv
290.666 229.855 294.818 228.884 297.615 225.51 cv
297.779 226.348 300.803 241.988 300.803 241.988 cv
300.357 244.156 297.98 245.219 296.07 246.073 cv
295.588 246.29 li
281.748 250.886 264.955 248.135 251.779 239.101 cv
251.777 239.097 239.812 231.24 239.812 231.24 cv
227.367 223.213 212.485 220.327 197.896 223.114 cv
190.742 224.482 183.739 227.489 175.852 232.581 cv
164.813 239.744 li
154.014 246.649 141.354 249.328 129.166 247.29 cv
125.432 246.569 121.566 245.827 118.611 243.098 cv
118.009 242.447 117.701 241.862 117.625 241.215 cv
117.634 241.215 120.501 226.918 120.911 224.874 cv
124.929 229.301 130.733 230.269 136.458 230.579 cv
143.868 230.941 150.976 228.756 158.832 223.703 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Bedovian) ()%%Title: (UOM-Rev_S_PMS.eps)%%CreationDate: 7/18/08 4:16 PM%AI9_DataStream%Gb!R&k?9Xo[OD(0!;D!EZWK4q,aqOakCA**.fp?0Xkl:f[@]0cW'hA#KKa2=n*-`uFk!K17h2j<M+ju-XO`l5RF],OEPmU9CU+p]%"Z*kF#t?J.32g36\t2A_eM'Qf.4L+N%aC!/DT_%*U`i;b]U*D6qEMB"YLI8dC>Ed9eS'*:WE:?mW4j&4NEW%+q'l'tH;["qr(7l4%GKZVd<1Nk]_2$9-UL1-g)WaSnHM@T']D+X@-,3g<H9IWr2\d,L6Y?5O?L*B+(gebh:Tr&=o5VlOin7mVQT_lDG-lgeirUb\0#0]7%)"<,u*V]j;Ds?edp0$kX3os\]eU1]#PJ4'qZlA+5NGOqll:EkIY"0c7j8=P;KtSVr7+a^k1?5AX`RdPH5.,U>p/es$Y>kFq>cBZ/%XmR"]YYr/$[kuq*?.T#\p.dKq\=lG-HI6Z\3nMW&O7#j@d%mk9[&UM<9[.mmcm[p,$KOF6r<rYQ#$9p3B<;D`ct`2mSU^eDHZ\!A%.@1":FmK.Sg9p'Cl\<W,>nt>g@c1:$RLqIZCF"mUS1;I"Q&R,R&OkCs^5al<??Op#&fgRIVuBh;VM(`nQnlCE1h91>7>_QOSU/gU%#0BEYMPeB^_>1-&&(m]<,n\5]%*S,4C/),@;0pKYfY%SXo&LEqO`+:,XWKY75f#hmcFjNTd:dsVB@cP4$,#,5dhS"[?VanQ)NG=(%N1H+Z`bVR$LI_64<kj(8r+O'8dacoq/RBq$^>bPMX]b$D`u0j8)5hBQZrm@/7UaDZ]tHP8^T.hgc"Ht@rD0QDK9mIkrp@!un(#9:%\uagJFlJfa^\\b\C:+u2r7m@7BehAn@f-1c0hUM\k#mo9o\`9AJTi@^PlJ<lTQT`0nF43'pM@CfW.0!5mB:iTDZHEmek#Gd#_N/;%GA?jKjA5bn"LS+(kIoEEGCOFFF?iI[:9Ru<e1Udhp1chN^#`uN+T<A87\KS>?aWA(m?j[Q.6"<tgN'2TXD9qqO*\,>'LM$:hT",B%)[1KanuLQKOm2SR$Dccp">k"\S)mD8^o]5Or;cfu5BF.V$F;cn?\'pm=l9)PE1T&[$RU:Riii*#"-eFtj(@Ua:%Ce:'jH!;XY0>e%^$"MP`bG7H(12u:>h22'f6@rPIMUu7mMgVeLiFkg*4'58h;@_B&cD2)5lZ]lnWWb.ZOj;Ao^3oX''687gRpX6)2iFKYja<6+KWYU%?K`;#jT\8I)OX"X4Vji,i0:gX!VN3eM%*Hs!;u;Q=2BHS8f;DVHig'ZHP,Duh!9NFP6U';Y:.afPhN@2s,V`),7cK$F#I+&9'+4/%E\-al_>a]R^q].Lgqn*pDu04a8b!LZ,i=BHnYLa81n*oY*B8;Arnd+o5Z4dodr_KdrdWD9'`*$\WdN>9eP<5<gIUjo6eE:B.K8Q0%NP#@c/hJolYCDg!h+]#l9B[C<$Wkflb)JT'MstUL]-\(7D8p29FoD!JFEa1UAhCm>1g615=uFIJn<Rkiflb![M%(k&=;r@f.);`k%&`N%s[[tq;:Uh(td%-!"rd+CR;2^&$Tr7`/-M.YMPlE11s51c6;L_,A*&`e:b5WG&VRg?gF\q3$M+'kRJ"/-!0)n@=q>UP^G!H!!%?S%3:_dq,2e1:RRH*JR88_MVDpr5b)g^%6P=0;Jt'ns6#QN()GX@Q`s#dP;UY(,!&]rrj-@L`@DX5Z>6O@B+0&h3gX(LoQ'6^I=f%Pi_iAT3`##>,KggZAeNY%lBkemA!1Bc;@V"ps+A?pa:IXZISDCC*\E&+.*!MV>eqBpo3r/<D\GtSVK5a4Q`Zfrt#@G*0&(`O!h>M%^&JbT6ScuJDUO<7(q89>,SC]%&WU$B?L$%O[9hWH[mWMiCI,^-r53:&.<g-HcMCnU9!?d%^R#o$B#RD1Sl[D$H95GIU!EK&Gc16A%1[>O#UQ*aer)JZari1+pkdY%S#QZTcqRoA3=c<#hs6`<kg$Noch_h$D`Alc,GTA]JgoJEO0r@9H,@o6&^j08_d#=UH\mOt8Z7GVJ%+YG^o#n65#]*UAXbU<B]h5Jt*(0mE&om:Oh0YDbS3[llAl]dmpFr<!>ni-2FYK"3Is'b)cWN*$\g6Oh6pK"h'KsPL/=c0H/Iak6e%SJk"E<Dk(e\?4iU2RM]sh0-=*,BU4l9@7kn-&uP<J2QkE[GEFKf,OD>hq"cH!Z7T#@_)<f07VR4V,j'-SQB.>)F)>e\Q\Z6_G@`>%m/`IkFbYo;5LF5XSn,IL+L%Z%`<"DBnT;OtZI#@)J8Su3?#BbqGO%Kl7bL6K0lXc&fA[Q>QaOh!\Hc>:CfSUeA/\bEgeW`/D.1(\%k:l(8l$Rl4Fr-1]+2Qf6>+KE13]Ni.`bDL:H7V+DghbYk,@5:$f$ioIi(#Un.E,_.LG;:()NhI2jD\8Ai@^W?::Ch!2Pk&oEC9P7%`l105N.n^sn!'kq6p$A#:ep$oIM]np0,9Va@2oba,.R#g.>k4JQS,'$!Grgh$%m*@(`0o.Eae-;d:SM"M`)Z"\*.&TgD,<fY':T:%_[ThZgAo**e4:+Qr?H*#[d3W*aXZ\8+E+CB<?/ZR=Yj88(t,csr;dY-d>U2AFu??sl3=U6MDF'oB>\o)PH88':9jnhE3tqE(1XA3%pbK3fa0o&(;.aKGWfL@XEj06]g]"8Hn^4K3_O>muRLO)pT@Q)?A[hZl/A"j^hhL27hjHYLg9C6IDq#u<.sKn:]q9=lGZ3=n1T7Yh%[&u5Ha\&T?bdH&>[sCE=MCgD,r8&i'^5')_<0OEo&oPc[@D`W611.0/s1$%B[h[lr6i1VJrd6(ZTa%JP'[932MWa]1%qu@ig8jtL%dn*0302>tTTJL,1%c9\47,*7+p#\apUfk_Mp^Lq0K`-8.diF&'U`jPNXU;T+T\]s6/HUsZej7.b>!%RC$Z,f@mX067Z]<DbRWX:l%N`ekcm9r-[BCaI:-**#KkG-QI7TSno'"&UMeaDoOmO!KDU".VFV@M9<d.6)]AB.@>7(2s"r/AK<TH3&)[Pd1pC@$,n((9Q8;se\_%Zmtq>3,-Aa^$`+1"SPP]H?^AU#T9Ztr@&U1L/#L=&h'rRY19AU&tga_93XdpO]!g7&L=,d0%(YKQ.Un[N5PE/ap?U`I(;Bi(W5B&%R/CT;kaYeF^DoECs&NF04)2F3cusmJ(Fe04]2AAc(f>":9!^Tq-_X6FN(<:]#irU'b^9_26[2lRs6ai4jYpbn:0^<KgSW_TkGsdE%fgqn3=03&s&@?\cULH?M(H$!#+HudC[VfVlT\))V[qUZ>rlTW2rWeM.n#K]qF_]_UgnIMgL!;&g5@jn`Ph3t;bK)q!)9NOqmE-"!%9cA,//=eVrp*3^YT(dt<0'/N"An;e]+H=OgAuca%b/m[C/O'U]ib@7)DHlp'TOE(&+?Jj9*hVA@2=>6bL=gI]S.AUQi/jQu&-/2B%^[#a`F.5Ph>\qslEp@a^3,iMT9/IR1]pdhZ*jsiZ))GYF?$kMAO0jUR)`J!\`QhJ*kK2[^B`8upc_&07&FP507].oGLPLVQK79kg%BUMuYdFRLT]$#<(\`9I-7q)3u9(2^j?C$i3ZaUtR<Yh^)[8`klrnKU=mA]SUln9,d<Z_JUCj#L7I7')74Z.Y-<OgaU[@^1\62Pq`%-+;C^$8'[DN47J7?hU[id`qO4/ph6opEtB:S"K"gG08).`m(.MbhL6b3ka)YT/Uu5)^@:CmH8QDK;WA1e`tG'4/$cXq=E.mYF\E7%&kbW[ap8[6IS[/T:QP40c0gU3Y]ZEdZlYI$=<cXJH4Y*-L&7pfG'^d[2kQZ7nl?\63*=L!o@n2oA:O&/XZsMUC\M\N<*2,pCU!=Y%l%Rn_HWa$L*VK7e/=)sUj1FCooQ/O.--s<63ZTMJ(F3k+]m$f-3DZ-&6E+3lmOa[pCX8mt)/W*:Ac99Lp,\bhmM3rim8+AGs.o#+%g<<f4CU$:Z..hDQQe(n_G$\BU<G/V\B?JeNl=tJ=6Mp%1$f.q\>Vr;-Sc+r[V(6[a?oBr5EhdF:/&q&?+8Bo&=f<t.kM1\RFe2C#%cH2`0A+!da?2[2d*PNeI#CW")/Hu]beW9G<IY5WQS^,g1;Pu#l3dtl3)C=oFR?^Z#IY2e[f1sm!#$&F(b)?">12&3nYZ>?2Bm!)F%4SKk<[d^$8?+1bA^HmQ?k'53jcr^@(e`Q"`S`O_g%9Dn(KYkdoV>m4c1Kt7HdHd(dT_euB'c@^"IrL%:LRkJ)18q^GIa>W%osXJA%h^RQXRtG@bF>#j:`+9d-IE`fI7\Qb['JaL,V8YmLTW7k[g(#%n[Ia=H]F#KtYH6uBGqkWS%*MI]p['/<d"?UhC%KGrd&i`!mbCn2%_D<TZ(cq#/G'W7prhns=kiub)[1b6mqR*X+Y]o4oW,dA@'MRI"E6N7&Z\;2'ro-F/o,CXW4?jV`#1_iKhp%@dB2BG!%pKhCfA:EC%#Mg3EMmXl0hKO<nF)/C(d/3J^ch?du.bd`R8ulG#l+>kWlbf#beCR,/FDG:2K3Cp[.'H8tW3G\qC%:_elku%H_Ub`:<spZIKB@iN%Q"SQqd)4bjhOi*XL$t\$Ru9$uV>j`,\`;D?/-HCX\1V%#0$jA)H@/ONI=,.'Z3Q@8*5gVa2Eq9K^&0p@HOh$:?ar+6DtsoIPS:=?%F^]3(gNTbYmA&@M6#U*(B6upsSdDm<a#SKC=Gp\APF_X;bPCb9n"A!>hhQc8rjc+2Kn)I]J6NB,h8[&+>#51*J'L_Tp)WeuE4m,K%BI@f13b&\X;Tq_5f0[4NF6#E]EOn=qZhM,(LI($tQY?6!qC<NW?!d499e<RI:b8f3@AUr6V$$HqMo+4@.ZK)KGQrk>s86o7YAJLh%mC!e=fq?%7<B(fh>%aGLO3;Xlbe88bAqb#kme+j6%_=U?P7H4?9".47TWhpq#I><hG#pe4pTVNB[W4tdNBEiU*kMZJmrZ_@9cQ"M%?"kZlCN8^c!02=n\b[\m,gC5l4R(PWfiIM-MTXFPq,MK3l/6mHV3UUu8gL]gE.9M>g]Y=h,ojQDqLMFnp#["kT#(dbXC`-)>7.c&%2;Rk/1W3?Yn*[[DIG4Uf]aK4fQOZqip="TA2l)^s\%oJ4YO]kGi7#'?n5/Y%b&j$1C3*G`I(T0&p9>M1oPCu,ILu"u3*8/m]'f,0%qcNbR4`=]2f"$,'+jQst:Z%3cRt4@REi\(<qrtnVh'Uu;Acgl(IEJCp"/!:R?M&NXVejEQoLeM'^ph'sUs+,Be"?*Gc:cM_fW+O;%e_7:Ek=:]@Eu4VYdX8e\#!H7Z=ZCe4$/Vq@I/;p;(ARTcZo]cB4\a6no?4,K*E*K%r:UJ)F_YX>6dr);kM9G;1n3:k4M?'q?V*>O%.VfjA:sQ$pQX*t?Jo97W^H?-n^TLm!NEUXTa#o_Zbdq(hf(*])'k$`Xn+LW_XtS7*=,C.uU=**j<@)#?4=4)bXmW.t"1tkoGuu>>%/gVDlVhCJ_X;l/91MaOZgR5I=Qckf)fBUo1dc5?iIk(O,IV3<EO'gF'U[\7=I4ekF0^J'T=Jr9>D-f.cck9]JB"2.BC_U3&:Z]:7%[Q'a<>+JUfdM@;[XkX;Wl(!^>^G;/,*uZo>Y^j-1Cp?hQeX,(3<DMC10q+#B:c+ckXt4Dq2WNAss1BH9hq.T0)tiUmA['+2#L)V)%Dm_/$SkEFnIEt7skI8n!G%i=*>KJ7k"nk-0n]d,T9b&o21Hht],"rNLZLnKe"8bbRF3']@l(Oq#Dn^Op2`SAFQb^_:c>QKsIn#DQ%^&@oT]f!?:](LE`luQRXp7O*sd$5O6X)rF@+OJmMm;1@!qE\D\gi$GiL39@E5=apr=@@UD&O,@0gW)jU4Wf>0;Rq::Zt%$f$Lb&3%Bu`9jc_J&?c7U;_7^TQO4*DZqNAVC'c2A?^+%HP8dt(;oiNL355qd,91EPbmI]p^'TeA$bk_m6n07Ym;GC-;UU<NHgeN\CaZ[KBn%<U\c&5$d>Q=/sC7RCISOYl61<IIT,@870\[Q_88*2LX8GknN^.`<Odl:Fj2\4,&-=#R[]C,jr"VBtn2X8d\gP:L(LIf;p'TcrEYI%/feCIiG#]:MDq[R(/OY-T#tV1bWL=9Or)_c[_F]mf'0o$17;nE[$RebHWrT!3Q`bW,GH+3(d$mZFU>G&KnOF7g0\8d/G8^@8i^FO%@g/]_[W_o7Ho5Q=+LCT<b9a53(M!]n(5#aofQIiO@P*B/e35]mq^uE';jW/_>5EYkF_<(o?pE4;a>1?N!cpADq+@t6cUpJI%peMJ%Q$1&H3_.IFQLHsfH`_Cd]1_t[81VY$CiUo#4ZU]gUsiP<REe+&aed9YaQ/F4-U3F3Q/Rpbfe]+](3bI">h,N*ZZ@`B9,a>S@h.mr%Ro/p_PbRg0GI/rA-1e$"WE\5+5ZMW/M-5j?6<-!C'++43=m#,@]d)C]qt<Q;2AGU`@X3Fm^b\!o6Sds!?uiGWZ3Zt*/.l<:;WbeX%RUGU<:-UsU@Fb*[(7'HmHFHsmDj[B[gDb82pM7[7YY@+cP]H],ng.'C(HK6?-fu1-40_YT9<F<uN+e"lh1o\7:H((\Mi8sPb9T<p%G<&pT6/_Crq9@sZnB''"[8M$r(aSHQg^'.RH%SP5=b#Gc5@._ae9?>O<Qe"'E9GWk^E#M7=O]ng-U@s2.Ifu\aa$+9I1eY@6J^(d%-4%$9o`i;bMoNoG]m\f0gY%)F%O7UPF,(H6Ze4f1F03[=-/BX*%]e?WDn\jrIImB<KV;8b1/c5e"iU#Fhe(5K_MA8i4F>Zj@fW_2%7Bj0pei6[H$MFQ5W*GFUqjHIm["1Hoj@HYr'1_363t[86Fj:)q=TS'XqC_M1ZMW[&J)hZMPCZ>5VOUrr.]8*Eho5Y/$rVAf'qTj/%Z%>JZ4+-'BgU6sJis0)L7ts7_r\f)OeAq9&ZOXioMID]ilXSga"FY(r0m"X^V<7.&l+8taYnOc#%FI:HIBemA\u.JO-C4GLQ[KtO%1>5%(Z(r%C_JuN+&lgL#J_^`*#[B!C^5YDoq_t2Q)/!QdKZ/t(Qs"PRIG/mD`+5Y'VgqOHJ^U4HT89ZZatnAH/PX>5%gFr=:S.6&%IY6_7JOc<Zdi[1,Otq5]Y<;DTa^_bOl`2O$5@7`fEN%^PgC)qAk3dRS.S>F>jQF@PF:GN_L<EZ4aBi=4q^#XVmUm=_hCP&=CQ_gl%iMJQAD>cIpDl5*b(X)V>15dHkVGtokql%EM:m5PrS?=7e>=^rH*?2LWd\$e+hA/t)MeHl]D*1?&4rDR*!Y!2o9m;ib_N%`8/Z&-,%RABK1IEuH=oRh>Tq"Qec,9u8grYuD4A7'*i;f@%pjl&2eZ66`)mf(MO,#af"8'5gPTOQ+K&d@t$NPsoh7sC:3^Lcp,(.P%O5gu1C%QTp8rm`j;(kbm]qVYd3^dJ]A^/'[a]3k&Q1V`22./'r3+VAHC@N3INM\J7b2",V*4iQePkSietq+9-`_1XNZYc^SdT/eCZDE,YQU%5WkVYC5G"L)6q+6-d0i`+R:&g\]&AqGs7Mc8mhTe7WE>E*-n&YK_'u0[sSbNBI)cl&FBOZn^m*8)9]S`Es+H<mbWiZ8\upuJQ$UY%j=$31e%+T4oNIGV,OX$N^FRG_YAEclS::7WCloRs-Fr_hP>In"04N.UW?8^'T\)a2=Nj!RpF"#B@l2C?_tJXcJ[V18^lX:>/k0*A%1VVr4dgk4)(g0dWEh)""hHl5`/`2j1#U9XZhoqa_@*$'WVA-Q3K,4EQ;i2k`kV+nMlp(G<N@'<Q.Y8f4$:NCZI5T[;:iCG$*Sf5]%@gSl^A#A<rOS,3!*gaMhejq"9m3)LYD(<SZo26RK`,+MnY3fYppYD[,g)LqI$&CBa<]YODacWX^?L(pr'0dH[ECtK.fA:36(u,8k%=WUP.#M']LGa?ORdtoBe0b1&;d5L;8[IiDM>`C'R4ZbR#+p[L;:isiM7=P%A$r+Mm/t7;`BY^M[eL?@N"AuS76nDHU3DR?#+@V88%3r?7lAWU5ka,NZ:o\8S3!k5`sCo_JXK-#qIId^#qE6.u/m+C/o0_qU-5llI0.67fX^P<']160hEJcbG7'HFq2^/C#>\S2NL(WMRj%SkL-]87Ft#i9iY+RM1U"Q9I$]d24jL/+FHX#9=03DO-XI]RJ%d,4D>J!B/ue?S!q=7mCnE*Cdp?D*JXS2hNLd%h?8j7"L0=U2L&;%J)?it<roSIlY7Ks9Q@3,IPtFQMo)XbgJLO%(5A/Vk0,*R"etVGh+Ypk+ZSUO_X@2J6nJiD=W<3NK5Ilp?i!I+Vq9P8@.2_^Jd.g.%!P231M7E]]MiY[U%%nG3C.?8m"BBJ7G%GiA-;MM3X&H%R7PIq6nFP[Da#$m\.tnuocdq6V5q5[F[_WTJ%5jYT`7aeh#"t2n5!7#P%W!_[+e_lbPfT\;;D6S7/59s/RZc(56O\Oj[3H'u3jPu>(dU7P-a23Zm[Bp_5F+DQ=6_n<F0`hs%G(u4M``HquHSEe+E\f*S(4.%D%FT[!_l]5RB^NQJ!hANVsQB[J)aO.pf*6EC=MN/-Sk3`\;.c^J,])dg#;e=NMngk$kbDm\JGt:E"+m<oZ!$E1[qU/1u\K4F3RCef'%7"$Tn%D?s1d#_Te>i<UeO5nVa+B?/Qj?/Aq6\*:__,1:eO_Df`*@F1dEl\GSf97GH>U2OH&fTb,*h6A8*,[SOK)R;>)P8K.%GA/0%;Xl7:^/=\t2_43r[+a`9fZ<!^:W[tDQ/hkDZ`j>I:&1(0S5h9+pKe2.4/Ml37W1"c\D#L%aV@jeL\t0c?pZ$+8QN.Mbf90&XQ9G\%17-K,]7lZ<bOnk==(g>r27&Hn&;9K+6EZKRc/I2P-!^%9@7An4bWhYda%Sk8=LQ:7W,NO@]>30`*lCT_[q6\VeFaaCWKLWI/B'>6%NTBA:jm9q&Z/DqJQ,M6I/%i%ZN_Ia@km]7,Y&6WW42/k-#>PcS`@<rESCLEXiR<.3<"ls[DE9@hD>%9raZiaRX.CQ*qpkO=Hr.HO%dX;ZQ<H>/tW%64HJ*2;&LNh>6^PU(ZcJYetDHGP@?+FaO$g$m'ZoPd4kp9l&Z\9JM_N*UJ9,fhY@@cf3CD#\D9AjY\?X_]=H@?[(%Z^I^Om5f@0N76gV.%T`gY@%+`i]O[(ZDs#LmFPe]$'qn.eXqt1Up%K(J!psU_d%!/7"8S7GA!\2VgdU\3YdQAB=:hEXi.D?TU^N#%n2ao/X!VE%*sWaM_U@E!*J*bI6*;;0(Y6"rEXV?AJXQYs5DImIV'Z?1$9m,Rk<jWTV1hr@D1YQW_dpa)K-'gG;TB'rO_Z<r5G+iT%)p^sR&+T+)TIZV&0snMMC5kSpTc^hV2M+Pfo1@2_Z;P&567uG!8&T9!0E$Q:W1oRqXXJJ1Ms?Y&3Wc`Y.cbPB%P<S^di5Oi`hP%(%-(p'=^l$cn?]%a1mGj?!nao:7eSp!fhmQY(mo4^[f#82lFh]iMB&".f/.nFcNF+hbkD_RhLSnE@m*()&5J]+VHJ"Vj44K<P;=uWL%pHA2ee#j`5RLq9^lJ^^T[aV5t7R+X`!+a7&_]F/seIPHfH8n$f1D7SS$r;hhZD"!bhfh(qL:'C)^psS=hh'ba%"[/K(Ja`G(mSQa%W!2'GHh7V*s/D/4G-puKo@X#sh;d+K<VLLRL/frr:i0L%HgLQ&Nnjq%qXd7WOL1fcnFYR)lhESW:1-a83i`]Aju^2Z>YJ!ql7(j?%4#Y2H%!^_/Y_:Y<Oerqg&1;F;"52qQ*r*iL<A0h=1t]lo(KftcN[0W]/j8D1T+$p%#-t6uhEXU1fRBX^CIZuB.i(+Y/`m_eO>;%S%Bg4\M`5FkN,#eS4e&FT_r!ppu'9[S%J+1/-Ofg2?W9/n<3)"RV(q">8F/+bFD:ld\_i@t*c<'s%fRqR&g7XsBXO8+[!f5WmZ^8M/%Y_Lh?_>Qd#)0Y[^7BG;C7(RagF>eT1Og4a#Q9/LK&g`hXX^'L'Q<edb<h>K';S<CF<3cFA<$/o4)%]Bp?-84U,=ukIlthoTpSaY]%n#mFcZ;RL@V>NRne_&WBlhT@P15,601[tDaNl1pBAc5"c_B)S]]MD+FmX>TZ/l&WfIX0rsdW`d@L#`mBEgS<-#Q&,g7<*q%o;Plr%]T/)M'h\sOX*?aG$.,=[*0l2<#RO#&iXE"oK#n2J/rj'.3bBGI2k"^H=6)S@NM(OG\*`0W@Y,$/,<qV;/"`G-C=3fDH7h^]hN/>4%95n4/>,<Cm[F)>LT4blia`[>=0b^,b)3J0JY?0na<5gj?^*AeV5S`J'=h@&B20HViW*PABg2.oB-eHFGlf1RXeU?=Dl?m49K\_/-%3QZFAg&s1-Lu]IPRrCJ1EckF67jou0\[8S8<,TpepFV^\rC!T/Me8O;?.'SIIO*VQX%a$u"s$',`WF[i[*!/*+en-4U^LV9nMG"W%&]`%t;/5X<1XRiX$.nS/NETsWl9-+An#%KQFiMn1(ggU=%_!^Q22$;3ng-m\-PdX3BZD9m`cs+Ef5[%0B#._@\G9Tuq^o)*GeE?N%K22GBD'eHf$I0[pC9Wh,YfDQY19a9`N<W$Eh'O']9DE>rFl9[A,DYAo@ISAR7KuJ;rT4$c97nJ0pa.I"p8g*:pd[r/-aAi/QNi6!%PuB+@p(R^dh9\>tBs8t`N`>fbPQlL2,?8I,0+IXA81^dLF#/ZUj36r,1QQJu6Y'J8gA*G,d\474lV<_lC0,=Re!M"@Uc*?6?3Por%TbTqi<:bk13g&i0_.8jg8e`:iWn^:s[6X&M,=N58]R$X^"MVVi(eH!\Q;\I5jk5QRgn*_@Rj2LNKuK0/*Ya!Gh&,mIiEG,kI46DC%e0BLa]s3P2i3#d%IuL&>'FO_/'djd@:.5;LC1SJ_6bm!STpmpV7i&s["3u3VZOg+>HN^S1[qoCI_aO!0B68?M_[GWfpq&3llmsRn%8C)A7G];i0q*&\WX?W&"(6i_TffjcM7'P!HOn/]0Aj#LHP^Y?,=E*>kfC00W?ueiR0,b8jM?P*?0HNMT5<P:]gZ.dMap.^;5,HWm%:oorko!+tJ%FGMPalnac'g,q7n$FV2Vcji%<td])A\CmBbp8SIdAqko<RsrL($o!84IsW@B3"GsQ1`%qJd6p%G"o1UZP]Ge\?hMc%d&rBk<Pa,A_6LqcX+L:bJpkB,4(2-n?VPKmYPjJ`($mk>:IXO_We11aJn[]m1ol6,MEbTLY6t!(#q"PVSSD0/?VN6'@&I*A*4TKW%XU=d&#p.a(M5u7,C4a?HD"O`8^RF(_@bOhuIPnsM+(e\V_1"8X+CD!N($q9jmr+%Y;AJPbY;M2$2Z>(Y""I1rW!XU0$7mE?T$l\"%_*Rg#9t)Ts[$\hB<Pa,iiOMXk.QC$PcfA*BIbVlU$Ic$_p7!'%ZK1YXK)KG9ULZ]O<YZUC#s"9N@)$Q"eV_5P7B&WDPW&_b5"BHE%nDo_4Mass&T#):a,?Tl/0rg.%O/;Vs8B1H`Yn,:DID8rLdC4t-g]]k:[tu?cCcq6sM&fOcYqX5/WHIjeiXd35DftU6[D`V[Cnbh]%O)a&G89OId[De8LHQot2Jnp9]=W+oaGkB^!kBD0G<Ypg'><MbaZdo$%CQ"#cDT(gL\*Su-3O4q_X,BKO/b]"O>\J9MkdABl^0U(!%WR0T/iL-37mROB3*kf#7cEs5-6b";N*4(etW\,?@\Uh#]+k=Q,1Ge_fnWBi08$=N<rN>?4)]5Q_3-mH.[-Ae6%HQ2=UJr%j?<^+`%0;DM`#Bo5_`Ho-PUK%[+I7?,r[[9Mt7]S-_]scQXX#&1:M+=KrT!7W?@Vp+$BS=aI\p3l#pjU%uXD6U#[DfS0,^OV'KGE8S/`+lj%Mn+%RPj2]o0"qf`Y^He;o!&H9mmK%UI_NPS@bYm<P^R9ZQgt5;o1W>_4JcuILX[`aZNh^S9T<&I**ajTbo10.>_V^+D'Rn\iZbqt%eL6WNoE)e!4foW6;C=Y)V**/6q.LqFp[o!K[TWh"`kJY&.I*d5lYI(H913adN`k]7;jI%ee2jdfAj]:fep/Oee_%:TpA4+ohW`WQ%:R"!Z\^oH*;@p=-7]j"&ko?u-AZT'JHX?%si.%QR3P6PY)R[kc<25L]lg1*$4S;ljHZG<tO"[TcH))A8.?H'>nbk8Oc@15cl.7tO%HnT2+[EeKY5TBaDC7T4lIGi;f;lk,M,O:PCLH!)*Ds!u_q4FX/*ZhST<ir]6kr`sEDb.":gI(O-eN*q7E_X*qGrj_9XO_[h%+T?4%SS\J#EL;6Of%G4#`[l*drEABWe":N[ZX)f8Xbq24>%`2W*VEl?YB?GVh&YI^cF-B:`V9Cp>%cSn*6>OZ@]ctDr+5`4c6HI`A(NaP%g6M\+Xn+BLdemjNK?Bo4I?SHj>%_b;s$'HJ*&TK,=fo#Y<qo+lJ#_'[65AYtC7XaW`r<eXB><p):;>A*)IG*<7FqkAEq+68a*PY;%`>RgF)lqP8W(1iB[E`rlo9?rji*5M0em3#8f/hXf38f7QWRNu`.j]C-r'Rm;6[VL)XECtVgXd41;Q[92koB6Uag#TOD7#+Hqj`/<%F$tQsr2o/(CRq"VMZ6q`Zd%(6pK^J!f%I3J*d[YreiMRaNH[U:Zs%+?YOA*aFnU`M:VYK6NZNr>r0,VkgPLg3Vt?&"3r@E`rr][S%G+?sgpSVBaD"m,_-r.2$frfE,ZhGiHFUl.KC7;QU[Vdtt20nqJ-`M7^7c435>3@"kH+LE/G(5NGQ*G(p#<@b#pQ&ej<pRCK-75^-%*a[A:92)7dH$E=Fd`XK4ROrpXSQou'Fj7h)RU_3=e27c-g`*>+.Ws"RX.%jOa;r$uH$E>1i&??[XD8k80Dq^:FR#<M=#IU*hT)g8%*a[AZj=AG!eMW-LfQ?DILVIGNl$K_Ik2EMkHPIm2CE?g4*(ru'Y'G7l1ZI%DlC*L[p:3&Wn`uWl[#gerluf&6k1-/^Xg'>*2+Pi@%GAZ(OFj7h)R\s3&4g_570L'iq]&qP:\MX:LV:"UtLJNqT'W4dZ4M7\^B&--ef=X.1"[r!ok2BrF[IMB)Rbc^6<r]HqGAOMG^aFA)%I1N\G@6rQPh\q;1n,1XCeB%N+J)1(W5jJ.jR9fW&Ap2#U*SKV>j=7h'Vj,l"T3>hC(:d3eZR\8JbUtZIl""u!6ZYUa\eXZ[O"nB-%\KOggoQ!r_H(lT%ZZ,+ujhfM&]?1:]eJdG$MgTq<H1j*@'ALf2M@cG6Pn(+`-skZDb"(eQqLO?JjI1*+mbI[tg-LGVq`YlEPA!SG%7X)A#hlkIT89#n'Qk;0OaBtAF<o_3pR`U"8/^l/F!QTdRlg5`&l-*=A`4B#+p^;je*/)X,4FYg#;%LO&;O][C^H\fU2N$?0>]f@i%nmE2QPTn$X^2T$o/*s=BUJrBA-aSbeab+Sei>Y<FfO7e$;)Hq0%CG\j?jd2qPpb9NAPc;D:*;`:f#_HL424'Tp:rVF?qcLI@/+#:%d48*b10B.RV7.DChXO<d&b3or:c(<(X\0#sOQmC"\@3E2c1kA93\+G'B,;ntZ6n/g.)pC+[J%rT(In1ooOt\?Wu$QiE\LrkA+4:=%ps7;+6A#)kEgqZY^2cb9o0DSCR-uX%roDp22sdCR6>baa7pFMq@su8J^IVn>3njVJMl>NPN]O@GKEC5n)U=/)p__n-N`mIj.pkd"%[OB\RSp9@Qhf'WOU`BSQ8gAf&H)P6&;'#'%@a=2pE/n*B4jkn_@ol1tjc;k1L3(l0k^b3YpROk,rX+4;,-rd@Fb:Br,C0IBF=Io`%!]-h2GtOcUDt89jaa<-4O.S,s*CN+^'A'!=F0/ksio2deOcPjAkWJ8LV1#L]M3;f@r6>R$QN%srko7\##ZJ%/&14I<_^S$rpPr44%*p2Jh9e:A:-/m(Tan"<da>Hs!g(,C[j6;]ln[-"[/+6f&_7<46hk\jf*h?Pkgo:D(9.`kh>Z9h/e,#g2E,ps;h)?mNO.,/No%c6l%e5XSFE(]DgVDRF!73pJe0Yt>5VGBO]\7<7PQDL53<(j;tNLFTrkOf"U>*aW7;[,mBj3#`mdue;ZCRGFf?:!*]&PRUTC"3$-6R#Q5%o",]a"&-)*QsiSX=H_7)5Y;BPVfN@T.;=f_e$)Pc_-d2Q$r'9QrhXCh=A:2]4ZheM[t4R>NH2YIYFk(HW+DQ8k&B]`/\"PoSBPCq%J>K3D\aJ57K1[Z!a/DF:c5B+HL0\HE<o:9]q$jt%kpSK(%<"XsqpA%e=40NEG2sIAN`'&+4jl2#F=i&Z*ESg$9Zc0R3bHKWi&),l%g6K%@H"?^g;#RbahOM_glD4:2kLLuh]g'pmoWA9PK`(<&Nbk5IZH_=5P/Z=d.//fkr.NpTHh^a';#?Q.3qHZ:(KK)WXVSR;C6fC3%'YOiPpj)tDoI7:BF/4[m/8:]9=+QYo:F"C;COa--o"/dW,3V'bn%->Mjp:M)iA\5jFt>t-F<k->Q9Z&;)^^0/IOEG8ERaO7:.YS<%LpK9*MN`kSnDk`SHSC<_^7F=3-hfRc`S%2tPf'd'eg#\m\K;%&,2u<liO:aR8b8`)/?;C\!osWR?:<SMJN0DP?9+G[^(!fbND_:l%.tV+i6UYm.a]Bo/0+/\Q)QC$kNq!:=lTpSq<d&e(7:/,TrJGH,8Vo!*,#rg_Hp8fG,"K1&j0^[hALG%%_;Eo:rIVsIQ(=kiL2i't%.Q[[W6bb?4<mE4MlILSMlr`TMdLErY2-QS4%Ma@+(?K&/>7t`\%4l2=-AR@i]`#gdmR)UJ,FEo,,O`-r^S(\@kQ^Ig/R?8(8J,hC%a<j:P^p/OtkD-A>qrjn0,Odr]3Lee@Xs^j6A!E6r+RM[2\C#6JOe02RRD?K*]8*UM'amkJ,bt0ulZHrpOD?E+8$J[GI"qjJD=&O2%WkYXki@&JcXn5'RrA_-$F@tuc!SXnfT!P%r=0J#]/\TCFI_/Q]5*s]E^UobqI1VDOE@Q%ndVbBOPBlaOs5o!2n/=hrh([`-[6I0`%o[Qt$QJcNSlD1H@bFQ\,[3HIRJ`!Di&ri;X;X6HOoXN\K=l3=D8]jJ#[Po]_Po%d@[aks'XM-f!]df:/1Pr$[Kpb@@CGUl%#@B:/%m6Bjcc(/3_F_gU.IeB`?h%K;S58urgc[#pXJ)U/b-PTbWU9K,bXp`4ddoW7<oC49"2/6L8jb[d\=,6GfiO\pZ+l!@:L2caih%st\%DjH'3[HhD_q0hs1G^6js&7.$NT(")a/IHDD9BVj@-bn'n5.*:YM,%DohK8Ut`_q"X?g%dDDW*?p=T71BFJRdQHG+WDG&V2Fm+jcg%I*SfE,jn:r`b$HZ-sc6_/UVsoAnTAJe"sTE-#olN$YSpXmW)M^VXjS._.qMEIPImEgGjTq`93>fN4Q*5BUq,cQ-9=(DKk#VJ3e=p%mqr.)(%cAsQH23'd`'(HHFr0E6a35(+e+U*2P3GgA+-^=O&HDP@fKMSgNm#jFACFhalGQ'K`3]QMj3>8eLc&d:FKb61IC&qE[:"D%Sc3`o?F4o]<@WDWpUNg%E#0%":\f.H\F@PcGI,>XL46j/bF$`^5X/\k<Wsa4QdZbQ]lGY)c]<Ra<e]=e>7Eo*Zdp]ZhfkC[H`ugK%@B33>#Om,QSZp5Q,)T)"le0Z,5Z9_29.'XKc?eU?AhB9]HMXm(i?::tX"U=c>*>&`c2?GbD=gkLX/>I%Oi^6$HN6,fMC%s[Y-1UL%#MRqsWi9n)(<lT4CA.I:NYKhVopbX-PJZ(rK$O/MnTV1@Q.I,BDs9`4(5@-a7F<in?b[;tg.qP8F>^OnkSKNp%M&jSD`W3egh+8:%N8EE'E<b7Yo8A=XT6bc9Fgk>rXD`!R$EqX6a(?c?QR1B>Y'kce5Wa$9s*du*!j9/C\63%S_W]b;8!#BF`Um0uB5Oj.'he>^S_IU8%g9\M[3a8WGNg?!X*+,W\QB$Yem]]Q;b^AR`"KF886LHj@IQO&o?Y(<pJ;32YmUQ4cN3#I;f?Fh)H!>c)h'qt8qQ2;J[Cbu_l7b<S%X`"R!0)Qc$^E+nR)jWN#2`;"9XZ)Aa7a;WIYVfM'XZ`_=f:@"Dp[NX3B,Z++)4*YUS/KaJWh.I`'lrSl`(&G6DsZ9Bhcg?Ol-_rb%"I?<2d`G/J90[c-]6?mDlDSX`/)S)gLqJr/]hTlaJ:71_e^Vl?7T#Yuq0-7G:]IeZ?.cdDB'r$28FA],/HHs:eh0VI<^3Y_E9=`c%m)Q@:%i-fSho.f#M?;A.VG>:s]7p1OPNFjhgQV=SR=&FTD.t_/05lYuFDs$'k[jM?$2n"1/1aemP'jq*A0G$#fZ:.lC2MZm'^gHl%LHjP"\<d$Ia47M1&%26'ZT/Q5-mS0YS@-ZD%j&<\.=I_RI$o28Ht@/1J]^c8N]6.?4()[;2\MI;gL&$'e<Z6#<9CRCiSj3IqWari%[b%K[QMKUiS_RZ4@@$g_]KKIQn)M"jkCP1uM>d/Gb;u-jippaYZEi+YT,"d*oYnj`#E]#joWqD>m6)ob&0&<bm$CbSjU)C=k8EsT%]U(]DS0<(eC:S6MBQ[l=UYJI4#Jd?@=)NMmnGg?dS<NTae^G^KoRUR9_Yd`?O=5$#XfoEPpVj1WCGXO-g+='rkDqF&5R$.9iGBIu%?h!dG1Y8DhKDbZDf<$06?7obP+3nd_5PcZOaQ'&N`ne08[/ZADTfrIU/q,D\cZ6a.QB!`PS2@EU#p6K8LaBKrqU4-t<dUf>L33s:%nss-i5P2=nm+Eml\te^AXkEl)g78K65&B3_imXggmH<O-7db>Gkrils3ag83($PR[.nRG!2"6UQ]?R*EjgMDJh(KN"DXPu(#?M6R%G:%aK5(A_YfktDY]*44tfZfqYT3Z(Zc2J*EIA?W6,j4(2muTs[-ad7IDEjW*:dBoCo0'g+A?31T\%.RkmORQGf7gliREr"#IrUJZ%la`#GejAZ.\TeST;O;F3m]Jl:W'$iBYYT28Jh.X`L"E`%'Io4-[Xf"NK9_>'KtOd,UsH?7d_mBJNqnVS1i`Urhd`Ms"4jK&GD3*2%<;Y@uY.%?_o_$)`)ekJL8iL\YNMB/lE<Y,Qqt\p9JU*k)PSI6K[q5N8;;?@mjl7*RpaI#fp)j$c+<[o<l/uY!FB%9&*f*IJemS8X%XknBZ:[C=E!S3]@JR5G'#W;a^DVpQ97b#,qeaA`7ld*&a\$S<9A];J0hG$nm1m/ZU?jAeI""_1eUnHcV9=<U=FR/7/`U`]TO/d[N%g&2kF;N'u1ahc6r?>';9OZQ`q3R9!).M@"fP!0<fg!Zh02K1hfEp@t"DmT+X595G#Q>ii,Wj2fCD&r"\FPFDq0?Eh0V6`]"5s(WZ%'.Jf$WLp@VCj2hTF9)G\X+U%Ia"o\#$6Sfb,K4"eeR>e)\*dr8r(d-n/m::]mI9\1X7Vh,5!_T3YZO6Xs2aXs3YPprA[eL-!1bW5%K!b5U8K2I4f%0\%Tgbb-BkNg8NK<^CYMDtr5:d`Vq&HVsk4_gRI:;4PoWdd2q3J%3B>;WTbZTF8$(9I4mc.jo"Nn]417'FRh%JC@%=??;b"<5f&=D.SRJq61s_V0_M7o#9f$/".u*4#,[38NHq3;q+^qk`pRUV4NtqFc,TLT2$8M?_f;aLf,g`"E1@OgtJNR',C[rBZ,B%,hC[DL[qlW8`(^?B9j=A5![A<q#nZMp']/W4dDN28M'e'rKHKHA=(EpEV=q\J27A%5iD$EDZ'l3IR=%FSSl0.hoH3t+W8\%am#G$%>)GhFnFg%Sf5A?!/$SZi9_qAoY%<h&Tateh>2eIaE=(iDXp:E=BA5U#b9$S9djS/^aOKnm=A-))XSug(=n*Xcc!N]PUe6r]F#T:s%(c,XpoX]FA45+EUJu#5U1LI&HPt_/?j<XW!]Op@00q7qa3YRX;^ddq,4YK/!cO5)$8_E>$RIr>>hG;)^[2'2Dfe9/uO*<#9C70^T%jY*W#p5XLSL"Af":GjGo(T6S[&3*e^^]cQ'DsR;e$#_h.39)0^8pVZTd9[Ss)%T/siNDk"0CFWd4B6c44PB&m.lqg`>7Z6S/H!l,%dO:qUf07XZo,X>/3Fnkd12fuJf-*ac+^=?j"""haJ>W'&GaZo-aI8#iY\?]m&3T8?>[oBmjO]u!2[CUiOggYqRrpF*5A0\=drTk<%!O5\-P)Gs2RD"$:YA/-X]1^Ytet&A.Rq]*?]B>3d`8o1HH$K'_fh7lbS!gT\]+0`m/PsW>2Og9aZ]6@,]Ka_*j%7q)GD-u>+$ujp%dpAq'jo2c8%!7U0PCKO\KMH/qpX628*dPb`-"[qDl?UR<I.+ftA/WP4ISr0srsW2t[GOSba8FLLZ[Ml63haBT/t)HSKU$^n$O&$!%L9,N06#@>\X]4T3Tc#Fml[Q8Nd%,+Pp37]ekh^4/QX$9O311"GH_+p?l15YM!o5rYp&iZH1?TN,;4,Uu/mM`SV[mBgok[J,lR'$T%Xj/HTan!=2UU^+[PPC?FgqQFK`mMdJgUu7=YGHE`gO$EmM-56&PPI5n;)dc%f6R)m^Xkk]`oTSKafXV+ZMu_&"'ttG2f%VAWYOBd%ZjLul7=iO>c&]9X>9Wqnc4mRlb_n:6]N/fY[(Y4$6HigQSb7&XFKVono5T1RH9jb(qEVKbcZ>0jV&!b@jh&CQa$tPWf_q2r2qDgJ%LXf-'OA:M-gsJ`jl[##<)\n_:Ya2%[V#Atgl0%WDOKDbud33Q!]!'F?WTOr08[0`+\sL=3ZmU3t'MGs-MojqA$CDGSW^0Pr$5r5i%gi;LA.DYRO_=gTkB/cGqKpS]<$a2[,VG;ibX4G%IDo)30"BP7o;Mhkq*gl&gG2Iar!Q4<_JIDlJfeMj`<lq(qe%O#hf=ARoGJ/^>%ML`E]g:GFTZqa]Xl[(oIOg=ZIbj+,ZllJ\Z45F?=A_FM8S!O/F:,hjkB@&$@9dP"+2D3!6l'1DDWOkg6NkME:qqSsoh`TZY*-Ce-%9khA?f2/`^EBM5;1te+Rbd*5ur8(<F*KJE:M+?BPPD1MLG!KOGSeCGn:+;LuT2akIe8J5n;bE=$IT,5bJju9[QrA%F?^qg])2H$F%0e,9Ud!cg!$=ZMD_f;;>Z!coG,e&C/=U>q0&`dQkAaRHh)p:mdNt"1[a$Gg!6g=LtK[0=0=3BUr4bL&h?[A?ZGbV*c^9[RqGJ8O-%#:'"Z_0Bj[*mi+&LbB=cJQjn*HLFU+TF><#=@cF2M4qeH\[m2!P#EO63h/tN9'!JP"PnCe$FUf?[M%4E]gd6;\+bqLF8[5P@O,sK%fg[@@!Vp1<XIEJhjP?lnB`P^#rsU,R]QG"CnZP`tBscpl6/<%4!npmG3R,7"0W-%"-X+#i%l:nXoQKe\aCZ?V4j@lW&>seGHJb[i%D'"+ld:*!tgqCQO2>3sTB8%C7G=l4-HFHO,_l^VSK9,2#Xj^F*;7I5;MbpVu1,H7`J*,/gl;JodDSMgWSe;RUCB!A`!0-/E(iT'V%]aBPClToYf&7=Q4TKk^\Kl">--;bTI8#sERkXAjpfp4mC541-1CVMg;f9r[_1@%EieDV>OmJeNhC*eef>./:5\+S&gQmPELQRUcj%E%QCpmIdQ?#*;5jTN^)>qm=#Ffeu:)<rDQ+DbHSaTZ:d"K)KL;mhIK3NTT4]G'6TmLRIVg<$HCTT%>_iDtVKmXEda[7]uH`kNY5j%;KK,n58*"09\q<@XWJ;K-T?cs%%s)n"D>-S"r!CJ!PrtUUkS<CQ+>]?nUV0gcQulqnDJo9p8b;[%RtR.J0*8PX!FEJT/3b%@-TtN%dlX!Zc1E*o<nght6rQ:GqsVbFFn:q[=SqjYYfQ+2h*cV:r]IJG`l@p,=DHa*f'plHhFO@/@X2h@@J2_a8uE:1RV@r?$%%]#murY=%^k8NpqI-\J\!Hp4g`"+p"Gh/,/EEYh'mh_j_E7Mg]dIGNr\.^WVr!$YB'1-A3e#_"3@8Z5l/5)Rcb\*_/-7T^h[&esXFYT>kEp1M%fVC=tT<SMM6U/^6]lb+u>P[Z!YPffVmMd:#n%^=ef.X[ChEIk#9:KJKCFJpp=fCA0?f7Ei!Z\FS:C"iW](>@q@NX[IVf5&&Rn%S'%pBiR]q>8rUA+^O<:M5H0&A5iJ-UsQcC\!.T=C'uChbnLF5N#G1mq0j;eN=B8^r!4fNV8gjc$\[i^GoqV5ETp.f"odP5*jhs5<n%;%jmB)hidIQ[bJeAd"TpA1E71fYg2,a@*3d?mM;oDcl*KVTHi)5$^$r8N'?k60CC[=]0Cr=\4D$(FjV!RA"&WntZp!@M^sM@6rh4YF%`ZhQ)%il:V7rMr_^Lf+5ltm(go7Z%P47AsN#A"Cbd_a=2q;\4S38<b'EFa8jK.#!s$>,5WE\-0.G-mAJHKiWP4E\7:egA-*2D9D'%i32g^g+1G"p7EFc:M`p!5>8I1&=7e<X+,-$QYO8d;pR30Ug/umNIr]8E0FuuR40`o..#Us\@=l1M*CcDgSsr><VH86dkKnmM`8j(%2AZ$FIs/+[GZ)&t1t9Ges7>D*D/LDu1KgDg/3kkDpUQ::AR0[:*\Lru)p%@_n*\8ego;ZE&=br,'\=EJp9s77H9Del=lF/!=3oDt%/nQo&e0r`3Aa*7793?p&LB69ON%H\p5A!PaTMJpE_2bXH]p(LSmbOPM>o[g(UWb"rX7U_HRP)id:2#HGa*$S:Q#bmqaHHE\G)2S@%T2o8>MPM8rjcLIRrOq+%rYE*sT!j"h?;I+t1f%QGMn+o@@L8UO2Zr:X7dCp:&NM2AQeSY?C,&:uSg5n[J#tuR+qM[RJe-bnbI=Np%VEa]rIPK'NjbRS@kEj<-hTKEL$@6N?:qL#jlRr4="77HCEh.;A5N!^BVIV[b8r\R(m:aXFk,4;Tr)@;pM:eB.d&Tfp3]t'E#PjNs%UbC>W/_Hth0>bR/H#!_0/?MtIYP3K15+<h`'<e0%P,O&Ds,qaPgn^%X/aKS'`F.i)GZA+&\I)[h'LDmF/6[Y_(1^#39=5Y;MOpHk%rhPh*I`3>h_E&j8"ie[E]H_3CI^p`19\CN0[+\]1a?:8YCYGd_1a$.K0=Ga+9+0)=r;5SqT:?Z$72!/kbaXQ]plbij&1.I]DYDL[%-YG5IUJQ6iXBdL21R6kN%[5N9Ze`K=WLd;Ld;KN#Dr6tJ>j\ZnJ.^Yp=+fQ:=H@'FLnAm)ORtj9Hiac?=L;^qT,u>e\]3?`'s>XI%36&t^?7N]m,36lK=DKL_>@ITn-ae\,r/=*7BVZjNIs,;4@4H8&f7j">7DD^cS9=+hok&S'[Mdgj+,]'#Ze?mNC:1+r^O*LlV>jJ0%p>W(H7f"leG\@)4WjJe6p_q!1om+?_]@l!0;<<FA:1[atCgD;(\>VKNrLj*O0WrV6CMgD9#p`//pn-BY['k!r^N&l.4nEi;SkcIH%`TPKOn]&Yp<VuSsp>G2'8$CY'lfDW5#ZDUL,2;SN[J&k4hQbbi0b1X0PD.S?EW_i5oCO/e:[sOb42:UD$"mbFS"WLs+lR7]F>NR^%Nf\3<B"AkrZ02L,A#>`(b\DfaZSBqRJGMc-3#a[0/=%,%iG?_[ZWL\4KX3D^c!lNl'$eKj2a]*@KS6Zde'28PUEl@hR;R`kb7PB4%`_8<9<#IjXCs6uW[)PR+3#a[0%(YI*$"mbFS)Li8]P1a!-\2S:[W43&VAY=*Q>8D4TY=!0Lh!,mAeQP[!J^tW1RgAG%)#9,BkA#+%R9@"C6n@"/1Wdj2LDd6!N0Rpch)m_Lc"uAb1XO1[e''.61.,DeBU[Vm8S05p1b?mfiZp=#"'J`pfu-Ho5VM)1AeQP[=e;!hBkA#+%R/sc*:G\J"ac+Wjn2.J.PKY`@1,R6liZp=S-\nOd9q5``l3>,RbU-(?M^9RCR8'2^#.eAjRb>VNAlKi[8MchqaUCs01sKjr,W"@4%iFum;-^fMq':reoEKV4)QD&#)'.92V<T;Y6*KcQ00TTVkXFS]r6un+#d`a%51@rGbrR8t;:,4&>"CZ"V'.92nF!?"\bU-(?$cl:f%VjU8LAEM,&)a2XrC6BIUb'tt;bNVl_OCgCjOr9e5R$hlf,anJUra]08J[?MbAi=Xl)-2]MVO:/KA;8s4cnr(cPK^g3Sf[D*Orio1%OcaDF,VpX`VCtb.8S3NO/:-;VKHr@#/L.+pO-F103#6qNj!L1fSfF222K=ltamL$..l;"()-om+Rb>VNAn[*VVO:/KAEKt>%nndK%36<_;Llc4,EKV2c'LU?n-;H;u*",OuRlJLuDs[m+1RgAGN6'/G1p`%&b[<$]BkA#+R1\aB/Br"j,VtC;Kr184S7I@OdEj_VM3H/n%%sDWTfu-Ho5VM)1AeQP[d@7:*d`a%511PU#")2A$INp,gCR"`P[.bg+[Z*3/5\_0;^BGmL9ej$aF,0m\bGLY17QcS-a^nCE/W1nV%PKThj=pAaK8hQTBC)L'0#:,X10sqG^jIkS>.AiE)"riY/2T=0$bT@6a/t6<b);+gPa^nCE/OL!]OBa]_e2#6H$V2lX8M/["+ug:U%f6jpibT;Zg&cfJDp%iNATY>#QTClg$r-,7V'BA^L!WL!/\eu;1,;,rFr#ruX`V8$5p";q7Z<+2Vf;e@Mla+!*3k8LU(Rq\JlUJJ7%bLJ,VHE13:r#JQVkjG6kI@,qjiqVL`Hh#X8EAP<3dhH-I<G8k#\SSH'p",QB:W*3Vs+4CMg[Nr8r$!Cd")!sb`;!4ZI<p$ZRZC+=%'$i04ptmfW9ci0g)u_gK?iC&h?Z@B@&q>9Ei`5@9,,P]:;E*_4\gC(sQ`8#T@YOoSRt_#GZsaT[?q?Fh0^E"/R,d"`=J,Q$d`9>6%@K*g)^ukA3P6<\@BsJR_=*-5IaeAj#5bK=d'IJaL!Z`FX(/0\g2)6?W,uZ]^:m9lu+#5_T.AeN4mpcJKM,']h8C4!Q5cUbrUn*l0%<JA[e'dOFs&P_Imf@_:(Co@aj8\40eMC'l]e$MB%T`?!2@Lf%S,R$Uo8NTjO(e?Iu3K=2tRd,E6@=$9A-UiQK-L#%OKVU4;'W-\$%*!)qXhUM$h!msuq7SKhNXHLlIU`^Rd9KagSU..2MJ>NT*)\O++0LZ&mPEMVrHs$:]J-N*,%&.G[""5(X$A-q#!(^,B&gZd#<KU"]%;H6_>$IW=_i?ZMD)M7;UOr[D""u8U1cODZ">UqNV&5LMM<ROVU@?PMiN]Up,E-<!p+:s=DQ-.[B!N6iWUL7-"`Wf9s;eP<mMn7jI%8g57C9$l,qP(7)qdVu(K(^2B/VuS\"8<_,a>#I'5M!ng`R$oi8=cU*:5_0.,?PcZHW'[@n.[&e-#9^pG%14jI6_Y]'i+&du`a72;%c(N*QJ:nb6R:1au.12b1h,I)UdWJ8-Y8Vr0U4jjRiWSru)D7+`ou963ZKm7]Z%BBI@Cp'<%3_,h!NCfcdKti+,dUQPK/AdTL+KYe%jR!q3D#k)*)i7D'#:N4`RBiVB#b`<^;+/N:5^H`:P%B8s9N)`6M"D(m$@kpLbVfW"_I,XNV!V,Y@q6rZ)B6MI&I(Xb:7'T_!-*)^%1/(VdJEVi0%("YJ5m3[I+G$,6QEjYN'F&S;;e:3U)K]PpnX?*]!+eNqK?2-p-qH303XB5=%$W&2doD+rLMW2QPcEpUBW;8JjberJ%"!U8I1kQd%V@Zd]+N25M4Yh_a*WSXF:d!nh:f8aR>/HF;7Aop:B1gp8*$SPt=<a:k9MVE8<7"(%Sqa18'I4VAS[#?]+pDZbC_U*U%)qYu-)CdmBgdV988Q>tT6a;.DARNai,sG2$)\4&cA\7:3<#d[Cfn^`;PV`hJN`52C;MZYK$ir1j@')7_Trki?Jq_':hG[HF=Zc&I%@;;>4fg$5hPj]/IM8E#PFN29&6"(CkM#X1S8;%rH:KJ6cE^2mAim\dMIS'`X*\5jIl^/Ps>)qLr;?]IO5tXt",^KIWrso,[L8m3i%JKb,P+:Yk.5\;FF8R9nYQQgrFL1_K^+BW;2La`B8+Ai84.p3DmLX7F)bCiD,H@QD4'C"&D#KS%,6-3PmJ:uDR+GoM.J93%_"N_:s%40Ao5;"nW)((?UqmK(F'Pefb(WBs`*9UKZOE+FQ=\5EJI,*NI8-';cEX+\)`g&\%4i.hcY(Bpfa38-s.V^g:@6raJs,lsd&9dU\[%-Li@P.uYkp@$6\K;8j+i$DTTd8>)I^[_i;1p&fi&?qQH=@mHnn1$o33)GZ0?5c96?Jsh/G@i^o1Z0=goOZ<t=#&:dD=Tbcs#+(Yl%:>g.=fr74t5S!^4!@]'^\lVBj&7]2iKNk*9a/JSkBgP_U=2E=ZF[?cT*1JQB?Ul7&d?<F^!!"I:(_!\sD#s%C!Jcn&>9Hh#jWY)"%MXK,08er&tWkcr5kf3[3b+PRR,=o3P(\P0CGuGMJdt7i?d%o[<%0MJ',THmt?6rMNj?jpjnNqb9VDr>S5c>A'F=)T6.d[i.).%7k%'c7kU[OaF(8/W$V%!F]L<9*6k=TosF7P$U^c1n;1keWte!CRN1VD>+hM?Y#Qg5H<m2&gT<*Lm0;;K8uV$</H5a%]%""[Rh*-tVU-%rK75?<LkrH@j"Gi=N4,K6&)8XDSf4HO&:!H<WG[2>?25q"34Y3MMjHIT^!R0ULXU<$qcT];5:'"$miOV6\1-1<,UBbMN7iFB-a51%"<a6k8(>Qk!,=8JY"Y+N"oq)(K,A\_TSWcli+<,"V'JL<=>Bt&82kYq,.<^T`,$kMOBG.7"QLt,&EA`[>=nqQW/KGsU0%FMDFrRU%PldIP1H82H$!U7,=f?eo];.\Z,at,Y[#-3-H\)`h]au!A/f6jJmb&B)+t<f6KeS.<D6loP#K>UXA.Y"3=(+q]([5/S'EZ^N9rCl&%.SEf8*"[W:$71-&U3$dS)Hku-*Ir,YKs:gsSn]0FfMT#kiG*'+l)'*:_!ElaplNM_>sp:JacqOA3Tu8M!93\d"2RH@Z=TY2m/WrO%N$T(QEItt+"Mr;hFTB7(7h@VC@!iuD]8nt'!Yn32,4n[A2"GDbffg")EBOBa4G5Hp%C\iJnc9^sTc<'#%N<qbFDdX0+bg7>>)Bdt%PRV%#WiUP4ZL$'CZXh6Ze)3=l.?pBUX?2tH#S`\PlB%_ir2M.deImD,.4NQ)<J)4(5p3lM)i1#Gf^&SnFJk%RoP^9&(SZFU`(Zq2%RQ97*B^.YENn?Y-$IRp4e0(b5J0ZHq@5A>'T5GLEK*Y@c@W`7ZS:daI%[8.\$`#R5),R"bM57/qf`?gKH1RU=PXsUDY^TkU29'<c%VhP0T?'RCEV7&,a3k2Ol9d(UmSb6Xb3Zp9@A^!I@riUn1URC!1"qjlm`I5/pA.7;6.a'+0#BB!>""br,+NrleYT;"id67Ir!4!&!%l7i^!HFi#g3iIoF+@>m'GfqiG_-Z=8+eL'a_H(pj#92lG[:#&[LklF9iBTijnr%b7aCHQ]aY2pIKLqX_o+t9QQ9\\=7'`?rG9Lt:%LV%$g:Dpg"bhqJF6j_+_(PmtW#EXiY*'uTs+?1$q&(/AtLPu=G@JgRc&g_iEjL<*X\VpW`DWuXm(^+!E8s,M%%Zihf(Q^6Z5aq$P%BF*UL^m8uOin-IRAXT"eoI*ZM/-o.`Rnb8c,#bAQDL$se0eX*`)F;l*`_k_ZB#C.K"0W%a/7Uq;5F*dubM4YU<(U0m;8$hg5aQ'X%`X*4k$-Z@RV?8gaOb5&NfcUO]\U]o2Tf7rlS"1[%OIS'Olbb;ND%ttiMTmKGE>(duNutUi&+j@+(h/WSc&6Vqjm"NON-"J9dj<o`%QOnr_+j%ib-r<qjQh5h2226\Wf"$=(phHUq.Cqo(p+L2&JRehRW)h8tYn$Ck:s(SmH\+Mm-*EsXidthjokn2N16F$LG!iU&/rPi3%k[28^.iE0L#f[Jf-&`&P;s/%@Oh(l"W1l)0as[g:cjmE*WX+-ndkU+jaH"#eoV:FZ(H[3_;.`Lf7%N*U9i6`MFTI=n76hUq'=:(;%kKa3h@GpK_NWTdh2e6j.M1A9b,8RRc2i)5a/g*;n!"gTh)oN.@#Q>[:.kF3@,B>Jia7Db7(=@*e8%QtcPn%U5(fT[9daP].dN?CD%@KQqQRg*S>WfhG,a8hMjJYSuX30Ya_L)ShXL1c0O^4ZMY9<8bON?E,YJmPAfL"=Tj2Oo:YF--HFKcBrIT]-PteB@,2pX,[0h*hg_%!!#$sGI.Huiu1)O8p$8$((D`mGX)HZ)sX1cKrR\BQD:oS<A7$l&nS)3jh(ib2^C.g=;io&MNe:LE2?+m&Hi[bL%02V?jXMf<.@9k%&g\pRWFkt9;;iee6FUKXXllIu9R"Wk,!%Xq/S'$U3"EHK7+NJOF^m%UD!dB1o,quEB>cQO^I<ePZtXVd[QWu#GT246`gtI-]M3n`%a)D[JQ8&lCH,A;=LjNY7AHB/T<Tiq-L:7aCdJ0LXhNfiRC=t!NVh\Ugd:IV(8<<s3&7fd,$YTiFdkYJ#;_f@%SC*WR0Zi^(i5q#;%20IgX=`M?M47Eg"fSf.4o)S<6$&ElFRFZ@"Er^':Pmi6afVu,":gdf9s,s@<9Xu@i.RI)b\k08/!`HPkJSM54_a9]uMSpqo:=fs.%,jN"K'KR%d.t.sNf,8Q68n]2t'+lM/)$J:**-bq.X0Q-4=*DM$Oc6n/Xb\o%E/Jo\.#Y%@Mm<T+kf&R,'-LpRaG^[<co_[ti9^ZQ%Lpn<k6J8.fk$5;\h?`26<(B#(/m5QOLg^@ZHD;MO-HhPUB!)[fTiu2-nW5\]"I?Q*KtI^DEh"7\CZreG6s(SVlHG-1bC[U%"a2tq%l?V\r`#CufE4PCmGS;3"S?.g]Z_7K%/YF-Tp&IsYj.&-q[US*(C"*ZQ0lN"oaE@t+"9ak`"CroCEeMFPh%e2-2F!+F,=lJ@'T[OO%@3c=Wcq^=`MoDuAhaQgt[:A'H=3?uqBkN&(69.>4baTY*%4YR:DZoW*Z!uR-+GkB-*_d#qSeD1212C"9Rii+!3uZYfE+oO$2IR29%K[?Y7%s[,#(a`ZYG/0RK>u>Q]L.pE21%9PA_-/R4B1j!B-Q#IXDBA=[B0e>DGf6(FR/'3R`1&<9q>%.K2[+6<:S^*51YEGsFokfc%)aQ#8K#au6;U>nl;^(F`GrlOl`O?lYQNXf%OmrT-TL>5n;PZQ.bXOLW![XkSgMpseON7n%Z6cE*QmX+_Yq6`hp/)&!oS++)Ps`/[%Q9]<JYn=i/6$9tNQHWh`"=RcUNWk4bMKV`+1]Ln6%\V)MJu!qN+EM`FWc'isUCVuGF^Wo9CaYtf6USBh!4E%V2M>@m<ih6H.V&Q6%QL&92RPa4o+='km6%UPjY)*".!C[s,"NlOY*h\'NM1F5p"Y(T#a@c=PGg?.A\K:fj'_f\\]D$7W:A#'UBN[/?Z.b'M*.eIG8#aJ9%=qKmg,+tqN*&+3MVeUoNQMeUN#U5R&&;[;d%NniT&7gPhM&q?nc1JqD6*aFM]M#XF28DO]EMun<;(V`.<NQhN!Z%*b%tWL:@sMu4%5_m:of0t`="Yb^",lA$8+qkMmQ\$ZmE4D`;&WiqPF=@>!L=;W7:\KW"<XpCE_NNO[N[dd8;l-!LXuF0&U1I5*+NYLBaq=j8P0g#(%?5+o3dH(a(P[\aU4b<?\<#D@^Sj8]3_O[G'JB8Po#BYRa27S0YXcgc]:Y(O+8/+495bo+Vki[C[6F7Z_HAN^T5nZuY6`,\?^-u_"%PDs[8nDG<$CqB`(5a"]8,]mZseq$(\V`[JVEo2]0F!%/BXrIuqJln0CCB(<MRQ4cSOTM/=WP+/iDq#6b$&\q6A'nGR.MiDQ-/\cb%fm9;8d=!=!,GpHZBbXT)OWLn5&l]Y"c5GgY`P]M_O2SDEP,BbP![T#1;9L08.NBi`>MS+e,lhKB`-tit;0<t:N?q=:M=DcX@($&*%&m9D)+@d'4Kl&6$:bOC%7>lUlQ]X`)/1#R&W4>Qu'i!8XF!=6\'@WZZC9QY%.m+um'WA2C5q3W(-765p(a[.R:mq)4-r1uk+cm[E%6_i<A:67duP49Z2TL:SnYW%lNBisSpnhW[gL]Q09R@Tml::qp0@SE(k/6ig4#-7,Pn<#+fQf%mU^pet^Li47kHaHHh?>9AF>Q&.k%hYeq5C[n#t[H=D*TWSN&[IRX7.RS\j5a>4iJkW&kUU$mB[MTL$J7L[X`"bu''A,%%YV@,]+u)80;;$p/)Mg.[lDo"l<.Z6XQij/3%r'"6qXaC@/58eN7W7-r_&7[<LLYWFcR%uL%`U7_//8#M'7T:\?0actjd0*!*Q?=T0%c@=:e5tf;&L.rTS9Ze",q"n&9^Hp&@Y%:.%g2R7+m04b:2WfafcQ+0&l,PUme?eU81S.=6;ZjPn!i#]iVF(n0LN4EbJ8iA!D_R"_6?g?O_S.isT"?Hi\9QA8/=W7CX91J!Y9P6H%65<_**?;%%E/19K*#t!pYQP869,3.njMIof=BNSM(58r`4EQ/hb+nK,)[O)H7BKe!EWJiLVoF"d<M>POd+'WJpM1u$e"d:T):oL0%f83o]>?[T6\;q:KK?>C"<B,LQZ/DiBAd+@u"jTh]j9d)a;M&KaX_95QHV`!u:3TUE;F!Yh'u1QoJ\"J-)%$m:&ELMPmC:&6VD2*S%R4P!R'=iqR-F&@^L!YH\#rmrGR[)&^%077NP8^af7:#!?,jKZ;!pt"Gg]do'L?3X?+A'$djTqS2<OeNa"D<T+-LfM9!lXKfeNkIf%Inrgng%??KA:PlKa7E`('n9l!.KL4A+Y4Q$8!pAsO"n*I'QYs((kJ^GoU[6pF@Ar0&?bV/0Ua5FJ$Z)/V=8!HP3-ki_R<miPKn_1%:4Y[T$=8h(.=t5DDJ#P;7hr!TDYm>:44-ZX[hX?2kYV&Z6Y\s?eNsNu,i-ld&Ih`H[q$rcWk^RB;YUjB**Z\,a366'gLP*tMTO>9%/_("`MFMM8/_C6dHB86MeKr2A8spYA#<QE&R=4oAk:$CV\sO5tQW77JZrK%bj/*2+"X(6#82Yc"aI]^G8@$o>B9ptAG<iS,eK)f%%W]7GJbugk2&r24&WFhHR7s01Zna$=[j1@TF`s31%gTu$M)sB[2RC`Uh=?l&tZ:G9(-*rdlMf05u"f']-X]VZs!_!Jf?<&T?Je^%-%+O>T$"GEZt\BJ[qih/[eN7'6M05GHe_MbE69&BX3i5'nph`ONK@fM(bU+\&Gnh7&BP]MjVp@*h=Xf*_S8S&Xt+`mZ;"W2I(#pb_S%=';mAq*&f@!f/WU#-+nIA_#7i=juSa,E>%59N-23&C?s6Nt\B'^Sbf_\VLqGE,nW*U&$e3&qac<BSc/!e0Qu7#3)WRLo/>;R_hXI%#MVPpi+6p7_W3e_-QGC6q5J4m"/@`=VcPmGS;'W,N4U45eh"e#F#_AiUhTK;LEdpCGY$EH_=/!;\`]F1[t^'.=4^;%hu[n9i;dmf%K1"jS)[+`a,WV'(ESiUR2Ugf-!+]tT#D^c)kc)kk&cd'jMQH>V0Z-QF_[p/4"PJu^!@dochBZBLD1QC)V/-p&a]k'XM+uZBVFhL;%V]"9(CU#i.O^E483&_*R)F6L7f7=JKOOQgXY'*PC1FURh+JLJJZLS:<6@YBp`*E3aj%6h9(9$e4!/,l)F?h&$HoC,@.J-?h%8LA6%F9J0?,#RZ^J=&,ik%CGkT`GA7ZVdgG3SN.H1rSg+Jlj=%QFt?a4?BMm.sc`AV&R?RTl=LpK4oan&:)+rp*]G+LdN]1>[4:k4+RGD%-/n0sN/[nLgQhi%o.[Ql5f=1%fo]RF`fa"%0=*!#PtmeV>2&6aNt+uI9o8&Z3]tb+iKEsQHmtrSca,bB1:lhSH#lt"UKeja1P,`N%kTFjK-U]maK!u3L8]:rYS;dkSJdKB'cTT]%WA*Y.#6N"e@_bgI/0rI+E.`86$)"K-`+hPaU8Q?a&DN-&(?Q1ML1V_Bk]@$517eN$%8i$c*(b/Ub%4296,XBfnTmos!#=hFMaEU+3n$!0j!Z<c8e$:`D9jm>odObWngcBu'MN7$k;*ZcBg36RZP54,<fm,&b+O+B2hB]Q[%_DCF^H3[#7iqZS&CPr>8W^%T7UMJX6m6D=jj_eUE'OBf4@)NC=PYMLVZ41>6Mlp60!8"a]`&P6DBH]rL]I6Nd'W(+*_\r%tE".1R%0oHS@FLknGh18`Q/!Nht/CWH`0i&[H?tM<de7"+TT&mrN>I`p@"pD!15`j9/,S2ERE.TWH`W8GrQUVc'aD;9U?m:<PPW!XHOI-^l%.e-UF.0h!e[I-L\q:#OI[QuZL<\S0nXY'V#j_@)OZ#WjCY2FtPWGBD]]I%b?M?h"^/Smkl:`]9ME('g+-j,?YJQ:O3`tU;qgB4Nc%@%QSBFP&niOCQF.+B9*a.s,V]hlo4G[\?#Bkd[A+VQ>=eA(s<Si@E-T5Wo-.&HOV1QYnMnc*@KnkACAJ:4NhA82.gc&P.lcR>&^B%(ZBWS10\piJmg>\-7N,`(`P;&nc<n`EHYs@6r9*l/7TacMIm`(+Lh9*]+8L+38Fjj8#B;?APk)V2m%s5)J=8F\?p2UWG`D7/GIq/%.==eogDZ<%_-q@Qd'sl'Fp5AH`s%[+@p6]*&kc&`Z<Th_D6&^_.PXBA\XmIlPO**AR;0''&1^8+=)B'&"W9rFd<j'9QhYP8%,kA"%CKBPu@+#--guRkh-/bA'-\EqOpk5^`qmI-TU^jgT-d^Nc$gVi"/_L\l4!^2/<tS/U^Bea).9;.i8f-Lf+_i3*`=9)'N+HF1[WP9.%,90Z=GYp0r<TjGjg_!*33S&lo4!7(dV,k76'V[uEZHg,jFrD\/'jg.DGS@s\;B8f1$+;+gCCqS0$co[a)b2@('#FoR,YWUtq)nd9%%hjM;Z6r9\!6p-$&8W5C5f8jPJ.Pk--0Dg*bZj$+Ei0+n<5hGO#gmdUk>3<*iI]OjJeKk`Z8"ue5_pn0Pt%P))4"L_b/3cNE?c(6%C)61f9F&pf-6eQ7iEPOKA1goJ-BU=p@QVnQD-VfELpj(Z6<;+d.a6I5O;537ZBK+9]*ad=P[.IFilqpA_T3$oEXYJ-eB9&W/Q8u1%#GTiP<5E$_.L/WPP02R\AID<;19ZHj$:]cP8g5HESKN:)/g+F=hTip"_>+Q@a=a,s!`Y:r*kO!g'b">O<])V=&L<i.gRN3c!b,_I%bg?'6n>$Z7Ch;AJFoY*nL+KT,Gn.AVUp_JJQG;.LY#g!Pj[hZ`bm$OmV<.cH*p@hm1e_C&R&Pn<Ze:]VYV?-Bkf`=#79U%F:RZ8H%+At-;i@&lDN%EC9RJtJt'uH!@&?skK6,]@;Js`/R94$^'*@n%MYWS1VcbiX!>qeTFjAj$AM%:K?o%t'VKrg3ilsdB_g^;56cnZrk%@eDW?/Pr.QWA68*V\:D(8[W0SBLF"sLZQ&2#<*<'<NM]Gl`)&iklVL?'oO\,@?)*1A0*#'qCnTaLTtZ!;Ste]N-%F<kRg+BB)*[N%LrRuN6qZU&Tke]L;-h)q,H+&E0?C<a@r<FZ_pEh`Gc4A9l,Lp?m6<H#&V9jp"\1Wq^*B=f!cY&#\j2JtfNG!o%;=49Z(!iA4@h,e%0Gf@Kqgma\L<gG[b1t+_ng3*W&nrTh=ik\P*g>:1rZ7L]kp*YB'LAYrKDM7>Z&7(S("F01B`5Gk._Qg^8o&1+"p!?B7DD$E*nAI)%^5HZ<OP26c@NhKg#"2W<5VtJhXCre9XK"n"g(lu=lQV.Njg\a[RKO5YYJaZG7@m,'q\TBK_)%)o@U9FoM!>*cQJhq/N[\0JW"MH?%$*_"0d6"TE7)Xb7"ndP*A,cZLZ=I;j$W'igk)Id5U;e#%X`Q')6s61?7HbT7'30M-R#53,oSGqb(fhanTQ9dVOT;@fg&d-]pBUnP%8C@L>bQa4a!UMjj7T\`&:aM8lE*X*g:C'$,=/t2iAEl4P%2%WYAD:h4,_)<#BS!-?L8HbV#_=Ce'B5C^$RhcC!'ubl9$W]:)DdX1%:mRUpc*kM1-4Xg]Lgoa+1TqBYUP&msL7K!R;qils?KM-boXO/&88\@;Wj#A6%g]eXn['Od/smud`DA;UO7%#'=e3Z4!#d[?!<s_/%\Ysr9FA+1A7GU:$Q/1LmJWqIEm6Uh!>(/$6d<N:!Y#2*g%>(/%23s-jIu/N]*D)PJ47!@?+6l8p8'ku(h9;^n6';`]&jnjE#HT;(%85^(o;]LDK1t[;]=I3lBOVp$P0EVT?#4h-OLi>;^bJ('cp2Sn&d#d-S<skhJmfO98_N@<$XuQhP)s!SSR;aSQrqSSl?[VLlT<=qF%T%=\b\&1;0*3<]k!,Ob\BjpEA-6>4GaiEVc[q?qN7/.,ubr@L5eZhR5.$b0JmMko&5sut7/i)D@ap;bA_SonIRlG=N^-*G2Sh`)Z%_aDY*")^L\)47q76,7O[^3_C\3LKQ(\q4qD%g']LCl1+CACLZiKTNB5-;Vrt9jQSrauprYO/<"E$O@+BVNUTfkcEsJ\j"\B%7\j#%D[Z*$D9TdM&mL0OSB*>hT6eUuUZF^MOB-e`T]+urD:ohH*NI.kbL$S+"c+qH31aFm*_Hnodn[`e6N25DN,sT5al.F_Eu4q@.bT1t%RRfVrl<f?QD'PhlPq2;(%>D/sG=%n@H:bZP>HEuW%!*7a4cE3Vja*e\-b3c9'pNMZKl2=W\R'9Cn2c4uHSuM"bAUkprQ-;kVeqSJ%V0%>ujA4^"S(06$Zj:0";m^-Ms&(dEV#tLkF8(YibCfbu?"U?-hk,jC.n\X;LXX&n5>>EI0RhVDH68li^[_;j]]Au;Z5G"?jL#<<%7b(L=F1;J91deK)`s,-^5J.EHL$`IEK,VAM@bsQ_TCa(P@A:Q3?A=Hr"t8+sSB>R1:FEeE:<<kah<jbU.;ceYR#WXRm;jAu[MZT/%lPN*$c78ue)g;e5^]iV7)e#K<rG5@`QG_d_K%sf)%Sa/.Aam?NF_eN.-H#7&Qa_s5o1i5le5\4_i\l5SIMH62f-UA2^[89d9UZZ8%_:2.<jeFHQ*9M1L>qjWXM/$N;,AKtoB<6^"Et_s\PD9o9erk#dYP_qrWefIX8L/Xi\?AOp2XmM1)%`ZKICgXeRE[a>(k(14Dc@Mo%$g4s@'e,_j9u&[dCAMZhChB.XD\\cX3Dn&SLj'=oI(5XR%8)F]O,&S=C7#>K-t`nD^-.ss``H/ra53[qiWlYbSHD?nXu'nBIlo6^%YFNC%o"i8JJOsD$D>N2QY)N=!h/+nYq:X7LbF>\SQs14:?AF5eQ^/@iIl9(0_tbReW9&9\/'dN9BiGdbpK$]`]6l`L+q6Sl\i8h"%Be$b8msY8q17O<5W5JgTS@a7M<*n4s@nIH-*N+Upp[+>-OMegs9tJAG:T+M2Nr7ATjP's(-^+U1,i.D)ks:#;J<<f#R/25Q@(4GT%?65E4im5Y()96GBRu,T#>YgOJ]o?;hTP'H6^$\r8-;>MHUn4b'johQUOUImoB?H7Ekg)_::%jLFKS+_m)cB*5cUupTq\LK#U2l<7%;J;d8hepWC:=GDHVNS\YRog]h:GCh;9lI3TVI,/kL[6[DUKN8[RU36^Tm*No?ME8h3gOJ"f_/le,kC<qDij;::;6[rgN<3L:I[?#%pp*ma=mD1]oL<h'eJV0O#.XaprS+s;HD\/q;ZiJ9H8d^loQ#7:L[j5sDr^P/%T@U2239uU]9/U;,Bj<XPS_6\pXubb'Z(RSfBqFf%.cTpO\Hs+dm;L#KAXmE%k-TdhZYe[0i3b>>Ip1FjZrh`5&1FG$;cBKJ[NgEEm?'128#BT)kgP[A#e*(DSt6@NR/N"b>G0c^]dcX`%:0/Su8/@ePOsR0J4JKA.iG?)[%qHB`T.Q9HcmNb,'R:1PL&WS:at2L0I7R>e&%f$'\e`$iDic;Y;OXoaqP\(>4eTYG&QpU@#-L#;%=ImhXo%lSjE7;N,mh/Nt4p/DcQD$+H@s2$>.&&:Qo6hK3l-u#3`XHdD$K$<0@6QQF^_Oi\Tp!i<WcIqG;_4?Go:tL.ZC'WXKpF^E%g3BqH.(GO(!n'/!o"'d'XF2PXG'PgI91VP..?qN6e=HE1\G%@<lq=g-mpGjm'YC&^\U*C<6XfZRrq[Ns!<#QQVg'A4kJp&NnWju5%CrAJe/3@s-0ur9<G2aQ8RJ0E>9MXp@8%D@7,<m&'<ZkN>0L&7MVtn"D5;kj-(S@2eA"JlnG&50cqK&0R0pWqnYKjfuY-ZPia)j>#%pKi4dpKi67@P@.$I.BAG`8)jWNDpX:/ZdL0GN)N"G[$\i\Td&R#fMaOn&.@.Lj/="4TqL/@>_bn2TF>FY_XoV>*oOZ2riao9g&10%*p!<I0CDc,\>R#bUgl'tBe,<G^[1aGZ1A`aUio>a(/%St48'([ML3Bu7\\<Fi.3"FEgj:k`0+oC&K<1)G7Y[7>))Z(3.8m4nmUK/%cQn(mjT0&G;PAIc$gaFBom/NaK_b0*1q(aYNa<7j_Ke9CSM5rOrH6M:Y/O4;Z%p71VE3W,:Do_#Z&pfM.`9'_2Gh;;ZaUOmYIOt[%'rg-/14pEkfIemX$Ap@fTg2FA^6%WrN]_?T>TmoGSKPC<11%=i,E,cg7tcE4D=N-)U;eS:M5*/q/0d6]oO*O'"OH)\jP9N=XJXdf%58ge[TH:UJDC4_#o6&F;?G23A0+9Y/lWn-IGT(m2_^1,<@/RMB*5i7T%TCnTo6/tB#b`Xf]mhf#kY.3<S/0S8am+.RhPalL6ln@H%`0bT`Y3@I+,cmQEDU+qq*[sit:,]e6HXV<b;K?j]d;U@/?u#BB%-]iJ<Oi3'e[Fj.:aqBee_Ylo'/c:dXWEc=4[H457G4\Bbl(CX%q<OOG!jU`f9$'qp1_gWGi5Zi:GoF:DneAte)A\eW`r_]]\sK[U0-O<U:PQ.2BbkHW[sFL9I?20>&jJ9To<FskV%!j4E:=O6=m5L)%R&%/>EL6R6q["ag.PICb1D5aQ&9tP,3>e:Xo/,I>AI"rP71Bju"Ot%<*0*;$,aGi3c?0sSZcRT)J7oLXI%/hArc9$`Q5J2Ij=tg(%&1JjH)Nm7s9cql='KGd"mX>?O+F-e5IFd"H4;-0%(2IIt@gXARE:*58p:F_.B";a97Y,p$ij6r!haI?YKLnle[aTAdDPugR89]sK%-5Z).FlcY"V[Ilt0BCmP!p<[ip?csQ$8)nAp:=o]"(Q[`OuKV/H$`hpEG-SH13Ui]o,G*7i'gM+U7,E25iu5nq@QTp$F,0GXoae8%D`,JI[n4F_dc%mC.l6aRj9SYYVCQN#?fdqO0>iQ]n'X"G?AA*+Z')/pVmbj[W+$bhVL(jWS!P@=Ti#\.!uIt:R@C"fKesi9;LN0E%^]h46CB#<a^aMMJHP2SBAR7Ke@S5Ir4nVE363'a,i^O$*DZdri]s2&Rj?92[%Z!/BrAb$\F6LEp5EW"7Mt`4dVW3E'N-[1*Rm71e%.H%l%)M"ngjGICQjCn+(07c5qg?g3U0LbO'?33-_'$p<#(bNi+AF,U_YBQ9OD$$X@!=>&BYUI?TGg$Q1T7*l8ac`[8\*:2oicud]%n+_8N':G2^#O25,_.P,#GjKludgI9o'4IRmEAXnUV+MGVfX]nRh55N]*[Wc@3p/_l=E^--g_'=;4b?!)mSo1unRTjnLc@A&HI%(?%/Cr:7GZ^Ib;V_7fLq.UHpRFT>jO<1flGrMOs*?*+NnS90Sr,!.GA?DP?Vu2o/04KkqlFbd%OQ=->K([RZn'/X^;\Hb4!%q%c3HOm%*i[?D^*f,.H,no1&>g`!Z$HEKU7hFtH?tF2iEeZ$3ENH&G!%F#)P:Wb@GG;g@>qGh1c]BmO6H5L1T7+TCUu<<0,H8TRWZ[<GV\N!%+*%2?YTI:8Cf1Jo7Z&kOmsf%lfR=YX0(T>==o*h@R_!^q:5ON@n0K%jkDp:C)t=)'"WoSWb53<:jo?TAE!gDJAF:NdfsH^)QK&jS%N7c$UGTI@Ag!^W4m>]=g03N<lr=&!HZVo<;i?,kR/P-1(rPQ?B7XaWO(Qj?.]_ggJ-HCjr#uaE,O4-)WQ$4/2?/Tq7O\MMiX.t^0%o#?4hkLJg?NNPg'gW3gOH."7A$Bsu>X@de-d!4Zi#b$+U&!A%d5KINQo?+-_M_hL?(lU@AC#29,lp<t=JSXW:"Ro>$+SX$hZuS^>%VQT0T&9G@tdkNdKh;Ol/?tMMsV9S[\@6#[dP7`udL,3\DYAWBGDTu#)grN0o7K^os#&(OH]5YV9$8QdT2V^Vr@kip)C"CF:[RrRL%Cq\=Q",;XN!`CCa'N@oH$_3$rcL87n_aRfT]E@E'+j%ULdU>Ic*NENihbKrCmdP'_1njppKkVUsh4"V/d]A6;pfc49i>A5TI4I).%LW5.'s)G8k4g/0<XLK6,"fZ9[261nV<Cm=EA6A8rj[LTC-Dikren#SKoDOk)`@;;"/pfF#-dB1C7[tRX4r_$<P7AJlKXs/5,8@8g%O[Eb$<0_F[Bj05.4iC+%\=!L81fQ"4M(6YIW#Td^hfon+d4V[R,W>iABq=,']l2*`+eF1aj1_DZ$5pP^54"3Zo(MCbG'/_Ei9Vf@%j/3aW=!2Upil-kQ@MrH>H>.N0#_58q!2b;6QrXHdBo=ff(i'C?h!<T$?t2=nHI$IXr<q*23OWpG0]d88_fB.R[=+a:L#^0Gq/Z"2%QTb$=BEdp9US'4OA'o#PBj26@of4rAbC%0B+-tq!Sr@tpcq9q8eGOV[g[5MiD=@SOd3'iE]5k,TW<K+XlBBF"d87L'0lR(]G-];J%e]6\t',K-e\k]T-\oJ.AGJ@kq#Pbebl5[V6,Z;`g16WNP(F+c\ECr1ZeOM'I#/*D2\.RR1DA6610W@ji2Lu+%XiP`l(L>d?bTXcN%2DJe6`fI/",e%&N%a[28SQ_=,*q+hoC0F$Fau/*44'[nbSA55gC3r!In/pQ']d<"72Nj(N`#k9mEWj]8]C^k5[W23H`QFc'C.E=2%olqkk1FS&^HI?o2XR%*mO3GTM7r6W%hEUG\"@b+_mb^c64U,4pNlO+r,!,krR@_28pi^ABCsrW=19/.e]&?tXLM=>d''%0Pp5sSP%omjtRA:Y8g[P!3((`'n42/:]l=N9N[3;Zs&LhiBf(h?$bM`^HeKlUC]>RpYP=$Kj8^m!WYp^1ZBiur5/)dQ,W!)2a)CUsmK)=1n6%!/9ZiRl9*<o=FOQd2dOQ#eY$t82aq7b`3:d0WJpRJZu"K4I/67PI.loh*tMi36k+Gd$sgM9abA=Wk'Gh%YQ]u:'f__CDk0,CjAH4%o?P.'2t)XA]g/H!8FHQT0V,931jYk@J@V0sH^f3Zh/:m(*C.)sG4EiY1eaKE&O>Bm!lVOr:Gg5e]`[KI\-(s4(]j8CEX^Ks!3E\Q%(VX;dUoYg)G/.u96'Eb4:JF@+1<0,^Lc+$Y:oj<;&*##u"30e.IJhdZF7V*^Gi^Spr,Z!.ZF#X@4FOn')leY9fM<aSA,fL:#C1[`%\D7F+0Khr+"AC!o;l=.C8_Be;^m"$:Yk-p=%0[Au>BK+a3/?cb7#Z7".DrMIf$?f,C8\$8B6nH3fu@.cm`KdcD!Ytp+kA>9<GOt'%O%0Y<2)bpe$j1"!;3F'7J[#uagB]%`UqtLi7rk)>jM>_i24<nP_kcUk,G8jj5ceZ4!o_.$b:&8!``O<aSnmLIDNsg.1k>GtjjV_N%6.Vj)]0rkheeeE0\H0!RN;./;`Gh'XA/sS<Zi4e-)IsU8Pc@hh@k\84H3:9FUOguM8]cA_W#Oiho/KDcguD,e]W\qA#$O6\%((bo%CZaG<CD^?u]ReY[7KT\`Z^*NgW+mA4/IG>Z>'$RC#eT-qef2b>Uc!n`)mtgZXko?65[)?3f579B7InKr:A%i/@N3X=@dNcoal)L&%Gb_H<UOgsc;7V1^fU:OQlPALR#PK(^DAOJ#f6l3ETe`+gVf4XTp)6DQM#qAhrabA)[Qg6@muCIj"0MB">uNqi$^\K+AjV\3P6P3+%lC:=^:^2(e>XuonN;+IE)C)@K)iJD#-=kn&CDo\cUK9ujS48eQT2!N_8tTO=CJ$V$E1C7]_UJ8OrSRVODrV!sr-q2Yj^7Qcr9sY$%a4N4i-6@WYPXFA_.<!Xk[pl'8;kK&flbMT,\KQWpM=lh./=;lYUNp1TU-VofVWPs`8hZHTd[MYu"]Jj@Fe:4P$KJO@[kR$irU-PI%K>a6:iD.?k14Z"i'Cog,0*DYdSjk6-*i</N"3/\.hMS9d8qJLF>f^'>><`5k+plEIhR8N(9^Olo>X6UFRF\M$![>*8k(YTH0biG:%3#S>_<^f$.(0&+GOLk@+$?<:%j[.t?4&p)G(D?B/Nma)2am9*.eEg>Xfq7!A^_D[1Q?"u[a%`0q;Y4AFrdG9lFbmuIcq&obI+!]Q%q)i2lXlTU_hsZ0]-*l*;#hbJ;AA:j^KQjmm4m0aAL1ojd3p,)MidNTuJKPqZH:g"O,OOnod2#I$ZgNR/(?rp,-f%*3Pqo)+Cd%*a%\Y\Zo*;cGQY)kscK6c=ELlF?D8MShjR0qthj8$8um@fV84Y0el'fMnj%`Qq1,HlJQdJ(_'/,e@_WA"h50Fl(O4L>!D6PV?e[i9QI%,+GqY6Q9o6URE9Y&R1=oKgRR0`jWLR=YZ22)8S2bW,451_Us;#b8.d*bQ#q4.F/(L=#gu;,k;J8"XoFOJ?2Ro<m66aDXpLH=kP[n%c!Hbgf6%otY)Br@2lNu@(Or+O_t#.kq!NlO\ZU>I*gr>[b"s?e?8&CI_%J4V>N_Wu<NOGTWV0sL7GI@:ao-jdjfiURVm]uYD-?mC%kab2D'O0cAVS9[L;<U0Hh1YG:HABlgO(&g[BoJ6n%i1%U+^O:Th558W:Esuhq/+P'^#*!'l0_cT0[K'(&n5H<MKD>fGH8>QR3L^/%@_+f+[C3!t!p.qp2F>`e\EDTpKiO"=C`utFs6M4%Ss*`G;k2I'"Tka$S<JX4a)Oii=Oa_QQ?N.9*1"!hY)urBm4dDFDH+',Y4(<\%b`G*#4bAG<6q"p;J6'^1r;0MmGS3/m5EsJT*<HZFDKVW$&Ap=o3?<]!;k0tF0okA9:P<?5@;9\QFuoj$1cZP-H#<*!gEF@;[,fp-%&1e&Na3VP0FGIJI#S,=3dn`Fr*$*49H`&#h_:(UhK'5F?3!@VZnSeb7$8JRJ&7?-9&AmLdrV6*>#aaK+/.S$)fKicudf/8?@_"i"%Zmd#Z$G2h9.CWVkAm_giISCI3:lK]r.J+#5:Hmq&m-QO(T_<(K^O&QR^>$ZVPZl],bT:ZSPA.e&gULVW'oIsJl&pgA9W@n_3i3UK%?=W^<oTZr`foO'Ml5H98:R\_6Tr-=J\o7GeW/&")dCE@HJH!^;c(<c?SoTm!%m:Z(jmFR?<U8*$)$P,lK7\G>?$G>@j8EoVH$n/u%BD4T?@-f%bao+8!MKWdRnc68Td@_ou+DAPmOkcKsn@2[kcI08-#srrVa`nU^9KJ>Se$6SN)0H?megPl'\]sP^,^jZ?hZ'i$V(Xu%%co;;n1h:S)ahR]<^\QL]no+Lfi:Z!brp!qkD^77LSVJ9IUJ2Dn"jKG6p%asuTL$B7=Td^,75WYti47MGG^tn3NL-i1k"(.&).\$@%TFo65"eoH('5&(gb1NP/"4DgS1&,0Eg*87kB<Qn3P-*$6LgZYR%R%Et,rW]:Z.&F!F/lSk9!gqjeD`3NqfeIdK@<dA?h_1890`Rk%IfYn2Y\q=M75;1M<58%a`$[Esr\.At6ibW=L'c$JHC-BDa\&*NW3=XWUN+^QpP&d1T28LMgn_1d6\:j02!Duc-A<rtDH!WFoB?;7%Tt=K6QiW7a1e*DRqo=c<A_733ZIE[54ht.`_o=R?(i57']\)HTU1#X9`WW@FPLQ]<^\,b+*Pb^n6jJoa<ebk70ES*?`YR5<T)^eU%p+E^)M+c,fF.bH4>G/jXl$A0+qG^+rXo/Ot%pX/7+;Zup!j26h$+X2mHBhHgQ391+RGS6gF)m20_2b7gE]k2>HcJZQ#@h'qJ0#P9%!iIH%]mpa*:"Uq]n8'e%:040s.-"#@-p"T;qFl\ZH4ahR@+8m74s$R<,T%Iq!W6LG*Ps]o?pMd)M3^mj%8Q2NKE4o1Q.\WmOi">U%E3WFLph+AWfg@"X?5a2i"^!As88Nd2e`T54Gl9LQjC"u(QS]P&`,d"IPXJ0;`0qJnp6;9m*Y:26Z>mk+11Zf0U2%.HrC/;^#pZ5p%$+t1i;*Db'W\d"\3ic0[1'+Fi'A<`9`s]D-Y6'91CJD$,!Sq1#&gG;&#_QG!fEW]`LT*m5,C@\>\sRjc:\<Q?@5SgS0kZ`T0t?S+%KdANQ<b&Un#QG7o*6NB(.icG<fK/15RaiSVJV=0D57$7$,P)-ORfb_X#RUZh!pIo5g^Q0aMU@'5n,(AC@CpAVh'L/%n7.SJB"eKJ%*#cFc6"jldF>HYGk<&Rf=$LPe$tl9[deG?FRB]2unLO-?A!%MNcA4jFp)*/^4"QF5nWJ`!a7$["oGAGrLk-eH9+%m(Mon*ImaPH'%/p:Qc"6g.-#3Hf/#cO&TWa!+3+B/'?VoTP0>9pbc@<97KN]V`,_1b#HLRV0u;6J2e7aaB4KuPjDHhQP`obmdRha/)CJ,_`)n>!Vt%T45/o!ZEeYWQ</ir9b`T/#mqdL0S`La2,:5\k4C82El.>O;FRV*`FI'd4T[lEC;epeE/TqFrbcOK%K$E4C?m8no9:rq$+$#X./SB%7tH[:D#s.^%\F,Q_K5:7.o<.0L2]jEDGulXO8shrWFX"m))shF./*uqRZ1#TpUD%%[D]cZ.2\X$##2&:MHn$VgI-`n9pk0Rg_[Z/%JMGKuEhNel^p[pEhNq:#j^p&3]r\&]R[No%FeEpA0T,O_4f6dM$P4k0[Q)g5?TM>0IY58W43#e;;L]N3FE6qYH-?'sOt_fQ(J2lb%b!gi7Ro07pJk%8=j)NAk7f[-WBp@$B[n'`!#dhK8>m[)iF->K@;)5&&*Bm2EHljV,2)FgJF9Z:RlC'=frlDU1`S7VW?E=9;Ej/La%5!Flis7S,2_S4Zk)eH9H4UCKONQGG^;[12R]p!^^$BA)J@1R4#07Y_!6c=3q\e;M*j7QeC.*c?F?"fTK-)5QHjiK/=.^2o(+eU*A%]rhL0lJWrf`<T!oS6h)#_p)EJ(K\Za,<DN2E2D\;6YHfHf./cdkmS.ZfS[*$D,]`3b5(G*G2%,%O99`)?j8uWHje]HlXg4bJeR[Z%EF`j)>Sl3!@,%QlI)$s]QU1.iD!gWef,a7&lIn?1"591FE!-9R(4O[PiX:'PQQ6N7m^FJV@DG[6)d'tFe[_97DE+iBdm(tH1jU9'%o%hm\G=/81Rs(LJI1?cWEaOK`-2R7>B7TnqM&3K#@0d$'`F`/a+h_+f3768H>)\%j&7)#ga\G-gQ2iu`0YIU_94U[AZ,/UFS9Y<"%1MmBOZOE`Td]6&f1fK>?H`Js"KK9T4nX.B3kTFE8&i[o$[UIqKQ9XRG2<(`(,DDd-hZLTa..9+g=LUm^`.qOC3SaJ49[sH#b9$ho%(//SU,ng@VnlIsdjo,TJ-.r3qjob,7rJ#7a&AsK#<RD\?(X,X4:9ZRa/"Quc<T`EE(+_Q9i.KZkYV@pTHK1@"S;Q)i:+,u'_hGRh%89J.EVd&^)+1KQPD\gk^5tEYsc6PlE/n]?B%QC)O,f\1o_,2d(]RO>^#(I6t/d$^R<+#KmK?;9`Drg7C28nR?i_u_uB*&'dl`E&#%p)>1H$=A.DTBc]I6aIN>D@PVO@A^?AfEC(JI@2>r2P8"AVT.:m'K=Z#?edWV?(XPKBldbq(1<(;g[<f4F`iSK&G92JpplbZ^o^]+%)SkVHlT@:]5cmcYVF5\r9o3,_.`mD4``<N:T_\(fo?e),</oQ0Q/V4@)N$JX@2np]O$6;VDPdlBYN@Efc6G7@IN]i2%t[c)$(TE7%pUQOjH$N\Y'*'Yml)0%e!W-I&G!$R?W06-g!bQ4q=\G9Sn6W,J-kYWdmW;j&cea)jdL>+hGNsXpppfFq&p"hLRodq);NLTFVT2DR%ca"f>NZG;)LK2rjo[-q?Y/f3q^;"p#"O)a%OaK@aK]^SnE\Dn,!(l;hp\aUH?B2pi&bF$j2d_M[Op:I"GOjkW^$G=ACEFak]`2Gm%I%<l:N,*+L4jVY#Su^nU]pRqH?8%)#b9e0_]ALJ`(\9^qkp+n%H3NAKki&,jrVNX>'jZlMnJYb^a3,S%H<\.3VZ5&G!6l0h3S2Y3%7ss(BbH9^CYI9$a;rZooGr<]McGl4Bp)gfm?bWjBf_$Vi)/6iS:eYG":aPtdj3,&C'QA*salMY/>_A'Zj.,aOL""8GAaGJ;7m&Ct%=jK>%`o5pYR'&\YThJdSri5gK-,3eo-[l.:ZUXf=-D6MN/io+rin6AuUSbq.<&qk*("7i(oh(*T-K8P_V++LoLAFq^'UacU77s7S%-$/PDK9:is11,s8[tOe=^Hc?]lA&>Z0;\M5eK;C%i$0OYRc1i"*U,*6*oK2:9kgoB"29iG/,"beRNd:<[(>lZpm4CfS>)'GX/G@/%8F`P()b.Hq2P&mOE/0L*_U>Jf1$=n&o)>\L*ab=-U^_m"r:u9JH$SR++7[NVkgN3;EQCUbrpZiUQLWGido\_;hP&PfX7U%3c]Kle%l)V(:s"[f@62r^@h\j*@RE=.^E3NhY^KNXiQC(V<[<ot#'7GB/EaHDupK-fqDs[D"3sG!&p@:j_rnP[9HhdrNT(V3<]H"X9_T9Dg%?B+lhWP$puIf+Lfpc:3;cCrjrmFARk3Ih(&C\cHFqX8=r<*!"5iUI_IiUXe6C^nD@l%`RLrNNab.pP5n3G\qJ1&lrg5/O"lBNQL-%X(AO/Og%2?=-F4?8aKA'FHS#r-GZb[l[83+`aqs,2HGAKRAOOe(j&qQO<#\+2gp%GOR\U@EO;NQ+"uR#-P=&//Q\MX?VdVXEaOlP%C$;j#+I`Oc=M6sVb6:7caY8>-Splk`"Um-4+EcreE%]NC?Z(IGZrp"K(#-Za,m,rr2jVt_:jLOc`($qXr.%@He60l0Y6o$`Y0k-)%[hMaIY:S5e42E,ZOcIaO?EE&!,dJR58LWAc-Q3\a>DQ;u$t*,r4%)_e3jD4(&8&hkM`SkkR!$/+3@MV^@!rr?s7>!']9*1A,U87X%fn"JB`*\8]SYNb1TsI`VYnf"4?XMIe1Y$hergfB/q9*kVe>J>3l49GsNM#@'I*?[]A(:5Gq/okj0iHs#lcT%^Q.&LgMe2X8IekU,%%n;UkpN:2"h#t+AV9c<h,"K$5jdj/R*Ug1<q&O1^S..-djQ4]NhcMJFIY;&jm+5\A3e0+@m<CPg4YPkSQMbLTqVeEHl.$>)rB6A,%jn*jZ&RS;d=-NOC1>mc3Nd*4EQV6Z+)LPkm4[SlZbPL=:q!Z0UJpQB.=Q'3NBB4@sil#YqDd2XD-YGh`$k2*02AX4-0EuF'8ai6!%hkqu%UM"CfI-6;$_3e"$L;;mmV4M0c5G@R#_EE'"$:3saICa9+7N!5m.A>\;BqNtW4)T=Q?V],pO5OMDf3Kme=\YF.M\5ku%L54G%'u)Tn/jF&Ld>nZ01"l0S'L`a3Z(js^15.DW\QWqo)r52cl"<+2>dE78?+!1#kjoOg$h2mNa8*[[]XYF(cg^hr!jCT8K<FC`?bMV%%,Jd+7MmrNBf<aMV4F/mF?I-l_ZhWX0s70K-/=ed`ie5\Zk4OP*Aal]Tc3C9FYM]*7s7_fPA^oUeotio+oCl=)qgW._)&GTf.,dEA%i?t8k)Q_RZ.kq5q>dH+=c&5Ds(S[60Eonkb-=[YDR[TaH`BkB''TbuGlr>=-(;g,B[F+XdXZr;DMXE;a:64Mo0]+F6(gj>ah#QcJ%e4/C&89eQLmFat?q"=U2HViWDXY]KuhrUn;Q:(JHqu0DD.0PU,+V,!DOj`SM=\9+S\Y1S(/1.d7XdDEg;5a0iQ@p1<JYuBr5]h.0%nnKX1U\*&=nVXf!N^1:D`p3NQqu(Z'j3*egr5I!3\^,I`Tp?-/LU[OWM4_f)MrAqt*K>rBOg`KYbLcLZ4hmR#:I]jA?;.7=^RC]H%kOFlVmjg&S(sn-n?i='DrehTbi`4"\rT3mJ^\[)Zp[G5qr?#::0^?p;pl"*X2Bi5"qDs*'Ip8R!Vo"?`o5]/jS;=@\lp#/prNc%d%huB%/>u5rVA>=61o8HKM1L3'$H]Mp2o:2+DFUghLaF9\0<!)5]!jXeXF<htB&gh8>p-i`jAIA3DWq^?n\^p[-mEG3EHV.'iM;=]+%EYA7B@dD9!9=ioN':IMqhWaVJ8bOC$[YDNbZ=MUcoO]:;q+0pP?"93$O9#-?"+9ug^@P"^_$@bYTQnaQlKu=.?2boNb3m"LI>=RP%=RQG&X9(obP7iek^bRh>=Ps/RVPn/G<Q/&Frf"]i+>rZ\LqNBBJ?qj:OC\Q4/K6TOb)C9)bns<0@33F&okd"\=qgHdTTi+I-<BMj%]>:ZpBSBDlP:e<PXXlddMO>4_0]kupJ^bV5W&[F&2W>Pj#lnU]QB5K`]AS#*%2/18!8(b-![@2k\gC5^0FGKW%4:#J6bq;OL,!<8%%RITB*^+=<Ui>:70&@Ohn%0.5)*@qg8<NnEVRs9E(b*6&d*FDAE/>2[dJ-A#a#:[`%K.,ThV1I30+]"LkqWfe!GP$PZnA-nKUh]2%#__+d\,assi'O0lcmMR?TKjjo?n`-h&%-3Z]*2DjC`oEKQmY=8<1s5@-;9-ZKH45(T+gL'(RH.G")tPW8Aip8VYh5f^a62mnDS+b%^\N-APm],t:C[Jf&Ro#/apA[)\n8sd08YX_>LG8RlZ%YA-;;#E7kYT:!S]OA*8N$@1l(>20t0KWUEp3&@uBk=3/3EYf(bX&rVC&+%MA/k,WKq_3OeIj7)!&FC@n^tG_)i+"+PA)HNdMfh1]P\5&k.=rS=Yh+7B]0hfs2L[pk*NaIKc2h^ndji_Q?+>1*ZtG'+XkP^cE*!%4#l*X]IXR4)29+K&FGL/`1pR&&A]X]%8Q#YPt)Xlq`;kRnM`HQ@A7iKmnDrEe:jiJj6a/:#DZHc1g/q/=KjfThB#710MSeRd]O\@%f)b.O%m7u\e)N,$1l]YEQ`?tf++ecR1*e9ETHO;iTsNO;p03qSe\X]aO1?<kO]`;NL1o8>-bt!;ST[bWI6Y/&.];c^ar.Fo##k`p%!U7/D7![%A%)U%l<)$=N%`?`JQU;8P2>%0a#@KL-(,ro1FF^X#%8q-L5=F3C^5FeKl2_/"j;F&(UuL&Dg5Z.j>^/ZSV+Qa7j9-e&%J:k-sb9_7AF1NGTZksT]mBZsW2-)L1alXZ[#76s/!B,9_[De0scc4!8Y+HQsZAGV^pWF*f;[]^gT'gg$JH(C@X*CB_Hs=DGj;CZY%$;V`#0:$R6a/=Y-f*CO'33t5:bd:iPX9t0PmU0MFLejb*<4jIaj$Q)98RC<`AK0@@"@jb>J+PW/E,YLb=XslE-?rjmU(X,O?"9l-%Nk:M(P1BKu,,B3m7qqe(iVeI3Q)rfd=@/I0re'H]paL^l#3bcGe'RfcIT*b:M\8,L!jiXqIQFUH_A]JtiT7;[#]:IA@-<Z9+aZCe%Oh;3m;id-t;jAO`gisoZ?Iu.W&PT4LJVYd`1-="JiK%<Ufr.Y2!9rgZ,(,VLBW?5CROlYf&)_Fc9q;t5[t<XH9p9!8i.&SM$Fa!A%W0I?5N99QeO@`FoQ*(:`LSQKCP`5iY:O.A1P\jsKH2uW`="d/%c<kg?:.(dXXB943^\+)+&:MnNPoZ55;bt;6"6RbW\F]T19BD'Y%@<m.^#Y0Z^AlrXd+rJ/G.JuZ^\sbM(kS(@;`ksW22e4rO-k'$)4@&u7`EUqa.F7^W-m$Gq;eM:ePp3K>d*t3uP/73HFG`i0j_uA"%!?E<u+,c2j2e[M2iG;j&16hWGDUh4.<U$T"Jg&u>GRBWqoPoAr[XaD?`msImd!(0796@=3T+7;!a["Q%MZgECp;oBAgi*rO;9.'7%KF`fL.!J:DHbMne("Q%t(LUdt?&F2P=bd[<KaAA."F4bE7o;b_GAq(D-3+8faRd?c-V1Y8e_es,>jaGHr$I@JV6QXoOt2J(<)\"J%8,TdUWU`GVK=<t[L'*kB))'f!e.gTY/^i*Q<IUtsLJ^j%XeHjU%e6Wa@M^_`I^t*26QTe&$Qg+.1?,]LS.Gllp#^#.f;Spr.nU0t%&/[If^q$:8#.oO7pCJ(P)^Zm=6sSr51T!JEYRdQ*]d".&%7hQ&Tif\V&n(]35Df^nWD0G"3\kl3T\q&jm"gG(]4Vf7YF5mkSb)!r%fj<Hn@<rMsqu4g3LmV^$nU\<9&hPIJLAER!90AdnCVhh?`J:R8m#eK*ZM_+T-Ke(Fg'=Zo=8:`ZkC9^JQ<,VdETb->'u$6Zc-j5/%n"12LA9IW8-H?TSqu*4]86QIGr`%6?&S4q]bLlTP.8k(kVWHph!sZkf.9TUY@Ob*:3@NT'3Ek^).WPsldAn+P.:c#ldb8)u:q8^8%X&]-8n4A<sKt:fIT7$E7QVH7*J>Zr0'7H9PSir%8HC&Hf+]q2Y)3<+h88Q3oFD4#ip=f76'C)$2/No$f6ds+JrEq'j72)r&qHsoW%(*)AG1e&!?GfiF@+!W5k)EV(Jo`YOhKn2"<P\+@iA9!4;'u8*%P;,k0.ms+%m=&7cS2MeS?i$Qc$'rcV1*`=l`Eo\04BY8g]DhZ0%--kaUXQ"gL,O((h%*?pS;GTRq4aBo2,nR'6+G/X4Y!e]2,+,O1?)1XpVG_s_rZ89k;niZ^NZf&RaX0GeI5H`B`U8"2#9dV,fFju$%1["]hHo%AG&_\d]8>Aqd],"/(`2[aNP=-(*0=kQse^`%X='Ne4+^c_E3d*%Q2M.SZ9W<1KQ<OG6]5=\a'F[SL>JCn*<8:$m"MROe%Cb*8R[!>'4Q_"6DR;^H*B^E;n?qZh.PVEVS.]$qU!/ToS,#+K]jG#^rn,47r[a3;2E3`C2FD*-=Z-]a5qq/oQUZQ!]OJP6.f4:ht%7bEB,%I;]b6lLsGYNA3CGQ2PB$`'n9EA$Tj"HcriVG1r#'K+h*2$9u^l:g`J\[97?kJ/lfKd0[T#a2&o$e^NH>fik-]n%g14i&p.%nC9uf4@iut&qo'HFeF%oBg-hhV+`,Gq*sg;IN)c=ln"a,(bImahf/ptLMIX/5BfhVa*Bn<p*kXC.&a6=^1ScHSj,4`"ejgine?fg%'SplY]pQNLk"),(faSqL><nW4#sRf/59=RHfR5%^cfm;]_XTVg\IK8sUnZ'NI]8eu>A(?d:A_b>qHP(h;?RhN*i9I>(>Qe"$Yu_U%Figm`"_r[^,g9>t3ogO6#>OP7C`/m/ZNW7da_\-4ZTdY:$Y1R5M2lGl;dQ^V_4P0]ZV)(BH%naEH[]+\Hd[OD%V)X5fOi'"O'OE<%=#aWa?$deti!9(j&sB5Y*+9NMA\K9\jP@[EI/&3?hZde=H&h5>!1W8O&H7lj#X54/itNq$,qVbVS%YqhDkne1.fO,PrR1LrM6Rkh%MBp#W=6'+uHRnHi-]T.SE#b0?%NiY/G6L*3+2(]kjqN"_R@0r[hD5WqR/4BVCRW]de0L!tQa7JI_<"8!eCIiT"kKg15=5hPC0nGP%X8;OW10m'o^KY+]e=:<%Ei%cl`p=CG0caG6+;B([**S]</;sPFk[[kn)Ok:EUs4Im%EoC/n!(L+X^[n)hVP+:,#8Q0UrHe?]5!_s%,?1IS8+S*VK\&b=O>4fI[CIq%S"V?F!JYf*e+Y@u<>\;O`XI&>O%/,o'^fir;OYgdK9:0^1bue_:L&h\!D>inLo/>>(acY.i/1Kg%%Dp`%^-.;q#;\J]c6g@bW-RfDjj".p+F?>AM^K9_W>@.d0]BgNfC3t%/1upIk8GgCjMS8:@iElB^.jqY$5FC)G2Vo+[H6c_M%%Ft%jei@&3IJf3np'gc,14JWUh!bH_OhWe,ObpY'M_)8qKca'.:^$g;!+Hgs0G^lL,ba%msiFA>mS%?goRWOC:WO`^bj'f9dH%CnUYV>%D1Y1jIbE)Zee*"_%N*-KQ`*je)NK6LGaT8oABS`i5WB9peOQ+S]6dkX/6aW+Em%(UZAlK)KZ@*:X"!&:gKlf_Dci>AVFPk_6sfPl%Kq"`VFIZY?6Q=NdMd<]-<t"]VD@ang"(7>l)##&j8X'Ht55JHd.e6b<$DLLWIqIEL)93PDD"am/;K5B'V!/ttr7Zok?R"N3[Cq,;%^8sEN5esgO;P_F!Nnq7-m?/#9Qg>_(298\`>2HM*7hO'b5UV;0@CMM1'f^ITb72&b]$RFrK.i]TPe[h(/jK?R9chH7,oe//E'YVk%?K"^Hp4Kd9V)OH2,%"=u5M1@%C#[k_Ec9[7I33AQe'HJ%k*Q0>`O.$W!MBt1j=Bq*r?h1MZYf>b@:HoBZOO&t^3t_Q;U[OW$rq2R%;>:]C/#i$M@"M;Jn%?q-4Z;-?-R_hS"R[?M/CMcT-.#7+cTd!MFaf[M9D(IR(E($I5%>`pH#+#O_ZQoF[CIgV(4.,YCRpb;kpCkG%W!R:Ho=T@Mk`<OhN.PsuqK\0f#k!T@KG)Y2l4']QjHY@qb[M*hT@UNfOdYn5(;f,`,J5V*5NhNI<!)s?2i9,jR1kJ1$r<9dba6]f%'u7RKo/\sHO<mCOn.-GLE#n.Na*A2Z_G/)]FQQ?-4N<bkTu#lj$M7P]*NS0VYnPc(H;*]Os5Q"(!<N<3*-Q'u@I`qO?^kR@k]`ju%*sWm]R`GtHJO;PRdcNs)j&jgCl"8naV)XJ*lQNi&L(^q0(.FHKEd(40-=b(tC@TD'"=QcEMa!]`j[$/KlAX0'iT>;dBhYMj7/:D9%NK_3ahPqc"kcR1"*;'oq40Ki_`uBp`4Pq4")R!QQ6g!r2pD<hIe;8u<k"scZ1"\n.NnPG-$0S5T9I9bWGjs]//J?B9?C.]lI*"WY%Z29*0=dhk]8ob0QmBH=[A$V,+"K44UGn8$.Y&N;#;4Oqi\OplZV8uu/9o;iPV8P#=lV_R?lI"EW6<TF^bWI-GAU*`9SoZ!(-*(_$%&g9[dE,WslYg?X=9g#O\S#*t+n7K$%8!fi&:KE+e:2\0u##kj@%sS0-<3oKa>Zf@LX:e7',2o<hWLlnu[EGsh)fnn@7R'0r'U7qV%d7Y0jghF=!lh5@63B@1Y&8o4eju+`@'%XG2cL)$J_/^ua.P9gl86g>m*%"8Kje9DoA>`h"?n5HaZhO<1U+-NY6*(9s'4'_*?kn[B%D"OqVL^3`U*FCKt0TkR^Wcul:hY>*nkTO8ge=NkMapZq9ZZQ4XZ<HL,P]@Lg+]CLqM.$fjBgRL$7))OE(DX[3g+#?Db#YlcWXDMP%V>5oQVerpQ0d_nIjqlaS_eftiEX7+!s+TrZ4TWi##a*Y>Hb&HMU^oAH^PunKl%/OW'D3[AX&E^IaZ^m\6BP*]_Y'iBNR<q9Y5$E$%eZKhK7O^e:-(jF9fAX?:QXAF%2!`Db<=[;02fQi<M(5*.lr2WDED72D-;"1:pX-!k:sikcPFU@l0F?j\?B>HUJ8CE?#>>iI<O6Rd%*>92'ngo:;W5eNbdd^qqD$&YKQS2Pq;gmh;JeP'edseEUE``/s!:Bt%XTF@X5n-42d:)pJp_eRhGH1hN)*hal.A$1aq+ugq5Z-'%%,+:cR0YUDT"NLWfGB@\$r*60>&'ZHpJ)tZM&^C;@':j)^QolOXs'%IK)VZ9(WC^%":+6m5joimLK(*$JYcr5q?s7q_-tC0bAsadP%$e2g#2_d'F8S>&oNb?eJJqsD/0:b("Sm6r$,qEqbUL'sHeL(eTO+%Gi0aog5(FKHmEWJS(K.o/Ln1ZM@"!Dr2WJ8819Q1@V"\BG&%Ptd8*@a?Ybb-"\'TctRPbUCj$=(3+W99+4*(QsZP<=4$_O1*3q&[2e^9a]L.ifX"LEZ]%@>$>#>i_lH@M"_s["#+k'^FlphU<_T6%E`'ic@YL08fRDaTj2RHc[ijO-J3)8_33A:46@Vo"]QPEZf0]!0-:oL]'m/ZATUhZl%7)rW'[c;%94VI%3gr#eA_J9#</nm:dQ3]D%#SL)j8^.n6Mct0]MH#ZGi?/4&%<'MnNE.*,Ee4CKLf6lu)6>fSJ\a70Kj!t/n]<(6*Yhh^04Y]!6;Aj8N^p=1EYq^\&8E4H:^C/G%nI-R-U7WDK[q9.p(4Glk=7.+MY-GF!cn$cGA?YteO#(-nX%LXMGQ5nQQ@kVT=?^&hJ=8/hh3k2N<=odJYVK227C)f'q8KH5C!14n%I^<Q5]f.@E?lOQi!,>DNLjE1c*%d:pA@M"^BG*RICU3fLD96cm6G<0!?_R2&'Jjn9Gqeq74LHMf.4]hkJ_@FR8Tn=DdKgrPSntKp%__O^BmAQ*Q'=TcdH6]kg\nNUVGq9B>A;1hC)f2BJkaTlFV;f<ZCt#Kob`k/[i!R.=lp/WrbLifrlSugj;J)q8.dT9ea<g`YFrH^c%kkPlPd\,CBWH21:TQAX90g#,fQ#Y6eJ-P<#F=Dq;rpl&:q\JFOKl[#312=ut!WjVQR`$46RR/CEC#Uc9na//VD&TK!3#C+E;1hI>%L!i;OSkbTcZq;@[XKu.c,QE`XiA2b21`fCrZ\r@_0q9P77el?jM5Z4(UeTV%=r(kcot$[o5=pt6+#;]Ld4o`B<+f42b(%0Uj"[FL%*Z>E0\iOdCVXs/8Z_c+I@@69\%V$mR7GK`X)*Ts:5A5rn*7DBZ_Lka?A0=`C5udJ<h3t4S$J/#;.9FPT/12S/b&,b,Y=sp@\2>L'%mq?oH[1XVs-QL$%*,8]<!]Tq'0R4:PiaWUr*]/.k![rLpOcll2;V)F(nXSZ9e7B:Z8iU:u1E`2m(e5Drs$WbC-FMr\Q=4Dk4o"pt%G4@$?^(d/5$1'fg+UX]s]/W?"0j>GK>l(^20"-(Cecs@;8-sG?U#r&7+kd64X8AR8U8Ae(rsnF(AC:ad15%T`1o(+lW&/!cLJ+AC%?"T4]h_mi<!m'B%RK$*BTXBHZ8BlN:#[Y%Nc`rVR?/Q/?3C]'CU1Nlei'-J"9pV`s7Eo4TlP+j<PNl+:,J[;9);PX,R?)m&?5PUk%2Y^,tYI!/QP"I0gWlpRh*Psj)&t-At`YO+<Jg,1nLP$S05@/>,hOfH:2b,UD;O'!q\QYSLJ=jn3A@b+Vg6A2>U*/M;`aFS#8p#p+%9Iq@$duP1M"$D<R=;G$>76p<<ocRATKAheb#NhlD0;o=Z<6i=h_^hCY4oGl!T%iK!2j+r0eHRp(,St\[8ft@RnKh;KQ)t&\"HcrF%G2[/Q7Pq<7@o?AH@d'(Y#:O[b_%XTEV3]WO$btqRE,eBkic[t"746"[J=6p[U*_s1YGr;'fZ?dGr<QLJh"Vi%!)rLJ%j2mIrBRV>%f6lc'L^iN&4G]0mdV<or],5I<&%IK-U_6,q+d=Vpi_h[A!7qO/;rjbDb>Nkt`*:$*Lpp3DC<QHa<sfn.h(kN_:p$ZaB7Wr)K#5<[%RYC(mL6.NjUKoJkS4odn'jK;\rkYmmVNO@$iK8/_F82eDZ9u/<I'$gAJ3&$@^fRncEEm^/EtG^2*^C^LG!,7c7M!(*:*KSI-a8/;%\I+Hnhq!kMO3.K(Im#Q%i'QJLrMHn=5lu:T,B6)&2fHi$N,UH-BlmSt=45,i'S9T+>)GY0!^,CjRri-p:dS-3[fR\9%Ku0m?)Y`b%55!`j"+ZTc)SiI$YZe<"dVhgKk(G28;\\Fo%H08Znq;iHA=%QH7#-_KaH":D6`F?g85du+D&S5X'/l@I,SC[1#+;cp)`<@k2C4>g%gp(!3VEk90=:'3j5=Dqb7?rbhok`&Ra!1GmB0loWQW90aO:"QU]thH$4?sH:fsTcO2,qnU1<C<^j7$YpTcXaO%OpopiJr/8+hOJ1%CR=('_eFpjrMFI;dEJ@Um!o63`UaA,H8^\7M(hP2a;(I>_&=@,j1ZYkNS4nY"'*9&jPe[6APfCh^=9!),7.8-BSd!9k]Qt.oP>lG%[8s*'r+Xq?SG\tdI+#<,nWR@,6B,Yh<eFf<>WiTtH+bo"VJ.mR4SZqb;fWc%FpZ#M,D1T$33-4a8E#cF1R8:NF7Z[#DHF+H9ThZQ%KRt,tf,K`ad=_'ZEq%Cn.f32[[)2<UeA2)/IDufua)FiJA_c$=`*3,DTp;'C>!%cGVe6r`e*^nJ:']TqmR7[BAi?gM%C#!88sYJ>%*huc9^6kjpNFA_5V(%3Rgg#pN;W9$?l7^_c@4Fk$\mmQJ28_GPWZg.M,dcIm`nB[tg]VYN-LL#9`bJ`8^CDh#*:^t[bWTHls-#On%V,CBpDP?Y],$bJo;Nbh#G2K8M(l-B=Q^Gk;K0'&rlR(Hs0W1;W`#FnH!,[*2;K-NPY_D(3a(>C3Yb7)gl*O=m@$nf%(^%4p@3l::%Q&m^ekbO?*UcQlPMYrNXhKQO4`(3pPTXlX--]!3/7[$$:IQCRe6Q]lC7@Ya'D4.khm@5Es@W4?iT^#+A"Y0nkcXY2(1/rWsDC?s&%Cbdf!Q#/')mPHc*7/Ou=QaNKjcIX@_bqdtW]%dVs5mt9ZlLE!!+GOu8+GfN^b!ok/6V3(Ca[C/@?#mMq"H0;l,.QU6nq<IJ90me?%*'):_%fj(Fbm-.e!,EIL1sJuk*GueHq?f80+&<tY+mbfb.(cnJZ]H/o(ZYD/@7N;BIE,Br,!iSJ+!t:N3:8SSm3MHsYFb[X8oZN#%8Y.-$ZaLYY;s#7B\I0l/RrsOZW<QZ+.<r:+n]HuiTahC,WCs?[+2*YUPo.)Xe@W(+?9Dr'oba^J1uV4kSCG<:ZfVHHE)!b;KA&#D%ZC:22Ja[JKJ9f%$LUf9A91f50a_!'&#ur`0K(X8[CmTOhma\ZaOFXr=6"cK]fV_.q7MHe--W$Is^m<fd!"H9T%"D%L!ALHm##Ra!%/;fWU"e"m8EsGFiMs2stP4go]K,!uE1ir1FiM5N#;!Jb/HhbF<00N'=75(-aKgL.VA^)JZ[R8E&2T>fob"D>kKOo0f42a$Ok&gR6%><,-Jm<!VnZ=sN&mUj@J;8Z67?^/4Vr=mn&_-ClsLEi"5pbEs+pK11U^Rb3i6("i4[:hT*elu25#!2>_#J>mg>_D1Pq;GlSkf,6M%[CDN(SC7DaZAI&AN8JblX1C,NopbJFqifQ9[XV_k2E&$DT+O>5+>8XY=m8tS(^5FB/\,6$qCZ3+nCkfWNU)Bdn76d&pEKEYL^KfU%C+6E7Zbf5,4LQ,Z&?]E[Wl0`Q>3^Bu8#_n,q`)eV,]^>=f&B4_?UBl5K\kr6HOYM8NlchJIJ%rq64"29PFVsr^dRoUHB@k(\\AN/%]4cVfghYX*X)''UZ,L?mZB!gP;X%+c@"$U8ZZ^QUZ%b%]+Gl$LJDIl:+X>j"M@B7t/2"Nkj_@R!lH>(8$,%Mm;l/S'GMXsL.lMhl%7<$:j9W+3&D*Tj^/`q#ACojY=Jrb5emI>#gSNegP@ClZ3k/:+02jP]'6U#,kLlsN1mfE>lQnG#09?HDH2!'eaUMMXURr0]Kl(O-I%:/U6F"%/*&50AU+3nr-jC5&J0BmL[iDNog,O3mj(')EeWd0tNUb.pje9lNm"&flXCbQ_apZ*@M.3[sotgf0)\h6_7Km1-"L9J5E4%#pGXCFE0\>:#_p2:3It"aJp/\`/.*'i@iNmWRG/;eZ![g:C/D)J[&?;?FZS]3>7gt#\M]aJ7V<pYOiPE9r),m"B*jn+Gk0bU(Z4f%2r`JlHF6$*b4e/)"l*dE;U-V"pE)\GhU?Z#4-AXkqH.6!YFH:c/\UOfq8jG6Wl6cG:(<25<Pm)Ql4+f^E?3OcLrOZp4egot"Z0:k%Ct-'0*g]cgf_J@gkGqLa*l+&2llfrO78g&uMlbR38>8=h-&oFDI?(C5[DZ\^B]@4%WQKtE<VfTI.>m4R(>82+Xr54'I<L#V,VBL)%4Kc*@DNc+E>a!8g#!q=)?H%3ol>_N(W%(rj_Ec+$l[qltJqmlq4Hb`($KQ+d/Q94nn`k]>a;-95O=rXMg%=o\@aD)/ZFCQ%Z4?R:%.b>ALr;'ObaGC]T@;[KfX!+7$5^H[C?q8tr73u]%'gG4Z6mcXHj]tg<9CXc(:A-)E#b>4KEF8fLG*`[DlHlk1gtq!A!a'!i?t*S7%3UEf#+De7#/hcl\a\Z'OJ;cVIpPVP$h-rFG^nBVCh*PDW#cY_`dSkh&fK^kCdRq:g12EZ-7P789&o<\p"To97Fl_Nja-hr?i]@+t%Ff%9o;T0>O/^^d020LoqFT5NL<6::KL<)6TU<]\*MDkC=8Kpj0g"1I7<.U_*YA-mW,>!:?%$FGq?U`ItSIBW5jT)CW[P5Com[<79%bIXWQ-lO5O$e%oq'V"AcY3>TMM]#j2c@Hma%9UE_I:UYF3t+N9C!%3tchJ"3@$Rh;,_Ho\^1"SU/AN;VXWC<H=_]OXUmBQLO=#J1%mD<:5:o1=^YJ[B?.lLO@1:>`uAs!`]p%E.O]e_jBiVc8dkGL\RjC+af"EPYd2]o\&PL@)cQ^-Acc@@>*A@GJA*QScCYRq/i<BS?&%ffI*74Ao=XTeH>hamFseZ.p(^e_<L5YDP0QfV[)g.i`THMJ8ogF,;)nU<f4m//Vb9:\AFu^.e*m4T^(H<<X1#Mp*[4RoQ$b+Pd,'%&lE=%'a^aB&a1I#(<#5_DAV+U2+js#2"ks]5KM/**LNpWGamc\$0#8#2Q,_N;KRNcNG<Q\;]M"a0b1+G>cOEpP43:0RJT5ea"0;9%])8<KXG>-cqA*bYd`fj2i9+Gah53^ANC?TU+u?F4U7+kOXZ@eu<QW'RWN7L1`^;<n?</0QMq&,j:%1O`SGA-M4M*]un.-:#fT'5`%[@p@PU.Hr+.!S(;OLASj$E>R@!+@aMrDDJfppA!#AS4Rmk8c;WRMoBABsp)?dXbsOCd.sA/-Iom.->"P9-Old@sMB[AE_ar9\qFr%FN;>]j_]9$TrGjI=7QLu_j[rWirQ0'!+Mi'D>0c@_4:j'#1^(dA-1+.Q#'.9j]uO$&hc(Znl\3bS@7_;W32!%H'kA>r,krd_)\9G%,@l@e\bu7t%Hj)Pi;qFI[RB;fihZIBf28FB2Z^7)e"]OW9R@/OL=CWng+#F\Z)^R>F!p;XCu77FT&T(LdC5m2AFi8WlK_5+<AUj%%X<b][C;&@ifr3e"%TH6^D(HA,NH+ALM\J/T%5(%3dm4!_8)RcM+Rt0-:uh/RCFoC_/'#A/jk4HE*H#4Wo$B,,>q3:IMNr@"0o'+"%&_$/Q@EeA]AAAus"XlI*eVt2Kk*@FFdP"oTj9"k8,#E?UIN2dGQ41OHl:VTTXJfKY$MFXW-iAYDa=?^40`cp_?-G&G93>P])qjp<%hNf/RNM.n@i;8_C-?U6p"ci[A\VX\o4NE!%No$g6\-cMA$KPLr$m=F,2.IG7OqX]j[0L+2Q')r;BrC]11+M@G]?gss?Y[0;U->d5%YGpVOBr&DNfHG8)Wp5Q:E,;Il]VQUj>:C6q+6qh*)`Bm;hJI$%?I,e>53=E'oP>`LjGg1\`Vf!HjV^\8k;A:k$a3E<WG:Fs4SD%C%7E8,G?au%DABpUm8#:H]f?:a0OJS8h0-6SNj;Ka[Tnf7n"\?R-?Hj%gMtM#sT(PodK;q`ga1Qb_/mJpXRl/`1Dd>\eh>RRlHRbf/%_*EmHOS1YE((h)8'H4Pb$l(*$;\Br/&j2;0:nR\X`2ts26I#&&],f]RTb<gZ!]b[8Taq9/J^?;5l+Daa)gVlog23kfJQFh[T%;`u%`mEN!0JS7=K$#ska;$<52b>DsN6@gCF!$8Z6HU7GR"aiU.IrgJBt8F50a5=p9tIaj<Ci5j+j7dXk##!$&$cpCkmeeQeB3Ec#gt](%5D5"QTST-p1XAYq^rqu7!L`JX3tp^#D\*%bl+[qU&5X;m[1MZ?"QN<+X$t+WJQK?]2H]8V3SBQ9Jlu%@7AceZUU$i;QDbmVS1>_g%1Y]*\G^tubB(U=*WpWRi&Ckbd2o</&8N2Rn:f7LsH,V-aqocc$bJhM]"#D*oJ.u`13-j^HLqXrJ;gVE"5^=`U(JmpNQfI4![C8+.%d$nVN2*%blj;=(G_F<br)bEQ,$!';':c_1<aj:Xo4^[2fP@C<2FR6Jq^ftX)ZVcU>I[Df$GgD(dV@cY!m0SF"i)A;pMI<N$X&RIm%H8/9H@/_p,dm?u$$LR>PMk?;5`2pd*@)-Y6P!j%0Y]*\OLH@q`"!s$#'Y<4N6I::??V/P9\>].Z`9.OU5I!"8K\'i&39C0hs)t3V%d#Y:<d20>0dA45.,T04[+@B$cqpqLFE`#7?,s=&lMu'XJb67cWe@bT0Cge!QY6@lYQ[hVh6H8eq.Wuq/J?FUcO+?b17T.&_,\J$\%TnG#hk("ebfl:G]Ba@`S;_iVeFe0L[r6`^_<.$p2'Z,gR*"Bt:1[OUh>=`G3Akdc\Qj-?o+^lX$Htj8P,:Z\6)As>Z7.fij/P!BA%hE1JaANGBQ`o5Z&,Cr9fr(5'b3BYk?Saul%JE#4S0SiS*XmCDqPaXUjb!uVQI+]_t1\<Um=UF!:Xq6)U:Pb'8,[>Ek@)*$t(]Ka&%"cji,SZ)\.#q2oDK#JI0GbhBd'd)G,p&X12q*.2DCaJU'NQnV*T%(5dWLg(u3hK%[S2b1B,`9]cJ25S-Wssa!kQQ_/Oge"sWanto%q/s[*pS9#3ja3b(rDOo4F)SOY%.OrFB8Z:kq$N]*(aKj^V9i%$S;DBKgWcDb(cgDPpagD=>*B=oU,EI\=sCM)M^jA+7b,Gt<@M6<%pBQ+eb[jX+FEWB=l#h\2"Q;O/8DP)\*V:)(2DfQnP:R#l=dWqs2I5_d$'bPqEZb`jBqmRHSm^iVN-3ME+Xk_D^cRMfMVVI=fN8]$%i?ajZ!BgY]K`p!kKu=@?\+'&3,O^&B5oG&:.h,HZ!oN'`RV]71+aTu@or</eg$^&;*(Y#,`f;AnDHQ[e+os+q`/9g"7Q1k=]'B9j%'$No9,(G@%-.C>u&G#]O!Q"6hp@`52d`4]M5D9(MjeI:1']6>c9O_:PF2m_?fk:I[YGRF%K/1>oWg=?iJ1lVXg:G+Z6X<,GHV,_,%D`>/(U"tEBQS`Y+'GEKW6aIa##Gn"Z:`NFd/7".(.c@.p;S)eK9!LY,Yc`T8";"psX(JE\J8*S981jVnRTo<uUok*5RK!=%omk$D%F)>ElM7V"F[<Vh;6"1_VfHT-S2\V4tnn*/b/kd6N'SehF?-#I'RONna3=FK>cW[#g.EO7r.mfA@agWC8:m>b-`RLTVdmC6q,B?e,%1t?lkFN(Xf<UV/mYSZU>g%`k%3p!fY/<gqS\jcMXTq':T'&SZAfA!;,i<>,NVQTp_+BcS7Vu!O``-b-N,n#nkBgs97)K^i`$kqd"%BhPl?4^7O?*`<%B6J8Dc.&G;oR'/2DN>a[@58mkD@g<X\LWYq/-HDEso$r^D8Wq_Y;!>8E2\hoQMbHJDLa$DUBL#<M9S;]:3L-NI%:c3Ym*oqQ>^h^8(--LgX#u_NSfQiWqm0X\Zm)`.>*o;D<1dWX.%]J8?YVtR)o@oX;-1Xlk.QB3*Q.Zd0=j5%=KakVsA&XeU<C(H+%-!qj.Ud._>;E9YD77r_PdA)UI;1k<,3.04V:;9t!pPf4^C!5ko?sF6dRWFusbJGC<CdjN$$#ARQ&`Objd>4c"_&;c;<e`SN:"!'B%87^]3jACgC*D"*[%f9*$>+?bK#^A?Dp/`fqe.(Z@HoEi?%8XY%YmV2/(@MS`iPfsn#A)&epe@,good00.[3sNs,b`i)bYq(*Bl$@%C.<h)*+s$;KX@DKlbG>jr9`_NR)84\7Z\@ZeDkP6PJ-gkdt&&J5UMVj9%O`*%N#d?*EBj]mL#\L\m$M!.dP#p!fDah2KSd>Z!_B/%P$p>Y/hD6!08*6Y*?d_d2LZHrcm84eVF55%E)5^'/>YS0_(RBI[L@5P!`PhE]J&soVN-4cU3G<7dW[01OOuk@DR/pRZ/ojed*lQK%N0FC6-7/j!=h<aIU1F[I+;Xb\Vi7+7?.*u5/EOfeeA,3R=Xa2_KU%D<8[TWtFYjG%i:l)=@SB0`CmI+YqGZ_^c&IbQfOTOE^Sc@7%XUetOE^ljUKRBl1obC[KL&Wf7onk%ERXg00:EVk71r3`lU(+d:M?"jIJ%V6CFGZrB`a'LeJ]Us9e@ASbN8-tBg+[4SKtppW2CU.;%0;[U`pjH;.gXAJ0n'!5kKEQ0<#rm$RZG2Hlqe<>If\<l6Y$q\!8'af<I(&W6Z1%!WYl')4;/Y;G!DZa+f@?PjG@`KF*D_\gb5ae[%&M.qC<XeQq2_Al#J&&!R8SdT,\dqU#(.iDFWPOd>^4\qc_34uKO]4Ct@n_G%Ep8L)`YiIsHlIV;>CVIr]Q+?gSQZMs#I1'88dGL(%/b,QM_G,BP87CQ]'\X#6k/\^0PiD0^pg>Qp9-\"YcXj%BC"MS)i[7kVMAkdqA]u9j,h;&FNVK/XE'u1u7na^JPtScs<LUMIRn.W&%Et.Ah&caWlh@L0Xk!t_n#W)mH]iU":<*-/FK[&O]#^5GtnXp)7rQdUSR`M2hZonOZAf>!RHo"Gu10de<84g*e3Ilt-kn&kq3!b)d%:3U`tMsZ.1:bQ)K32/s&^bj'+b4utKPC%CE:+W57kUY6rbbJpmmg:.:MhaE$Y7fc7j;IR^GFg(HRT#3jO%LQZ1:6rY=[>M,Sr*ZY%1:1bYHV%[m'>H"r*bLEhbigg>2UAS%e6*5V*qGo\>18b%J2eH%]$1>P/8=j4`&0[/b'd_U[>m7db[AR>#nV]WElCNV)bL26XUHcG%4LnR89t?*7q<drXNpA6eKCW#3d*;h<d\j?A0OFtu5Wd+Sb2JQpWou.h]0b5K)d5f\:U"VXV5Nh!4e(qUk%/MC4CP\!m)j=V5U^#j%Y8hGJ,]KbQs3Ea^e/3Kg,8lO-VQ^1c4DX;3,[#P72*#<n2Wo&15WY1E3=<*..-^&dg-?*SC2uRJX6J9SR$:*X>O<fV$M"Df")oWq%>\lgu@[@mDY&5hC)eORo-;kS&%jU!s[);)AgGJF!-V7$APAHD]EJ)OCFeE!Jg(,9I'#^rFXP-umM7_u6+e5?,Ld4))h(bBAejSdP%RDK04<bMloUoqXj[e.c+GW2^RBDJK9_!4B)g/M^#^-Y/^;LspY--Q68eEi7%ep/'OE+jD\OH.M#I/g'E"/0#>]JfR@,&N+J/(HjV%p`bq9_=t@Q8VW?b:??V!0Fa.@eWC0A5uKde;l0!mdZiLkkiCNF.dhg\R+T/>@^PuFF$R&(XQ">P*,o]-L>>I,MUG]]cEs=[0:9Xr%"-+1(`>cFI(+u6&,p29$"eB&]*#U1O5&P'OBp,]@^:KM1'['FOHP@][-jYDH0[MQ&>,YN6`?4ZbhJQ_#0A;l5%"Tj#[iMjn3'/d2%pW[[/+rT-37hONV=ol\__s>#uH>ds+Z$+:lPGqMBYH$QF87%1c%'*q`^5]//BW-9c.%mhFf%9d)HqNjR2IpaKjkFSJAf@,=E=A9l%l!.C3Jt6j=]]VQ?<g1o"_c"?]/J6Y-o3k,hNS&is:L?Ui)V^Uj&W%GI^:7N57Z1aXF!%r9bn]EDOMkJj:,k/_KIni*Rt##f06WG0%8a93p1+EZ(c*Uq!>t9&oQ:)V=hc,OT'Y+N466>YoCN!0aj0Al2FPefaKtfg(*\C#45i[WQK>8kss&GWk'(t.^8MeI$/NQ?p8E,Ce%Qa(JfX?X9#5\10*0mmX8W"=Ji,D1$HfK9$B0?"Ar^pRfths@H.Dt3Pd$/YJc7BdX>46tOF0F'#MN&O%4lqfW>G>F(f,+*n0L&uF?%23#*I@Bsh#^?%o5$]sBM&<\%iE!g<WShi)^?Z)5aLj8f7U^HG25A?o9_f*.E!_hsU7+4$H+CtbuJ`<0!.mVgfmp[l,*X%6gU0\rY%+IlXM]$nQ^p.&aFhY;sh;2MKNNY'j@^><ah&>EMC[?UJ$JFF($<%S3.hcgd$Q5Z;6ic?#50^t:4nH;VIKc+LJE3fq5(/oIWhksjt%FSn/>gd#:0O4E(c?JOk$Bt9!o;\-4,1_Pg>j$Mj`ZU11'5UpMBA9U>>EWA3PY36ur9K8)l*0OFrr+V%35ulo%`.eSDN5Ea&RWjem%kNl(<idNbW+KUl7#c)82;k85(*&u'2K`X)T!Lo2,[q^0BpZBO<;CXS(B.D8Cl#?dCM1P"99[QK;3I]qJ=t%it9G6([qqC/IV5SM+%omYei'UAYmIE3[PKXeU\iR.dm!hKGiD]Z9M(@>]VX<0DE'A,!5XOR?*+#[0?bV=16EU*:t>(sbD5]Q"?;pA;jVpjF"_B>Kq:A]t(%ebiUe"pBGdGP>$*Ff6cgSL<)KAf)N0'7d2,Z8"u''l,&pM,>n@8eV.=Ac&d_INl@<,$!u"=PWsL$D$*![ngQqStGn#X*Oh>K(p.L%,l>\A78'0Q#RnuCTbM1sh+d8L;GHo?6lG8/d6Yg59ie]M*=D^]Wh2map:Bl*4@H4aeXh:"6T+RCD+:<R==hC`r[c6rRM;Y9:SEPZ%d67cES4$?b2C@,`*p3ATUTu']/=aB&I-'<8\?\m8l]%C+?]_m=A"]#f5C`elG'njREOUg0c(B*X"RcWEB(+GH/M5LAHm]MG`Z791%Xnhq76c@PfjY[Cof&E[lI\fThVoE']8iQ'\@n/2>`%u=Dp@-I-e<7aS^h#o.d&>e.fQnjQasN!7pu<;iP,kgPOEPb\PR([RY2&7'%%)n,Pct9aR.M5$uU;%2aGelaB2,>gM[-=+^fH&;m-'6h"^FuF69Vsp0R@R@[_*MqP;@*>)J/<e,gC+]P70:B)#4S5rQl!64f9;sp%:)&S#+GBFBa]Ac]/\JHFE',fJk))WQcq,+k7?+^0b$#NmeL?12*oUq;A(n^dUgO'tQb<D;eLSh:@RQrX)OPrah<,fJ<'tqff[:KK%ZqE1=^MVq(RduE1L#"F3ef_GtJX`V$ahajR&kQ\*a;0.<7b$eZFp7*5]5]QiYS7o66lT.X=Y(B`QA<(a52C*Q;U_t:S_sh:+(R9O%-r5NjY/Nd)r2.HBls+04$4QQX=F8]W0#VOe&nL:+KuhM:P91,X.63UJW/\rLMXDd&Y@=QE<jR3?F2]tL^V1;IY#0&!=<dqMI?j6e%mHHRcpPXVYEcOJ\TLP'#"PVg&8_QndJ[%kS4T3-*EhYKd\mH-E1@]H[bjOq_^uo,m%[r6;UL'Hb0P8F=#*"s$,-P9P6lBa(A_7:[%?+5rqb,\XaNHAO,E5f:hW^;#F/L^5m8O,mKC6OrYUi;)u6.T<(L]m7uHlX0GYZ:H*r=&q7LWP3Y,7G8)KGk&qE'4AOR#(O<\a`J(%\r,q-%6qXm/oH]SeYq7'I,Ah#\=jdXJ=SPU-027s1?,3r",;JoMRt>J(>gR/(V'9@P)#><11EQ7%)EIn0_b'E?7iX<2iT(%_K0+'%cri[]Wq.$s^jQ0*+Rl/)ThamlU&]8(qJPo]9"ZTS947*\%q,_d9E^,e@3\lT*e+#rD5tl2bh8>r9<+4dj@*Y/a!nlK?8mKlc$%T4%()$H9_/1D"q>%)@EVScGC!nA=$6@_e94Ko-k9Ir'-1.VCen.o0I5!K=bTu;0eJqQNOTN#O1_[jLa#qa4A=63;jJpp-T'EiI)RG\E%XhfOACfps?aJT"d_nq\Z$f,BbBQ:l*JV#S?r/c[rpBpgE/Cl['f,/=I.b@5u!G&uG:X-M76^IK!;F!lK]mi8h-:)o=#,Jd)VFJ[3%8q=X:;$oo=f6.f.EiQ>(e(t;4B=`Red$%0d"<b`OVDlpC8!AH1nB;7dGBuMk5_3)cVM9.D&(2(l.VV2aF*&pTBaL''[sgJFQ*j?D%ru%/.Ed3nhZMd?K>;NB0X2Q>VAWPm,oL16MZ14#c/YS%Opuj3HNYk\1J?_]f!Me2-)2*BKQ[aF#VUZ[?)Ldlhq,4]2IYiS1`?"h!%er,q!/:pM%^u@H7`;e-KJpufiAQq-LG"fe=CS7c2+hP+ckO.%(i\okffE/3t8"!m@*3>]U7;qN"B44!."hBRh2c)9'=GIr!)6+B#%!$D.&OR&A>hoE6\%flV7kn(;o#lT9a`s^q.gh@6Xl9mT)AF0D0(dUXVepL#+`OYQ:RJ3@9[6LM??m(4)Ui-W@*p?\s4Bh+'CcS`9%?UQCtpIm5i&m[m7aejKWh?^$dB4XV2dCH'Vm\65r.i9Sj*iDX^Z#Y,2,VjoRW@8F:WIn>A.X(k;72[OB<(jm/OIJsJRV5[Q<`TQ*%A+YHs8g]1D863TG>J1'jUUbJC[XD=(nY@W@)pa^<85P3THK;eJa\!p-KB?1pBN"t\/t=E'?*0tl0^qpITQ;9r-mhb$^QQ/imke4-%E/X6KRFH,#:9?+94G1Gn[(sg>g_@NXWnj@r<OK:-Ngs3TUXMHXc&B*L2VNu?V51q2W]H[4):D2Hcmr?TCn8FlNt7sGk#&Ek;c#IT%P3+\DUjRD$#h\")V\Oi*J<2ee#epElKK[\MHQhs#$C]P?+Y?-rfLNMI@4Q$&.e7B=;b\;M[D=NhH_eXhAgMWnQEKK/]N:E7d"8p^%%rlWt(fTA"B+#ks8Bqu,!/pq%O<Oi`h?C#lFpe-@Q$>#hSa(6OkVrc+J.3[Qq>On]?_4bfA_DT\0f8:Hk)Y],Rd/NE/Bj;X?hd2s%\j@0jE!>Z,/S%@O]p^`dL/@I=i!^"dbUW!Het5n_:'O\'_lA#K!\deINch)qf80EHU6>o2@[254DHTMYS<DKfM.DIhcgWsJM%bt[%)g!)>-!R98it9M@>o0p@-oYP04&+5SVK>BCY&7(f-2@AbQE?;FIp8qBP5rja#aq6jMK)<\\+f*"VZ&kI@6tL-Um=HPosuSVNI%l,%n7?HXXGtT)?un<oe\m\Mm%Q59@_Yr1L8N\NiR\+S"mdTUG?Bda#Lm[fd8LWsW:fAl#?2e5Fi:n$IK9t9\cG`14I:U,Ur%g,dtESd%<B]U:f?I4.M"`JZ)M<u6K,?,)9mP1)<8#VLa/0_U#mS1dl1t2VY2l6`+a/(];IkC"@($J\4TaNfW!8F7r^.QNN"[G"F4A[)"%2U"%WA.Vk9D=e-]J]C=<8t2W]iO-g`)r1I$<soDegW7i^c*je#IZ7=FO(/2AaEb0AO%MUr=bI?YohlAUlFMeCokFYXf8p@(ZJNu3D6L.%fIubL9A'+hHT%ut^#<GM=_#,?R-4;L[`)2f7#hnUFG^9I)7$TJFH)Bh&MTFD4tD6S&>.'CSWT<ck+bKnqooBW9mU?FHnbg8$IJ)(%Ln,66*^T/F["d%s'MrM"n`u8[W<W5:&quiFQ2Wr`4?#Hs:(p2V4<,'Je*"E!Gn?#"$%Aa#M)I_7`TA4E\:LsIDUo\E12sKd2F(VI%3Df3./jn3e6GV!%^`jl^MS<Ja8NiFfe-O-i:fn&-Fg0l$LFZXq3s&QanC61AKQ^ZoHDiKj\rl+Eo[,8tDZ-Snm(a&QTVY41HOssr%:.-qtA1J900)'n#SuY2]0[5E;Rgs/KZ[Ai]dHQ[Q$g%`W`W;hIDR&=N(-&t?PTlB(nY@%siK+RM"54ss+kqB8@Y\7K2F$4#Ks[_%%'LU-n`[/tm;e7/lU"`e:phe`Jp&Lh-Ps@Z]7ZZ<E<[>D1fVLRm:lkQo>#S4CWR``uE)+Y$h"qUW=/J]CY8[[b>-_Re\N%QI0HWAM%@R:odE*p*5THj7(WJ?99n02YK/R(LqhC7!?'LraZD;eu'R:d9C`ZfrUnY>1e;L;;C)L`'TBmC_7Q*4/B&D"C"%Y.H@b)W$U%b&;M%/a<>9T*1Fph/V(uK\sNm25Whdk$rr4`P\BcKM7aYCLg],P&(d',7OQ<=U#g-j$p=%<g.F3R*91/:Jh8Bf:n#h55OMsPc&85PHl;X%=mHnm:f;DtA(MGIDbgOKM?BbIOib[!CUL+#!HR"N9.tRKEf[4JA5]%dibb0(5pP0[H07=<'grH`!sXNS"Y-/>GQLsTRI=--$IQ7"%"9M4P"'S3g=JRJ^9[,"L@L]i@Z-tPPKAF.k_[[D6d68@(W0^:iM]&_X8Vuju'&?e]J-R(h.@fLX_b-8KM?U*7+=i\P4YPLV`\p%e%b&<oBa7,`4YZu.RI\*c@Z5/gNh\*NE*j!>uC.:YpqU$_EA%#X9a+5MikjJ+7a>IiaFjRLoO.eqChQte-]Pqpoo+f3lKGN,Y?ek-D%Ii/`X<BR?2oi#Z;,nA=Z:M^Y:PlYce]aM*T+V`$U0'C?[HoIoub03lU5Cb8Y^uS7]j-./EY4r@p16p(O6uC1FW#<-d,JgEaVsBOL%l:M%HYrhch;^f/6<n-ZnR"$flMsAM3-tOVj>'=B1_Z:2WnUn_bU)[>W;+d4h=Ug1jObnI`OG8uGIQqnd;7:!B;RKe$<hqA9TOB]T%A(3MP!5_Vq5[qGrTa7VASo5CL+Ord@i/30hGkgJ\9)$?b0BTn;n5VL;<p/E"RmXKVM#"TG?IO$[X+k4E:c+U;+D&mU!n)G^UkN'M%j;7m[J/@]B$I(0P0WCWh'as3XW8@,T>4.Z3M.^jP&!W+.65X^_U5btp`tgKscRKq5D6:]$+MAYA@:[JpCg)%;1OO.%"%l(rI>q%V%ZW^Dh`l(7C8T9"eI<F6W2\PjCUW7Z5LnCZ4Bcl5mP9+dl,`.2(HMS`0?.AkunK1llq)d6LBW6_On=TWZ^]'^Pr@e35TB#ToJ,?:%%q7h@$Uc!r1eqLs:q(NR!d:Hgs2I%Xb$2.5NQ5>KCH6u#8"0!&@-\b'"YH,\JPsN]'/5`8GOgf7SFVEdSYqcuQG_TI&AnUYnQF\ao%YtVGC%u\I>j8LGX_/CS]11*b-kVNHo&[%[6im=/D.F.>c^bCqW"ef@7fR_]*<D':j1LN`8MO7Rd&ZBj"W'^>?U)n@X4P+;:.fZ_,%0*`.H[SI\$(dG_T7N`q;h102OkKq!X@V-ZVgL/f2r/K,m.0S+5KVmckN@[iQ8B_O%9.AkUYq(II*o22]h5rmLp^-5+%\05hXH4:d%qE!/A*o@1?LSA\-g7e"hZiJ(9>'Jk3U3\lTE]9>DPZquC@OCN!a=#o6%.DbP4b`E`De.%)4W@QN%Q6NV]GE:.1IBl:>BNScl:$NJ%=f\PD63.XPJTiW4R-l4e@tRXYM$O^FJ9:2HOZOg_-mM]K.644gkKUsK`6"4\.N=jm@OKP+""k8oTuU_$E\q4#5^3Ys>.f@QnNYMt%K?2FEnCf;YB`tlpA'hQQ;E2Tp=3ZQ4lKZct^(4;,hu]%]fI4HDndH^47YD4r0fP0'U*1#*XM[/*PSF0cN"[(]jQ"[<CD=*G%*$C/%k494T#j2_W@"S8ZF^"A+BIi^h?t9Q>plR'f-=A\XjA-W-X!`9LD$RTjl(-`^]<FuZYZqM[?I8SY`kHD-HE5+[`o?E<%Ea>p`uo(A%FgsoLbN#aM<>Ga_L25'c))l/>"f745f]f8'WXsNE*^i\6(o?HoGTe=_i!T]e6*ZA_9\b$0L)R\s,JPV+*J-jLj-ebtbSf%;:9#j:%rP#OB=&QV?kqIO`T)>>6/mej@<*tW()I\f@=b@b'':Vk.TVB0*kGEW1(iPCE3p;qK!uu\<APi#R0;DdaeI3Z+)@>q"j/2(CS>!_/%HKXgA=#=JIFIm+NnTa'!.Tf-B9qq-&3o4CbN8;8-@5'*=Jd_&G6Y[`ro-0#6KrjlGq"Qjk6oM!J;)"Du%?5a]g>JDD;`o1?G5T0[%61]ELf#+;n#R4Q:a%TjVAt^Zi#0(b6C#c<q(:X]5OERK$6$k9W5[_g:lIcQmIVaSk@Zk,/.S0LOH9f?W%u\KC:4=3-G-i:00r&29%Nd!qt0>%:p>^&9\_N'k:Wu?l3E/B'n_s_m!,I0\P;(*%14CD-)5nr:#>3'ebWV^#r<Mc#pID6`s&@FZ*R\jR\jY\dc%B)<<\iDT.%)Z*`KT\6.&o'<OZZ&CJtn=sBS'EEDAPHPVW-)Q[/:SE`3GFF_A;`N3t9K[G]^7E7hMC_KgH309C?U,37mRPf*;7\coo<EAQV8<P_%0T[4sTm;?OLh.KO/5[m/"*tdj=*U'OpqdA[_M^?Dah-ML$@EKqk8ta&_L4#k/o^p_rn'.HT4VW[^n0%L\omXh_0fH<L;5HPbG"%3%XF.7t_T+tQ\9jV,k.Is90U8_QA1@p*W1K\P5^Z`r:?mmY:H%dRC!g5nF=0\/0X4cg?E1ElQA\ab+UBQ+`Z]%K@3&lsg0K`s:]j[6%g<(gWET9>tn-cd(,#NWE/W!(e%B`JO!Li15B[Y=UnQLV<5bmD@]/MMYqsNQb)O$WR_.6=E76W\Z0[TpQTd11n5q[2#=%!>h.]bfj%b=lmA\[de%MuBNbUCr_%([!PWQ([>?fElbJRq?j91pL[:f#j1N.+TaZ,=\)i/Q6Hep(+(q;r#^)0[bdEKXpH4,@B1NZ`L"Oh;B(_%RjH7%DNGI7$iug$7$VWK3hnqIjYIl7:i]_Aa".b!3sieB!H[E>J6N8ao\jd,[);>KJLM8=V!EoVgWqfl^?^\9NEP`bk+T[A2a+:e%adj;=[56h=(J:5i.;I=Q]8"&I]A*poE]EeId?uV"4pcQlU367(5$5&N>8;T2F&6EmgP1nmXt%kLCk@&(Z5^N*I![cOkp='fFfD3P%R+T[&-K[)@\2,_eK<RLJn%`Gd&O]Y58U\#sBA.qpds5Y_.;m5D'`pMJ42"OC86Ui5_j(lQ)9ZINmj^%M)nH(R(e#XD,DqX@9G/1P%q$Nh=B`ciJnaNHuS9<u]87(KO"]^2_l5Gju8\u?FehoTfea</><dKrtoV@[g"W*[g_QYefS[J8H$#qJOf\:UKYM;o0M6lU<`.MNr%*8;i(9l[hAJ;fo6=Rhr</#A3h=V'i$4gr80@:ACnh7G<:/qh?)&MIT/5"a<bFWD2)T]$8;GETi<(9oSP.BPokNqbIQ18uei)q'sm%;l<T"5UOmPar3El"P"';6qeY3rW%XAr'ge=c.VD#$"&'ZI>V'j)BAKlF`G2fZbD/]V:HK3V.4MFAG0Ye7sZW\9+%1(,.VZO&>#)*%3A8>_%OVo"aucP+AuGgb7IUfHHjWifF+IBZVkE&n2FTQ?@QY2H1.Z,1"@?Kg;#83k)<i,"UI1<LA-<B)!hto$hp`i`C0"0AJ8h+u%nXOcFBL;!+Tuab!C5@RBD@5ieKcf;Hb%3MlYTT,,RXPtJR5O]=.3f:n3(cF(oY8M8`8bq$(2VGoM%_g4.)<iGhFSe-,iq&-r+Tu;%KQ?;Ef7<sgb6F)8H"We:32aSXDaaY%\1p9H>dXj5$'Jjm4<?MUGH"pdNJ]s<=P*jUDF$5]'X8"S3m:r"M`@eap)Kk<3BHOU\uh<&%?klSYpti&K30+Y!#=OU9V*<2?>*6e%E!5^^MhNdmK0Z.np)GK1;TDKGQa60C=V[cW)O&[QR_@EApg!?3jMq2WFj=g1U*5;kah?;%%n=&U6A6^Ef3MYHJdGl#7/n:g"!\t1R&AjYVf-/R&4$&D3C/KZo7PTk4(8n%FcsraO3d@k=$rXC9OSYA\psbD'"p4XV?BKh;(_Ih4%ae4@jNPl:K=BbG-'!i%-f?gj8\L"-[_,"Y)qT1.2cb'pu0Mu2:-D!)>>iQe1),\Osl7ljZ][WfnJ%t;1(;Y8:-Z_1+O8AuV1Hu^j%,dq^4HDK3+%WslLLsYY#3(q@AC64!?;S[jA<k5\*N/4!u*'h0V(!U^^e#^H?r1Eu_J,7dsjhLf$s7l+ks5W#9VgnGJrpp#;I@/IW%J,1htdsq>q:]C2tjRiE2Dh%cL^\teEo^BQp5QB?Mqp5<$qp3%Up]'3U^AfjIX8]TKs+QeOlA,?BB]F%jJ+B9^2T?\9CIA<P(Lm]=%=q$Es(`3hq'iBjYcD5\#9WI-i`2TCM-T83/:0T$"Ru:)%@=N7(Fe)JC>"%i]PMOi&&[+NSdI\86$i^9!X/%*C?SU62GnkR/()-4d%P4a?^@Hrb:q8X?@J+F3ML:_KJXU'qQn[MICjelRM9YV>,A;8He$eR$6-5%I6`eZ(%!FsLG_5tN#:'!$gU+Ma3^;<.>b7m[f^bmni%1l:UNFZ1p_>(in,%?tK'C9r@89Gsm'+cok4e&]HrM<9',m)(>>lDG9"`1d7W]+8N5Kq.8M60(/_MpQkR5nNJtof3@eF(NM;U6-9d%4I7m(E40,F/IcDC-DelU6t=mWT,br.H-it:Q=Jc,4T"ta55qgQCC)F1DJrX(5;e*TWj@d%4T&/F!o"<f[?/qq4]ispib=:gag<4d%Bb0'i>#+#m8<j0YY4/imK9G_@2!W_(f-d5t9.1rBP4uScSp6tH<K1@.EsYSs*o=!RB2:u@YDT:OQVCA*_F"V27\fmNB],O4bLqo1%O4P,9X=D<t($:<`:SL!^g1Ht<!@cnXrGhJYRPd:>jA`CkL%>f'PBmBL+n:,u^6X8-2u\lI@;rhdo8hn_!uM)ci'(I;O&J[;5IUTJ%2,D'n9FjA)A'-0b09t\]f:dR7gag5OGa@<@TS_t41pL+GGTUojW22IAGEPRU(>5KTXut:,+Jk]iaKrZVA>]sp"Mf.EGTE"$ROHZL%#&&YV)/-UGjK)j`<R#.kd]QU5%A&8TKrQ791k:D=q,'#sL698G):eKh7TSR+Gr(3*[Lrp(0T+&uT?.K[0eDmXEQ"XCN8Z#:M*Fo5%Ep@X#e:bbj-?hglX@0pfY4jR)'Ijlur=>NAgnXPi)0$2I<8rr1$DZQTh:m+ZEq9O._#@WGlVm**[UGmo(1719EgX^f,/V63jQgt;%cW/!MJ6iat=;2j!:CFp?/A4NU6rTD&-H]n7MFAeX7,u2+-#Lf\Sh?U71_G1@-1HuE^CIGb%d#j4P\8LNP(_N/!_CKl?;_DDKKrma%Q!;s*eAKBh\k#p"_96S;6(=#om#/dh#VAG=I52;kDis]m6F3/7@&#Jk0VX@('7EB?Hm`+N]klO4Cs)'cp['HSmggMKA1Zu*kA:-#%*O[iTO]lj=VFfkQR*(;YE,CNQVN%;s58]s_*urU"WUt'4RKcnue([E"c*d!W<=4+urCN]$(<!_e"b>C>bLdM>/?Wqt=C_6d#NJc$%,!QhdB]:/H4Nj>jc@:fO]s,=]o(lk_nWQh_n<YW9j,%3e%OHrXs':t*UnMj\`</0JA2@Db-Wk<^_;>e.Q8o?8[G)`f#c(tn.,<Es%%O;@>^%%k7Atoo:5A<4@hi-RE:O(^-,9cJcM.0>A^%`a.+CbnI*Wma36#4lL9%QYn*_-,b9S-Kc7*n.ll2PVg8ld31[c81B5P1h>%?2-N5V;qpc!Ra:K`(C`CU(O?87D2_0rOpX6F5o`#+`28i[MBnrGOXSdEB@cdksE*balQMDIJ_];GC!9@W6HH/WgM6uZ$M'(=ag?R%[cfB7qGhf7&=KZ;1WsO3.V/c[4AYqYQ&/m]Za=Xm-+c4;R+DIdTE&E"Y2?;&kc8!jOHnP)!%:.jU6agOia>f"^4T,D(5cEMD^H>o%@;+#QK$\Q6*^ESX!\EP;nOOLj&]r9\E@3pApYZ_W(..rpd&aaK%i`3ao`kY\A:O*f2Qn<0:P_!]>cpDAJ3nAP&S.no]>dsbQF'l/%]-P<o*:<hgLH@ab,spE<*6\,L+O!ihQSW=;1B1fa0*3QQd;?Q[9F$^q8jcF;U%=lX:;jCr$IF#p!XQ3@.m_=XF.se66(ftf9Nhpc%cA4?TE]EN#R#fnA8nCQ`3L!Nj[pki&LH%6"WnL$)N"M3ucl(j6om1ld4*dd<gRk,rLGsaRi.f%oZDq;pf$5`>!L*WdS,9O\V;=u*%'862Fc\H[4:R^Q&-,hDX<?JMdGob+*X8Z%<-3.0UO5H*R'!mQrF%&;/1h7Xf$Y"aii"Qa'Z0;i:M+YC-5`R>YCirtC"0(XM:VV$^%1DfRMiY2@VSQU*kYV)`Yi3]/OJG7o`aVmJB,WJNM+C0Op02D;k;X"d]E^)O74qFGAd@<A^H`HcZBE"8R9npZND;Ls^0F?.bL(KBb%5J%pL2/J&7s8PGh_tFKsluFejjQW-N-qtJAc+Y=,o7]5$^:"oRJ6<XJ9Ns<]o^aZGf1qBO^4rGYJo8Vc?L7IrW/%`_OkR7ZOjn:B%jhs+n%.k'OM*fQ8hc>%kG[THG`L>HJ00Qj<Od*^F5nUp!]iqt`Ngd.SDl`6_MQi_ZQ^d!`QlT"jE.1?X-Gt:^V0GUJ9-V_kAX.[r%AikaEC:9u0-Y'*M.rk:31/V+4]htAX^44eo/;M'_5,I4cJ3jZ0?N%JBq:G\+me!C$YuN*P3%;4DR2q?l:=%7afmo=g+@hi;LOED"%.#1&WAGWc[<D/f!3"'3Y7+o@5cC'.uTSp6Efhe[O:/u9'RoNE<?mA!)Y$Cb4m/KbJ:NRVWB-A]%X*8XZm/rZ-s0A88F'iNFU4dKV%H/[-&`MUJYIq(.S4tm">2-i%?TE/f`m;rg<8;ma<7:_4j6:pojl,Sc.5=KQJMn)Fg"_Y]B?=#8t!QZUn8QiNXbfThYY0Z<"fL9S9%l;_K<i_?7d&]$I$/2ds4nS@m,V;A-5B^MY#]qM82j9Nm#3L>tB;52sWNsA<1U"rgN<*a';EKqB5e(%#`=@+OTFEPAqGQ^E'D#IOb%D^=X6[N,/EEh.*rR;CF>h3&%dW:Xiu<.IbKlK0O\+r4736hr_.aG*:48_+NiZM^be2&-Cj92K?3`j"??n@?Ds#'.^_S\!]]os++$%4X\B4&nFiJ1f);:s-*m3APht*a?lG1OJ*d"<+du6M(@8=D!ncgeVbo$8!8+?]L?emqmscKH8oH-+PAY9JIjIWPl5+_?[rXU)#Z;C%MH>6.;06f+!`^u_O-*FT9Y`7W2C)#CagL2+(iOkHX:Da3?98mo9ZoDa3mp((*]d?4;%@s8A<qOEeGjD9!GjV]PMT(M+*O;G"k;X&%CPL-uG(&EPC0$ms>?D>/8/qn#js1RU-,;XuDYtRf@]e8*,:G8Q-s\GPYV9!IG]obTcgqFCG@./%\VaMnPQ"@>>2@FZg;J_A6W:Gc%!/k`2gZ#ln4!;)'RrY!`W-1,o>;cc.LE!`;AEIcG[uS6H;ZVOiS#r2*MK_kpDsP>8)B^>>:,k0\l5D1rFOqX@3("XFoX1Rkkemko%:5l>#liY!2=[BGOV7bG\Q+n[Z1_(P3`Z<]724JkZU<-[MWKI1mUm\"^&7kjG/.la;aVC*C;1L.oeJmi6&>Xr`WFCc@O4A+hgo2aR%!VLN`]l?NYe+\.K^d3@=dYjM<\e)92.?$#mK`V_s3N\I0dXN#q"oY>h<Jf3N/jg!M:7I=NV#1p"?qINUa.5+Ejg4a]Hm#7)U?"%6%ATptOK-%Q5mR"JIkJ:pcae291-mYXb4b^ZcMr7;Ts.h7(ZM(,*oeF#EG;rOjqRYsE<gF[6_'OF\C0FIWVpT($mK8F*,f)e_\]NpK%L_c<TNVSJO>bJ-hN<jk*)\sI12Iu;_!b*\_M_>ZWpj8:tdd5Cc-7FX/0\2Q2c:)"QXg09oe-9>Pl`5-7<N/UaRk%,g0f-B9TZ$m\%?;"WcqWc?d_CD>f(G\lSMjDcl%"\.Mdj>7#<NYK;MA'i.K&dOMXA.ReaWJSPZ5<6!*<k&jpBaPJ7A"5uJIT_S/OQ=+8gmABpa!;b%VVh\8a@F1oe<FXXlQIb*2]9VMfd)DT#8'`S#5[&R:,Hn;B!?4DZg!%'kXR^O2$)\nK2C;D_F55<4-K)`W^[Y:Jqq'D`##4uAd^Aq%\fY0PRsPkfpocG?:$T=5_JLIX7M2$!U]KJ6>]qR$?Fg7g`";UoWj-6$,K&9>Z!RnXm>^Mokt9+*?):U3J;<d`)oJGIHREfX6aO\k%/aY!sq[N9D*\t%WRR&r&ig:p1hDS&eC]0j30fUngV`B;<%]V9B@/[-(%)ZJqLf,idr#0ac2]5i"%]fA<mRj^cpt+/GKDhfq$$S]$%>7tCLH0FnQJ&^q3=oLaEQ>SU]p0[m=!X46k8D[i3<["Z:]L$Rn`U..-99ocU;Z%Gp9$X'ElN>cbai$BE2obH4Kfbd*7*c!`-eDuB%3L"aG;GFg"i&R;V`d/Oa;`b5DP?>VuI-:n$XJJ=ubl^Ae#ut*`5t]!VrYfi<2[r2?Wu:3$"a*BgAt[E`*GXq^D(u,M/)F1T=0Y08%DJ.NKkR&TZ5j:3DceagTI5f8q=Nh6QT2`KP;aa0NS#2)ZSH7*\43&P/U0<hR1k^+/l@VOG/m*SE\KH$AXal^!TbD5Qc0jHlL[u,;%<r_jO+0slU5Y5TER(h.9#,F\n@aWcGq/?mQZ>JrGaX%lW-+h9BO30YF%;>K$):J:CS^+<`JO[5SGOHU9o`O'8U]]$m1Z3+hp.^DL%WLU2n-&B"OptAecT7mnM;kg'!"W7,i;#nBh;MK)=A'g,p[9C^aUE$[A$0aK(Kth_QJ+(I2P;kC@EVh/1bn;_Anh7GLbcKf<Jas6O%=KG;+C3FdRbis]g]pt^O0g??';f#TflWPPqK%7n1_j$t<lN@jK+VE9I))*Fl["RY4Bq+Bfh.rCn]is*Z1Df85h%7bNV68Ae&t],6%l5/pS(kh)uEPGs-02cc?Ti6IS^(,-<V>7<X>umI$6"Mb(cd;5VHUaB%IQ;nA`HZeprZ#N!g)TJ>&?j_]P?55:5i](cQU!On7[*f>%h0UV]-;5cR#>"'WY3%/k+]TION%$X\jL&o`0R4t3lgXV(-%+>9HRkBiofr=l\oPaPMt(2%59rI&>)%E\:Y(G^h7jPdZ5c@:jF\lR%2c&9#7Ob3>pAX<M:HsED*an\BLK*%Z-%R=*`*oBk#gcN_[&dQM;"@=D^+A6qmRjr>R42h7*Ruf*RD&/\UjihmN4fZIeOu[lQ!oeh%0i,+:<)@_Tm(ReM(fV.<9HH37=[X^ON`'nR80-QW>U#88Pj"%ce>U-WGgK=>97_(tN#`I.C9K"qCPG1!B%2tS66K61G*\Z4;qEKF%4O[MlY/U8.lU?uEOcRT)\l1dS72/0o&bVR)LDcP,V6b2<;6[na*V'QY!`X@".W(NIO%\ioog#b+EB,%)S_^T9dpo_58o\K<E??6.%"CRH1`8HNS#QrJDZn&),Hk^sB&6_X>&J(`UJY"5D:Wt:a$m2D:b:0)Td#;f&nOKh9M=pWnX#b1inApa"iPW8G4>r&snW;!O03!\a%GA!-IU8(UMh>5]k?Vn0t=h%rX_1<eOepDebP@'<@(59tSM8gD(RbBX[?St6jX[HN$bK<-rUhO@J4@8;>R*m;N4J+sGU0`FQnO.='%@fqo4kmC&+]^Ugn&@kk(?8%':Y]a5%=\Lsm'_9h(SL&83f#2I\eRY(qr`mm-TIL6I'aAUsq@6TTI4\au%V;)=eX/A&3+1_$9$!t`%f5TU=A^-0i0j#4iIS0Qpbs/&POu"T[[eWBD<fS3O]/*1tE)8F&cQtQ:^J%q"&Z:h(7#;Kr&tFLl2Qb7pfbR0*lJ)A<A/fdu,n&P]%&+b$>m7ncmG+n*R,=OurRO[>eMLDUQHu;GF%0AdY)Zt.c]2Ek\7l30D!hpZBX!N))jT)&>'Lpr3U5q<FYLqm_&a=$TmO(ncBLa_:%U3j*IX?;1S?4c0i6m[,F$YLagBG#4eLE*D!HmTV&_!`G)O-em.;,l``7+O_U/>U;[00L#&\6/k[g$'ug(Wb>;*-#I@WM7psaLN">%7("b(N`23@QFp(00;]*_<@Taj4d%ZmZASL^'Ws;XKu+U_/-2nN:E\c]mih7BcWCeT@ORN%?D<W1eXo\!5/h,,E^$Fc5P@RqP?3fF%%bHb#:!4_,^p)G-L4Jja`P\5#5kQ4V>Bih;gY"[[;QNTL@^b+*je1Y>B$A>B1ANJrRd*'e3<WAMH.Ysr0J7PEN*&O%<2p4H*Yns#%/?1f!E3A<OaP1@S4M0!>1\[5^Fi3%5O-g!1e:'W-Hq<a_p"`</,*AdA(V*HikD$tpln'N^T?%,*Y[d@h;T]?7,J?ITj`+9!2[*fV%Rjo^p;b1,c!gTZ9f;(t?LB;qio/KR2h*oC.i/(RLg"D`O%'pU9pcQ@8-`));,H[^;,?j,p9C'6(5!YOXn0a/\/WW5-3%>VeJu#tT%NZ-sY!I=(--`**9lDK"<H/rd$i'fAnL#AP/#@&A\:M<@\TX0GCM]uQs1b^(ADmV#@0J@nGm?F-f*5Qd%,ZbI1H7&GL[C33*YG9./%4j?MSJObbOH^8Ze%0[E5.e1]!RZ"H#Q$90ZZR?t]6U""b"M9E^No0sM&sKmf4qUu0nQ'k\#=G`N=-qoY2nN=P1q(rIKf$tZOA(Wm%BW!h@%(6[DdPqLU;?J*Z:[al=!Q(r&lY_QJJoUEUq:61Kei:'f!=`C7aIkW@#&q/[>$1hnHSBJU$""4OOqB%;I]WuZZqm>,WUfna%":6+@iopr.dA'<ph/XPrmk%78dZ;/F>%B$A]]5Y%#@MF]*_$mpRQm_F%;3m5jnuq7oMOjFRBjh0/d5(c&W@`6=4%okWT0\K',\I1%D$>dPBN;+b^>4_P&Qc^^@p6FI(d!9>Z#+%iB")5:P)U`XG+A,l&l54`o8[<.$2'U!EQVaWOd@0Gf8&Gs6+0Zb6"51.h4_V,l4]s2%K(cC8!?<`og];G"6m^WZ6BRApC%Su;Qc``%6s"Je*rtXa/tbhLAeXNXDDX[6b71caQ+9aSe3eD]A7[[78<K9s_e#'d*BKQ^[G2Hm%SZtX_/<!q01ZmK`N6$>4!@)rC5:)?t5^<2&Fk.UQW`Gckn%$uN(qA!WApB%U)\p]RknZBdn$YL<.,/fuboQBFE3Xf'NTSQ-O@[KN%O-5tUFD-5"RQFX)7Z\*RBkEKZN2#-!%;i1ki-9.YmQ?AaTR2\+Wu[q4;QHjAi$6/gp6B!U3VEF[PQ7[:Jmu;oOK1t+C4nsnIHSFO%3ZUMI&ObHI)r"NB!]`L38tkAdiOI,[cn:"q8ML_iOL])E)W,FV,TF*2+dD#?L%,.E'`h9OOoG*<kQt6R`e^!R`Hc"D@#)UDWs+h+%q^qW,Fhb.q4WJ;3O5H-g)MZ#[H1nSm[!PKc8rh\bWo#iV.ug@dl)\gj_,R)CVoZ-92i1;GQ;cV68[O56es#5jrYa\=om1o!=PlH`%_n7F,rV5\B_r_om8%^pPbXYpKJOqomI$3F1Su6l57VMWdQ!$$iUH0R)-*'<6=N,B@i]6mR4$N.J+pc(rg:!n,btXHm['WQDFAqmn%"Ge,AL.`J+C39_[1aoY-CXn9O)f9Q<nDKI(=k0Z19l[TqfKZ^u15EFpZZG6X/-0_`'OD)]m]),oXJYQU4`o=YRfnPS4[E283SLm1%Wd[g:'isNX[`RbdMrnUqU24"83#D]IEd[tZr6G<^C=\E$@XEC=I&CNdb<TAT`nS,,V34>8/Kj0)h_/%QZ7f[Pgq?NE;.U/0o5]X_%9WHgT=LH#,#Z0%7[SLo[JRF\61mm*hIf[eB![a]11YYcgfO2+dOX0:tSg['HXpj70V&TT2'kIIc#PT,[/ikLVT&S]>0dQk>_scT4%gt9p;.b/'Y\g/_uL51fc_AaMN68#JkB+:f]R>@#&b$UhFI-Q3tODJYJ!GHQ$FZ3d0Ib$/Wo4=anI@[?IZ+?^O(VKXM'PTOL&]B#]%6VAs&MY.6WS!O59?mZS\M?LU,bd\@LFFWA--u76tf4D4E&MMr&aj%8&KQLnjdOfifO5uaGqkat\egb)&LE;Wfd+;&X+/0gM>`6/s%/[jkcHXq=-+0"0;R'D+eMa&JJflIj<Y[hHHPof&#3iE'bSP_8;?<u3[rH:D)TUX&G0DrM1!>q/TX$B5m!CUV@Y,d+bO\af@7K,W_%"H_[@2LNGq\)kB4`N"m4U.04&jG0MO!Yn)56BAPd\CS9^[Rk--HX;"m1\,G.2,IA+;7\hh$89bLAh>d0m?#kiEfPH2W*&b>H,M*a%4G-8ZVN:Q,Z$nWQ>$`gW+RMtYTl&V_7%\T4ei0i\/UZQ"KT,K=bt#-M7L-<-+*djsqrIVf3OtR?U/r85i+5Ic'm32NoDprE<Q8]%%^2/s"IK\[a*&u=(Nnp14G;4@,#iM\6Z7J#/1LS]o.CIUB)UjD]rL"L;Wo9f;*&]'.5ebYg`7VNQ!HdI+ZS08u\W6fn&toNNR1WV?%+_!n12)hj,]o.!t^&/BP__&<c^/\dc?M)d>6NW#UXM%&[J9.3'A\CNe"I6MmoE*PB2ObphNSOXsaa4[l_SuFEAb-^eF)I=0.rKso%qXMP(JhMY[&n9)lHlk';^#do@qp.!4UV;C&KC@uiO-mAm1=6R<e>&Yl;cd,D$O6c&?@kN2B!++e'e3-T3Ak2Y6o,SBYX]f#8j#R1%7q1QSMc=S1b.'#[cjjW5]^Jf_@?W=`Mj%moZNp\P6?GDm<r1gfqtdOM!6Rr>c0a$H2hHBE0frYl$$l>8!gcfKjd;R-pj*JS2UgnS%6E^N-M_<mPds>67%\&1un]&:=j'p)d"XRD6'^d6Bb/0iKm4!iF!81K\,DCG.ON'+eLru,FT^"<Yf.k<"RtarV["a_H2?skOc_:Y0%HE67WL=I+Qj3bJ.(L.s*OUqaGoM:R3e&DlDQ$Kr):nl6cX9;C\*@okN;@]nV&F;o#e.`1]g/'gZ!/m2mTc;Fu:rm\ZaQ%/nV5[WR%1s3jjk0P?Dga&.XTS=j)h^7am;h+!^EB:ZDXL$uThQXJC`k8=l=V8kK@>3K[k`A%f2`^J[l>$$K9LD>Pp`fcC3k]a>0_SSk)eNa2%7u^29W/ju*Zhibof)O*rY_J;NUT3Y!p4\O"^lAL0($nZ'.$YNG\O;r644V`R"rQa#)c(.c:a-q>`cgdQ(eS$5;82/-Y_mpMds\@F%HXfkK_9i+I!`(6\B3tZ9s#48_2e2nid_P74bG,aQi\*P<=RA(K(e9#`d4*"El-gUcTHr(h\Q^otPJ:Fq_51aI]hoRt#43;0Wc$jH%9$n4^[["K`AL()rD`QWnBT%$!Hi(gI<^`?=)&k8"<&i7*cF`!5(FG"p`!)M[NF"Gb]5kgY7PpeMrHhJC%%q(1DOhlJcF\[m*n**2%!+]raV0g0?>6s\-fr=Vt3;3nW?12.[LZR(L@8kl^M))0,?Uagf]I,+0Yh##:@s@Gu:&d\f1+4@]3I?S!9FPu*%7#5"6(]gV@-)D:%f>_>);8+b/20N>;JeR_9%'"o<CWAKc=1e1m]K.R\Flc-dMLB@QYiofArHg'coLK=I!e0X/5%7[ofO?k>3l`RYWuUfejlErS&JK7-%W]rT3fW(4JZ(94S.#fO^*a:m;Xi2=`;WO>d#[)re7K_fH@"%2J*g"gaJ.U%SG.Y+Wi:C#1_B,A92,;GiS6Jf@Vq46-n@=S&[jHd2%b\S%e/gHF2C984KR&Z@PZ$TA2LI*a2Sl/>.OE5ip:0oT<W\5rgE1";8HG*RF!>RBgWTcV+,'[S8^T^d=(MO*@dP37rSMJQb;*um4%5\apqC+,YDVGt\E#Wulf-=&H$gqB53oUu8A%RMS!9GS?]5HA)f"*9Vlp($:(J2#"/jUp!3HlcqS<;V;:`$;)C5D%=f6kmnm*DaAp%&i1[W3qtOELsW:mF,bS.L*4W&"GOi<BUVOXXfqh<&51^Fj_.6Q`m@6^"(hEP%Rofsr6/EJ\.f;=$ab;2ESus*>HDFs=V.(mV#/Z6%MYDfUFBjja>hObk+Y:1hOi%DPJcW#WN[CE8NX/ieemru,gbgHj!>Woa9e.0VSPPrBhF5Zg7A7"\(huUSl\pNgp?FdX$I#2H5r,Z9%nIrQ8FmRQ:\;Ta?f@l%=:l;9AaW>HL?)J`:X#$$.k%k35q0YM$\"[0iR&uKpO5NuXo1<.mVD)iO@_rWh(g6=o&23A;Da0Uo&Y_Si%h.9Scl=11g)5Jn)GahZF*&LeNE==n"lTC%^?]:,19:NJ1<3pD843k<3AB]jC70NtXm`+&db#He*I^A/'j"ccGfe*GfB5@)$chY)P%ab0ijrbZ:L/TJCKUGU'Hco-U.Jd4dd!f4"K3?F"\"Sn<?!om,M$9g#7*/$eYNaAYQO@o:<n?i;>mARAVF^)31?7a+/\nq2"[<5/]%,M5@#!gO5q`jY@I:BgiRn3i>>*'s,NOIDe9m90gY"idM;!ti1jW.YBWA$#G-'(F<60ZQLDSGZPu(4\e"?0Q<Y-DD`ONm0L*h^[@E%<`pR.,eUfGSjCj6!m2\5_X3hqjTO":&\[e_5f#qae6d3q]B't6d-")"<''`PX%S<hcl/3&i+_;r7GopLH/k<QPD#YVo'PH!+k/pl%DepV5:uYAbMg!k$h%j+G7X-4N9C;i?I.V`1!\p_gEn@Rh""to*1a*\oX^NPq2uT]ZLCSC.8#Z(B5J;\I0qX4@&e=h)[_mOTittI[%UG?W3T;tP_BNCt*nr'"F;3s3PSi_u.#.`$HM(CSsN(CN=CP&/?YR`6?6tC27OsH%TDZmE3^uKAN4Y%"1c.rTR99;drmAi4==c=n)%Rh+Q*#sN<jV>Z"QT"4gle^8?m;,Ka<_Nhl:gGG7PR;H8K>,H8#%S''eV7>51/c>A;ob%(P#D8i<hd:j3]792IqNp+=mJ>po^4-+D%Qcm]>s7;Ra^])FN0E;"n?b]rsrTfe7^]*le\)2Z7j3&NOs7>WAT76b<orilCrr)0;ci="%5i03fc%#`g0E:YTQi@6XViG0~>%AI9_PrivateDataEnd